
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b94  08007b94  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b9c  08007b9c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08007ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000240  08007de4  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d80  08007de4  00020d80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fb04  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004873  00000000  00000000  0004fd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002af7e  00000000  00000000  000545df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  0007f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002200  00000000  00000000  00081300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee1a  00000000  00000000  00083500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f709  00000000  00000000  000a231a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a908e  00000000  00000000  000d1a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017aab1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005be0  00000000  00000000  0017ab04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000240 	.word	0x20000240
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074ac 	.word	0x080074ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000244 	.word	0x20000244
 8000104:	080074ac 	.word	0x080074ac

08000108 <setjmp>:
 8000108:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800010a:	4641      	mov	r1, r8
 800010c:	464a      	mov	r2, r9
 800010e:	4653      	mov	r3, sl
 8000110:	465c      	mov	r4, fp
 8000112:	466d      	mov	r5, sp
 8000114:	4676      	mov	r6, lr
 8000116:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
 8000118:	3828      	subs	r0, #40	; 0x28
 800011a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800011c:	2000      	movs	r0, #0
 800011e:	4770      	bx	lr

08000120 <longjmp>:
 8000120:	3010      	adds	r0, #16
 8000122:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
 8000124:	4690      	mov	r8, r2
 8000126:	4699      	mov	r9, r3
 8000128:	46a2      	mov	sl, r4
 800012a:	46ab      	mov	fp, r5
 800012c:	46b5      	mov	sp, r6
 800012e:	c808      	ldmia	r0!, {r3}
 8000130:	3828      	subs	r0, #40	; 0x28
 8000132:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8000134:	0008      	movs	r0, r1
 8000136:	d100      	bne.n	800013a <longjmp+0x1a>
 8000138:	2001      	movs	r0, #1
 800013a:	4718      	bx	r3

0800013c <strlen>:
 800013c:	2300      	movs	r3, #0
 800013e:	5cc2      	ldrb	r2, [r0, r3]
 8000140:	3301      	adds	r3, #1
 8000142:	2a00      	cmp	r2, #0
 8000144:	d1fb      	bne.n	800013e <strlen+0x2>
 8000146:	1e58      	subs	r0, r3, #1
 8000148:	4770      	bx	lr
	...

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f806 	bl	8000260 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__aeabi_idiv0>:
 8000260:	4770      	bx	lr
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_uldivmod>:
 8000264:	2b00      	cmp	r3, #0
 8000266:	d111      	bne.n	800028c <__aeabi_uldivmod+0x28>
 8000268:	2a00      	cmp	r2, #0
 800026a:	d10f      	bne.n	800028c <__aeabi_uldivmod+0x28>
 800026c:	2900      	cmp	r1, #0
 800026e:	d100      	bne.n	8000272 <__aeabi_uldivmod+0xe>
 8000270:	2800      	cmp	r0, #0
 8000272:	d002      	beq.n	800027a <__aeabi_uldivmod+0x16>
 8000274:	2100      	movs	r1, #0
 8000276:	43c9      	mvns	r1, r1
 8000278:	0008      	movs	r0, r1
 800027a:	b407      	push	{r0, r1, r2}
 800027c:	4802      	ldr	r0, [pc, #8]	; (8000288 <__aeabi_uldivmod+0x24>)
 800027e:	a102      	add	r1, pc, #8	; (adr r1, 8000288 <__aeabi_uldivmod+0x24>)
 8000280:	1840      	adds	r0, r0, r1
 8000282:	9002      	str	r0, [sp, #8]
 8000284:	bd03      	pop	{r0, r1, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	ffffffd9 	.word	0xffffffd9
 800028c:	b403      	push	{r0, r1}
 800028e:	4668      	mov	r0, sp
 8000290:	b501      	push	{r0, lr}
 8000292:	9802      	ldr	r0, [sp, #8]
 8000294:	f000 f834 	bl	8000300 <__udivmoddi4>
 8000298:	9b01      	ldr	r3, [sp, #4]
 800029a:	469e      	mov	lr, r3
 800029c:	b002      	add	sp, #8
 800029e:	bc0c      	pop	{r2, r3}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_lmul>:
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	46ce      	mov	lr, r9
 80002a8:	4647      	mov	r7, r8
 80002aa:	b580      	push	{r7, lr}
 80002ac:	0007      	movs	r7, r0
 80002ae:	4699      	mov	r9, r3
 80002b0:	0c3b      	lsrs	r3, r7, #16
 80002b2:	469c      	mov	ip, r3
 80002b4:	0413      	lsls	r3, r2, #16
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	001d      	movs	r5, r3
 80002ba:	000e      	movs	r6, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	0400      	lsls	r0, r0, #16
 80002c0:	0c14      	lsrs	r4, r2, #16
 80002c2:	0c00      	lsrs	r0, r0, #16
 80002c4:	4345      	muls	r5, r0
 80002c6:	434b      	muls	r3, r1
 80002c8:	4360      	muls	r0, r4
 80002ca:	4361      	muls	r1, r4
 80002cc:	18c0      	adds	r0, r0, r3
 80002ce:	0c2c      	lsrs	r4, r5, #16
 80002d0:	1820      	adds	r0, r4, r0
 80002d2:	468c      	mov	ip, r1
 80002d4:	4283      	cmp	r3, r0
 80002d6:	d903      	bls.n	80002e0 <__aeabi_lmul+0x3c>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	025b      	lsls	r3, r3, #9
 80002dc:	4698      	mov	r8, r3
 80002de:	44c4      	add	ip, r8
 80002e0:	4649      	mov	r1, r9
 80002e2:	4379      	muls	r1, r7
 80002e4:	4372      	muls	r2, r6
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	4463      	add	r3, ip
 80002ea:	042d      	lsls	r5, r5, #16
 80002ec:	0c2d      	lsrs	r5, r5, #16
 80002ee:	18c9      	adds	r1, r1, r3
 80002f0:	0400      	lsls	r0, r0, #16
 80002f2:	1940      	adds	r0, r0, r5
 80002f4:	1889      	adds	r1, r1, r2
 80002f6:	bcc0      	pop	{r6, r7}
 80002f8:	46b9      	mov	r9, r7
 80002fa:	46b0      	mov	r8, r6
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__udivmoddi4>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	4657      	mov	r7, sl
 8000304:	464e      	mov	r6, r9
 8000306:	4645      	mov	r5, r8
 8000308:	46de      	mov	lr, fp
 800030a:	b5e0      	push	{r5, r6, r7, lr}
 800030c:	0004      	movs	r4, r0
 800030e:	000d      	movs	r5, r1
 8000310:	4692      	mov	sl, r2
 8000312:	4699      	mov	r9, r3
 8000314:	b083      	sub	sp, #12
 8000316:	428b      	cmp	r3, r1
 8000318:	d830      	bhi.n	800037c <__udivmoddi4+0x7c>
 800031a:	d02d      	beq.n	8000378 <__udivmoddi4+0x78>
 800031c:	4649      	mov	r1, r9
 800031e:	4650      	mov	r0, sl
 8000320:	f000 fef2 	bl	8001108 <__clzdi2>
 8000324:	0029      	movs	r1, r5
 8000326:	0006      	movs	r6, r0
 8000328:	0020      	movs	r0, r4
 800032a:	f000 feed 	bl	8001108 <__clzdi2>
 800032e:	1a33      	subs	r3, r6, r0
 8000330:	4698      	mov	r8, r3
 8000332:	3b20      	subs	r3, #32
 8000334:	469b      	mov	fp, r3
 8000336:	d433      	bmi.n	80003a0 <__udivmoddi4+0xa0>
 8000338:	465a      	mov	r2, fp
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	4642      	mov	r2, r8
 8000340:	001f      	movs	r7, r3
 8000342:	4653      	mov	r3, sl
 8000344:	4093      	lsls	r3, r2
 8000346:	001e      	movs	r6, r3
 8000348:	42af      	cmp	r7, r5
 800034a:	d83a      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 800034c:	42af      	cmp	r7, r5
 800034e:	d100      	bne.n	8000352 <__udivmoddi4+0x52>
 8000350:	e078      	b.n	8000444 <__udivmoddi4+0x144>
 8000352:	465b      	mov	r3, fp
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	41bd      	sbcs	r5, r7
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <__udivmoddi4+0x5e>
 800035c:	e075      	b.n	800044a <__udivmoddi4+0x14a>
 800035e:	2200      	movs	r2, #0
 8000360:	2300      	movs	r3, #0
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	465a      	mov	r2, fp
 800036a:	4093      	lsls	r3, r2
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4642      	mov	r2, r8
 8000372:	4093      	lsls	r3, r2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	e028      	b.n	80003ca <__udivmoddi4+0xca>
 8000378:	4282      	cmp	r2, r0
 800037a:	d9cf      	bls.n	800031c <__udivmoddi4+0x1c>
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <__udivmoddi4+0x8e>
 800038a:	601c      	str	r4, [r3, #0]
 800038c:	605d      	str	r5, [r3, #4]
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	b003      	add	sp, #12
 8000394:	bcf0      	pop	{r4, r5, r6, r7}
 8000396:	46bb      	mov	fp, r7
 8000398:	46b2      	mov	sl, r6
 800039a:	46a9      	mov	r9, r5
 800039c:	46a0      	mov	r8, r4
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	4642      	mov	r2, r8
 80003a2:	2320      	movs	r3, #32
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	4652      	mov	r2, sl
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	4641      	mov	r1, r8
 80003ac:	0013      	movs	r3, r2
 80003ae:	464a      	mov	r2, r9
 80003b0:	408a      	lsls	r2, r1
 80003b2:	0017      	movs	r7, r2
 80003b4:	4642      	mov	r2, r8
 80003b6:	431f      	orrs	r7, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	4093      	lsls	r3, r2
 80003bc:	001e      	movs	r6, r3
 80003be:	42af      	cmp	r7, r5
 80003c0:	d9c4      	bls.n	800034c <__udivmoddi4+0x4c>
 80003c2:	2200      	movs	r2, #0
 80003c4:	2300      	movs	r3, #0
 80003c6:	9200      	str	r2, [sp, #0]
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	4643      	mov	r3, r8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0d9      	beq.n	8000384 <__udivmoddi4+0x84>
 80003d0:	07fb      	lsls	r3, r7, #31
 80003d2:	0872      	lsrs	r2, r6, #1
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4646      	mov	r6, r8
 80003d8:	087b      	lsrs	r3, r7, #1
 80003da:	e00e      	b.n	80003fa <__udivmoddi4+0xfa>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d101      	bne.n	80003e4 <__udivmoddi4+0xe4>
 80003e0:	42a2      	cmp	r2, r4
 80003e2:	d80c      	bhi.n	80003fe <__udivmoddi4+0xfe>
 80003e4:	1aa4      	subs	r4, r4, r2
 80003e6:	419d      	sbcs	r5, r3
 80003e8:	2001      	movs	r0, #1
 80003ea:	1924      	adds	r4, r4, r4
 80003ec:	416d      	adcs	r5, r5
 80003ee:	2100      	movs	r1, #0
 80003f0:	3e01      	subs	r6, #1
 80003f2:	1824      	adds	r4, r4, r0
 80003f4:	414d      	adcs	r5, r1
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d006      	beq.n	8000408 <__udivmoddi4+0x108>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d9ee      	bls.n	80003dc <__udivmoddi4+0xdc>
 80003fe:	3e01      	subs	r6, #1
 8000400:	1924      	adds	r4, r4, r4
 8000402:	416d      	adcs	r5, r5
 8000404:	2e00      	cmp	r6, #0
 8000406:	d1f8      	bne.n	80003fa <__udivmoddi4+0xfa>
 8000408:	9800      	ldr	r0, [sp, #0]
 800040a:	9901      	ldr	r1, [sp, #4]
 800040c:	465b      	mov	r3, fp
 800040e:	1900      	adds	r0, r0, r4
 8000410:	4169      	adcs	r1, r5
 8000412:	2b00      	cmp	r3, #0
 8000414:	db24      	blt.n	8000460 <__udivmoddi4+0x160>
 8000416:	002b      	movs	r3, r5
 8000418:	465a      	mov	r2, fp
 800041a:	4644      	mov	r4, r8
 800041c:	40d3      	lsrs	r3, r2
 800041e:	002a      	movs	r2, r5
 8000420:	40e2      	lsrs	r2, r4
 8000422:	001c      	movs	r4, r3
 8000424:	465b      	mov	r3, fp
 8000426:	0015      	movs	r5, r2
 8000428:	2b00      	cmp	r3, #0
 800042a:	db2a      	blt.n	8000482 <__udivmoddi4+0x182>
 800042c:	0026      	movs	r6, r4
 800042e:	409e      	lsls	r6, r3
 8000430:	0033      	movs	r3, r6
 8000432:	0026      	movs	r6, r4
 8000434:	4647      	mov	r7, r8
 8000436:	40be      	lsls	r6, r7
 8000438:	0032      	movs	r2, r6
 800043a:	1a80      	subs	r0, r0, r2
 800043c:	4199      	sbcs	r1, r3
 800043e:	9000      	str	r0, [sp, #0]
 8000440:	9101      	str	r1, [sp, #4]
 8000442:	e79f      	b.n	8000384 <__udivmoddi4+0x84>
 8000444:	42a3      	cmp	r3, r4
 8000446:	d8bc      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 8000448:	e783      	b.n	8000352 <__udivmoddi4+0x52>
 800044a:	4642      	mov	r2, r8
 800044c:	2320      	movs	r3, #32
 800044e:	2100      	movs	r1, #0
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	2200      	movs	r2, #0
 8000454:	9100      	str	r1, [sp, #0]
 8000456:	9201      	str	r2, [sp, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	40da      	lsrs	r2, r3
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	e786      	b.n	800036e <__udivmoddi4+0x6e>
 8000460:	4642      	mov	r2, r8
 8000462:	2320      	movs	r3, #32
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	002a      	movs	r2, r5
 8000468:	4646      	mov	r6, r8
 800046a:	409a      	lsls	r2, r3
 800046c:	0023      	movs	r3, r4
 800046e:	40f3      	lsrs	r3, r6
 8000470:	4644      	mov	r4, r8
 8000472:	4313      	orrs	r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	40e2      	lsrs	r2, r4
 8000478:	001c      	movs	r4, r3
 800047a:	465b      	mov	r3, fp
 800047c:	0015      	movs	r5, r2
 800047e:	2b00      	cmp	r3, #0
 8000480:	dad4      	bge.n	800042c <__udivmoddi4+0x12c>
 8000482:	4642      	mov	r2, r8
 8000484:	002f      	movs	r7, r5
 8000486:	2320      	movs	r3, #32
 8000488:	0026      	movs	r6, r4
 800048a:	4097      	lsls	r7, r2
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	40de      	lsrs	r6, r3
 8000490:	003b      	movs	r3, r7
 8000492:	4333      	orrs	r3, r6
 8000494:	e7cd      	b.n	8000432 <__udivmoddi4+0x132>
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_ddiv>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	4681      	mov	r9, r0
 80004a6:	0005      	movs	r5, r0
 80004a8:	030c      	lsls	r4, r1, #12
 80004aa:	0048      	lsls	r0, r1, #1
 80004ac:	4692      	mov	sl, r2
 80004ae:	001f      	movs	r7, r3
 80004b0:	b085      	sub	sp, #20
 80004b2:	0b24      	lsrs	r4, r4, #12
 80004b4:	0d40      	lsrs	r0, r0, #21
 80004b6:	0fce      	lsrs	r6, r1, #31
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_ddiv+0x26>
 80004bc:	e156      	b.n	800076c <__aeabi_ddiv+0x2d4>
 80004be:	4bd4      	ldr	r3, [pc, #848]	; (8000810 <__aeabi_ddiv+0x378>)
 80004c0:	4298      	cmp	r0, r3
 80004c2:	d100      	bne.n	80004c6 <__aeabi_ddiv+0x2e>
 80004c4:	e172      	b.n	80007ac <__aeabi_ddiv+0x314>
 80004c6:	0f6b      	lsrs	r3, r5, #29
 80004c8:	00e4      	lsls	r4, r4, #3
 80004ca:	431c      	orrs	r4, r3
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	041b      	lsls	r3, r3, #16
 80004d0:	4323      	orrs	r3, r4
 80004d2:	4698      	mov	r8, r3
 80004d4:	4bcf      	ldr	r3, [pc, #828]	; (8000814 <__aeabi_ddiv+0x37c>)
 80004d6:	00ed      	lsls	r5, r5, #3
 80004d8:	469b      	mov	fp, r3
 80004da:	2300      	movs	r3, #0
 80004dc:	4699      	mov	r9, r3
 80004de:	4483      	add	fp, r0
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	033c      	lsls	r4, r7, #12
 80004e4:	007b      	lsls	r3, r7, #1
 80004e6:	4650      	mov	r0, sl
 80004e8:	0b24      	lsrs	r4, r4, #12
 80004ea:	0d5b      	lsrs	r3, r3, #21
 80004ec:	0fff      	lsrs	r7, r7, #31
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_ddiv+0x5c>
 80004f2:	e11f      	b.n	8000734 <__aeabi_ddiv+0x29c>
 80004f4:	4ac6      	ldr	r2, [pc, #792]	; (8000810 <__aeabi_ddiv+0x378>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0x64>
 80004fa:	e162      	b.n	80007c2 <__aeabi_ddiv+0x32a>
 80004fc:	49c5      	ldr	r1, [pc, #788]	; (8000814 <__aeabi_ddiv+0x37c>)
 80004fe:	0f42      	lsrs	r2, r0, #29
 8000500:	468c      	mov	ip, r1
 8000502:	00e4      	lsls	r4, r4, #3
 8000504:	4659      	mov	r1, fp
 8000506:	4314      	orrs	r4, r2
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	4463      	add	r3, ip
 800050c:	0412      	lsls	r2, r2, #16
 800050e:	1acb      	subs	r3, r1, r3
 8000510:	4314      	orrs	r4, r2
 8000512:	469b      	mov	fp, r3
 8000514:	00c2      	lsls	r2, r0, #3
 8000516:	2000      	movs	r0, #0
 8000518:	0033      	movs	r3, r6
 800051a:	407b      	eors	r3, r7
 800051c:	469a      	mov	sl, r3
 800051e:	464b      	mov	r3, r9
 8000520:	2b0f      	cmp	r3, #15
 8000522:	d827      	bhi.n	8000574 <__aeabi_ddiv+0xdc>
 8000524:	49bc      	ldr	r1, [pc, #752]	; (8000818 <__aeabi_ddiv+0x380>)
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	58cb      	ldr	r3, [r1, r3]
 800052a:	469f      	mov	pc, r3
 800052c:	46b2      	mov	sl, r6
 800052e:	9b00      	ldr	r3, [sp, #0]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d016      	beq.n	8000562 <__aeabi_ddiv+0xca>
 8000534:	2b03      	cmp	r3, #3
 8000536:	d100      	bne.n	800053a <__aeabi_ddiv+0xa2>
 8000538:	e28e      	b.n	8000a58 <__aeabi_ddiv+0x5c0>
 800053a:	2b01      	cmp	r3, #1
 800053c:	d000      	beq.n	8000540 <__aeabi_ddiv+0xa8>
 800053e:	e0d9      	b.n	80006f4 <__aeabi_ddiv+0x25c>
 8000540:	2300      	movs	r3, #0
 8000542:	2400      	movs	r4, #0
 8000544:	2500      	movs	r5, #0
 8000546:	4652      	mov	r2, sl
 8000548:	051b      	lsls	r3, r3, #20
 800054a:	4323      	orrs	r3, r4
 800054c:	07d2      	lsls	r2, r2, #31
 800054e:	4313      	orrs	r3, r2
 8000550:	0028      	movs	r0, r5
 8000552:	0019      	movs	r1, r3
 8000554:	b005      	add	sp, #20
 8000556:	bcf0      	pop	{r4, r5, r6, r7}
 8000558:	46bb      	mov	fp, r7
 800055a:	46b2      	mov	sl, r6
 800055c:	46a9      	mov	r9, r5
 800055e:	46a0      	mov	r8, r4
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	2400      	movs	r4, #0
 8000564:	2500      	movs	r5, #0
 8000566:	4baa      	ldr	r3, [pc, #680]	; (8000810 <__aeabi_ddiv+0x378>)
 8000568:	e7ed      	b.n	8000546 <__aeabi_ddiv+0xae>
 800056a:	46ba      	mov	sl, r7
 800056c:	46a0      	mov	r8, r4
 800056e:	0015      	movs	r5, r2
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	e7dc      	b.n	800052e <__aeabi_ddiv+0x96>
 8000574:	4544      	cmp	r4, r8
 8000576:	d200      	bcs.n	800057a <__aeabi_ddiv+0xe2>
 8000578:	e1c7      	b.n	800090a <__aeabi_ddiv+0x472>
 800057a:	d100      	bne.n	800057e <__aeabi_ddiv+0xe6>
 800057c:	e1c2      	b.n	8000904 <__aeabi_ddiv+0x46c>
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	469c      	mov	ip, r3
 8000584:	002e      	movs	r6, r5
 8000586:	4640      	mov	r0, r8
 8000588:	2500      	movs	r5, #0
 800058a:	44e3      	add	fp, ip
 800058c:	0223      	lsls	r3, r4, #8
 800058e:	0e14      	lsrs	r4, r2, #24
 8000590:	431c      	orrs	r4, r3
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	4699      	mov	r9, r3
 8000596:	0423      	lsls	r3, r4, #16
 8000598:	0c1f      	lsrs	r7, r3, #16
 800059a:	0212      	lsls	r2, r2, #8
 800059c:	4649      	mov	r1, r9
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9701      	str	r7, [sp, #4]
 80005a2:	f7ff fe59 	bl	8000258 <__aeabi_uidivmod>
 80005a6:	0002      	movs	r2, r0
 80005a8:	437a      	muls	r2, r7
 80005aa:	040b      	lsls	r3, r1, #16
 80005ac:	0c31      	lsrs	r1, r6, #16
 80005ae:	4680      	mov	r8, r0
 80005b0:	4319      	orrs	r1, r3
 80005b2:	428a      	cmp	r2, r1
 80005b4:	d907      	bls.n	80005c6 <__aeabi_ddiv+0x12e>
 80005b6:	2301      	movs	r3, #1
 80005b8:	425b      	negs	r3, r3
 80005ba:	469c      	mov	ip, r3
 80005bc:	1909      	adds	r1, r1, r4
 80005be:	44e0      	add	r8, ip
 80005c0:	428c      	cmp	r4, r1
 80005c2:	d800      	bhi.n	80005c6 <__aeabi_ddiv+0x12e>
 80005c4:	e207      	b.n	80009d6 <__aeabi_ddiv+0x53e>
 80005c6:	1a88      	subs	r0, r1, r2
 80005c8:	4649      	mov	r1, r9
 80005ca:	f7ff fe45 	bl	8000258 <__aeabi_uidivmod>
 80005ce:	0409      	lsls	r1, r1, #16
 80005d0:	468c      	mov	ip, r1
 80005d2:	0431      	lsls	r1, r6, #16
 80005d4:	4666      	mov	r6, ip
 80005d6:	9a01      	ldr	r2, [sp, #4]
 80005d8:	0c09      	lsrs	r1, r1, #16
 80005da:	4342      	muls	r2, r0
 80005dc:	0003      	movs	r3, r0
 80005de:	4331      	orrs	r1, r6
 80005e0:	428a      	cmp	r2, r1
 80005e2:	d904      	bls.n	80005ee <__aeabi_ddiv+0x156>
 80005e4:	1909      	adds	r1, r1, r4
 80005e6:	3b01      	subs	r3, #1
 80005e8:	428c      	cmp	r4, r1
 80005ea:	d800      	bhi.n	80005ee <__aeabi_ddiv+0x156>
 80005ec:	e1ed      	b.n	80009ca <__aeabi_ddiv+0x532>
 80005ee:	1a88      	subs	r0, r1, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	0412      	lsls	r2, r2, #16
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4690      	mov	r8, r2
 80005f8:	4641      	mov	r1, r8
 80005fa:	9b00      	ldr	r3, [sp, #0]
 80005fc:	040e      	lsls	r6, r1, #16
 80005fe:	0c1b      	lsrs	r3, r3, #16
 8000600:	001f      	movs	r7, r3
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	9b00      	ldr	r3, [sp, #0]
 8000606:	0c36      	lsrs	r6, r6, #16
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	0c19      	lsrs	r1, r3, #16
 800060c:	000b      	movs	r3, r1
 800060e:	4373      	muls	r3, r6
 8000610:	0c12      	lsrs	r2, r2, #16
 8000612:	437e      	muls	r6, r7
 8000614:	9103      	str	r1, [sp, #12]
 8000616:	4351      	muls	r1, r2
 8000618:	437a      	muls	r2, r7
 800061a:	0c1f      	lsrs	r7, r3, #16
 800061c:	46bc      	mov	ip, r7
 800061e:	1876      	adds	r6, r6, r1
 8000620:	4466      	add	r6, ip
 8000622:	42b1      	cmp	r1, r6
 8000624:	d903      	bls.n	800062e <__aeabi_ddiv+0x196>
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	0249      	lsls	r1, r1, #9
 800062a:	468c      	mov	ip, r1
 800062c:	4462      	add	r2, ip
 800062e:	0c31      	lsrs	r1, r6, #16
 8000630:	188a      	adds	r2, r1, r2
 8000632:	0431      	lsls	r1, r6, #16
 8000634:	041e      	lsls	r6, r3, #16
 8000636:	0c36      	lsrs	r6, r6, #16
 8000638:	198e      	adds	r6, r1, r6
 800063a:	4290      	cmp	r0, r2
 800063c:	d302      	bcc.n	8000644 <__aeabi_ddiv+0x1ac>
 800063e:	d112      	bne.n	8000666 <__aeabi_ddiv+0x1ce>
 8000640:	42b5      	cmp	r5, r6
 8000642:	d210      	bcs.n	8000666 <__aeabi_ddiv+0x1ce>
 8000644:	4643      	mov	r3, r8
 8000646:	1e59      	subs	r1, r3, #1
 8000648:	9b00      	ldr	r3, [sp, #0]
 800064a:	469c      	mov	ip, r3
 800064c:	4465      	add	r5, ip
 800064e:	001f      	movs	r7, r3
 8000650:	429d      	cmp	r5, r3
 8000652:	419b      	sbcs	r3, r3
 8000654:	425b      	negs	r3, r3
 8000656:	191b      	adds	r3, r3, r4
 8000658:	18c0      	adds	r0, r0, r3
 800065a:	4284      	cmp	r4, r0
 800065c:	d200      	bcs.n	8000660 <__aeabi_ddiv+0x1c8>
 800065e:	e1a0      	b.n	80009a2 <__aeabi_ddiv+0x50a>
 8000660:	d100      	bne.n	8000664 <__aeabi_ddiv+0x1cc>
 8000662:	e19b      	b.n	800099c <__aeabi_ddiv+0x504>
 8000664:	4688      	mov	r8, r1
 8000666:	1bae      	subs	r6, r5, r6
 8000668:	42b5      	cmp	r5, r6
 800066a:	41ad      	sbcs	r5, r5
 800066c:	1a80      	subs	r0, r0, r2
 800066e:	426d      	negs	r5, r5
 8000670:	1b40      	subs	r0, r0, r5
 8000672:	4284      	cmp	r4, r0
 8000674:	d100      	bne.n	8000678 <__aeabi_ddiv+0x1e0>
 8000676:	e1d5      	b.n	8000a24 <__aeabi_ddiv+0x58c>
 8000678:	4649      	mov	r1, r9
 800067a:	f7ff fded 	bl	8000258 <__aeabi_uidivmod>
 800067e:	9a01      	ldr	r2, [sp, #4]
 8000680:	040b      	lsls	r3, r1, #16
 8000682:	4342      	muls	r2, r0
 8000684:	0c31      	lsrs	r1, r6, #16
 8000686:	0005      	movs	r5, r0
 8000688:	4319      	orrs	r1, r3
 800068a:	428a      	cmp	r2, r1
 800068c:	d900      	bls.n	8000690 <__aeabi_ddiv+0x1f8>
 800068e:	e16c      	b.n	800096a <__aeabi_ddiv+0x4d2>
 8000690:	1a88      	subs	r0, r1, r2
 8000692:	4649      	mov	r1, r9
 8000694:	f7ff fde0 	bl	8000258 <__aeabi_uidivmod>
 8000698:	9a01      	ldr	r2, [sp, #4]
 800069a:	0436      	lsls	r6, r6, #16
 800069c:	4342      	muls	r2, r0
 800069e:	0409      	lsls	r1, r1, #16
 80006a0:	0c36      	lsrs	r6, r6, #16
 80006a2:	0003      	movs	r3, r0
 80006a4:	430e      	orrs	r6, r1
 80006a6:	42b2      	cmp	r2, r6
 80006a8:	d900      	bls.n	80006ac <__aeabi_ddiv+0x214>
 80006aa:	e153      	b.n	8000954 <__aeabi_ddiv+0x4bc>
 80006ac:	9803      	ldr	r0, [sp, #12]
 80006ae:	1ab6      	subs	r6, r6, r2
 80006b0:	0002      	movs	r2, r0
 80006b2:	042d      	lsls	r5, r5, #16
 80006b4:	431d      	orrs	r5, r3
 80006b6:	9f02      	ldr	r7, [sp, #8]
 80006b8:	042b      	lsls	r3, r5, #16
 80006ba:	0c1b      	lsrs	r3, r3, #16
 80006bc:	435a      	muls	r2, r3
 80006be:	437b      	muls	r3, r7
 80006c0:	469c      	mov	ip, r3
 80006c2:	0c29      	lsrs	r1, r5, #16
 80006c4:	4348      	muls	r0, r1
 80006c6:	0c13      	lsrs	r3, r2, #16
 80006c8:	4484      	add	ip, r0
 80006ca:	4463      	add	r3, ip
 80006cc:	4379      	muls	r1, r7
 80006ce:	4298      	cmp	r0, r3
 80006d0:	d903      	bls.n	80006da <__aeabi_ddiv+0x242>
 80006d2:	2080      	movs	r0, #128	; 0x80
 80006d4:	0240      	lsls	r0, r0, #9
 80006d6:	4684      	mov	ip, r0
 80006d8:	4461      	add	r1, ip
 80006da:	0c18      	lsrs	r0, r3, #16
 80006dc:	0412      	lsls	r2, r2, #16
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	0c12      	lsrs	r2, r2, #16
 80006e2:	1841      	adds	r1, r0, r1
 80006e4:	189b      	adds	r3, r3, r2
 80006e6:	428e      	cmp	r6, r1
 80006e8:	d200      	bcs.n	80006ec <__aeabi_ddiv+0x254>
 80006ea:	e0ff      	b.n	80008ec <__aeabi_ddiv+0x454>
 80006ec:	d100      	bne.n	80006f0 <__aeabi_ddiv+0x258>
 80006ee:	e0fa      	b.n	80008e6 <__aeabi_ddiv+0x44e>
 80006f0:	2301      	movs	r3, #1
 80006f2:	431d      	orrs	r5, r3
 80006f4:	4a49      	ldr	r2, [pc, #292]	; (800081c <__aeabi_ddiv+0x384>)
 80006f6:	445a      	add	r2, fp
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	dc00      	bgt.n	80006fe <__aeabi_ddiv+0x266>
 80006fc:	e0aa      	b.n	8000854 <__aeabi_ddiv+0x3bc>
 80006fe:	076b      	lsls	r3, r5, #29
 8000700:	d000      	beq.n	8000704 <__aeabi_ddiv+0x26c>
 8000702:	e13d      	b.n	8000980 <__aeabi_ddiv+0x4e8>
 8000704:	08ed      	lsrs	r5, r5, #3
 8000706:	4643      	mov	r3, r8
 8000708:	01db      	lsls	r3, r3, #7
 800070a:	d506      	bpl.n	800071a <__aeabi_ddiv+0x282>
 800070c:	4642      	mov	r2, r8
 800070e:	4b44      	ldr	r3, [pc, #272]	; (8000820 <__aeabi_ddiv+0x388>)
 8000710:	401a      	ands	r2, r3
 8000712:	4690      	mov	r8, r2
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	00d2      	lsls	r2, r2, #3
 8000718:	445a      	add	r2, fp
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <__aeabi_ddiv+0x38c>)
 800071c:	429a      	cmp	r2, r3
 800071e:	dd00      	ble.n	8000722 <__aeabi_ddiv+0x28a>
 8000720:	e71f      	b.n	8000562 <__aeabi_ddiv+0xca>
 8000722:	4643      	mov	r3, r8
 8000724:	075b      	lsls	r3, r3, #29
 8000726:	431d      	orrs	r5, r3
 8000728:	4643      	mov	r3, r8
 800072a:	0552      	lsls	r2, r2, #21
 800072c:	025c      	lsls	r4, r3, #9
 800072e:	0b24      	lsrs	r4, r4, #12
 8000730:	0d53      	lsrs	r3, r2, #21
 8000732:	e708      	b.n	8000546 <__aeabi_ddiv+0xae>
 8000734:	4652      	mov	r2, sl
 8000736:	4322      	orrs	r2, r4
 8000738:	d100      	bne.n	800073c <__aeabi_ddiv+0x2a4>
 800073a:	e07b      	b.n	8000834 <__aeabi_ddiv+0x39c>
 800073c:	2c00      	cmp	r4, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_ddiv+0x2aa>
 8000740:	e0fa      	b.n	8000938 <__aeabi_ddiv+0x4a0>
 8000742:	0020      	movs	r0, r4
 8000744:	f000 fcc2 	bl	80010cc <__clzsi2>
 8000748:	0002      	movs	r2, r0
 800074a:	3a0b      	subs	r2, #11
 800074c:	231d      	movs	r3, #29
 800074e:	0001      	movs	r1, r0
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	4652      	mov	r2, sl
 8000754:	3908      	subs	r1, #8
 8000756:	40da      	lsrs	r2, r3
 8000758:	408c      	lsls	r4, r1
 800075a:	4314      	orrs	r4, r2
 800075c:	4652      	mov	r2, sl
 800075e:	408a      	lsls	r2, r1
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <__aeabi_ddiv+0x390>)
 8000762:	4458      	add	r0, fp
 8000764:	469b      	mov	fp, r3
 8000766:	4483      	add	fp, r0
 8000768:	2000      	movs	r0, #0
 800076a:	e6d5      	b.n	8000518 <__aeabi_ddiv+0x80>
 800076c:	464b      	mov	r3, r9
 800076e:	4323      	orrs	r3, r4
 8000770:	4698      	mov	r8, r3
 8000772:	d044      	beq.n	80007fe <__aeabi_ddiv+0x366>
 8000774:	2c00      	cmp	r4, #0
 8000776:	d100      	bne.n	800077a <__aeabi_ddiv+0x2e2>
 8000778:	e0ce      	b.n	8000918 <__aeabi_ddiv+0x480>
 800077a:	0020      	movs	r0, r4
 800077c:	f000 fca6 	bl	80010cc <__clzsi2>
 8000780:	0001      	movs	r1, r0
 8000782:	0002      	movs	r2, r0
 8000784:	390b      	subs	r1, #11
 8000786:	231d      	movs	r3, #29
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	4649      	mov	r1, r9
 800078c:	0010      	movs	r0, r2
 800078e:	40d9      	lsrs	r1, r3
 8000790:	3808      	subs	r0, #8
 8000792:	4084      	lsls	r4, r0
 8000794:	000b      	movs	r3, r1
 8000796:	464d      	mov	r5, r9
 8000798:	4323      	orrs	r3, r4
 800079a:	4698      	mov	r8, r3
 800079c:	4085      	lsls	r5, r0
 800079e:	4823      	ldr	r0, [pc, #140]	; (800082c <__aeabi_ddiv+0x394>)
 80007a0:	1a83      	subs	r3, r0, r2
 80007a2:	469b      	mov	fp, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	4699      	mov	r9, r3
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	e69a      	b.n	80004e2 <__aeabi_ddiv+0x4a>
 80007ac:	464b      	mov	r3, r9
 80007ae:	4323      	orrs	r3, r4
 80007b0:	4698      	mov	r8, r3
 80007b2:	d11d      	bne.n	80007f0 <__aeabi_ddiv+0x358>
 80007b4:	2308      	movs	r3, #8
 80007b6:	4699      	mov	r9, r3
 80007b8:	3b06      	subs	r3, #6
 80007ba:	2500      	movs	r5, #0
 80007bc:	4683      	mov	fp, r0
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	e68f      	b.n	80004e2 <__aeabi_ddiv+0x4a>
 80007c2:	4652      	mov	r2, sl
 80007c4:	4322      	orrs	r2, r4
 80007c6:	d109      	bne.n	80007dc <__aeabi_ddiv+0x344>
 80007c8:	2302      	movs	r3, #2
 80007ca:	4649      	mov	r1, r9
 80007cc:	4319      	orrs	r1, r3
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <__aeabi_ddiv+0x398>)
 80007d0:	4689      	mov	r9, r1
 80007d2:	469c      	mov	ip, r3
 80007d4:	2400      	movs	r4, #0
 80007d6:	2002      	movs	r0, #2
 80007d8:	44e3      	add	fp, ip
 80007da:	e69d      	b.n	8000518 <__aeabi_ddiv+0x80>
 80007dc:	2303      	movs	r3, #3
 80007de:	464a      	mov	r2, r9
 80007e0:	431a      	orrs	r2, r3
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <__aeabi_ddiv+0x398>)
 80007e4:	4691      	mov	r9, r2
 80007e6:	469c      	mov	ip, r3
 80007e8:	4652      	mov	r2, sl
 80007ea:	2003      	movs	r0, #3
 80007ec:	44e3      	add	fp, ip
 80007ee:	e693      	b.n	8000518 <__aeabi_ddiv+0x80>
 80007f0:	230c      	movs	r3, #12
 80007f2:	4699      	mov	r9, r3
 80007f4:	3b09      	subs	r3, #9
 80007f6:	46a0      	mov	r8, r4
 80007f8:	4683      	mov	fp, r0
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	e671      	b.n	80004e2 <__aeabi_ddiv+0x4a>
 80007fe:	2304      	movs	r3, #4
 8000800:	4699      	mov	r9, r3
 8000802:	2300      	movs	r3, #0
 8000804:	469b      	mov	fp, r3
 8000806:	3301      	adds	r3, #1
 8000808:	2500      	movs	r5, #0
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	e669      	b.n	80004e2 <__aeabi_ddiv+0x4a>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	000007ff 	.word	0x000007ff
 8000814:	fffffc01 	.word	0xfffffc01
 8000818:	080074e8 	.word	0x080074e8
 800081c:	000003ff 	.word	0x000003ff
 8000820:	feffffff 	.word	0xfeffffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	000003f3 	.word	0x000003f3
 800082c:	fffffc0d 	.word	0xfffffc0d
 8000830:	fffff801 	.word	0xfffff801
 8000834:	4649      	mov	r1, r9
 8000836:	2301      	movs	r3, #1
 8000838:	4319      	orrs	r1, r3
 800083a:	4689      	mov	r9, r1
 800083c:	2400      	movs	r4, #0
 800083e:	2001      	movs	r0, #1
 8000840:	e66a      	b.n	8000518 <__aeabi_ddiv+0x80>
 8000842:	2300      	movs	r3, #0
 8000844:	2480      	movs	r4, #128	; 0x80
 8000846:	469a      	mov	sl, r3
 8000848:	2500      	movs	r5, #0
 800084a:	4b8a      	ldr	r3, [pc, #552]	; (8000a74 <__aeabi_ddiv+0x5dc>)
 800084c:	0324      	lsls	r4, r4, #12
 800084e:	e67a      	b.n	8000546 <__aeabi_ddiv+0xae>
 8000850:	2501      	movs	r5, #1
 8000852:	426d      	negs	r5, r5
 8000854:	2301      	movs	r3, #1
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	2b38      	cmp	r3, #56	; 0x38
 800085a:	dd00      	ble.n	800085e <__aeabi_ddiv+0x3c6>
 800085c:	e670      	b.n	8000540 <__aeabi_ddiv+0xa8>
 800085e:	2b1f      	cmp	r3, #31
 8000860:	dc00      	bgt.n	8000864 <__aeabi_ddiv+0x3cc>
 8000862:	e0bf      	b.n	80009e4 <__aeabi_ddiv+0x54c>
 8000864:	211f      	movs	r1, #31
 8000866:	4249      	negs	r1, r1
 8000868:	1a8a      	subs	r2, r1, r2
 800086a:	4641      	mov	r1, r8
 800086c:	40d1      	lsrs	r1, r2
 800086e:	000a      	movs	r2, r1
 8000870:	2b20      	cmp	r3, #32
 8000872:	d004      	beq.n	800087e <__aeabi_ddiv+0x3e6>
 8000874:	4641      	mov	r1, r8
 8000876:	4b80      	ldr	r3, [pc, #512]	; (8000a78 <__aeabi_ddiv+0x5e0>)
 8000878:	445b      	add	r3, fp
 800087a:	4099      	lsls	r1, r3
 800087c:	430d      	orrs	r5, r1
 800087e:	1e6b      	subs	r3, r5, #1
 8000880:	419d      	sbcs	r5, r3
 8000882:	2307      	movs	r3, #7
 8000884:	432a      	orrs	r2, r5
 8000886:	001d      	movs	r5, r3
 8000888:	2400      	movs	r4, #0
 800088a:	4015      	ands	r5, r2
 800088c:	4213      	tst	r3, r2
 800088e:	d100      	bne.n	8000892 <__aeabi_ddiv+0x3fa>
 8000890:	e0d4      	b.n	8000a3c <__aeabi_ddiv+0x5a4>
 8000892:	210f      	movs	r1, #15
 8000894:	2300      	movs	r3, #0
 8000896:	4011      	ands	r1, r2
 8000898:	2904      	cmp	r1, #4
 800089a:	d100      	bne.n	800089e <__aeabi_ddiv+0x406>
 800089c:	e0cb      	b.n	8000a36 <__aeabi_ddiv+0x59e>
 800089e:	1d11      	adds	r1, r2, #4
 80008a0:	4291      	cmp	r1, r2
 80008a2:	4192      	sbcs	r2, r2
 80008a4:	4252      	negs	r2, r2
 80008a6:	189b      	adds	r3, r3, r2
 80008a8:	000a      	movs	r2, r1
 80008aa:	0219      	lsls	r1, r3, #8
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_ddiv+0x418>
 80008ae:	e0c2      	b.n	8000a36 <__aeabi_ddiv+0x59e>
 80008b0:	2301      	movs	r3, #1
 80008b2:	2400      	movs	r4, #0
 80008b4:	2500      	movs	r5, #0
 80008b6:	e646      	b.n	8000546 <__aeabi_ddiv+0xae>
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	4641      	mov	r1, r8
 80008bc:	031b      	lsls	r3, r3, #12
 80008be:	4219      	tst	r1, r3
 80008c0:	d008      	beq.n	80008d4 <__aeabi_ddiv+0x43c>
 80008c2:	421c      	tst	r4, r3
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x43c>
 80008c6:	431c      	orrs	r4, r3
 80008c8:	0324      	lsls	r4, r4, #12
 80008ca:	46ba      	mov	sl, r7
 80008cc:	0015      	movs	r5, r2
 80008ce:	4b69      	ldr	r3, [pc, #420]	; (8000a74 <__aeabi_ddiv+0x5dc>)
 80008d0:	0b24      	lsrs	r4, r4, #12
 80008d2:	e638      	b.n	8000546 <__aeabi_ddiv+0xae>
 80008d4:	2480      	movs	r4, #128	; 0x80
 80008d6:	4643      	mov	r3, r8
 80008d8:	0324      	lsls	r4, r4, #12
 80008da:	431c      	orrs	r4, r3
 80008dc:	0324      	lsls	r4, r4, #12
 80008de:	46b2      	mov	sl, r6
 80008e0:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <__aeabi_ddiv+0x5dc>)
 80008e2:	0b24      	lsrs	r4, r4, #12
 80008e4:	e62f      	b.n	8000546 <__aeabi_ddiv+0xae>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_ddiv+0x454>
 80008ea:	e703      	b.n	80006f4 <__aeabi_ddiv+0x25c>
 80008ec:	19a6      	adds	r6, r4, r6
 80008ee:	1e68      	subs	r0, r5, #1
 80008f0:	42a6      	cmp	r6, r4
 80008f2:	d200      	bcs.n	80008f6 <__aeabi_ddiv+0x45e>
 80008f4:	e08d      	b.n	8000a12 <__aeabi_ddiv+0x57a>
 80008f6:	428e      	cmp	r6, r1
 80008f8:	d200      	bcs.n	80008fc <__aeabi_ddiv+0x464>
 80008fa:	e0a3      	b.n	8000a44 <__aeabi_ddiv+0x5ac>
 80008fc:	d100      	bne.n	8000900 <__aeabi_ddiv+0x468>
 80008fe:	e0b3      	b.n	8000a68 <__aeabi_ddiv+0x5d0>
 8000900:	0005      	movs	r5, r0
 8000902:	e6f5      	b.n	80006f0 <__aeabi_ddiv+0x258>
 8000904:	42aa      	cmp	r2, r5
 8000906:	d900      	bls.n	800090a <__aeabi_ddiv+0x472>
 8000908:	e639      	b.n	800057e <__aeabi_ddiv+0xe6>
 800090a:	4643      	mov	r3, r8
 800090c:	07de      	lsls	r6, r3, #31
 800090e:	0858      	lsrs	r0, r3, #1
 8000910:	086b      	lsrs	r3, r5, #1
 8000912:	431e      	orrs	r6, r3
 8000914:	07ed      	lsls	r5, r5, #31
 8000916:	e639      	b.n	800058c <__aeabi_ddiv+0xf4>
 8000918:	4648      	mov	r0, r9
 800091a:	f000 fbd7 	bl	80010cc <__clzsi2>
 800091e:	0001      	movs	r1, r0
 8000920:	0002      	movs	r2, r0
 8000922:	3115      	adds	r1, #21
 8000924:	3220      	adds	r2, #32
 8000926:	291c      	cmp	r1, #28
 8000928:	dc00      	bgt.n	800092c <__aeabi_ddiv+0x494>
 800092a:	e72c      	b.n	8000786 <__aeabi_ddiv+0x2ee>
 800092c:	464b      	mov	r3, r9
 800092e:	3808      	subs	r0, #8
 8000930:	4083      	lsls	r3, r0
 8000932:	2500      	movs	r5, #0
 8000934:	4698      	mov	r8, r3
 8000936:	e732      	b.n	800079e <__aeabi_ddiv+0x306>
 8000938:	f000 fbc8 	bl	80010cc <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	001a      	movs	r2, r3
 8000940:	3215      	adds	r2, #21
 8000942:	3020      	adds	r0, #32
 8000944:	2a1c      	cmp	r2, #28
 8000946:	dc00      	bgt.n	800094a <__aeabi_ddiv+0x4b2>
 8000948:	e700      	b.n	800074c <__aeabi_ddiv+0x2b4>
 800094a:	4654      	mov	r4, sl
 800094c:	3b08      	subs	r3, #8
 800094e:	2200      	movs	r2, #0
 8000950:	409c      	lsls	r4, r3
 8000952:	e705      	b.n	8000760 <__aeabi_ddiv+0x2c8>
 8000954:	1936      	adds	r6, r6, r4
 8000956:	3b01      	subs	r3, #1
 8000958:	42b4      	cmp	r4, r6
 800095a:	d900      	bls.n	800095e <__aeabi_ddiv+0x4c6>
 800095c:	e6a6      	b.n	80006ac <__aeabi_ddiv+0x214>
 800095e:	42b2      	cmp	r2, r6
 8000960:	d800      	bhi.n	8000964 <__aeabi_ddiv+0x4cc>
 8000962:	e6a3      	b.n	80006ac <__aeabi_ddiv+0x214>
 8000964:	1e83      	subs	r3, r0, #2
 8000966:	1936      	adds	r6, r6, r4
 8000968:	e6a0      	b.n	80006ac <__aeabi_ddiv+0x214>
 800096a:	1909      	adds	r1, r1, r4
 800096c:	3d01      	subs	r5, #1
 800096e:	428c      	cmp	r4, r1
 8000970:	d900      	bls.n	8000974 <__aeabi_ddiv+0x4dc>
 8000972:	e68d      	b.n	8000690 <__aeabi_ddiv+0x1f8>
 8000974:	428a      	cmp	r2, r1
 8000976:	d800      	bhi.n	800097a <__aeabi_ddiv+0x4e2>
 8000978:	e68a      	b.n	8000690 <__aeabi_ddiv+0x1f8>
 800097a:	1e85      	subs	r5, r0, #2
 800097c:	1909      	adds	r1, r1, r4
 800097e:	e687      	b.n	8000690 <__aeabi_ddiv+0x1f8>
 8000980:	230f      	movs	r3, #15
 8000982:	402b      	ands	r3, r5
 8000984:	2b04      	cmp	r3, #4
 8000986:	d100      	bne.n	800098a <__aeabi_ddiv+0x4f2>
 8000988:	e6bc      	b.n	8000704 <__aeabi_ddiv+0x26c>
 800098a:	2305      	movs	r3, #5
 800098c:	425b      	negs	r3, r3
 800098e:	42ab      	cmp	r3, r5
 8000990:	419b      	sbcs	r3, r3
 8000992:	3504      	adds	r5, #4
 8000994:	425b      	negs	r3, r3
 8000996:	08ed      	lsrs	r5, r5, #3
 8000998:	4498      	add	r8, r3
 800099a:	e6b4      	b.n	8000706 <__aeabi_ddiv+0x26e>
 800099c:	42af      	cmp	r7, r5
 800099e:	d900      	bls.n	80009a2 <__aeabi_ddiv+0x50a>
 80009a0:	e660      	b.n	8000664 <__aeabi_ddiv+0x1cc>
 80009a2:	4282      	cmp	r2, r0
 80009a4:	d804      	bhi.n	80009b0 <__aeabi_ddiv+0x518>
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x512>
 80009a8:	e65c      	b.n	8000664 <__aeabi_ddiv+0x1cc>
 80009aa:	42ae      	cmp	r6, r5
 80009ac:	d800      	bhi.n	80009b0 <__aeabi_ddiv+0x518>
 80009ae:	e659      	b.n	8000664 <__aeabi_ddiv+0x1cc>
 80009b0:	2302      	movs	r3, #2
 80009b2:	425b      	negs	r3, r3
 80009b4:	469c      	mov	ip, r3
 80009b6:	9b00      	ldr	r3, [sp, #0]
 80009b8:	44e0      	add	r8, ip
 80009ba:	469c      	mov	ip, r3
 80009bc:	4465      	add	r5, ip
 80009be:	429d      	cmp	r5, r3
 80009c0:	419b      	sbcs	r3, r3
 80009c2:	425b      	negs	r3, r3
 80009c4:	191b      	adds	r3, r3, r4
 80009c6:	18c0      	adds	r0, r0, r3
 80009c8:	e64d      	b.n	8000666 <__aeabi_ddiv+0x1ce>
 80009ca:	428a      	cmp	r2, r1
 80009cc:	d800      	bhi.n	80009d0 <__aeabi_ddiv+0x538>
 80009ce:	e60e      	b.n	80005ee <__aeabi_ddiv+0x156>
 80009d0:	1e83      	subs	r3, r0, #2
 80009d2:	1909      	adds	r1, r1, r4
 80009d4:	e60b      	b.n	80005ee <__aeabi_ddiv+0x156>
 80009d6:	428a      	cmp	r2, r1
 80009d8:	d800      	bhi.n	80009dc <__aeabi_ddiv+0x544>
 80009da:	e5f4      	b.n	80005c6 <__aeabi_ddiv+0x12e>
 80009dc:	1e83      	subs	r3, r0, #2
 80009de:	4698      	mov	r8, r3
 80009e0:	1909      	adds	r1, r1, r4
 80009e2:	e5f0      	b.n	80005c6 <__aeabi_ddiv+0x12e>
 80009e4:	4925      	ldr	r1, [pc, #148]	; (8000a7c <__aeabi_ddiv+0x5e4>)
 80009e6:	0028      	movs	r0, r5
 80009e8:	4459      	add	r1, fp
 80009ea:	408d      	lsls	r5, r1
 80009ec:	4642      	mov	r2, r8
 80009ee:	408a      	lsls	r2, r1
 80009f0:	1e69      	subs	r1, r5, #1
 80009f2:	418d      	sbcs	r5, r1
 80009f4:	4641      	mov	r1, r8
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	40d9      	lsrs	r1, r3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	432a      	orrs	r2, r5
 80009fe:	000b      	movs	r3, r1
 8000a00:	0751      	lsls	r1, r2, #29
 8000a02:	d100      	bne.n	8000a06 <__aeabi_ddiv+0x56e>
 8000a04:	e751      	b.n	80008aa <__aeabi_ddiv+0x412>
 8000a06:	210f      	movs	r1, #15
 8000a08:	4011      	ands	r1, r2
 8000a0a:	2904      	cmp	r1, #4
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_ddiv+0x578>
 8000a0e:	e746      	b.n	800089e <__aeabi_ddiv+0x406>
 8000a10:	e74b      	b.n	80008aa <__aeabi_ddiv+0x412>
 8000a12:	0005      	movs	r5, r0
 8000a14:	428e      	cmp	r6, r1
 8000a16:	d000      	beq.n	8000a1a <__aeabi_ddiv+0x582>
 8000a18:	e66a      	b.n	80006f0 <__aeabi_ddiv+0x258>
 8000a1a:	9a00      	ldr	r2, [sp, #0]
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_ddiv+0x58a>
 8000a20:	e666      	b.n	80006f0 <__aeabi_ddiv+0x258>
 8000a22:	e667      	b.n	80006f4 <__aeabi_ddiv+0x25c>
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <__aeabi_ddiv+0x5e8>)
 8000a26:	445a      	add	r2, fp
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	dc00      	bgt.n	8000a2e <__aeabi_ddiv+0x596>
 8000a2c:	e710      	b.n	8000850 <__aeabi_ddiv+0x3b8>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	2500      	movs	r5, #0
 8000a32:	4498      	add	r8, r3
 8000a34:	e667      	b.n	8000706 <__aeabi_ddiv+0x26e>
 8000a36:	075d      	lsls	r5, r3, #29
 8000a38:	025b      	lsls	r3, r3, #9
 8000a3a:	0b1c      	lsrs	r4, r3, #12
 8000a3c:	08d2      	lsrs	r2, r2, #3
 8000a3e:	2300      	movs	r3, #0
 8000a40:	4315      	orrs	r5, r2
 8000a42:	e580      	b.n	8000546 <__aeabi_ddiv+0xae>
 8000a44:	9800      	ldr	r0, [sp, #0]
 8000a46:	3d02      	subs	r5, #2
 8000a48:	0042      	lsls	r2, r0, #1
 8000a4a:	4282      	cmp	r2, r0
 8000a4c:	41bf      	sbcs	r7, r7
 8000a4e:	427f      	negs	r7, r7
 8000a50:	193c      	adds	r4, r7, r4
 8000a52:	1936      	adds	r6, r6, r4
 8000a54:	9200      	str	r2, [sp, #0]
 8000a56:	e7dd      	b.n	8000a14 <__aeabi_ddiv+0x57c>
 8000a58:	2480      	movs	r4, #128	; 0x80
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	0324      	lsls	r4, r4, #12
 8000a5e:	431c      	orrs	r4, r3
 8000a60:	0324      	lsls	r4, r4, #12
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__aeabi_ddiv+0x5dc>)
 8000a64:	0b24      	lsrs	r4, r4, #12
 8000a66:	e56e      	b.n	8000546 <__aeabi_ddiv+0xae>
 8000a68:	9a00      	ldr	r2, [sp, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3ea      	bcc.n	8000a44 <__aeabi_ddiv+0x5ac>
 8000a6e:	0005      	movs	r5, r0
 8000a70:	e7d3      	b.n	8000a1a <__aeabi_ddiv+0x582>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	000007ff 	.word	0x000007ff
 8000a78:	0000043e 	.word	0x0000043e
 8000a7c:	0000041e 	.word	0x0000041e
 8000a80:	000003ff 	.word	0x000003ff

08000a84 <__aeabi_dmul>:
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	4657      	mov	r7, sl
 8000a88:	464e      	mov	r6, r9
 8000a8a:	4645      	mov	r5, r8
 8000a8c:	46de      	mov	lr, fp
 8000a8e:	b5e0      	push	{r5, r6, r7, lr}
 8000a90:	4698      	mov	r8, r3
 8000a92:	030c      	lsls	r4, r1, #12
 8000a94:	004b      	lsls	r3, r1, #1
 8000a96:	0006      	movs	r6, r0
 8000a98:	4692      	mov	sl, r2
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	0b24      	lsrs	r4, r4, #12
 8000a9e:	0d5b      	lsrs	r3, r3, #21
 8000aa0:	0fcf      	lsrs	r7, r1, #31
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dmul+0x24>
 8000aa6:	e15c      	b.n	8000d62 <__aeabi_dmul+0x2de>
 8000aa8:	4ad9      	ldr	r2, [pc, #868]	; (8000e10 <__aeabi_dmul+0x38c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dmul+0x2c>
 8000aae:	e175      	b.n	8000d9c <__aeabi_dmul+0x318>
 8000ab0:	0f42      	lsrs	r2, r0, #29
 8000ab2:	00e4      	lsls	r4, r4, #3
 8000ab4:	4314      	orrs	r4, r2
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	0412      	lsls	r2, r2, #16
 8000aba:	4314      	orrs	r4, r2
 8000abc:	4ad5      	ldr	r2, [pc, #852]	; (8000e14 <__aeabi_dmul+0x390>)
 8000abe:	00c5      	lsls	r5, r0, #3
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4699      	mov	r9, r3
 8000aca:	469b      	mov	fp, r3
 8000acc:	4643      	mov	r3, r8
 8000ace:	4642      	mov	r2, r8
 8000ad0:	031e      	lsls	r6, r3, #12
 8000ad2:	0fd2      	lsrs	r2, r2, #31
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4650      	mov	r0, sl
 8000ad8:	4690      	mov	r8, r2
 8000ada:	0b36      	lsrs	r6, r6, #12
 8000adc:	0d5b      	lsrs	r3, r3, #21
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dmul+0x5e>
 8000ae0:	e120      	b.n	8000d24 <__aeabi_dmul+0x2a0>
 8000ae2:	4acb      	ldr	r2, [pc, #812]	; (8000e10 <__aeabi_dmul+0x38c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dmul+0x66>
 8000ae8:	e162      	b.n	8000db0 <__aeabi_dmul+0x32c>
 8000aea:	49ca      	ldr	r1, [pc, #808]	; (8000e14 <__aeabi_dmul+0x390>)
 8000aec:	0f42      	lsrs	r2, r0, #29
 8000aee:	468c      	mov	ip, r1
 8000af0:	9900      	ldr	r1, [sp, #0]
 8000af2:	4463      	add	r3, ip
 8000af4:	00f6      	lsls	r6, r6, #3
 8000af6:	468c      	mov	ip, r1
 8000af8:	4316      	orrs	r6, r2
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	449c      	add	ip, r3
 8000afe:	0412      	lsls	r2, r2, #16
 8000b00:	4663      	mov	r3, ip
 8000b02:	4316      	orrs	r6, r2
 8000b04:	00c2      	lsls	r2, r0, #3
 8000b06:	2000      	movs	r0, #0
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	9900      	ldr	r1, [sp, #0]
 8000b0c:	4643      	mov	r3, r8
 8000b0e:	3101      	adds	r1, #1
 8000b10:	468c      	mov	ip, r1
 8000b12:	4649      	mov	r1, r9
 8000b14:	407b      	eors	r3, r7
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	290f      	cmp	r1, #15
 8000b1a:	d826      	bhi.n	8000b6a <__aeabi_dmul+0xe6>
 8000b1c:	4bbe      	ldr	r3, [pc, #760]	; (8000e18 <__aeabi_dmul+0x394>)
 8000b1e:	0089      	lsls	r1, r1, #2
 8000b20:	5859      	ldr	r1, [r3, r1]
 8000b22:	468f      	mov	pc, r1
 8000b24:	4643      	mov	r3, r8
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	0034      	movs	r4, r6
 8000b2a:	0015      	movs	r5, r2
 8000b2c:	4683      	mov	fp, r0
 8000b2e:	465b      	mov	r3, fp
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d016      	beq.n	8000b62 <__aeabi_dmul+0xde>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dmul+0xb6>
 8000b38:	e203      	b.n	8000f42 <__aeabi_dmul+0x4be>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dmul+0xbc>
 8000b3e:	e0cd      	b.n	8000cdc <__aeabi_dmul+0x258>
 8000b40:	2200      	movs	r2, #0
 8000b42:	2400      	movs	r4, #0
 8000b44:	2500      	movs	r5, #0
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	0512      	lsls	r2, r2, #20
 8000b4a:	4322      	orrs	r2, r4
 8000b4c:	07db      	lsls	r3, r3, #31
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	0028      	movs	r0, r5
 8000b52:	0011      	movs	r1, r2
 8000b54:	b007      	add	sp, #28
 8000b56:	bcf0      	pop	{r4, r5, r6, r7}
 8000b58:	46bb      	mov	fp, r7
 8000b5a:	46b2      	mov	sl, r6
 8000b5c:	46a9      	mov	r9, r5
 8000b5e:	46a0      	mov	r8, r4
 8000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b62:	2400      	movs	r4, #0
 8000b64:	2500      	movs	r5, #0
 8000b66:	4aaa      	ldr	r2, [pc, #680]	; (8000e10 <__aeabi_dmul+0x38c>)
 8000b68:	e7ed      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000b6a:	0c28      	lsrs	r0, r5, #16
 8000b6c:	042d      	lsls	r5, r5, #16
 8000b6e:	0c2d      	lsrs	r5, r5, #16
 8000b70:	002b      	movs	r3, r5
 8000b72:	0c11      	lsrs	r1, r2, #16
 8000b74:	0412      	lsls	r2, r2, #16
 8000b76:	0c12      	lsrs	r2, r2, #16
 8000b78:	4353      	muls	r3, r2
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	002f      	movs	r7, r5
 8000b80:	4343      	muls	r3, r0
 8000b82:	4699      	mov	r9, r3
 8000b84:	434f      	muls	r7, r1
 8000b86:	444f      	add	r7, r9
 8000b88:	46bb      	mov	fp, r7
 8000b8a:	4647      	mov	r7, r8
 8000b8c:	000b      	movs	r3, r1
 8000b8e:	0c3f      	lsrs	r7, r7, #16
 8000b90:	46ba      	mov	sl, r7
 8000b92:	4343      	muls	r3, r0
 8000b94:	44da      	add	sl, fp
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	45d1      	cmp	r9, sl
 8000b9a:	d904      	bls.n	8000ba6 <__aeabi_dmul+0x122>
 8000b9c:	2780      	movs	r7, #128	; 0x80
 8000b9e:	027f      	lsls	r7, r7, #9
 8000ba0:	46b9      	mov	r9, r7
 8000ba2:	444b      	add	r3, r9
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	0c1b      	lsrs	r3, r3, #16
 8000baa:	469b      	mov	fp, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	041f      	lsls	r7, r3, #16
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	0c1b      	lsrs	r3, r3, #16
 8000bb6:	4698      	mov	r8, r3
 8000bb8:	003b      	movs	r3, r7
 8000bba:	4443      	add	r3, r8
 8000bbc:	9304      	str	r3, [sp, #16]
 8000bbe:	0c33      	lsrs	r3, r6, #16
 8000bc0:	0436      	lsls	r6, r6, #16
 8000bc2:	0c36      	lsrs	r6, r6, #16
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	0033      	movs	r3, r6
 8000bc8:	4343      	muls	r3, r0
 8000bca:	4699      	mov	r9, r3
 8000bcc:	4643      	mov	r3, r8
 8000bce:	4343      	muls	r3, r0
 8000bd0:	002f      	movs	r7, r5
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	4377      	muls	r7, r6
 8000bd8:	435d      	muls	r5, r3
 8000bda:	0c38      	lsrs	r0, r7, #16
 8000bdc:	444d      	add	r5, r9
 8000bde:	1945      	adds	r5, r0, r5
 8000be0:	45a9      	cmp	r9, r5
 8000be2:	d903      	bls.n	8000bec <__aeabi_dmul+0x168>
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	025b      	lsls	r3, r3, #9
 8000be8:	4699      	mov	r9, r3
 8000bea:	44ca      	add	sl, r9
 8000bec:	043f      	lsls	r7, r7, #16
 8000bee:	0c28      	lsrs	r0, r5, #16
 8000bf0:	0c3f      	lsrs	r7, r7, #16
 8000bf2:	042d      	lsls	r5, r5, #16
 8000bf4:	19ed      	adds	r5, r5, r7
 8000bf6:	0c27      	lsrs	r7, r4, #16
 8000bf8:	0424      	lsls	r4, r4, #16
 8000bfa:	0c24      	lsrs	r4, r4, #16
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	0020      	movs	r0, r4
 8000c00:	4350      	muls	r0, r2
 8000c02:	437a      	muls	r2, r7
 8000c04:	4691      	mov	r9, r2
 8000c06:	003a      	movs	r2, r7
 8000c08:	4453      	add	r3, sl
 8000c0a:	9305      	str	r3, [sp, #20]
 8000c0c:	0c03      	lsrs	r3, r0, #16
 8000c0e:	469a      	mov	sl, r3
 8000c10:	434a      	muls	r2, r1
 8000c12:	4361      	muls	r1, r4
 8000c14:	4449      	add	r1, r9
 8000c16:	4451      	add	r1, sl
 8000c18:	44ab      	add	fp, r5
 8000c1a:	4589      	cmp	r9, r1
 8000c1c:	d903      	bls.n	8000c26 <__aeabi_dmul+0x1a2>
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	025b      	lsls	r3, r3, #9
 8000c22:	4699      	mov	r9, r3
 8000c24:	444a      	add	r2, r9
 8000c26:	0400      	lsls	r0, r0, #16
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	0c00      	lsrs	r0, r0, #16
 8000c2c:	0409      	lsls	r1, r1, #16
 8000c2e:	1809      	adds	r1, r1, r0
 8000c30:	0020      	movs	r0, r4
 8000c32:	4699      	mov	r9, r3
 8000c34:	4643      	mov	r3, r8
 8000c36:	4370      	muls	r0, r6
 8000c38:	435c      	muls	r4, r3
 8000c3a:	437e      	muls	r6, r7
 8000c3c:	435f      	muls	r7, r3
 8000c3e:	0c03      	lsrs	r3, r0, #16
 8000c40:	4698      	mov	r8, r3
 8000c42:	19a4      	adds	r4, r4, r6
 8000c44:	4444      	add	r4, r8
 8000c46:	444a      	add	r2, r9
 8000c48:	9703      	str	r7, [sp, #12]
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d904      	bls.n	8000c58 <__aeabi_dmul+0x1d4>
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	4698      	mov	r8, r3
 8000c54:	4447      	add	r7, r8
 8000c56:	9703      	str	r7, [sp, #12]
 8000c58:	0423      	lsls	r3, r4, #16
 8000c5a:	9e02      	ldr	r6, [sp, #8]
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	9b05      	ldr	r3, [sp, #20]
 8000c60:	445e      	add	r6, fp
 8000c62:	4698      	mov	r8, r3
 8000c64:	42ae      	cmp	r6, r5
 8000c66:	41ad      	sbcs	r5, r5
 8000c68:	1876      	adds	r6, r6, r1
 8000c6a:	428e      	cmp	r6, r1
 8000c6c:	4189      	sbcs	r1, r1
 8000c6e:	0400      	lsls	r0, r0, #16
 8000c70:	0c00      	lsrs	r0, r0, #16
 8000c72:	4450      	add	r0, sl
 8000c74:	4440      	add	r0, r8
 8000c76:	426d      	negs	r5, r5
 8000c78:	1947      	adds	r7, r0, r5
 8000c7a:	46b8      	mov	r8, r7
 8000c7c:	4693      	mov	fp, r2
 8000c7e:	4249      	negs	r1, r1
 8000c80:	4689      	mov	r9, r1
 8000c82:	44c3      	add	fp, r8
 8000c84:	44d9      	add	r9, fp
 8000c86:	4298      	cmp	r0, r3
 8000c88:	4180      	sbcs	r0, r0
 8000c8a:	45a8      	cmp	r8, r5
 8000c8c:	41ad      	sbcs	r5, r5
 8000c8e:	4593      	cmp	fp, r2
 8000c90:	4192      	sbcs	r2, r2
 8000c92:	4589      	cmp	r9, r1
 8000c94:	4189      	sbcs	r1, r1
 8000c96:	426d      	negs	r5, r5
 8000c98:	4240      	negs	r0, r0
 8000c9a:	4328      	orrs	r0, r5
 8000c9c:	0c24      	lsrs	r4, r4, #16
 8000c9e:	4252      	negs	r2, r2
 8000ca0:	4249      	negs	r1, r1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	9b03      	ldr	r3, [sp, #12]
 8000ca6:	1900      	adds	r0, r0, r4
 8000ca8:	1880      	adds	r0, r0, r2
 8000caa:	18c7      	adds	r7, r0, r3
 8000cac:	464b      	mov	r3, r9
 8000cae:	0ddc      	lsrs	r4, r3, #23
 8000cb0:	9b04      	ldr	r3, [sp, #16]
 8000cb2:	0275      	lsls	r5, r6, #9
 8000cb4:	431d      	orrs	r5, r3
 8000cb6:	1e6a      	subs	r2, r5, #1
 8000cb8:	4195      	sbcs	r5, r2
 8000cba:	464b      	mov	r3, r9
 8000cbc:	0df6      	lsrs	r6, r6, #23
 8000cbe:	027f      	lsls	r7, r7, #9
 8000cc0:	4335      	orrs	r5, r6
 8000cc2:	025a      	lsls	r2, r3, #9
 8000cc4:	433c      	orrs	r4, r7
 8000cc6:	4315      	orrs	r5, r2
 8000cc8:	01fb      	lsls	r3, r7, #7
 8000cca:	d400      	bmi.n	8000cce <__aeabi_dmul+0x24a>
 8000ccc:	e11c      	b.n	8000f08 <__aeabi_dmul+0x484>
 8000cce:	2101      	movs	r1, #1
 8000cd0:	086a      	lsrs	r2, r5, #1
 8000cd2:	400d      	ands	r5, r1
 8000cd4:	4315      	orrs	r5, r2
 8000cd6:	07e2      	lsls	r2, r4, #31
 8000cd8:	4315      	orrs	r5, r2
 8000cda:	0864      	lsrs	r4, r4, #1
 8000cdc:	494f      	ldr	r1, [pc, #316]	; (8000e1c <__aeabi_dmul+0x398>)
 8000cde:	4461      	add	r1, ip
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	dc00      	bgt.n	8000ce6 <__aeabi_dmul+0x262>
 8000ce4:	e0b0      	b.n	8000e48 <__aeabi_dmul+0x3c4>
 8000ce6:	076b      	lsls	r3, r5, #29
 8000ce8:	d009      	beq.n	8000cfe <__aeabi_dmul+0x27a>
 8000cea:	220f      	movs	r2, #15
 8000cec:	402a      	ands	r2, r5
 8000cee:	2a04      	cmp	r2, #4
 8000cf0:	d005      	beq.n	8000cfe <__aeabi_dmul+0x27a>
 8000cf2:	1d2a      	adds	r2, r5, #4
 8000cf4:	42aa      	cmp	r2, r5
 8000cf6:	41ad      	sbcs	r5, r5
 8000cf8:	426d      	negs	r5, r5
 8000cfa:	1964      	adds	r4, r4, r5
 8000cfc:	0015      	movs	r5, r2
 8000cfe:	01e3      	lsls	r3, r4, #7
 8000d00:	d504      	bpl.n	8000d0c <__aeabi_dmul+0x288>
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <__aeabi_dmul+0x39c>)
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	4014      	ands	r4, r2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	4a45      	ldr	r2, [pc, #276]	; (8000e24 <__aeabi_dmul+0x3a0>)
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	dd00      	ble.n	8000d14 <__aeabi_dmul+0x290>
 8000d12:	e726      	b.n	8000b62 <__aeabi_dmul+0xde>
 8000d14:	0762      	lsls	r2, r4, #29
 8000d16:	08ed      	lsrs	r5, r5, #3
 8000d18:	0264      	lsls	r4, r4, #9
 8000d1a:	0549      	lsls	r1, r1, #21
 8000d1c:	4315      	orrs	r5, r2
 8000d1e:	0b24      	lsrs	r4, r4, #12
 8000d20:	0d4a      	lsrs	r2, r1, #21
 8000d22:	e710      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000d24:	4652      	mov	r2, sl
 8000d26:	4332      	orrs	r2, r6
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dmul+0x2a8>
 8000d2a:	e07f      	b.n	8000e2c <__aeabi_dmul+0x3a8>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dmul+0x2ae>
 8000d30:	e0dc      	b.n	8000eec <__aeabi_dmul+0x468>
 8000d32:	0030      	movs	r0, r6
 8000d34:	f000 f9ca 	bl	80010cc <__clzsi2>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	3a0b      	subs	r2, #11
 8000d3c:	231d      	movs	r3, #29
 8000d3e:	0001      	movs	r1, r0
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	4652      	mov	r2, sl
 8000d44:	3908      	subs	r1, #8
 8000d46:	40da      	lsrs	r2, r3
 8000d48:	408e      	lsls	r6, r1
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	408a      	lsls	r2, r1
 8000d50:	9b00      	ldr	r3, [sp, #0]
 8000d52:	4935      	ldr	r1, [pc, #212]	; (8000e28 <__aeabi_dmul+0x3a4>)
 8000d54:	1a18      	subs	r0, r3, r0
 8000d56:	0003      	movs	r3, r0
 8000d58:	468c      	mov	ip, r1
 8000d5a:	4463      	add	r3, ip
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	e6d3      	b.n	8000b0a <__aeabi_dmul+0x86>
 8000d62:	0025      	movs	r5, r4
 8000d64:	4305      	orrs	r5, r0
 8000d66:	d04a      	beq.n	8000dfe <__aeabi_dmul+0x37a>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dmul+0x2ea>
 8000d6c:	e0b0      	b.n	8000ed0 <__aeabi_dmul+0x44c>
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f000 f9ac 	bl	80010cc <__clzsi2>
 8000d74:	0001      	movs	r1, r0
 8000d76:	0002      	movs	r2, r0
 8000d78:	390b      	subs	r1, #11
 8000d7a:	231d      	movs	r3, #29
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	1a5b      	subs	r3, r3, r1
 8000d80:	0031      	movs	r1, r6
 8000d82:	0035      	movs	r5, r6
 8000d84:	3808      	subs	r0, #8
 8000d86:	4084      	lsls	r4, r0
 8000d88:	40d9      	lsrs	r1, r3
 8000d8a:	4085      	lsls	r5, r0
 8000d8c:	430c      	orrs	r4, r1
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <__aeabi_dmul+0x3a4>)
 8000d90:	1a83      	subs	r3, r0, r2
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	4699      	mov	r9, r3
 8000d98:	469b      	mov	fp, r3
 8000d9a:	e697      	b.n	8000acc <__aeabi_dmul+0x48>
 8000d9c:	0005      	movs	r5, r0
 8000d9e:	4325      	orrs	r5, r4
 8000da0:	d126      	bne.n	8000df0 <__aeabi_dmul+0x36c>
 8000da2:	2208      	movs	r2, #8
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	2400      	movs	r4, #0
 8000daa:	4691      	mov	r9, r2
 8000dac:	469b      	mov	fp, r3
 8000dae:	e68d      	b.n	8000acc <__aeabi_dmul+0x48>
 8000db0:	4652      	mov	r2, sl
 8000db2:	9b00      	ldr	r3, [sp, #0]
 8000db4:	4332      	orrs	r2, r6
 8000db6:	d110      	bne.n	8000dda <__aeabi_dmul+0x356>
 8000db8:	4915      	ldr	r1, [pc, #84]	; (8000e10 <__aeabi_dmul+0x38c>)
 8000dba:	2600      	movs	r6, #0
 8000dbc:	468c      	mov	ip, r1
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	4689      	mov	r9, r1
 8000dca:	2002      	movs	r0, #2
 8000dcc:	e69d      	b.n	8000b0a <__aeabi_dmul+0x86>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	9701      	str	r7, [sp, #4]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_dmul+0x354>
 8000dd6:	e6ad      	b.n	8000b34 <__aeabi_dmul+0xb0>
 8000dd8:	e6c3      	b.n	8000b62 <__aeabi_dmul+0xde>
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <__aeabi_dmul+0x38c>)
 8000ddc:	2003      	movs	r0, #3
 8000dde:	4694      	mov	ip, r2
 8000de0:	4463      	add	r3, ip
 8000de2:	464a      	mov	r2, r9
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2303      	movs	r3, #3
 8000de8:	431a      	orrs	r2, r3
 8000dea:	4691      	mov	r9, r2
 8000dec:	4652      	mov	r2, sl
 8000dee:	e68c      	b.n	8000b0a <__aeabi_dmul+0x86>
 8000df0:	220c      	movs	r2, #12
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2303      	movs	r3, #3
 8000df6:	0005      	movs	r5, r0
 8000df8:	4691      	mov	r9, r2
 8000dfa:	469b      	mov	fp, r3
 8000dfc:	e666      	b.n	8000acc <__aeabi_dmul+0x48>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	4699      	mov	r9, r3
 8000e02:	2300      	movs	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	2400      	movs	r4, #0
 8000e0a:	469b      	mov	fp, r3
 8000e0c:	e65e      	b.n	8000acc <__aeabi_dmul+0x48>
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	000007ff 	.word	0x000007ff
 8000e14:	fffffc01 	.word	0xfffffc01
 8000e18:	08007528 	.word	0x08007528
 8000e1c:	000003ff 	.word	0x000003ff
 8000e20:	feffffff 	.word	0xfeffffff
 8000e24:	000007fe 	.word	0x000007fe
 8000e28:	fffffc0d 	.word	0xfffffc0d
 8000e2c:	4649      	mov	r1, r9
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4319      	orrs	r1, r3
 8000e32:	4689      	mov	r9, r1
 8000e34:	2600      	movs	r6, #0
 8000e36:	2001      	movs	r0, #1
 8000e38:	e667      	b.n	8000b0a <__aeabi_dmul+0x86>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	2480      	movs	r4, #128	; 0x80
 8000e3e:	2500      	movs	r5, #0
 8000e40:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <__aeabi_dmul+0x4cc>)
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	0324      	lsls	r4, r4, #12
 8000e46:	e67e      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000e48:	2001      	movs	r0, #1
 8000e4a:	1a40      	subs	r0, r0, r1
 8000e4c:	2838      	cmp	r0, #56	; 0x38
 8000e4e:	dd00      	ble.n	8000e52 <__aeabi_dmul+0x3ce>
 8000e50:	e676      	b.n	8000b40 <__aeabi_dmul+0xbc>
 8000e52:	281f      	cmp	r0, #31
 8000e54:	dd5b      	ble.n	8000f0e <__aeabi_dmul+0x48a>
 8000e56:	221f      	movs	r2, #31
 8000e58:	0023      	movs	r3, r4
 8000e5a:	4252      	negs	r2, r2
 8000e5c:	1a51      	subs	r1, r2, r1
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	0019      	movs	r1, r3
 8000e62:	2820      	cmp	r0, #32
 8000e64:	d003      	beq.n	8000e6e <__aeabi_dmul+0x3ea>
 8000e66:	4a3b      	ldr	r2, [pc, #236]	; (8000f54 <__aeabi_dmul+0x4d0>)
 8000e68:	4462      	add	r2, ip
 8000e6a:	4094      	lsls	r4, r2
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	1e6a      	subs	r2, r5, #1
 8000e70:	4195      	sbcs	r5, r2
 8000e72:	002a      	movs	r2, r5
 8000e74:	430a      	orrs	r2, r1
 8000e76:	2107      	movs	r1, #7
 8000e78:	000d      	movs	r5, r1
 8000e7a:	2400      	movs	r4, #0
 8000e7c:	4015      	ands	r5, r2
 8000e7e:	4211      	tst	r1, r2
 8000e80:	d05b      	beq.n	8000f3a <__aeabi_dmul+0x4b6>
 8000e82:	210f      	movs	r1, #15
 8000e84:	2400      	movs	r4, #0
 8000e86:	4011      	ands	r1, r2
 8000e88:	2904      	cmp	r1, #4
 8000e8a:	d053      	beq.n	8000f34 <__aeabi_dmul+0x4b0>
 8000e8c:	1d11      	adds	r1, r2, #4
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	4192      	sbcs	r2, r2
 8000e92:	4252      	negs	r2, r2
 8000e94:	18a4      	adds	r4, r4, r2
 8000e96:	000a      	movs	r2, r1
 8000e98:	0223      	lsls	r3, r4, #8
 8000e9a:	d54b      	bpl.n	8000f34 <__aeabi_dmul+0x4b0>
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	e650      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	031b      	lsls	r3, r3, #12
 8000ea8:	421c      	tst	r4, r3
 8000eaa:	d009      	beq.n	8000ec0 <__aeabi_dmul+0x43c>
 8000eac:	421e      	tst	r6, r3
 8000eae:	d107      	bne.n	8000ec0 <__aeabi_dmul+0x43c>
 8000eb0:	4333      	orrs	r3, r6
 8000eb2:	031c      	lsls	r4, r3, #12
 8000eb4:	4643      	mov	r3, r8
 8000eb6:	0015      	movs	r5, r2
 8000eb8:	0b24      	lsrs	r4, r4, #12
 8000eba:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <__aeabi_dmul+0x4cc>)
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	e642      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0312      	lsls	r2, r2, #12
 8000ec4:	4314      	orrs	r4, r2
 8000ec6:	0324      	lsls	r4, r4, #12
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <__aeabi_dmul+0x4cc>)
 8000eca:	0b24      	lsrs	r4, r4, #12
 8000ecc:	9701      	str	r7, [sp, #4]
 8000ece:	e63a      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000ed0:	f000 f8fc 	bl	80010cc <__clzsi2>
 8000ed4:	0001      	movs	r1, r0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	3115      	adds	r1, #21
 8000eda:	3220      	adds	r2, #32
 8000edc:	291c      	cmp	r1, #28
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_dmul+0x45e>
 8000ee0:	e74b      	b.n	8000d7a <__aeabi_dmul+0x2f6>
 8000ee2:	0034      	movs	r4, r6
 8000ee4:	3808      	subs	r0, #8
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	4084      	lsls	r4, r0
 8000eea:	e750      	b.n	8000d8e <__aeabi_dmul+0x30a>
 8000eec:	f000 f8ee 	bl	80010cc <__clzsi2>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	3215      	adds	r2, #21
 8000ef6:	3020      	adds	r0, #32
 8000ef8:	2a1c      	cmp	r2, #28
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dmul+0x47a>
 8000efc:	e71e      	b.n	8000d3c <__aeabi_dmul+0x2b8>
 8000efe:	4656      	mov	r6, sl
 8000f00:	3b08      	subs	r3, #8
 8000f02:	2200      	movs	r2, #0
 8000f04:	409e      	lsls	r6, r3
 8000f06:	e723      	b.n	8000d50 <__aeabi_dmul+0x2cc>
 8000f08:	9b00      	ldr	r3, [sp, #0]
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	e6e6      	b.n	8000cdc <__aeabi_dmul+0x258>
 8000f0e:	4912      	ldr	r1, [pc, #72]	; (8000f58 <__aeabi_dmul+0x4d4>)
 8000f10:	0022      	movs	r2, r4
 8000f12:	4461      	add	r1, ip
 8000f14:	002e      	movs	r6, r5
 8000f16:	408d      	lsls	r5, r1
 8000f18:	408a      	lsls	r2, r1
 8000f1a:	40c6      	lsrs	r6, r0
 8000f1c:	1e69      	subs	r1, r5, #1
 8000f1e:	418d      	sbcs	r5, r1
 8000f20:	4332      	orrs	r2, r6
 8000f22:	432a      	orrs	r2, r5
 8000f24:	40c4      	lsrs	r4, r0
 8000f26:	0753      	lsls	r3, r2, #29
 8000f28:	d0b6      	beq.n	8000e98 <__aeabi_dmul+0x414>
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	4011      	ands	r1, r2
 8000f2e:	2904      	cmp	r1, #4
 8000f30:	d1ac      	bne.n	8000e8c <__aeabi_dmul+0x408>
 8000f32:	e7b1      	b.n	8000e98 <__aeabi_dmul+0x414>
 8000f34:	0765      	lsls	r5, r4, #29
 8000f36:	0264      	lsls	r4, r4, #9
 8000f38:	0b24      	lsrs	r4, r4, #12
 8000f3a:	08d2      	lsrs	r2, r2, #3
 8000f3c:	4315      	orrs	r5, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	e601      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	0312      	lsls	r2, r2, #12
 8000f46:	4314      	orrs	r4, r2
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	4a01      	ldr	r2, [pc, #4]	; (8000f50 <__aeabi_dmul+0x4cc>)
 8000f4c:	0b24      	lsrs	r4, r4, #12
 8000f4e:	e5fa      	b.n	8000b46 <__aeabi_dmul+0xc2>
 8000f50:	000007ff 	.word	0x000007ff
 8000f54:	0000043e 	.word	0x0000043e
 8000f58:	0000041e 	.word	0x0000041e

08000f5c <__aeabi_i2d>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d016      	beq.n	8000f90 <__aeabi_i2d+0x34>
 8000f62:	17c3      	asrs	r3, r0, #31
 8000f64:	18c5      	adds	r5, r0, r3
 8000f66:	405d      	eors	r5, r3
 8000f68:	0fc4      	lsrs	r4, r0, #31
 8000f6a:	0028      	movs	r0, r5
 8000f6c:	f000 f8ae 	bl	80010cc <__clzsi2>
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <__aeabi_i2d+0x5c>)
 8000f72:	1a12      	subs	r2, r2, r0
 8000f74:	280a      	cmp	r0, #10
 8000f76:	dc16      	bgt.n	8000fa6 <__aeabi_i2d+0x4a>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	002e      	movs	r6, r5
 8000f7c:	3315      	adds	r3, #21
 8000f7e:	409e      	lsls	r6, r3
 8000f80:	230b      	movs	r3, #11
 8000f82:	1a18      	subs	r0, r3, r0
 8000f84:	40c5      	lsrs	r5, r0
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	032d      	lsls	r5, r5, #12
 8000f8a:	0b2d      	lsrs	r5, r5, #12
 8000f8c:	0d53      	lsrs	r3, r2, #21
 8000f8e:	e003      	b.n	8000f98 <__aeabi_i2d+0x3c>
 8000f90:	2400      	movs	r4, #0
 8000f92:	2300      	movs	r3, #0
 8000f94:	2500      	movs	r5, #0
 8000f96:	2600      	movs	r6, #0
 8000f98:	051b      	lsls	r3, r3, #20
 8000f9a:	432b      	orrs	r3, r5
 8000f9c:	07e4      	lsls	r4, r4, #31
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	380b      	subs	r0, #11
 8000fa8:	4085      	lsls	r5, r0
 8000faa:	0552      	lsls	r2, r2, #21
 8000fac:	032d      	lsls	r5, r5, #12
 8000fae:	2600      	movs	r6, #0
 8000fb0:	0b2d      	lsrs	r5, r5, #12
 8000fb2:	0d53      	lsrs	r3, r2, #21
 8000fb4:	e7f0      	b.n	8000f98 <__aeabi_i2d+0x3c>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	0000041e 	.word	0x0000041e

08000fbc <__aeabi_d2f>:
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	004b      	lsls	r3, r1, #1
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	0d5b      	lsrs	r3, r3, #21
 8000fc4:	030c      	lsls	r4, r1, #12
 8000fc6:	4e3d      	ldr	r6, [pc, #244]	; (80010bc <__aeabi_d2f+0x100>)
 8000fc8:	0a64      	lsrs	r4, r4, #9
 8000fca:	0f40      	lsrs	r0, r0, #29
 8000fcc:	1c5f      	adds	r7, r3, #1
 8000fce:	0fc9      	lsrs	r1, r1, #31
 8000fd0:	4304      	orrs	r4, r0
 8000fd2:	00d5      	lsls	r5, r2, #3
 8000fd4:	4237      	tst	r7, r6
 8000fd6:	d00a      	beq.n	8000fee <__aeabi_d2f+0x32>
 8000fd8:	4839      	ldr	r0, [pc, #228]	; (80010c0 <__aeabi_d2f+0x104>)
 8000fda:	181e      	adds	r6, r3, r0
 8000fdc:	2efe      	cmp	r6, #254	; 0xfe
 8000fde:	dd16      	ble.n	800100e <__aeabi_d2f+0x52>
 8000fe0:	20ff      	movs	r0, #255	; 0xff
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	05c0      	lsls	r0, r0, #23
 8000fe6:	4320      	orrs	r0, r4
 8000fe8:	07c9      	lsls	r1, r1, #31
 8000fea:	4308      	orrs	r0, r1
 8000fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d106      	bne.n	8001000 <__aeabi_d2f+0x44>
 8000ff2:	432c      	orrs	r4, r5
 8000ff4:	d026      	beq.n	8001044 <__aeabi_d2f+0x88>
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	0192      	lsls	r2, r2, #6
 8000ffa:	0a54      	lsrs	r4, r2, #9
 8000ffc:	b2d8      	uxtb	r0, r3
 8000ffe:	e7f1      	b.n	8000fe4 <__aeabi_d2f+0x28>
 8001000:	4325      	orrs	r5, r4
 8001002:	d0ed      	beq.n	8000fe0 <__aeabi_d2f+0x24>
 8001004:	2080      	movs	r0, #128	; 0x80
 8001006:	03c0      	lsls	r0, r0, #15
 8001008:	4304      	orrs	r4, r0
 800100a:	20ff      	movs	r0, #255	; 0xff
 800100c:	e7ea      	b.n	8000fe4 <__aeabi_d2f+0x28>
 800100e:	2e00      	cmp	r6, #0
 8001010:	dd1b      	ble.n	800104a <__aeabi_d2f+0x8e>
 8001012:	0192      	lsls	r2, r2, #6
 8001014:	1e53      	subs	r3, r2, #1
 8001016:	419a      	sbcs	r2, r3
 8001018:	00e4      	lsls	r4, r4, #3
 800101a:	0f6d      	lsrs	r5, r5, #29
 800101c:	4322      	orrs	r2, r4
 800101e:	432a      	orrs	r2, r5
 8001020:	0753      	lsls	r3, r2, #29
 8001022:	d048      	beq.n	80010b6 <__aeabi_d2f+0xfa>
 8001024:	230f      	movs	r3, #15
 8001026:	4013      	ands	r3, r2
 8001028:	2b04      	cmp	r3, #4
 800102a:	d000      	beq.n	800102e <__aeabi_d2f+0x72>
 800102c:	3204      	adds	r2, #4
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	04db      	lsls	r3, r3, #19
 8001032:	4013      	ands	r3, r2
 8001034:	d03f      	beq.n	80010b6 <__aeabi_d2f+0xfa>
 8001036:	1c70      	adds	r0, r6, #1
 8001038:	2efe      	cmp	r6, #254	; 0xfe
 800103a:	d0d1      	beq.n	8000fe0 <__aeabi_d2f+0x24>
 800103c:	0192      	lsls	r2, r2, #6
 800103e:	0a54      	lsrs	r4, r2, #9
 8001040:	b2c0      	uxtb	r0, r0
 8001042:	e7cf      	b.n	8000fe4 <__aeabi_d2f+0x28>
 8001044:	2000      	movs	r0, #0
 8001046:	2400      	movs	r4, #0
 8001048:	e7cc      	b.n	8000fe4 <__aeabi_d2f+0x28>
 800104a:	0032      	movs	r2, r6
 800104c:	3217      	adds	r2, #23
 800104e:	db22      	blt.n	8001096 <__aeabi_d2f+0xda>
 8001050:	2080      	movs	r0, #128	; 0x80
 8001052:	0400      	lsls	r0, r0, #16
 8001054:	4320      	orrs	r0, r4
 8001056:	241e      	movs	r4, #30
 8001058:	1ba4      	subs	r4, r4, r6
 800105a:	2c1f      	cmp	r4, #31
 800105c:	dd1d      	ble.n	800109a <__aeabi_d2f+0xde>
 800105e:	2202      	movs	r2, #2
 8001060:	4252      	negs	r2, r2
 8001062:	1b96      	subs	r6, r2, r6
 8001064:	0002      	movs	r2, r0
 8001066:	40f2      	lsrs	r2, r6
 8001068:	0016      	movs	r6, r2
 800106a:	2c20      	cmp	r4, #32
 800106c:	d004      	beq.n	8001078 <__aeabi_d2f+0xbc>
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <__aeabi_d2f+0x108>)
 8001070:	4694      	mov	ip, r2
 8001072:	4463      	add	r3, ip
 8001074:	4098      	lsls	r0, r3
 8001076:	4305      	orrs	r5, r0
 8001078:	002a      	movs	r2, r5
 800107a:	1e53      	subs	r3, r2, #1
 800107c:	419a      	sbcs	r2, r3
 800107e:	4332      	orrs	r2, r6
 8001080:	2600      	movs	r6, #0
 8001082:	0753      	lsls	r3, r2, #29
 8001084:	d1ce      	bne.n	8001024 <__aeabi_d2f+0x68>
 8001086:	2480      	movs	r4, #128	; 0x80
 8001088:	0013      	movs	r3, r2
 800108a:	04e4      	lsls	r4, r4, #19
 800108c:	2001      	movs	r0, #1
 800108e:	4023      	ands	r3, r4
 8001090:	4222      	tst	r2, r4
 8001092:	d1d3      	bne.n	800103c <__aeabi_d2f+0x80>
 8001094:	e7b0      	b.n	8000ff8 <__aeabi_d2f+0x3c>
 8001096:	2300      	movs	r3, #0
 8001098:	e7ad      	b.n	8000ff6 <__aeabi_d2f+0x3a>
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <__aeabi_d2f+0x10c>)
 800109c:	4694      	mov	ip, r2
 800109e:	002a      	movs	r2, r5
 80010a0:	40e2      	lsrs	r2, r4
 80010a2:	0014      	movs	r4, r2
 80010a4:	002a      	movs	r2, r5
 80010a6:	4463      	add	r3, ip
 80010a8:	409a      	lsls	r2, r3
 80010aa:	4098      	lsls	r0, r3
 80010ac:	1e55      	subs	r5, r2, #1
 80010ae:	41aa      	sbcs	r2, r5
 80010b0:	4302      	orrs	r2, r0
 80010b2:	4322      	orrs	r2, r4
 80010b4:	e7e4      	b.n	8001080 <__aeabi_d2f+0xc4>
 80010b6:	0033      	movs	r3, r6
 80010b8:	e79e      	b.n	8000ff8 <__aeabi_d2f+0x3c>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	000007fe 	.word	0x000007fe
 80010c0:	fffffc80 	.word	0xfffffc80
 80010c4:	fffffca2 	.word	0xfffffca2
 80010c8:	fffffc82 	.word	0xfffffc82

080010cc <__clzsi2>:
 80010cc:	211c      	movs	r1, #28
 80010ce:	2301      	movs	r3, #1
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d301      	bcc.n	80010da <__clzsi2+0xe>
 80010d6:	0c00      	lsrs	r0, r0, #16
 80010d8:	3910      	subs	r1, #16
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	4298      	cmp	r0, r3
 80010de:	d301      	bcc.n	80010e4 <__clzsi2+0x18>
 80010e0:	0a00      	lsrs	r0, r0, #8
 80010e2:	3908      	subs	r1, #8
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d301      	bcc.n	80010ee <__clzsi2+0x22>
 80010ea:	0900      	lsrs	r0, r0, #4
 80010ec:	3904      	subs	r1, #4
 80010ee:	a202      	add	r2, pc, #8	; (adr r2, 80010f8 <__clzsi2+0x2c>)
 80010f0:	5c10      	ldrb	r0, [r2, r0]
 80010f2:	1840      	adds	r0, r0, r1
 80010f4:	4770      	bx	lr
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	02020304 	.word	0x02020304
 80010fc:	01010101 	.word	0x01010101
	...

08001108 <__clzdi2>:
 8001108:	b510      	push	{r4, lr}
 800110a:	2900      	cmp	r1, #0
 800110c:	d103      	bne.n	8001116 <__clzdi2+0xe>
 800110e:	f7ff ffdd 	bl	80010cc <__clzsi2>
 8001112:	3020      	adds	r0, #32
 8001114:	e002      	b.n	800111c <__clzdi2+0x14>
 8001116:	0008      	movs	r0, r1
 8001118:	f7ff ffd8 	bl	80010cc <__clzsi2>
 800111c:	bd10      	pop	{r4, pc}
 800111e:	46c0      	nop			; (mov r8, r8)

08001120 <getBoardName>:
#endif
extern TIM_HandleTypeDef htim17;

char * getBoardName() {
    return "imu";
}
 8001120:	4800      	ldr	r0, [pc, #0]	; (8001124 <getBoardName+0x4>)
 8001122:	4770      	bx	lr
 8001124:	0800757c 	.word	0x0800757c

08001128 <getBoardNodeName>:
char * getBoardNodeName() {
    return "com.abstractfoundry.imu";
}
 8001128:	4800      	ldr	r0, [pc, #0]	; (800112c <getBoardNodeName+0x4>)
 800112a:	4770      	bx	lr
 800112c:	08007568 	.word	0x08007568

08001130 <setupCanHw>:

void setupCanHw() {
 8001130:	b510      	push	{r4, lr}
    hcan.Instance = CAN; // NOTE: canard library only works with CAN1
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <setupCanHw+0x10>)
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <setupCanHw+0x14>)
 8001136:	6003      	str	r3, [r0, #0]
    HAL_CAN_MspInit(&hcan);
 8001138:	f004 f89e 	bl	8005278 <HAL_CAN_MspInit>
    // GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; //GPIO_MODE_AF_PP; /* !! This is our difference - use it open drain mode !! */ ;
    // GPIO_InitStruct.Pull = GPIO_NOPULL;
    // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    // GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
    // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}
 800113c:	bd10      	pop	{r4, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000bd0 	.word	0x20000bd0
 8001144:	40006400 	.word	0x40006400

08001148 <boardTest>:

uint8_t boardTest() { // Called by can.c
 8001148:	b510      	push	{r4, lr}
    uint8_t errorCode = 0;
    errorCode |= testImu();
 800114a:	f002 faff 	bl	800374c <testImu>
    return errorCode;
}
 800114e:	bd10      	pop	{r4, pc}

08001150 <setup>:

void setup() {
 8001150:	b500      	push	{lr}
 8001152:	b0a5      	sub	sp, #148	; 0x94
    bool initialised = false;
 8001154:	2300      	movs	r3, #0
 8001156:	930b      	str	r3, [sp, #44]	; 0x2c
    while (!initialised) {
 8001158:	e039      	b.n	80011ce <setup+0x7e>
        CEXCEPTION_T e;
        Try {
            #ifdef IMU_I2C
                MX_I2C1_Init();
 800115a:	f004 f84d 	bl	80051f8 <MX_I2C1_Init>
            #else
                MX_USART2_UART_Init();
            #endif
            initialiseImu(
 800115e:	2090      	movs	r0, #144	; 0x90
 8001160:	05c0      	lsls	r0, r0, #23
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <setup+0xbc>)
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	9004      	str	r0, [sp, #16]
 800116c:	3b7e      	subs	r3, #126	; 0x7e
 800116e:	9303      	str	r3, [sp, #12]
 8001170:	9002      	str	r0, [sp, #8]
 8001172:	333e      	adds	r3, #62	; 0x3e
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	9000      	str	r0, [sp, #0]
 8001178:	3b20      	subs	r3, #32
 800117a:	0002      	movs	r2, r0
 800117c:	2101      	movs	r1, #1
 800117e:	f002 fb01 	bl	8003784 <initialiseImu>
                    &hi2c1
                #else
                    &huart2
                #endif
            );
            initialiseDebug();
 8001182:	f002 f945 	bl	8003410 <initialiseDebug>
            setupCanHw();
 8001186:	f7ff ffd3 	bl	8001130 <setupCanHw>
            setupCan(false, NULL);
 800118a:	2100      	movs	r1, #0
 800118c:	2000      	movs	r0, #0
 800118e:	f001 ff95 	bl	80030bc <setupCan>
            softAssert(HAL_TIM_Base_Start_IT(&htim17) == HAL_OK, "Failed to start canTimer");
 8001192:	481f      	ldr	r0, [pc, #124]	; (8001210 <setup+0xc0>)
 8001194:	f005 fd70 	bl	8006c78 <HAL_TIM_Base_Start_IT>
 8001198:	2800      	cmp	r0, #0
 800119a:	d002      	beq.n	80011a2 <setup+0x52>
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <setup+0xc4>)
 800119e:	f000 f8cb 	bl	8001338 <softAssertTmp>
            boardTest();
 80011a2:	f7ff ffd1 	bl	8001148 <boardTest>
            for (uint32_t i=0; i<10000; i++) {
                boardTest();
            }
            softAssert(0, "");
#endif
        } Catch(e) {}
 80011a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011a8:	00da      	lsls	r2, r3, #3
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <setup+0xc8>)
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	4a1b      	ldr	r2, [pc, #108]	; (800121c <setup+0xcc>)
 80011b0:	605a      	str	r2, [r3, #4]
            initialised = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	930b      	str	r3, [sp, #44]	; 0x2c
        } Catch(e) {}
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <setup+0xc8>)
 80011b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011be:	5099      	str	r1, [r3, r2]
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <setup+0xd0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4917      	ldr	r1, [pc, #92]	; (8001224 <setup+0xd4>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	18d2      	adds	r2, r2, r3
 80011cc:	6853      	ldr	r3, [r2, #4]
    while (!initialised) {
 80011ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d118      	bne.n	8001206 <setup+0xb6>
        Try {
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <setup+0xd0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <setup+0xd4>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	001a      	movs	r2, r3
 80011de:	9309      	str	r3, [sp, #36]	; 0x24
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <setup+0xc8>)
 80011e2:	00d2      	lsls	r2, r2, #3
 80011e4:	58d1      	ldr	r1, [r2, r3]
 80011e6:	910a      	str	r1, [sp, #40]	; 0x28
 80011e8:	a80d      	add	r0, sp, #52	; 0x34
 80011ea:	50d0      	str	r0, [r2, r3]
 80011ec:	189b      	adds	r3, r3, r2
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <setup+0xcc>)
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	f7fe ff89 	bl	8000108 <setjmp>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d0af      	beq.n	800115a <setup+0xa>
        } Catch(e) {}
 80011fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011fc:	00da      	lsls	r2, r3, #3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <setup+0xc8>)
 8001200:	189b      	adds	r3, r3, r2
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	e7d7      	b.n	80011b6 <setup+0x66>
    }
}
 8001206:	b025      	add	sp, #148	; 0x94
 8001208:	bd00      	pop	{pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000bf8 	.word	0x20000bf8
 8001210:	20000c44 	.word	0x20000c44
 8001214:	08007580 	.word	0x08007580
 8001218:	20000260 	.word	0x20000260
 800121c:	5a5a5a5a 	.word	0x5a5a5a5a
 8001220:	20000284 	.word	0x20000284
 8001224:	20000280 	.word	0x20000280

08001228 <loopBackground>:

void loopBackground() {
 8001228:	b510      	push	{r4, lr}
    HAL_Delay(10);
 800122a:	200a      	movs	r0, #10
 800122c:	f004 f960 	bl	80054f0 <HAL_Delay>
}
 8001230:	bd10      	pop	{r4, pc}
	...

08001234 <loopMain>:

// Called by timer every 1ms
void loopMain() {
 8001234:	b510      	push	{r4, lr}
 8001236:	b09a      	sub	sp, #104	; 0x68
    START_THREAD_EXCEPTION(MAIN_THREAD_ID);
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <loopMain+0x8c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d827      	bhi.n	8001290 <loopMain+0x5c>
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <loopMain+0x8c>)
 8001242:	7813      	ldrb	r3, [r2, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	7013      	strb	r3, [r2, #0]
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <loopMain+0x90>)
 800124c:	2101      	movs	r1, #1
 800124e:	54d1      	strb	r1, [r2, r3]
    CEXCEPTION_T e;
    Try {
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <loopMain+0x94>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	a803      	add	r0, sp, #12
 8001258:	6098      	str	r0, [r3, #8]
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <loopMain+0x98>)
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	f7fe ff53 	bl	8000108 <setjmp>
 8001262:	2800      	cmp	r0, #0
 8001264:	d018      	beq.n	8001298 <loopMain+0x64>
        uint32_t ticks = HAL_GetTick();
        loopUavCan();
        loopDebug(ticks);
        loopImu(ticks);
    } Catch(e) {}
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <loopMain+0x94>)
 8001268:	3308      	adds	r3, #8
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <loopMain+0x94>)
 800126e:	9a01      	ldr	r2, [sp, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <loopMain+0x8c>)
 8001274:	7811      	ldrb	r1, [r2, #0]
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <loopMain+0x90>)
 8001278:	5c52      	ldrb	r2, [r2, r1]
 800127a:	00d2      	lsls	r2, r2, #3
 800127c:	189b      	adds	r3, r3, r2
 800127e:	685b      	ldr	r3, [r3, #4]
    END_THREAD_EXCEPTION();
 8001280:	2900      	cmp	r1, #0
 8001282:	d018      	beq.n	80012b6 <loopMain+0x82>
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <loopMain+0x8c>)
 8001286:	7813      	ldrb	r3, [r2, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	7013      	strb	r3, [r2, #0]
}
 800128c:	b01a      	add	sp, #104	; 0x68
 800128e:	bd10      	pop	{r4, pc}
    START_THREAD_EXCEPTION(MAIN_THREAD_ID);
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <loopMain+0x9c>)
 8001292:	f000 f851 	bl	8001338 <softAssertTmp>
 8001296:	e7d3      	b.n	8001240 <loopMain+0xc>
        uint32_t ticks = HAL_GetTick();
 8001298:	f004 f924 	bl	80054e4 <HAL_GetTick>
 800129c:	0004      	movs	r4, r0
        loopUavCan();
 800129e:	f001 fed7 	bl	8003050 <loopUavCan>
        loopDebug(ticks);
 80012a2:	0020      	movs	r0, r4
 80012a4:	f002 f8be 	bl	8003424 <loopDebug>
        loopImu(ticks);
 80012a8:	0020      	movs	r0, r4
 80012aa:	f002 faff 	bl	80038ac <loopImu>
    } Catch(e) {}
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <loopMain+0x94>)
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <loopMain+0x98>)
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	e7da      	b.n	800126c <loopMain+0x38>
    END_THREAD_EXCEPTION();
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <loopMain+0xa0>)
 80012b8:	f000 f83e 	bl	8001338 <softAssertTmp>
 80012bc:	e7e2      	b.n	8001284 <loopMain+0x50>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	20000284 	.word	0x20000284
 80012c4:	20000280 	.word	0x20000280
 80012c8:	20000260 	.word	0x20000260
 80012cc:	5a5a5a5a 	.word	0x5a5a5a5a
 80012d0:	0800759c 	.word	0x0800759c
 80012d4:	080075b8 	.word	0x080075b8

080012d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012d8:	b510      	push	{r4, lr}
    static uint16_t count = 0;
    if (htim == &htim17) {
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012dc:	4283      	cmp	r3, r0
 80012de:	d000      	beq.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0xa>
            // Every 1ms
        	count = 0;
            loopMain();
        }
    }
}
 80012e0:	bd10      	pop	{r4, pc}
        loopRawCan();
 80012e2:	f001 fea1 	bl	8003028 <loopRawCan>
        count++;
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012e8:	8813      	ldrh	r3, [r2, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	8013      	strh	r3, [r2, #0]
        if (count == 10) {
 80012f0:	2b0a      	cmp	r3, #10
 80012f2:	d1f5      	bne.n	80012e0 <HAL_TIM_PeriodElapsedCallback+0x8>
        	count = 0;
 80012f4:	0013      	movs	r3, r2
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
            loopMain();
 80012fa:	f7ff ff9b 	bl	8001234 <loopMain>
}
 80012fe:	e7ef      	b.n	80012e0 <HAL_TIM_PeriodElapsedCallback+0x8>
 8001300:	20000c44 	.word	0x20000c44
 8001304:	2000025c 	.word	0x2000025c

08001308 <Throw>:

//------------------------------------------------------------------------------------------
//  Throw
//------------------------------------------------------------------------------------------
void Throw(CEXCEPTION_T ExceptionID)
{
 8001308:	b510      	push	{r4, lr}
    unsigned int MY_ID = CEXCEPTION_GET_ID;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <Throw+0x24>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <Throw+0x28>)
 8001310:	5cd1      	ldrb	r1, [r2, r3]
    CExceptionFrames[MY_ID].Exception = ExceptionID;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <Throw+0x2c>)
 8001314:	00ca      	lsls	r2, r1, #3
 8001316:	189c      	adds	r4, r3, r2
 8001318:	6060      	str	r0, [r4, #4]
    if (CExceptionFrames[MY_ID].pFrame)
 800131a:	58d3      	ldr	r3, [r2, r3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d100      	bne.n	8001322 <Throw+0x1a>
    {
        longjmp(*CExceptionFrames[MY_ID].pFrame, 1);
    }
    CEXCEPTION_NO_CATCH_HANDLER(ExceptionID);
}
 8001320:	bd10      	pop	{r4, pc}
        longjmp(*CExceptionFrames[MY_ID].pFrame, 1);
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <Throw+0x2c>)
 8001324:	58d0      	ldr	r0, [r2, r3]
 8001326:	2101      	movs	r1, #1
 8001328:	f7fe fefa 	bl	8000120 <longjmp>
 800132c:	20000284 	.word	0x20000284
 8001330:	20000280 	.word	0x20000280
 8001334:	20000260 	.word	0x20000260

08001338 <softAssertTmp>:

char assertBuffer[ASSERT_BUFFER_SIZE] = {};
uint16_t assertBufferIndex = 0;
uint16_t assertCount = 0;

void softAssertTmp(char * msg) {
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	0006      	movs	r6, r0
	assertCount++;
 800133c:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <softAssertTmp+0x38>)
 800133e:	8813      	ldrh	r3, [r2, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	8013      	strh	r3, [r2, #0]
	if (ASSERT_BUFFER_SIZE > 1) {
		uint32_t length = strlen(msg);
 8001344:	f7fe fefa 	bl	800013c <strlen>
		// Change last end of string to new line
		assertBuffer[assertBufferIndex] = '\n';
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <softAssertTmp+0x3c>)
 800134a:	881c      	ldrh	r4, [r3, #0]
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <softAssertTmp+0x40>)
 800134e:	220a      	movs	r2, #10
 8001350:	551a      	strb	r2, [r3, r4]
		// Copy message into buffer and add a newline
		length = MIN(length, ASSERT_BUFFER_SIZE - assertBufferIndex -1);
 8001352:	2531      	movs	r5, #49	; 0x31
 8001354:	1b2d      	subs	r5, r5, r4
 8001356:	4285      	cmp	r5, r0
 8001358:	d900      	bls.n	800135c <softAssertTmp+0x24>
 800135a:	0005      	movs	r5, r0
		memcpy(&assertBuffer[assertBufferIndex], msg, length);
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <softAssertTmp+0x40>)
 800135e:	1900      	adds	r0, r0, r4
 8001360:	002a      	movs	r2, r5
 8001362:	0031      	movs	r1, r6
 8001364:	f006 f890 	bl	8007488 <memcpy>
		assertBufferIndex += length;
 8001368:	1964      	adds	r4, r4, r5
 800136a:	4b02      	ldr	r3, [pc, #8]	; (8001374 <softAssertTmp+0x3c>)
 800136c:	801c      	strh	r4, [r3, #0]
	}
}
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	200002bc 	.word	0x200002bc
 8001374:	200002ba 	.word	0x200002ba
 8001378:	20000288 	.word	0x20000288

0800137c <hardAssertTmp>:

void hardAssertTmp(char * msg) {
 800137c:	b510      	push	{r4, lr}
	softAssertTmp(msg);
 800137e:	f7ff ffdb 	bl	8001338 <softAssertTmp>
	Throw(GENERAL_EXCEPTION);
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff ffc0 	bl	8001308 <Throw>
}
 8001388:	bd10      	pop	{r4, pc}

0800138a <addCommandToPacket>:
    memcpy(&packet->data[packet->size], bytes, numBytes);
    packet->size += numBytes;
    return 0;
}

static int8_t addCommandToPacket(sFieldPacket * packet, uint8_t discriminator, uint32_t parameter) {
 800138a:	b530      	push	{r4, r5, lr}
    if(packet->size + 5 > packet->maxSize)
 800138c:	8883      	ldrh	r3, [r0, #4]
 800138e:	1d1d      	adds	r5, r3, #4
 8001390:	88c4      	ldrh	r4, [r0, #6]
 8001392:	42a5      	cmp	r5, r4
 8001394:	da2b      	bge.n	80013ee <addCommandToPacket+0x64>
        return -1;
    uint8_t * data = &packet->data[packet->size];
 8001396:	6804      	ldr	r4, [r0, #0]
 8001398:	46a4      	mov	ip, r4
 800139a:	4463      	add	r3, ip
    if (parameter  <= 0xFF) {
 800139c:	2aff      	cmp	r2, #255	; 0xff
 800139e:	d808      	bhi.n	80013b2 <addCommandToPacket+0x28>
        data[0] = discriminator | 1;
 80013a0:	2401      	movs	r4, #1
 80013a2:	4321      	orrs	r1, r4
 80013a4:	7019      	strb	r1, [r3, #0]
        *(data + 1) = parameter & 0xFF;
 80013a6:	705a      	strb	r2, [r3, #1]
        packet->size += 2;
 80013a8:	8883      	ldrh	r3, [r0, #4]
 80013aa:	3302      	adds	r3, #2
 80013ac:	8083      	strh	r3, [r0, #4]
        *(data + 2) = (parameter >> 8) & 0xFF;
        *(data + 3) = (parameter >> 16) & 0xFF;
        *(data + 4) = (parameter >> 24) & 0xFF;
        packet->size += 5;
    }
    return 0;
 80013ae:	2000      	movs	r0, #0
}
 80013b0:	bd30      	pop	{r4, r5, pc}
    } else if (parameter  <= 0xFFFF) {
 80013b2:	2480      	movs	r4, #128	; 0x80
 80013b4:	0264      	lsls	r4, r4, #9
 80013b6:	42a2      	cmp	r2, r4
 80013b8:	d20a      	bcs.n	80013d0 <addCommandToPacket+0x46>
        data[0] = discriminator | 2;
 80013ba:	2402      	movs	r4, #2
 80013bc:	4321      	orrs	r1, r4
 80013be:	7019      	strb	r1, [r3, #0]
        *(data + 1) = parameter & 0xFF;
 80013c0:	705a      	strb	r2, [r3, #1]
        *(data + 2) = (parameter >> 8) & 0xFF;
 80013c2:	0a12      	lsrs	r2, r2, #8
 80013c4:	709a      	strb	r2, [r3, #2]
        packet->size += 3;
 80013c6:	8883      	ldrh	r3, [r0, #4]
 80013c8:	3303      	adds	r3, #3
 80013ca:	8083      	strh	r3, [r0, #4]
    return 0;
 80013cc:	2000      	movs	r0, #0
 80013ce:	e7ef      	b.n	80013b0 <addCommandToPacket+0x26>
        data[0] = discriminator | 4;
 80013d0:	2404      	movs	r4, #4
 80013d2:	4321      	orrs	r1, r4
 80013d4:	7019      	strb	r1, [r3, #0]
        *(data + 1) = parameter & 0xFF;
 80013d6:	705a      	strb	r2, [r3, #1]
        *(data + 2) = (parameter >> 8) & 0xFF;
 80013d8:	0a11      	lsrs	r1, r2, #8
 80013da:	7099      	strb	r1, [r3, #2]
        *(data + 3) = (parameter >> 16) & 0xFF;
 80013dc:	0c11      	lsrs	r1, r2, #16
 80013de:	70d9      	strb	r1, [r3, #3]
        *(data + 4) = (parameter >> 24) & 0xFF;
 80013e0:	0e12      	lsrs	r2, r2, #24
 80013e2:	711a      	strb	r2, [r3, #4]
        packet->size += 5;
 80013e4:	8883      	ldrh	r3, [r0, #4]
 80013e6:	3305      	adds	r3, #5
 80013e8:	8083      	strh	r3, [r0, #4]
    return 0;
 80013ea:	2000      	movs	r0, #0
 80013ec:	e7e0      	b.n	80013b0 <addCommandToPacket+0x26>
        return -1;
 80013ee:	2001      	movs	r0, #1
 80013f0:	4240      	negs	r0, r0
 80013f2:	e7dd      	b.n	80013b0 <addCommandToPacket+0x26>

080013f4 <addSkipToPacket>:
    if (addBytesToPacket(packet, fieldData, fieldDataSize) < 0)
        return -1;
    return 0;
}

static int8_t addSkipToPacket(sFieldPacket * packet, uint32_t numToSkip) {
 80013f4:	b510      	push	{r4, lr}
 80013f6:	000a      	movs	r2, r1
    return addCommandToPacket(packet, AF_COMMAND_DISCRIMINATOR_SKIP_FIELDS, numToSkip);
 80013f8:	2110      	movs	r1, #16
 80013fa:	f7ff ffc6 	bl	800138a <addCommandToPacket>
}
 80013fe:	bd10      	pop	{r4, pc}

08001400 <addSendingFieldsToPacket>:

static int8_t addSendingFieldsToPacket(sFieldPacket * packet, uint32_t numFields) {
 8001400:	b510      	push	{r4, lr}
 8001402:	000a      	movs	r2, r1
    return addCommandToPacket(packet, AF_COMMAND_DISCRIMINATOR_SENDING_N_FIELDS, numFields);
 8001404:	2100      	movs	r1, #0
 8001406:	f7ff ffc0 	bl	800138a <addCommandToPacket>
}
 800140a:	bd10      	pop	{r4, pc}

0800140c <readCommand>:
static void readCommand(uint8_t * data, uint8_t dataLength, uint8_t * bytePos, uint8_t * discriminator, uint32_t * parameter) {
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	0015      	movs	r5, r2
    *discriminator = data[*bytePos] & 0xF0;
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	5c82      	ldrb	r2, [r0, r2]
 8001414:	210f      	movs	r1, #15
 8001416:	438a      	bics	r2, r1
 8001418:	701a      	strb	r2, [r3, #0]
    uint8_t parameterLength = data[*bytePos] & 0x0F;
 800141a:	782b      	ldrb	r3, [r5, #0]
 800141c:	5cc2      	ldrb	r2, [r0, r3]
 800141e:	240f      	movs	r4, #15
 8001420:	4014      	ands	r4, r2
    (*bytePos)++;
 8001422:	3301      	adds	r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	702b      	strb	r3, [r5, #0]
    uint8_t * ptr = data + *bytePos;
 8001428:	18c3      	adds	r3, r0, r3
    switch (parameterLength) {
 800142a:	2c02      	cmp	r4, #2
 800142c:	d01e      	beq.n	800146c <readCommand+0x60>
 800142e:	d807      	bhi.n	8001440 <readCommand+0x34>
 8001430:	2c00      	cmp	r4, #0
 8001432:	d014      	beq.n	800145e <readCommand+0x52>
 8001434:	2c01      	cmp	r4, #1
 8001436:	d120      	bne.n	800147a <readCommand+0x6e>
            *parameter = ptr[0];
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	9a04      	ldr	r2, [sp, #16]
 800143c:	6013      	str	r3, [r2, #0]
            break;
 800143e:	e011      	b.n	8001464 <readCommand+0x58>
    switch (parameterLength) {
 8001440:	2c04      	cmp	r4, #4
 8001442:	d11a      	bne.n	800147a <readCommand+0x6e>
            *parameter = ptr[0] | ((ptr[1] << 8) & 0xFF00) | ((ptr[2] << 16) & 0xFF0000) | ((ptr[3] << 24) & 0xFF000000);
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	7859      	ldrb	r1, [r3, #1]
 8001448:	0209      	lsls	r1, r1, #8
 800144a:	430a      	orrs	r2, r1
 800144c:	7899      	ldrb	r1, [r3, #2]
 800144e:	0409      	lsls	r1, r1, #16
 8001450:	430a      	orrs	r2, r1
 8001452:	78db      	ldrb	r3, [r3, #3]
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	4313      	orrs	r3, r2
 8001458:	9a04      	ldr	r2, [sp, #16]
 800145a:	6013      	str	r3, [r2, #0]
            break;
 800145c:	e002      	b.n	8001464 <readCommand+0x58>
            *parameter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	9a04      	ldr	r2, [sp, #16]
 8001462:	6013      	str	r3, [r2, #0]
    (*bytePos) += parameterLength;
 8001464:	782b      	ldrb	r3, [r5, #0]
 8001466:	18e4      	adds	r4, r4, r3
 8001468:	702c      	strb	r4, [r5, #0]
}
 800146a:	bd70      	pop	{r4, r5, r6, pc}
            *parameter = ptr[0] | ((ptr[1] << 8) & 0xFF00);
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	4313      	orrs	r3, r2
 8001474:	9a04      	ldr	r2, [sp, #16]
 8001476:	6013      	str	r3, [r2, #0]
            break;
 8001478:	e7f4      	b.n	8001464 <readCommand+0x58>
            hardAssert(0, "Unsupported parameter length");
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <readCommand+0x78>)
 800147c:	f7ff ff7e 	bl	800137c <hardAssertTmp>
 8001480:	e7f0      	b.n	8001464 <readCommand+0x58>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	080075d4 	.word	0x080075d4

08001488 <addBytesToPacket>:
static int8_t addBytesToPacket(sFieldPacket * packet, uint8_t * bytes, uint16_t numBytes) {
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	0004      	movs	r4, r0
 800148c:	0015      	movs	r5, r2
    if(packet->size + numBytes >= packet->maxSize)
 800148e:	8880      	ldrh	r0, [r0, #4]
 8001490:	1812      	adds	r2, r2, r0
 8001492:	88e3      	ldrh	r3, [r4, #6]
 8001494:	429a      	cmp	r2, r3
 8001496:	da0a      	bge.n	80014ae <addBytesToPacket+0x26>
    memcpy(&packet->data[packet->size], bytes, numBytes);
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	469c      	mov	ip, r3
 800149c:	4460      	add	r0, ip
 800149e:	002a      	movs	r2, r5
 80014a0:	f005 fff2 	bl	8007488 <memcpy>
    packet->size += numBytes;
 80014a4:	88a2      	ldrh	r2, [r4, #4]
 80014a6:	18ad      	adds	r5, r5, r2
 80014a8:	80a5      	strh	r5, [r4, #4]
    return 0;
 80014aa:	2000      	movs	r0, #0
}
 80014ac:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 80014ae:	2001      	movs	r0, #1
 80014b0:	4240      	negs	r0, r0
 80014b2:	e7fb      	b.n	80014ac <addBytesToPacket+0x24>

080014b4 <addVariableLengthFieldDataToPacket>:
static int8_t addVariableLengthFieldDataToPacket(sFieldPacket * packet, uint8_t * fieldData, uint8_t fieldDataSize) {
 80014b4:	b530      	push	{r4, r5, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	0004      	movs	r4, r0
 80014ba:	000d      	movs	r5, r1
 80014bc:	466b      	mov	r3, sp
 80014be:	1dd9      	adds	r1, r3, #7
 80014c0:	700a      	strb	r2, [r1, #0]
    if (addBytesToPacket(packet, &fieldDataSize, 1) < 0)
 80014c2:	2201      	movs	r2, #1
 80014c4:	f7ff ffe0 	bl	8001488 <addBytesToPacket>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	db0a      	blt.n	80014e2 <addVariableLengthFieldDataToPacket+0x2e>
    if (addBytesToPacket(packet, fieldData, fieldDataSize) < 0)
 80014cc:	466b      	mov	r3, sp
 80014ce:	79da      	ldrb	r2, [r3, #7]
 80014d0:	0029      	movs	r1, r5
 80014d2:	0020      	movs	r0, r4
 80014d4:	f7ff ffd8 	bl	8001488 <addBytesToPacket>
 80014d8:	2800      	cmp	r0, #0
 80014da:	db05      	blt.n	80014e8 <addVariableLengthFieldDataToPacket+0x34>
    return 0;
 80014dc:	2000      	movs	r0, #0
}
 80014de:	b003      	add	sp, #12
 80014e0:	bd30      	pop	{r4, r5, pc}
        return -1;
 80014e2:	2001      	movs	r0, #1
 80014e4:	4240      	negs	r0, r0
 80014e6:	e7fa      	b.n	80014de <addVariableLengthFieldDataToPacket+0x2a>
        return -1;
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f7      	b.n	80014de <addVariableLengthFieldDataToPacket+0x2a>
	...

080014f0 <addToMetaDataFieldToPacket>:
            hardAssert(0, "Unsupported discriminator");
        }
    }
}

static uint8_t addToMetaDataFieldToPacket(sFieldPacket * packet, eMetaDataFieldIndex * packetFieldIndex, eMetaDataFieldIndex fieldIndex, uint8_t * value) {
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	46c6      	mov	lr, r8
 80014f4:	b500      	push	{lr}
 80014f6:	0006      	movs	r6, r0
 80014f8:	000f      	movs	r7, r1
 80014fa:	0015      	movs	r5, r2
 80014fc:	4698      	mov	r8, r3
    int8_t res = 0;
    if (fieldIndex > *packetFieldIndex)
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	4291      	cmp	r1, r2
 8001502:	d31a      	bcc.n	800153a <addToMetaDataFieldToPacket+0x4a>
    int8_t res = 0;
 8001504:	2400      	movs	r4, #0
        res |= addSkipToPacket(packet, fieldIndex - *packetFieldIndex);
    addSendingFieldsToPacket(packet, 1);
 8001506:	2101      	movs	r1, #1
 8001508:	0030      	movs	r0, r6
 800150a:	f7ff ff79 	bl	8001400 <addSendingFieldsToPacket>
    if (metaFieldSize[fieldIndex] == 0) {
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <addToMetaDataFieldToPacket+0x64>)
 8001510:	5d5a      	ldrb	r2, [r3, r5]
 8001512:	2a00      	cmp	r2, #0
 8001514:	d116      	bne.n	8001544 <addToMetaDataFieldToPacket+0x54>
        res |= addVariableLengthFieldDataToPacket(packet, value, strlen((char *) value));
 8001516:	4640      	mov	r0, r8
 8001518:	f7fe fe10 	bl	800013c <strlen>
 800151c:	b2c2      	uxtb	r2, r0
 800151e:	4641      	mov	r1, r8
 8001520:	0030      	movs	r0, r6
 8001522:	f7ff ffc7 	bl	80014b4 <addVariableLengthFieldDataToPacket>
 8001526:	4320      	orrs	r0, r4
 8001528:	b240      	sxtb	r0, r0
    } else {
        res |= addBytesToPacket(packet, value, metaFieldSize[fieldIndex]);
    }
    *packetFieldIndex = fieldIndex + 1;
 800152a:	3501      	adds	r5, #1
 800152c:	703d      	strb	r5, [r7, #0]
    return (res != 0); // Return true if full
 800152e:	1e43      	subs	r3, r0, #1
 8001530:	4198      	sbcs	r0, r3
 8001532:	b2c0      	uxtb	r0, r0
}
 8001534:	bc80      	pop	{r7}
 8001536:	46b8      	mov	r8, r7
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res |= addSkipToPacket(packet, fieldIndex - *packetFieldIndex);
 800153a:	1a51      	subs	r1, r2, r1
 800153c:	f7ff ff5a 	bl	80013f4 <addSkipToPacket>
 8001540:	0004      	movs	r4, r0
 8001542:	e7e0      	b.n	8001506 <addToMetaDataFieldToPacket+0x16>
        res |= addBytesToPacket(packet, value, metaFieldSize[fieldIndex]);
 8001544:	b292      	uxth	r2, r2
 8001546:	4641      	mov	r1, r8
 8001548:	0030      	movs	r0, r6
 800154a:	f7ff ff9d 	bl	8001488 <addBytesToPacket>
 800154e:	4320      	orrs	r0, r4
 8001550:	b240      	sxtb	r0, r0
 8001552:	e7ea      	b.n	800152a <addToMetaDataFieldToPacket+0x3a>
 8001554:	08007770 	.word	0x08007770

08001558 <addComponentFieldTableToGlobalTable>:
void addComponentFieldTableToGlobalTable(sFieldInfoEntry * table, uint32_t tableSize) {
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	46ce      	mov	lr, r9
 800155c:	4647      	mov	r7, r8
 800155e:	b580      	push	{r7, lr}
 8001560:	0007      	movs	r7, r0
 8001562:	4689      	mov	r9, r1
    for (uint8_t i=0; i<numComponents; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	4a39      	ldr	r2, [pc, #228]	; (800164c <addComponentFieldTableToGlobalTable+0xf4>)
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d907      	bls.n	800157e <addComponentFieldTableToGlobalTable+0x26>
        if (componentTables[i] == table)
 800156e:	009a      	lsls	r2, r3, #2
 8001570:	4937      	ldr	r1, [pc, #220]	; (8001650 <addComponentFieldTableToGlobalTable+0xf8>)
 8001572:	5852      	ldr	r2, [r2, r1]
 8001574:	42ba      	cmp	r2, r7
 8001576:	d063      	beq.n	8001640 <addComponentFieldTableToGlobalTable+0xe8>
    for (uint8_t i=0; i<numComponents; i++) {
 8001578:	3301      	adds	r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	e7f3      	b.n	8001566 <addComponentFieldTableToGlobalTable+0xe>
    if (numComponents >= MAX_COMPONENTS_PER_PROJECT) {
 800157e:	2a09      	cmp	r2, #9
 8001580:	d802      	bhi.n	8001588 <addComponentFieldTableToGlobalTable+0x30>
    for (field_t k=0; k<tableSize; k++) {
 8001582:	2300      	movs	r3, #0
 8001584:	4698      	mov	r8, r3
 8001586:	e02e      	b.n	80015e6 <addComponentFieldTableToGlobalTable+0x8e>
        softAssert(0, "Exceeded MAX_COMPONENTS_PER_PROJECT");
 8001588:	4832      	ldr	r0, [pc, #200]	; (8001654 <addComponentFieldTableToGlobalTable+0xfc>)
 800158a:	f7ff fed5 	bl	8001338 <softAssertTmp>
        return;
 800158e:	e057      	b.n	8001640 <addComponentFieldTableToGlobalTable+0xe8>
                    softAssert(otherField->startFieldIndex + otherField->span <= newField->startFieldIndex, "Fields indicies overlap");
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	18d2      	adds	r2, r2, r3
 8001594:	4291      	cmp	r1, r2
 8001596:	d317      	bcc.n	80015c8 <addComponentFieldTableToGlobalTable+0x70>
            for (field_t j=0; j<componentTableSizes[i]; j++) {
 8001598:	3401      	adds	r4, #1
 800159a:	00ab      	lsls	r3, r5, #2
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <addComponentFieldTableToGlobalTable+0x100>)
 800159e:	589b      	ldr	r3, [r3, r2]
 80015a0:	42a3      	cmp	r3, r4
 80015a2:	d915      	bls.n	80015d0 <addComponentFieldTableToGlobalTable+0x78>
                sFieldInfoEntry * otherField = &componentTables[i][j];
 80015a4:	00ab      	lsls	r3, r5, #2
 80015a6:	4a2a      	ldr	r2, [pc, #168]	; (8001650 <addComponentFieldTableToGlobalTable+0xf8>)
 80015a8:	589b      	ldr	r3, [r3, r2]
 80015aa:	0162      	lsls	r2, r4, #5
 80015ac:	189b      	adds	r3, r3, r2
                if (newField->startFieldIndex < otherField->startFieldIndex) {
 80015ae:	68b1      	ldr	r1, [r6, #8]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	4291      	cmp	r1, r2
 80015b4:	d2ec      	bcs.n	8001590 <addComponentFieldTableToGlobalTable+0x38>
                    softAssert(newField->startFieldIndex + newField->span <= otherField->startFieldIndex, "Fields indicies overlap");
 80015b6:	68f3      	ldr	r3, [r6, #12]
 80015b8:	469c      	mov	ip, r3
 80015ba:	4461      	add	r1, ip
 80015bc:	428a      	cmp	r2, r1
 80015be:	d2eb      	bcs.n	8001598 <addComponentFieldTableToGlobalTable+0x40>
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <addComponentFieldTableToGlobalTable+0x104>)
 80015c2:	f7ff feb9 	bl	8001338 <softAssertTmp>
 80015c6:	e7e7      	b.n	8001598 <addComponentFieldTableToGlobalTable+0x40>
                    softAssert(otherField->startFieldIndex + otherField->span <= newField->startFieldIndex, "Fields indicies overlap");
 80015c8:	4824      	ldr	r0, [pc, #144]	; (800165c <addComponentFieldTableToGlobalTable+0x104>)
 80015ca:	f7ff feb5 	bl	8001338 <softAssertTmp>
 80015ce:	e7e3      	b.n	8001598 <addComponentFieldTableToGlobalTable+0x40>
        for (uint8_t i=0; i<numComponents; i++) {
 80015d0:	3501      	adds	r5, #1
 80015d2:	b2ed      	uxtb	r5, r5
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <addComponentFieldTableToGlobalTable+0xf4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	42ab      	cmp	r3, r5
 80015da:	d901      	bls.n	80015e0 <addComponentFieldTableToGlobalTable+0x88>
            for (field_t j=0; j<componentTableSizes[i]; j++) {
 80015dc:	2400      	movs	r4, #0
 80015de:	e7dc      	b.n	800159a <addComponentFieldTableToGlobalTable+0x42>
    for (field_t k=0; k<tableSize; k++) {
 80015e0:	2301      	movs	r3, #1
 80015e2:	469c      	mov	ip, r3
 80015e4:	44e0      	add	r8, ip
 80015e6:	45c8      	cmp	r8, r9
 80015e8:	d204      	bcs.n	80015f4 <addComponentFieldTableToGlobalTable+0x9c>
        sFieldInfoEntry * newField = &table[k];
 80015ea:	4643      	mov	r3, r8
 80015ec:	015e      	lsls	r6, r3, #5
 80015ee:	19be      	adds	r6, r7, r6
        for (uint8_t i=0; i<numComponents; i++) {
 80015f0:	2500      	movs	r5, #0
 80015f2:	e7ef      	b.n	80015d4 <addComponentFieldTableToGlobalTable+0x7c>
    uint8_t i = 0;
 80015f4:	2300      	movs	r3, #0
    for (; i<numComponents; i++) {
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <addComponentFieldTableToGlobalTable+0xf4>)
 80015f8:	7815      	ldrb	r5, [r2, #0]
 80015fa:	429d      	cmp	r5, r3
 80015fc:	d909      	bls.n	8001612 <addComponentFieldTableToGlobalTable+0xba>
        if (table[0].startFieldIndex < componentTables[i][0].startFieldIndex) {
 80015fe:	009a      	lsls	r2, r3, #2
 8001600:	4913      	ldr	r1, [pc, #76]	; (8001650 <addComponentFieldTableToGlobalTable+0xf8>)
 8001602:	5852      	ldr	r2, [r2, r1]
 8001604:	6892      	ldr	r2, [r2, #8]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	4291      	cmp	r1, r2
 800160a:	d31d      	bcc.n	8001648 <addComponentFieldTableToGlobalTable+0xf0>
    for (; i<numComponents; i++) {
 800160c:	3301      	adds	r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	e7f1      	b.n	80015f6 <addComponentFieldTableToGlobalTable+0x9e>
 8001612:	002a      	movs	r2, r5
 8001614:	e009      	b.n	800162a <addComponentFieldTableToGlobalTable+0xd2>
        componentTables[j] = componentTables[j-1];
 8001616:	1e51      	subs	r1, r2, #1
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <addComponentFieldTableToGlobalTable+0xf8>)
 800161a:	008c      	lsls	r4, r1, #2
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	5826      	ldr	r6, [r4, r0]
 8001620:	5016      	str	r6, [r2, r0]
        componentTableSizes[j] = componentTableSizes[j-1];
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <addComponentFieldTableToGlobalTable+0x100>)
 8001624:	5824      	ldr	r4, [r4, r0]
 8001626:	5014      	str	r4, [r2, r0]
    for (uint8_t j=numComponents; j>i; j--) {
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	4293      	cmp	r3, r2
 800162c:	d3f3      	bcc.n	8001616 <addComponentFieldTableToGlobalTable+0xbe>
    componentTables[i] = table;
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <addComponentFieldTableToGlobalTable+0xf8>)
 8001632:	509f      	str	r7, [r3, r2]
    componentTableSizes[i] = tableSize;
 8001634:	4a08      	ldr	r2, [pc, #32]	; (8001658 <addComponentFieldTableToGlobalTable+0x100>)
 8001636:	4649      	mov	r1, r9
 8001638:	5099      	str	r1, [r3, r2]
    numComponents++;
 800163a:	3501      	adds	r5, #1
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <addComponentFieldTableToGlobalTable+0xf4>)
 800163e:	701d      	strb	r5, [r3, #0]
}
 8001640:	bcc0      	pop	{r6, r7}
 8001642:	46b9      	mov	r9, r7
 8001644:	46b0      	mov	r8, r6
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001648:	002a      	movs	r2, r5
 800164a:	e7ee      	b.n	800162a <addComponentFieldTableToGlobalTable+0xd2>
 800164c:	20000414 	.word	0x20000414
 8001650:	200002e8 	.word	0x200002e8
 8001654:	080075f4 	.word	0x080075f4
 8001658:	200002c0 	.word	0x200002c0
 800165c:	08007618 	.word	0x08007618

08001660 <getFieldInfo>:
const sFieldInfoEntry * getFieldInfo(field_t fieldIndex) {
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	0004      	movs	r4, r0
    sFieldInfoEntry * table = componentTables[numComponents-1];
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <getFieldInfo+0x78>)
 8001666:	781f      	ldrb	r7, [r3, #0]
 8001668:	1e7b      	subs	r3, r7, #1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <getFieldInfo+0x7c>)
 800166e:	589d      	ldr	r5, [r3, r2]
    uint32_t tableSize = componentTableSizes[numComponents-1];
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <getFieldInfo+0x80>)
 8001672:	589e      	ldr	r6, [r3, r2]
    for (uint8_t i=0; i<numComponents; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	e001      	b.n	800167c <getFieldInfo+0x1c>
 8001678:	3301      	adds	r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	429f      	cmp	r7, r3
 800167e:	d90d      	bls.n	800169c <getFieldInfo+0x3c>
        if (fieldIndex < componentTables[i][0].startFieldIndex) {
 8001680:	0019      	movs	r1, r3
 8001682:	009a      	lsls	r2, r3, #2
 8001684:	4815      	ldr	r0, [pc, #84]	; (80016dc <getFieldInfo+0x7c>)
 8001686:	5812      	ldr	r2, [r2, r0]
 8001688:	6892      	ldr	r2, [r2, #8]
 800168a:	42a2      	cmp	r2, r4
 800168c:	d9f4      	bls.n	8001678 <getFieldInfo+0x18>
            if (i == 0) {
 800168e:	2b00      	cmp	r3, #0
 8001690:	d020      	beq.n	80016d4 <getFieldInfo+0x74>
                table = componentTables[i-1];
 8001692:	3901      	subs	r1, #1
 8001694:	0089      	lsls	r1, r1, #2
 8001696:	580d      	ldr	r5, [r1, r0]
                tableSize = componentTableSizes[i-1];
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <getFieldInfo+0x80>)
 800169a:	58ce      	ldr	r6, [r1, r3]
    softAssert(table, "");
 800169c:	2d00      	cmp	r5, #0
 800169e:	d002      	beq.n	80016a6 <getFieldInfo+0x46>
   uint32_t last = tableSize - 1;
 80016a0:	1e71      	subs	r1, r6, #1
   uint32_t first = 0;
 80016a2:	2600      	movs	r6, #0
   while (first <= last) {
 80016a4:	e009      	b.n	80016ba <getFieldInfo+0x5a>
    softAssert(table, "");
 80016a6:	480f      	ldr	r0, [pc, #60]	; (80016e4 <getFieldInfo+0x84>)
 80016a8:	f7ff fe46 	bl	8001338 <softAssertTmp>
 80016ac:	e7f8      	b.n	80016a0 <getFieldInfo+0x40>
        } else if (fieldIndex < middleEntry->startFieldIndex + middleEntry->span) {
 80016ae:	68c6      	ldr	r6, [r0, #12]
 80016b0:	46b4      	mov	ip, r6
 80016b2:	4462      	add	r2, ip
 80016b4:	42a2      	cmp	r2, r4
 80016b6:	d80c      	bhi.n	80016d2 <getFieldInfo+0x72>
           first = middle + 1;
 80016b8:	1c5e      	adds	r6, r3, #1
   while (first <= last) {
 80016ba:	428e      	cmp	r6, r1
 80016bc:	d808      	bhi.n	80016d0 <getFieldInfo+0x70>
       uint32_t middle = (first+last)/2;
 80016be:	1873      	adds	r3, r6, r1
 80016c0:	085b      	lsrs	r3, r3, #1
        const sFieldInfoEntry * middleEntry = &table[middle];
 80016c2:	0158      	lsls	r0, r3, #5
 80016c4:	1828      	adds	r0, r5, r0
        if (fieldIndex < (middleEntry->startFieldIndex)) {
 80016c6:	6882      	ldr	r2, [r0, #8]
 80016c8:	42a2      	cmp	r2, r4
 80016ca:	d9f0      	bls.n	80016ae <getFieldInfo+0x4e>
           last = middle - 1;
 80016cc:	1e59      	subs	r1, r3, #1
 80016ce:	e7f4      	b.n	80016ba <getFieldInfo+0x5a>
    return NULL;
 80016d0:	2000      	movs	r0, #0
}
 80016d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return NULL;
 80016d4:	2000      	movs	r0, #0
 80016d6:	e7fc      	b.n	80016d2 <getFieldInfo+0x72>
 80016d8:	20000414 	.word	0x20000414
 80016dc:	200002e8 	.word	0x200002e8
 80016e0:	200002c0 	.word	0x200002c0
 80016e4:	08007b90 	.word	0x08007b90

080016e8 <addMultiFieldDataToPacket>:
                                        field_t endFieldIndex, uint8_t * data, uint32_t numDataBytes) {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	46d6      	mov	lr, sl
 80016ec:	464f      	mov	r7, r9
 80016ee:	4646      	mov	r6, r8
 80016f0:	b5c0      	push	{r6, r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	4680      	mov	r8, r0
 80016f6:	000c      	movs	r4, r1
 80016f8:	0016      	movs	r6, r2
 80016fa:	001f      	movs	r7, r3
 80016fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016fe:	4699      	mov	r9, r3
    if (startFieldIndex > (*nextPacketFieldIndex))
 8001700:	6809      	ldr	r1, [r1, #0]
 8001702:	4291      	cmp	r1, r2
 8001704:	d306      	bcc.n	8001714 <addMultiFieldDataToPacket+0x2c>
    *nextPacketFieldIndex = endFieldIndex;
 8001706:	6027      	str	r7, [r4, #0]
    addSendingFieldsToPacket(packet, endFieldIndex + 1 - startFieldIndex);
 8001708:	1bb9      	subs	r1, r7, r6
 800170a:	3101      	adds	r1, #1
 800170c:	4640      	mov	r0, r8
 800170e:	f7ff fe77 	bl	8001400 <addSendingFieldsToPacket>
    for (field_t fieldIndex=startFieldIndex; fieldIndex<=endFieldIndex;) {
 8001712:	e00f      	b.n	8001734 <addMultiFieldDataToPacket+0x4c>
        addSkipToPacket(packet, startFieldIndex - *nextPacketFieldIndex );
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	f7ff fe6d 	bl	80013f4 <addSkipToPacket>
 800171a:	e7f4      	b.n	8001706 <addMultiFieldDataToPacket+0x1e>
        hardAssert(fieldInfo != NULL, "Inv field index");
 800171c:	4831      	ldr	r0, [pc, #196]	; (80017e4 <addMultiFieldDataToPacket+0xfc>)
 800171e:	f7ff fe2d 	bl	800137c <hardAssertTmp>
 8001722:	e00e      	b.n	8001742 <addMultiFieldDataToPacket+0x5a>
            softAssert(addBytesToPacket(packet, data, numDataBytes) == 0, "Not enough memory for packet");
 8001724:	b28a      	uxth	r2, r1
 8001726:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001728:	4640      	mov	r0, r8
 800172a:	f7ff fead 	bl	8001488 <addBytesToPacket>
 800172e:	2800      	cmp	r0, #0
 8001730:	d126      	bne.n	8001780 <addMultiFieldDataToPacket+0x98>
        fieldIndex = tmpEndFieldIndex + 1;
 8001732:	1c6e      	adds	r6, r5, #1
    for (field_t fieldIndex=startFieldIndex; fieldIndex<=endFieldIndex;) {
 8001734:	42be      	cmp	r6, r7
 8001736:	d84e      	bhi.n	80017d6 <addMultiFieldDataToPacket+0xee>
        const sFieldInfoEntry * fieldInfo = getFieldInfo(fieldIndex);
 8001738:	0030      	movs	r0, r6
 800173a:	f7ff ff91 	bl	8001660 <getFieldInfo>
 800173e:	1e04      	subs	r4, r0, #0
        hardAssert(fieldInfo != NULL, "Inv field index");
 8001740:	d0ec      	beq.n	800171c <addMultiFieldDataToPacket+0x34>
        field_t fieldOffset = fieldIndex - fieldInfo->startFieldIndex;
 8001742:	68a2      	ldr	r2, [r4, #8]
 8001744:	1ab3      	subs	r3, r6, r2
        field_t tmpEndFieldIndex = MIN((fieldInfo->startFieldIndex + fieldInfo->span - 1), endFieldIndex);
 8001746:	68e1      	ldr	r1, [r4, #12]
 8001748:	1855      	adds	r5, r2, r1
 800174a:	3d01      	subs	r5, #1
 800174c:	42bd      	cmp	r5, r7
 800174e:	d900      	bls.n	8001752 <addMultiFieldDataToPacket+0x6a>
 8001750:	003d      	movs	r5, r7
        if (numDataBytes > 0) {
 8001752:	4649      	mov	r1, r9
 8001754:	2900      	cmp	r1, #0
 8001756:	d1e5      	bne.n	8001724 <addMultiFieldDataToPacket+0x3c>
        } else if (!fieldInfo->getFieldFn) {
 8001758:	69e1      	ldr	r1, [r4, #28]
 800175a:	468a      	mov	sl, r1
 800175c:	2900      	cmp	r1, #0
 800175e:	d013      	beq.n	8001788 <addMultiFieldDataToPacket+0xa0>
            fieldInfo->getFieldFn(fieldInfo, fieldIndex, fieldIndex, value);
 8001760:	466b      	mov	r3, sp
 8001762:	0032      	movs	r2, r6
 8001764:	0031      	movs	r1, r6
 8001766:	0020      	movs	r0, r4
 8001768:	47d0      	blx	sl
            softAssert(addBytesToPacket(packet, value, fieldInfo->size) == 0, "Not enough memory for packet");
 800176a:	7c62      	ldrb	r2, [r4, #17]
 800176c:	4669      	mov	r1, sp
 800176e:	4640      	mov	r0, r8
 8001770:	f7ff fe8a 	bl	8001488 <addBytesToPacket>
 8001774:	2800      	cmp	r0, #0
 8001776:	d0dc      	beq.n	8001732 <addMultiFieldDataToPacket+0x4a>
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <addMultiFieldDataToPacket+0x100>)
 800177a:	f7ff fddd 	bl	8001338 <softAssertTmp>
 800177e:	e7d8      	b.n	8001732 <addMultiFieldDataToPacket+0x4a>
            softAssert(addBytesToPacket(packet, data, numDataBytes) == 0, "Not enough memory for packet");
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <addMultiFieldDataToPacket+0x100>)
 8001782:	f7ff fdd9 	bl	8001338 <softAssertTmp>
 8001786:	e7d4      	b.n	8001732 <addMultiFieldDataToPacket+0x4a>
            field_t numFields = tmpEndFieldIndex - fieldInfo->startFieldIndex + 1;
 8001788:	1aae      	subs	r6, r5, r2
 800178a:	3601      	adds	r6, #1
            uint32_t numBytes = numFields * fieldInfo->size;
 800178c:	7c62      	ldrb	r2, [r4, #17]
 800178e:	4356      	muls	r6, r2
            if (fieldInfo->field == NULL) {
 8001790:	6821      	ldr	r1, [r4, #0]
 8001792:	2900      	cmp	r1, #0
 8001794:	d01d      	beq.n	80017d2 <addMultiFieldDataToPacket+0xea>
                void * fieldPtr = (void *) (((uint8_t *) fieldInfo->field) + (fieldInfo->size * fieldOffset));
 8001796:	4353      	muls	r3, r2
 8001798:	18c9      	adds	r1, r1, r3
                softAssert(addBytesToPacket(packet, fieldPtr, numBytes) == 0, "Not enough memory for packet");
 800179a:	b2b2      	uxth	r2, r6
 800179c:	4640      	mov	r0, r8
 800179e:	f7ff fe73 	bl	8001488 <addBytesToPacket>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d0c5      	beq.n	8001732 <addMultiFieldDataToPacket+0x4a>
 80017a6:	4810      	ldr	r0, [pc, #64]	; (80017e8 <addMultiFieldDataToPacket+0x100>)
 80017a8:	f7ff fdc6 	bl	8001338 <softAssertTmp>
 80017ac:	e7c1      	b.n	8001732 <addMultiFieldDataToPacket+0x4a>
                for (uint16_t i=0; i<numBytes; i++) {
 80017ae:	3401      	adds	r4, #1
 80017b0:	b2a4      	uxth	r4, r4
 80017b2:	42b4      	cmp	r4, r6
 80017b4:	d2bd      	bcs.n	8001732 <addMultiFieldDataToPacket+0x4a>
                    uint8_t tmp = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	466a      	mov	r2, sp
 80017ba:	7013      	strb	r3, [r2, #0]
                    softAssert(addBytesToPacket(packet, &tmp, numBytes) == 0, "Not enough memory for packet");
 80017bc:	b2b2      	uxth	r2, r6
 80017be:	4669      	mov	r1, sp
 80017c0:	4640      	mov	r0, r8
 80017c2:	f7ff fe61 	bl	8001488 <addBytesToPacket>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d0f1      	beq.n	80017ae <addMultiFieldDataToPacket+0xc6>
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <addMultiFieldDataToPacket+0x100>)
 80017cc:	f7ff fdb4 	bl	8001338 <softAssertTmp>
 80017d0:	e7ed      	b.n	80017ae <addMultiFieldDataToPacket+0xc6>
                for (uint16_t i=0; i<numBytes; i++) {
 80017d2:	2400      	movs	r4, #0
 80017d4:	e7ed      	b.n	80017b2 <addMultiFieldDataToPacket+0xca>
}
 80017d6:	b002      	add	sp, #8
 80017d8:	bce0      	pop	{r5, r6, r7}
 80017da:	46ba      	mov	sl, r7
 80017dc:	46b1      	mov	r9, r6
 80017de:	46a8      	mov	r8, r5
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	08007630 	.word	0x08007630
 80017e8:	08007640 	.word	0x08007640

080017ec <createFieldPacket>:
static sFieldPacket * createFieldPacket(field_t startFieldIndex, field_t endFieldIndex) {
 80017ec:	b530      	push	{r4, r5, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	0002      	movs	r2, r0
 80017f2:	000b      	movs	r3, r1
    globalPacket.size = 0;
 80017f4:	4d06      	ldr	r5, [pc, #24]	; (8001810 <createFieldPacket+0x24>)
 80017f6:	2400      	movs	r4, #0
 80017f8:	80ac      	strh	r4, [r5, #4]
    field_t nextPacketFieldIndex = 0;
 80017fa:	9403      	str	r4, [sp, #12]
    addMultiFieldDataToPacket(&globalPacket, &nextPacketFieldIndex, startFieldIndex, endFieldIndex, NULL, 0);
 80017fc:	9401      	str	r4, [sp, #4]
 80017fe:	9400      	str	r4, [sp, #0]
 8001800:	a903      	add	r1, sp, #12
 8001802:	0028      	movs	r0, r5
 8001804:	f7ff ff70 	bl	80016e8 <addMultiFieldDataToPacket>
}
 8001808:	0028      	movs	r0, r5
 800180a:	b005      	add	sp, #20
 800180c:	bd30      	pop	{r4, r5, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	20000000 	.word	0x20000000

08001814 <getNextValidMetaDataFieldInfo>:
const sFieldInfoEntry * getNextValidMetaDataFieldInfo(field_t fieldIndex, field_t metaDataFieldIndex, field_t * validFieldIndex, field_t * validMetaDataFieldIndex) {
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	46c6      	mov	lr, r8
 8001818:	b500      	push	{lr}
 800181a:	0007      	movs	r7, r0
 800181c:	4690      	mov	r8, r2
 800181e:	469c      	mov	ip, r3
    for (uint8_t t=0; t<numComponents; t++) {
 8001820:	2600      	movs	r6, #0
 8001822:	481d      	ldr	r0, [pc, #116]	; (8001898 <getNextValidMetaDataFieldInfo+0x84>)
 8001824:	7800      	ldrb	r0, [r0, #0]
 8001826:	42b0      	cmp	r0, r6
 8001828:	d933      	bls.n	8001892 <getNextValidMetaDataFieldInfo+0x7e>
        for (uint32_t f=0; f<componentTableSizes[t]; f++) {
 800182a:	2500      	movs	r5, #0
 800182c:	e007      	b.n	800183e <getNextValidMetaDataFieldInfo+0x2a>
                field_t maxMetaDataField = (extra && extra->numFields > 0) ? extra->fields[extra->numFields-1].index : (NUM_FIELD_INFO_FIELDS-1);
 800182e:	2403      	movs	r4, #3
 8001830:	e000      	b.n	8001834 <getNextValidMetaDataFieldInfo+0x20>
 8001832:	2403      	movs	r4, #3
                if (fieldIndex < field->startFieldIndex) {
 8001834:	42bb      	cmp	r3, r7
 8001836:	d81c      	bhi.n	8001872 <getNextValidMetaDataFieldInfo+0x5e>
                } else if (metaDataFieldIndex > maxMetaDataField) {
 8001838:	428c      	cmp	r4, r1
 800183a:	d222      	bcs.n	8001882 <getNextValidMetaDataFieldInfo+0x6e>
        for (uint32_t f=0; f<componentTableSizes[t]; f++) {
 800183c:	3501      	adds	r5, #1
 800183e:	00b4      	lsls	r4, r6, #2
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <getNextValidMetaDataFieldInfo+0x88>)
 8001842:	5824      	ldr	r4, [r4, r0]
 8001844:	42ac      	cmp	r4, r5
 8001846:	d921      	bls.n	800188c <getNextValidMetaDataFieldInfo+0x78>
            sFieldInfoEntry * field = &componentTables[t][f];
 8001848:	00b4      	lsls	r4, r6, #2
 800184a:	4815      	ldr	r0, [pc, #84]	; (80018a0 <getNextValidMetaDataFieldInfo+0x8c>)
 800184c:	5824      	ldr	r4, [r4, r0]
 800184e:	0168      	lsls	r0, r5, #5
 8001850:	1820      	adds	r0, r4, r0
            if (fieldIndex < (field->startFieldIndex + field->span)) {
 8001852:	6883      	ldr	r3, [r0, #8]
 8001854:	68c2      	ldr	r2, [r0, #12]
 8001856:	189c      	adds	r4, r3, r2
 8001858:	42bc      	cmp	r4, r7
 800185a:	d9ef      	bls.n	800183c <getNextValidMetaDataFieldInfo+0x28>
                sExtraMetaDataFields * extra = field->extraMetaData;
 800185c:	6944      	ldr	r4, [r0, #20]
                field_t maxMetaDataField = (extra && extra->numFields > 0) ? extra->fields[extra->numFields-1].index : (NUM_FIELD_INFO_FIELDS-1);
 800185e:	2c00      	cmp	r4, #0
 8001860:	d0e5      	beq.n	800182e <getNextValidMetaDataFieldInfo+0x1a>
 8001862:	7822      	ldrb	r2, [r4, #0]
 8001864:	2a00      	cmp	r2, #0
 8001866:	d0e4      	beq.n	8001832 <getNextValidMetaDataFieldInfo+0x1e>
 8001868:	3a01      	subs	r2, #1
 800186a:	00d2      	lsls	r2, r2, #3
 800186c:	18a4      	adds	r4, r4, r2
 800186e:	7924      	ldrb	r4, [r4, #4]
 8001870:	e7e0      	b.n	8001834 <getNextValidMetaDataFieldInfo+0x20>
                    *validFieldIndex = field->startFieldIndex;
 8001872:	4642      	mov	r2, r8
 8001874:	6013      	str	r3, [r2, #0]
                    *validMetaDataFieldIndex = 0;
 8001876:	2200      	movs	r2, #0
 8001878:	4663      	mov	r3, ip
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bc80      	pop	{r7}
 800187e:	46b8      	mov	r8, r7
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *validFieldIndex = fieldIndex;
 8001882:	4643      	mov	r3, r8
 8001884:	601f      	str	r7, [r3, #0]
                    *validMetaDataFieldIndex = metaDataFieldIndex;
 8001886:	4663      	mov	r3, ip
 8001888:	6019      	str	r1, [r3, #0]
                    return field;
 800188a:	e7f7      	b.n	800187c <getNextValidMetaDataFieldInfo+0x68>
    for (uint8_t t=0; t<numComponents; t++) {
 800188c:	3601      	adds	r6, #1
 800188e:	b2f6      	uxtb	r6, r6
 8001890:	e7c7      	b.n	8001822 <getNextValidMetaDataFieldInfo+0xe>
    return NULL;
 8001892:	2000      	movs	r0, #0
 8001894:	e7f2      	b.n	800187c <getNextValidMetaDataFieldInfo+0x68>
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	20000414 	.word	0x20000414
 800189c:	200002c0 	.word	0x200002c0
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <broadcastFields>:
void broadcastFields(field_t startFieldIndex, field_t endFieldIndex) {
 80018a4:	b510      	push	{r4, lr}
    sFieldPacket * packet = createFieldPacket(startFieldIndex, endFieldIndex);
 80018a6:	f7ff ffa1 	bl	80017ec <createFieldPacket>
    broadcastFieldsPacket(packet->data, packet->size);
 80018aa:	8881      	ldrh	r1, [r0, #4]
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	f001 fcf5 	bl	800329c <broadcastFieldsPacket>
}
 80018b2:	bd10      	pop	{r4, pc}

080018b4 <afProtocolProcessRx>:
void afProtocolProcessRx(uint8_t * data, uint8_t dataLength) {
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	46de      	mov	lr, fp
 80018b8:	4657      	mov	r7, sl
 80018ba:	464e      	mov	r6, r9
 80018bc:	4645      	mov	r5, r8
 80018be:	b5e0      	push	{r5, r6, r7, lr}
 80018c0:	b087      	sub	sp, #28
 80018c2:	4682      	mov	sl, r0
 80018c4:	4688      	mov	r8, r1
    uint8_t bytePos = 0;
 80018c6:	2317      	movs	r3, #23
 80018c8:	446b      	add	r3, sp
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    field_t fieldIndex = 0;
 80018ce:	2400      	movs	r4, #0
    while (bytePos < dataLength) {
 80018d0:	e06c      	b.n	80019ac <afProtocolProcessRx+0xf8>
                field_t endFieldIndex = fieldIndex + parameter;
 80018d2:	9b04      	ldr	r3, [sp, #16]
 80018d4:	191f      	adds	r7, r3, r4
                while (fieldIndex < endFieldIndex) {
 80018d6:	e038      	b.n	800194a <afProtocolProcessRx+0x96>
                        fieldInfo = getFieldInfo(fieldIndex);
 80018d8:	0020      	movs	r0, r4
 80018da:	f7ff fec1 	bl	8001660 <getFieldInfo>
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <afProtocolProcessRx+0x13c>)
 80018e0:	6018      	str	r0, [r3, #0]
                        hardAssert(fieldInfo, "Invalid field index");
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d040      	beq.n	8001968 <afProtocolProcessRx+0xb4>
                        hardAssert(fieldInfo->size > 0, "setFields - Variable field length not supported");
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <afProtocolProcessRx+0x13c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	7c5b      	ldrb	r3, [r3, #17]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03f      	beq.n	8001970 <afProtocolProcessRx+0xbc>
                    field_t fieldOffset = fieldIndex - fieldInfo->startFieldIndex;
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <afProtocolProcessRx+0x13c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689d      	ldr	r5, [r3, #8]
 80018f6:	1b62      	subs	r2, r4, r5
 80018f8:	4691      	mov	r9, r2
                    field_t numFields = MIN((endFieldIndex - fieldIndex), (fieldInfo->span - fieldOffset));
 80018fa:	1b2d      	subs	r5, r5, r4
 80018fc:	1b3a      	subs	r2, r7, r4
 80018fe:	68d9      	ldr	r1, [r3, #12]
 8001900:	468c      	mov	ip, r1
 8001902:	4465      	add	r5, ip
 8001904:	4295      	cmp	r5, r2
 8001906:	d900      	bls.n	800190a <afProtocolProcessRx+0x56>
 8001908:	0015      	movs	r5, r2
                    uint32_t numBytes = fieldInfo->size * numFields;
 800190a:	7c5e      	ldrb	r6, [r3, #17]
 800190c:	436e      	muls	r6, r5
                    hardAssert(bytePos + numBytes <= dataLength, "Set fields overflowed!");
 800190e:	2317      	movs	r3, #23
 8001910:	446b      	add	r3, sp
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	199b      	adds	r3, r3, r6
 8001916:	4543      	cmp	r3, r8
 8001918:	d82e      	bhi.n	8001978 <afProtocolProcessRx+0xc4>
                    if (fieldInfo->setFieldFn) {
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <afProtocolProcessRx+0x13c>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	6983      	ldr	r3, [r0, #24]
 8001920:	469b      	mov	fp, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02c      	beq.n	8001980 <afProtocolProcessRx+0xcc>
                        fieldInfo->setFieldFn(fieldInfo, fieldIndex, fieldIndex+numFields, &data[bytePos]);
 8001926:	2317      	movs	r3, #23
 8001928:	446b      	add	r3, sp
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4453      	add	r3, sl
 800192e:	1962      	adds	r2, r4, r5
 8001930:	0021      	movs	r1, r4
 8001932:	47d8      	blx	fp
                    if (!DONT_REPLY_TO_SET(fieldInfo->flags)) {
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <afProtocolProcessRx+0x13c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	7c9b      	ldrb	r3, [r3, #18]
 800193a:	075b      	lsls	r3, r3, #29
 800193c:	d52d      	bpl.n	800199a <afProtocolProcessRx+0xe6>
                    bytePos += numBytes;
 800193e:	2217      	movs	r2, #23
 8001940:	446a      	add	r2, sp
 8001942:	7813      	ldrb	r3, [r2, #0]
 8001944:	199e      	adds	r6, r3, r6
 8001946:	7016      	strb	r6, [r2, #0]
                    fieldIndex += numFields;
 8001948:	1964      	adds	r4, r4, r5
                while (fieldIndex < endFieldIndex) {
 800194a:	42bc      	cmp	r4, r7
 800194c:	d22e      	bcs.n	80019ac <afProtocolProcessRx+0xf8>
                    if ((fieldIndex < fieldInfo->startFieldIndex || fieldIndex >= fieldInfo->startFieldIndex + fieldInfo->span) || (fieldInfo == NULL)) {
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <afProtocolProcessRx+0x13c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	6893      	ldr	r3, [r2, #8]
 8001954:	42a3      	cmp	r3, r4
 8001956:	d8bf      	bhi.n	80018d8 <afProtocolProcessRx+0x24>
 8001958:	68d1      	ldr	r1, [r2, #12]
 800195a:	468c      	mov	ip, r1
 800195c:	4463      	add	r3, ip
 800195e:	42a3      	cmp	r3, r4
 8001960:	d9ba      	bls.n	80018d8 <afProtocolProcessRx+0x24>
 8001962:	2a00      	cmp	r2, #0
 8001964:	d1c4      	bne.n	80018f0 <afProtocolProcessRx+0x3c>
 8001966:	e7b7      	b.n	80018d8 <afProtocolProcessRx+0x24>
                        hardAssert(fieldInfo, "Invalid field index");
 8001968:	4822      	ldr	r0, [pc, #136]	; (80019f4 <afProtocolProcessRx+0x140>)
 800196a:	f7ff fd07 	bl	800137c <hardAssertTmp>
 800196e:	e7ba      	b.n	80018e6 <afProtocolProcessRx+0x32>
                        hardAssert(fieldInfo->size > 0, "setFields - Variable field length not supported");
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <afProtocolProcessRx+0x144>)
 8001972:	f7ff fd03 	bl	800137c <hardAssertTmp>
 8001976:	e7bb      	b.n	80018f0 <afProtocolProcessRx+0x3c>
                    hardAssert(bytePos + numBytes <= dataLength, "Set fields overflowed!");
 8001978:	4820      	ldr	r0, [pc, #128]	; (80019fc <afProtocolProcessRx+0x148>)
 800197a:	f7ff fcff 	bl	800137c <hardAssertTmp>
 800197e:	e7cc      	b.n	800191a <afProtocolProcessRx+0x66>
                        void * fieldPtr = (((uint8_t *) fieldInfo->field) + (fieldInfo->size * fieldOffset));
 8001980:	6803      	ldr	r3, [r0, #0]
 8001982:	7c40      	ldrb	r0, [r0, #17]
 8001984:	464a      	mov	r2, r9
 8001986:	4342      	muls	r2, r0
 8001988:	1898      	adds	r0, r3, r2
                        memcpy(fieldPtr, &data[bytePos], numBytes);
 800198a:	2317      	movs	r3, #23
 800198c:	446b      	add	r3, sp
 800198e:	7819      	ldrb	r1, [r3, #0]
 8001990:	4451      	add	r1, sl
 8001992:	0032      	movs	r2, r6
 8001994:	f005 fd78 	bl	8007488 <memcpy>
 8001998:	e7cc      	b.n	8001934 <afProtocolProcessRx+0x80>
                        broadcastFields(fieldIndex, fieldIndex + numFields - 1);
 800199a:	1961      	adds	r1, r4, r5
 800199c:	3901      	subs	r1, #1
 800199e:	0020      	movs	r0, r4
 80019a0:	f7ff ff80 	bl	80018a4 <broadcastFields>
 80019a4:	e7cb      	b.n	800193e <afProtocolProcessRx+0x8a>
                hardAssert(0, "Invalid discriminator");
 80019a6:	4816      	ldr	r0, [pc, #88]	; (8001a00 <afProtocolProcessRx+0x14c>)
 80019a8:	f7ff fce8 	bl	800137c <hardAssertTmp>
    while (bytePos < dataLength) {
 80019ac:	2317      	movs	r3, #23
 80019ae:	446b      	add	r3, sp
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4543      	cmp	r3, r8
 80019b4:	d214      	bcs.n	80019e0 <afProtocolProcessRx+0x12c>
        readCommand(data, dataLength, &bytePos, &discriminator, &parameter);
 80019b6:	250f      	movs	r5, #15
 80019b8:	446d      	add	r5, sp
 80019ba:	ab04      	add	r3, sp, #16
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	002b      	movs	r3, r5
 80019c0:	2217      	movs	r2, #23
 80019c2:	446a      	add	r2, sp
 80019c4:	4641      	mov	r1, r8
 80019c6:	4650      	mov	r0, sl
 80019c8:	f7ff fd20 	bl	800140c <readCommand>
        switch (discriminator) {
 80019cc:	782b      	ldrb	r3, [r5, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <afProtocolProcessRx+0x120>
 80019d2:	e77e      	b.n	80018d2 <afProtocolProcessRx+0x1e>
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d1e6      	bne.n	80019a6 <afProtocolProcessRx+0xf2>
                fieldIndex += parameter;
 80019d8:	9b04      	ldr	r3, [sp, #16]
 80019da:	469c      	mov	ip, r3
 80019dc:	4464      	add	r4, ip
                break;
 80019de:	e7e5      	b.n	80019ac <afProtocolProcessRx+0xf8>
}
 80019e0:	b007      	add	sp, #28
 80019e2:	bcf0      	pop	{r4, r5, r6, r7}
 80019e4:	46bb      	mov	fp, r7
 80019e6:	46b2      	mov	sl, r6
 80019e8:	46a9      	mov	r9, r5
 80019ea:	46a0      	mov	r8, r4
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	20000310 	.word	0x20000310
 80019f4:	08007660 	.word	0x08007660
 80019f8:	08007674 	.word	0x08007674
 80019fc:	080076a4 	.word	0x080076a4
 8001a00:	080076bc 	.word	0x080076bc

08001a04 <publishFieldsIfBelowBandwidth>:
int8_t publishFieldsIfBelowBandwidth(field_t startFieldIndex, field_t endFieldIndex) {
 8001a04:	b510      	push	{r4, lr}
    sFieldPacket * packet = createFieldPacket(startFieldIndex, endFieldIndex);
 8001a06:	f7ff fef1 	bl	80017ec <createFieldPacket>
    return publishFieldPacketIfBelowBandwidth(packet->data, packet->size);
 8001a0a:	8881      	ldrh	r1, [r0, #4]
 8001a0c:	6800      	ldr	r0, [r0, #0]
 8001a0e:	f001 fc77 	bl	8003300 <publishFieldPacketIfBelowBandwidth>
}
 8001a12:	bd10      	pop	{r4, pc}

08001a14 <parseFrameForMetaDataFieldIndex>:
void parseFrameForMetaDataFieldIndex(uint8_t * data, uint8_t dataLength, field_t * fieldIndex, field_t * subFieldIndex) {
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	46ce      	mov	lr, r9
 8001a18:	4647      	mov	r7, r8
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	0007      	movs	r7, r0
 8001a20:	000e      	movs	r6, r1
 8001a22:	4690      	mov	r8, r2
 8001a24:	4699      	mov	r9, r3
    uint8_t discriminator = 0; // Don't need to be initialised but avoid compiler warnings
 8001a26:	2300      	movs	r3, #0
 8001a28:	2217      	movs	r2, #23
 8001a2a:	446a      	add	r2, sp
 8001a2c:	7013      	strb	r3, [r2, #0]
    uint32_t parameter = 0; // Don't need to be initialised but avoid compiler warnings
 8001a2e:	9304      	str	r3, [sp, #16]
    uint8_t bytePos=0;
 8001a30:	220f      	movs	r2, #15
 8001a32:	446a      	add	r2, sp
 8001a34:	7013      	strb	r3, [r2, #0]
    uint8_t numFieldIndicies = 0;
 8001a36:	2500      	movs	r5, #0
    while ( bytePos < dataLength) {
 8001a38:	e017      	b.n	8001a6a <parseFrameForMetaDataFieldIndex+0x56>
            if (numFieldIndicies == 0) {
 8001a3a:	2d00      	cmp	r5, #0
 8001a3c:	d107      	bne.n	8001a4e <parseFrameForMetaDataFieldIndex+0x3a>
                (*fieldIndex) += parameter;
 8001a3e:	4643      	mov	r3, r8
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	9a04      	ldr	r2, [sp, #16]
 8001a44:	4694      	mov	ip, r2
 8001a46:	4463      	add	r3, ip
 8001a48:	4642      	mov	r2, r8
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e00d      	b.n	8001a6a <parseFrameForMetaDataFieldIndex+0x56>
            } else if (numFieldIndicies == 1) {
 8001a4e:	2d01      	cmp	r5, #1
 8001a50:	d10b      	bne.n	8001a6a <parseFrameForMetaDataFieldIndex+0x56>
                (*subFieldIndex) += parameter;
 8001a52:	464b      	mov	r3, r9
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	9a04      	ldr	r2, [sp, #16]
 8001a58:	4694      	mov	ip, r2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	464a      	mov	r2, r9
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e003      	b.n	8001a6a <parseFrameForMetaDataFieldIndex+0x56>
            hardAssert(numFieldIndicies < 2, "More levels of meta data requested than expected");
 8001a62:	2d01      	cmp	r5, #1
 8001a64:	d81d      	bhi.n	8001aa2 <parseFrameForMetaDataFieldIndex+0x8e>
            numFieldIndicies++;
 8001a66:	3501      	adds	r5, #1
 8001a68:	b2ed      	uxtb	r5, r5
    while ( bytePos < dataLength) {
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	446b      	add	r3, sp
 8001a6e:	7819      	ldrb	r1, [r3, #0]
 8001a70:	42b1      	cmp	r1, r6
 8001a72:	d21e      	bcs.n	8001ab2 <parseFrameForMetaDataFieldIndex+0x9e>
        readCommand(data, dataLength, &bytePos, &discriminator, &parameter);
 8001a74:	2417      	movs	r4, #23
 8001a76:	446c      	add	r4, sp
 8001a78:	ab04      	add	r3, sp, #16
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	0023      	movs	r3, r4
 8001a7e:	220f      	movs	r2, #15
 8001a80:	446a      	add	r2, sp
 8001a82:	0031      	movs	r1, r6
 8001a84:	0038      	movs	r0, r7
 8001a86:	f7ff fcc1 	bl	800140c <readCommand>
        if (discriminator == AF_COMMAND_DISCRIMINATOR_SKIP_FIELDS) {
 8001a8a:	7824      	ldrb	r4, [r4, #0]
 8001a8c:	2c10      	cmp	r4, #16
 8001a8e:	d0d4      	beq.n	8001a3a <parseFrameForMetaDataFieldIndex+0x26>
        } else if (discriminator == AF_COMMAND_DISCRIMINATOR_SENDING_N_FIELDS) {
 8001a90:	2c00      	cmp	r4, #0
 8001a92:	d10a      	bne.n	8001aaa <parseFrameForMetaDataFieldIndex+0x96>
            hardAssert(parameter == 1, "");
 8001a94:	9b04      	ldr	r3, [sp, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d0e3      	beq.n	8001a62 <parseFrameForMetaDataFieldIndex+0x4e>
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <parseFrameForMetaDataFieldIndex+0xa8>)
 8001a9c:	f7ff fc6e 	bl	800137c <hardAssertTmp>
 8001aa0:	e7df      	b.n	8001a62 <parseFrameForMetaDataFieldIndex+0x4e>
            hardAssert(numFieldIndicies < 2, "More levels of meta data requested than expected");
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <parseFrameForMetaDataFieldIndex+0xac>)
 8001aa4:	f7ff fc6a 	bl	800137c <hardAssertTmp>
 8001aa8:	e7dd      	b.n	8001a66 <parseFrameForMetaDataFieldIndex+0x52>
            hardAssert(0, "Unsupported discriminator");
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <parseFrameForMetaDataFieldIndex+0xb0>)
 8001aac:	f7ff fc66 	bl	800137c <hardAssertTmp>
 8001ab0:	e7db      	b.n	8001a6a <parseFrameForMetaDataFieldIndex+0x56>
}
 8001ab2:	b007      	add	sp, #28
 8001ab4:	bcc0      	pop	{r6, r7}
 8001ab6:	46b9      	mov	r9, r7
 8001ab8:	46b0      	mov	r8, r6
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	08007b90 	.word	0x08007b90
 8001ac0:	080076d4 	.word	0x080076d4
 8001ac4:	08007708 	.word	0x08007708

08001ac8 <createMetaDataPacket>:

void createMetaDataPacket(sFieldPacket * packet, field_t startFieldIndex, field_t startMetaDataFieldIndex) {
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	0006      	movs	r6, r0
 8001ace:	0008      	movs	r0, r1
 8001ad0:	0011      	movs	r1, r2
    packet->size = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	80b3      	strh	r3, [r6, #4]
    field_t fieldIndex;
    field_t metaDataFieldIndex;
    const sFieldInfoEntry * fieldInfo = getNextValidMetaDataFieldInfo(startFieldIndex, startMetaDataFieldIndex, &fieldIndex, &metaDataFieldIndex);
 8001ad6:	ab02      	add	r3, sp, #8
 8001ad8:	aa03      	add	r2, sp, #12
 8001ada:	f7ff fe9b 	bl	8001814 <getNextValidMetaDataFieldInfo>
 8001ade:	1e04      	subs	r4, r0, #0
    if (fieldInfo == NULL) {
 8001ae0:	d052      	beq.n	8001b88 <createMetaDataPacket+0xc0>
    // if (fieldIndex >= 60000) {
    //     softAssert(0, "");
    // }

    // Skip to the field and start sending meta data fields
    if (fieldIndex > 0)
 8001ae2:	9903      	ldr	r1, [sp, #12]
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	d11c      	bne.n	8001b22 <createMetaDataPacket+0x5a>
        addSkipToPacket(packet, fieldIndex);
    addSendingFieldsToPacket(packet, 1);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	0030      	movs	r0, r6
 8001aec:	f7ff fc88 	bl	8001400 <addSendingFieldsToPacket>
    
    uint8_t packetFull = 0;
    eMetaDataFieldIndex packetMetaFieldIndex = 0;
 8001af0:	466b      	mov	r3, sp
 8001af2:	2200      	movs	r2, #0
 8001af4:	71da      	strb	r2, [r3, #7]
    if (NAME >= metaDataFieldIndex) {
 8001af6:	9b02      	ldr	r3, [sp, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d016      	beq.n	8001b2a <createMetaDataPacket+0x62>
        addSendingFieldsToPacket(packet, 1);
        addVariableLengthFieldDataToPacket(packet, (uint8_t *) fieldInfo->name, strlen(fieldInfo->name));
        packetMetaFieldIndex = 1;
    }
    if (TYPE >= metaDataFieldIndex)
 8001afc:	9b02      	ldr	r3, [sp, #8]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d924      	bls.n	8001b4c <createMetaDataPacket+0x84>
    uint8_t packetFull = 0;
 8001b02:	2000      	movs	r0, #0
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, TYPE, (uint8_t *) &fieldInfo->type);
    if ((SIZE >= metaDataFieldIndex) && !packetFull)
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d801      	bhi.n	8001b0e <createMetaDataPacket+0x46>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d027      	beq.n	8001b5e <createMetaDataPacket+0x96>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SIZE, (uint8_t *) &fieldInfo->size);
    if ((SPAN >= metaDataFieldIndex) && !packetFull)
 8001b0e:	9b02      	ldr	r3, [sp, #8]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d801      	bhi.n	8001b18 <createMetaDataPacket+0x50>
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d02b      	beq.n	8001b70 <createMetaDataPacket+0xa8>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SPAN, (uint8_t *) &fieldInfo->span);
    sExtraMetaDataFields * extraMetaData = fieldInfo->extraMetaData;
 8001b18:	6965      	ldr	r5, [r4, #20]
    if (extraMetaData) {
 8001b1a:	2d00      	cmp	r5, #0
 8001b1c:	d051      	beq.n	8001bc2 <createMetaDataPacket+0xfa>
        for (eMetaDataFieldIndex i=0; i<extraMetaData->numFields; i++) {
 8001b1e:	2400      	movs	r4, #0
 8001b20:	e036      	b.n	8001b90 <createMetaDataPacket+0xc8>
        addSkipToPacket(packet, fieldIndex);
 8001b22:	0030      	movs	r0, r6
 8001b24:	f7ff fc66 	bl	80013f4 <addSkipToPacket>
 8001b28:	e7de      	b.n	8001ae8 <createMetaDataPacket+0x20>
        addSendingFieldsToPacket(packet, 1);
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	0030      	movs	r0, r6
 8001b2e:	f7ff fc67 	bl	8001400 <addSendingFieldsToPacket>
        addVariableLengthFieldDataToPacket(packet, (uint8_t *) fieldInfo->name, strlen(fieldInfo->name));
 8001b32:	6865      	ldr	r5, [r4, #4]
 8001b34:	0028      	movs	r0, r5
 8001b36:	f7fe fb01 	bl	800013c <strlen>
 8001b3a:	b2c2      	uxtb	r2, r0
 8001b3c:	0029      	movs	r1, r5
 8001b3e:	0030      	movs	r0, r6
 8001b40:	f7ff fcb8 	bl	80014b4 <addVariableLengthFieldDataToPacket>
        packetMetaFieldIndex = 1;
 8001b44:	466b      	mov	r3, sp
 8001b46:	2201      	movs	r2, #1
 8001b48:	71da      	strb	r2, [r3, #7]
 8001b4a:	e7d7      	b.n	8001afc <createMetaDataPacket+0x34>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, TYPE, (uint8_t *) &fieldInfo->type);
 8001b4c:	0023      	movs	r3, r4
 8001b4e:	3310      	adds	r3, #16
 8001b50:	2201      	movs	r2, #1
 8001b52:	4669      	mov	r1, sp
 8001b54:	3107      	adds	r1, #7
 8001b56:	0030      	movs	r0, r6
 8001b58:	f7ff fcca 	bl	80014f0 <addToMetaDataFieldToPacket>
 8001b5c:	e7d2      	b.n	8001b04 <createMetaDataPacket+0x3c>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SIZE, (uint8_t *) &fieldInfo->size);
 8001b5e:	0023      	movs	r3, r4
 8001b60:	3311      	adds	r3, #17
 8001b62:	2202      	movs	r2, #2
 8001b64:	4669      	mov	r1, sp
 8001b66:	3107      	adds	r1, #7
 8001b68:	0030      	movs	r0, r6
 8001b6a:	f7ff fcc1 	bl	80014f0 <addToMetaDataFieldToPacket>
 8001b6e:	e7ce      	b.n	8001b0e <createMetaDataPacket+0x46>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SPAN, (uint8_t *) &fieldInfo->span);
 8001b70:	0023      	movs	r3, r4
 8001b72:	330c      	adds	r3, #12
 8001b74:	2203      	movs	r2, #3
 8001b76:	4669      	mov	r1, sp
 8001b78:	3107      	adds	r1, #7
 8001b7a:	0030      	movs	r0, r6
 8001b7c:	f7ff fcb8 	bl	80014f0 <addToMetaDataFieldToPacket>
 8001b80:	e7ca      	b.n	8001b18 <createMetaDataPacket+0x50>
            if (extraMetaData->fields[i].index < packetMetaFieldIndex) {
                softAssert(0, "Meta data fields need to be in order");
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <createMetaDataPacket+0x10c>)
 8001b84:	f7ff fbd8 	bl	8001338 <softAssertTmp>
            }
        }
    }
    if (packetFull && packet->size == 0)
        softAssert(0, "Failed to fit any data in packet");
}
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
        for (eMetaDataFieldIndex i=0; i<extraMetaData->numFields; i++) {
 8001b8c:	3401      	adds	r4, #1
 8001b8e:	b2e4      	uxtb	r4, r4
 8001b90:	782b      	ldrb	r3, [r5, #0]
 8001b92:	42a3      	cmp	r3, r4
 8001b94:	d915      	bls.n	8001bc2 <createMetaDataPacket+0xfa>
            if (extraMetaData->fields[i].index < packetMetaFieldIndex) {
 8001b96:	00e3      	lsls	r3, r4, #3
 8001b98:	18eb      	adds	r3, r5, r3
 8001b9a:	791a      	ldrb	r2, [r3, #4]
 8001b9c:	466b      	mov	r3, sp
 8001b9e:	3307      	adds	r3, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3ed      	bcc.n	8001b82 <createMetaDataPacket+0xba>
            } else if ((extraMetaData->fields[i].index >= metaDataFieldIndex) && !packetFull) {
 8001ba6:	9b02      	ldr	r3, [sp, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3ef      	bcc.n	8001b8c <createMetaDataPacket+0xc4>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d1ed      	bne.n	8001b8c <createMetaDataPacket+0xc4>
                packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, extraMetaData->fields[i].index, extraMetaData->fields[i].value);
 8001bb0:	00e1      	lsls	r1, r4, #3
 8001bb2:	1869      	adds	r1, r5, r1
 8001bb4:	688b      	ldr	r3, [r1, #8]
 8001bb6:	4669      	mov	r1, sp
 8001bb8:	3107      	adds	r1, #7
 8001bba:	0030      	movs	r0, r6
 8001bbc:	f7ff fc98 	bl	80014f0 <addToMetaDataFieldToPacket>
 8001bc0:	e7e4      	b.n	8001b8c <createMetaDataPacket+0xc4>
    if (packetFull && packet->size == 0)
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d0e0      	beq.n	8001b88 <createMetaDataPacket+0xc0>
 8001bc6:	88b3      	ldrh	r3, [r6, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1dd      	bne.n	8001b88 <createMetaDataPacket+0xc0>
        softAssert(0, "Failed to fit any data in packet");
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <createMetaDataPacket+0x110>)
 8001bce:	f7ff fbb3 	bl	8001338 <softAssertTmp>
 8001bd2:	e7d9      	b.n	8001b88 <createMetaDataPacket+0xc0>
 8001bd4:	08007724 	.word	0x08007724
 8001bd8:	0800774c 	.word	0x0800774c

08001bdc <handleMetaDataRequest>:

void handleMetaDataRequest(uint8_t * data, uint8_t dataLength, uint8_t ** responsePacket, uint16_t * responseLength) {
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	b083      	sub	sp, #12
 8001be0:	0016      	movs	r6, r2
 8001be2:	001d      	movs	r5, r3
    field_t startFieldIndex = 0;
 8001be4:	2700      	movs	r7, #0
 8001be6:	9701      	str	r7, [sp, #4]
    field_t startMetaDataFieldIndex = 0;
 8001be8:	9700      	str	r7, [sp, #0]
    parseFrameForMetaDataFieldIndex(data, dataLength, &startFieldIndex, &startMetaDataFieldIndex);
 8001bea:	466b      	mov	r3, sp
 8001bec:	aa01      	add	r2, sp, #4
 8001bee:	f7ff ff11 	bl	8001a14 <parseFrameForMetaDataFieldIndex>
//    softAssert(startFieldIndex != 122, "");
	globalPacket.size = 0;
 8001bf2:	4c06      	ldr	r4, [pc, #24]	; (8001c0c <handleMetaDataRequest+0x30>)
 8001bf4:	80a7      	strh	r7, [r4, #4]
	createMetaDataPacket(&globalPacket, startFieldIndex, startMetaDataFieldIndex);
 8001bf6:	9a00      	ldr	r2, [sp, #0]
 8001bf8:	9901      	ldr	r1, [sp, #4]
 8001bfa:	0020      	movs	r0, r4
 8001bfc:	f7ff ff64 	bl	8001ac8 <createMetaDataPacket>
    *responsePacket = globalPacket.data;
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	6033      	str	r3, [r6, #0]
    *responseLength = globalPacket.size;
 8001c04:	88a3      	ldrh	r3, [r4, #4]
 8001c06:	802b      	strh	r3, [r5, #0]
}
 8001c08:	b003      	add	sp, #12
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0c:	20000000 	.word	0x20000000

08001c10 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	46c6      	mov	lr, r8
 8001c14:	b500      	push	{lr}
 8001c16:	b082      	sub	sp, #8
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    u8 data_u8 = BNO055_INIT_VALUE;
 8001c18:	466b      	mov	r3, sp
 8001c1a:	1ddd      	adds	r5, r3, #7
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	702b      	strb	r3, [r5, #0]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8001c20:	466a      	mov	r2, sp
 8001c22:	3206      	adds	r2, #6
 8001c24:	7013      	strb	r3, [r2, #0]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001c26:	ae01      	add	r6, sp, #4
 8001c28:	8033      	strh	r3, [r6, #0]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8001c2a:	4f34      	ldr	r7, [pc, #208]	; (8001cfc <bno055_init+0xec>)
 8001c2c:	6038      	str	r0, [r7, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001c2e:	68c4      	ldr	r4, [r0, #12]
 8001c30:	7a40      	ldrb	r0, [r0, #9]
 8001c32:	3301      	adds	r3, #1
 8001c34:	2107      	movs	r1, #7
 8001c36:	47a0      	blx	r4
 8001c38:	4680      	mov	r8, r0
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	691c      	ldr	r4, [r3, #16]
 8001c3e:	7a58      	ldrb	r0, [r3, #9]
 8001c40:	2301      	movs	r3, #1
 8001c42:	002a      	movs	r2, r5
 8001c44:	2100      	movs	r1, #0
 8001c46:	47a0      	blx	r4
 8001c48:	b2c4      	uxtb	r4, r0
 8001c4a:	4444      	add	r4, r8
 8001c4c:	b2e4      	uxtb	r4, r4
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	782a      	ldrb	r2, [r5, #0]
 8001c52:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	4690      	mov	r8, r2
 8001c58:	7a58      	ldrb	r0, [r3, #9]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	002a      	movs	r2, r5
 8001c5e:	2101      	movs	r1, #1
 8001c60:	47c0      	blx	r8
 8001c62:	b2c0      	uxtb	r0, r0
 8001c64:	1824      	adds	r4, r4, r0
 8001c66:	b2e4      	uxtb	r4, r4
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	782a      	ldrb	r2, [r5, #0]
 8001c6c:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	4690      	mov	r8, r2
 8001c72:	7a58      	ldrb	r0, [r3, #9]
 8001c74:	2301      	movs	r3, #1
 8001c76:	002a      	movs	r2, r5
 8001c78:	2102      	movs	r1, #2
 8001c7a:	47c0      	blx	r8
 8001c7c:	b2c0      	uxtb	r0, r0
 8001c7e:	1824      	adds	r4, r4, r0
 8001c80:	b2e4      	uxtb	r4, r4
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	782a      	ldrb	r2, [r5, #0]
 8001c86:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	7a58      	ldrb	r0, [r3, #9]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	002a      	movs	r2, r5
 8001c92:	2103      	movs	r1, #3
 8001c94:	47c0      	blx	r8
 8001c96:	b2c0      	uxtb	r0, r0
 8001c98:	1824      	adds	r4, r4, r0
 8001c9a:	b2e4      	uxtb	r4, r4
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	782a      	ldrb	r2, [r5, #0]
 8001ca0:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	7a58      	ldrb	r0, [r3, #9]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	002a      	movs	r2, r5
 8001cac:	2106      	movs	r1, #6
 8001cae:	47c0      	blx	r8
 8001cb0:	b2c0      	uxtb	r0, r0
 8001cb2:	1824      	adds	r4, r4, r0
 8001cb4:	b2e4      	uxtb	r4, r4
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	782a      	ldrb	r2, [r5, #0]
 8001cba:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	7a58      	ldrb	r0, [r3, #9]
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	0032      	movs	r2, r6
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	47c0      	blx	r8
 8001cca:	b2c0      	uxtb	r0, r0
 8001ccc:	1824      	adds	r4, r4, r0
 8001cce:	b2e4      	uxtb	r4, r4
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001cd0:	7873      	ldrb	r3, [r6, #1]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	7831      	ldrb	r1, [r6, #0]
    p_bno055->sw_rev_id =
 8001cd6:	683a      	ldr	r2, [r7, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001cd8:	430b      	orrs	r3, r1
    p_bno055->sw_rev_id =
 8001cda:	8053      	strh	r3, [r2, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001cdc:	6916      	ldr	r6, [r2, #16]
 8001cde:	7a50      	ldrb	r0, [r2, #9]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	002a      	movs	r2, r5
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	47b0      	blx	r6
 8001ce8:	b2c0      	uxtb	r0, r0
 8001cea:	1820      	adds	r0, r4, r0
 8001cec:	b240      	sxtb	r0, r0
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	782a      	ldrb	r2, [r5, #0]
 8001cf2:	711a      	strb	r2, [r3, #4]

    return com_rslt;
}
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	46b8      	mov	r8, r7
 8001cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfc:	20000418 	.word	0x20000418

08001d00 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	0004      	movs	r4, r0
 8001d04:	0013      	movs	r3, r2
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001d06:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <bno055_write_register+0x20>)
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d005      	beq.n	8001d1a <bno055_write_register+0x1a>
        return BNO055_E_NULL_PTR;
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001d0e:	68d5      	ldr	r5, [r2, #12]
 8001d10:	7a50      	ldrb	r0, [r2, #9]
 8001d12:	000a      	movs	r2, r1
 8001d14:	0021      	movs	r1, r4
 8001d16:	47a8      	blx	r5
    }

    return com_rslt;
}
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
        return BNO055_E_NULL_PTR;
 8001d1a:	207f      	movs	r0, #127	; 0x7f
 8001d1c:	4240      	negs	r0, r0
 8001d1e:	e7fb      	b.n	8001d18 <bno055_write_register+0x18>
 8001d20:	20000418 	.word	0x20000418

08001d24 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	0005      	movs	r5, r0
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    u8 data_u8r = BNO055_INIT_VALUE;
 8001d2a:	466b      	mov	r3, sp
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	71da      	strb	r2, [r3, #7]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <bno055_write_page_id+0x5c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01c      	beq.n	8001d72 <bno055_write_page_id+0x4e>
        return BNO055_E_NULL_PTR;
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001d38:	691c      	ldr	r4, [r3, #16]
 8001d3a:	7a58      	ldrb	r0, [r3, #9]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	466a      	mov	r2, sp
 8001d40:	3207      	adds	r2, #7
 8001d42:	2107      	movs	r1, #7
 8001d44:	47a0      	blx	r4
 8001d46:	1e04      	subs	r4, r0, #0
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8001d48:	d116      	bne.n	8001d78 <bno055_write_page_id+0x54>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8001d4a:	466b      	mov	r3, sp
 8001d4c:	1dda      	adds	r2, r3, #7
 8001d4e:	7015      	strb	r5, [r2, #0]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <bno055_write_page_id+0x5c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68de      	ldr	r6, [r3, #12]
 8001d56:	7a58      	ldrb	r0, [r3, #9]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2107      	movs	r1, #7
 8001d5c:	47b0      	blx	r6
 8001d5e:	b2c0      	uxtb	r0, r0
 8001d60:	1900      	adds	r0, r0, r4
 8001d62:	b240      	sxtb	r0, r0
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8001d64:	2800      	cmp	r0, #0
 8001d66:	d102      	bne.n	8001d6e <bno055_write_page_id+0x4a>
            {
                p_bno055->page_id = page_id_u8;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <bno055_write_page_id+0x5c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	711d      	strb	r5, [r3, #4]
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
        return BNO055_E_NULL_PTR;
 8001d72:	207f      	movs	r0, #127	; 0x7f
 8001d74:	4240      	negs	r0, r0
 8001d76:	e7fa      	b.n	8001d6e <bno055_write_page_id+0x4a>
            com_rslt = BNO055_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	4240      	negs	r0, r0
 8001d7c:	e7f7      	b.n	8001d6e <bno055_write_page_id+0x4a>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000418 	.word	0x20000418

08001d84 <bno055_read_gyro_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gyro_xyz(struct bno055_gyro_t *gyro)
{
 8001d84:	b530      	push	{r4, r5, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	0004      	movs	r4, r0
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GYRO_XYZ_DATA_SIZE] = {
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <bno055_read_gyro_xyz+0x80>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	889b      	ldrh	r3, [r3, #4]
 8001d92:	466a      	mov	r2, sp
 8001d94:	8093      	strh	r3, [r2, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <bno055_read_gyro_xyz+0x84>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d02c      	beq.n	8001df8 <bno055_read_gyro_xyz+0x74>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d123      	bne.n	8001dec <bno055_read_gyro_xyz+0x68>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <bno055_read_gyro_xyz+0x84>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d127      	bne.n	8001dfe <bno055_read_gyro_xyz+0x7a>
        {
            /* Read the six bytes data of gyro xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <bno055_read_gyro_xyz+0x84>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691d      	ldr	r5, [r3, #16]
 8001db4:	7a58      	ldrb	r0, [r3, #9]
 8001db6:	2306      	movs	r3, #6
 8001db8:	466a      	mov	r2, sp
 8001dba:	2114      	movs	r1, #20
 8001dbc:	47a8      	blx	r5
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
                                                                        BNO055_GYRO_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
                                                                        BNO055_GYRO_DATA_X_MSB_VALUEX);
            gyro->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001dbe:	466b      	mov	r3, sp
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	569a      	ldrsb	r2, [r3, r2]
 8001dc4:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8001dc6:	781b      	ldrb	r3, [r3, #0]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001dc8:	4313      	orrs	r3, r2
            gyro->x =
 8001dca:	8023      	strh	r3, [r4, #0]
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
                                                                        BNO055_GYRO_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
                                                                        BNO055_GYRO_DATA_Y_MSB_VALUEY);
            gyro->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001dcc:	466b      	mov	r3, sp
 8001dce:	2203      	movs	r2, #3
 8001dd0:	569a      	ldrsb	r2, [r3, r2]
 8001dd2:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8001dd4:	789b      	ldrb	r3, [r3, #2]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001dd6:	4313      	orrs	r3, r2
            gyro->y =
 8001dd8:	8063      	strh	r3, [r4, #2]
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
                                                                        BNO055_GYRO_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
                                                                        BNO055_GYRO_DATA_Z_MSB_VALUEZ);
            gyro->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001dda:	466b      	mov	r3, sp
 8001ddc:	2205      	movs	r2, #5
 8001dde:	569a      	ldrsb	r2, [r3, r2]
 8001de0:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001de2:	791b      	ldrb	r3, [r3, #4]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001de4:	4313      	orrs	r3, r2
            gyro->z =
 8001de6:	80a3      	strh	r3, [r4, #4]
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8001de8:	b003      	add	sp, #12
 8001dea:	bd30      	pop	{r4, r5, pc}
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff ff99 	bl	8001d24 <bno055_write_page_id>
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d0db      	beq.n	8001dae <bno055_read_gyro_xyz+0x2a>
 8001df6:	e7d5      	b.n	8001da4 <bno055_read_gyro_xyz+0x20>
        return BNO055_E_NULL_PTR;
 8001df8:	207f      	movs	r0, #127	; 0x7f
 8001dfa:	4240      	negs	r0, r0
 8001dfc:	e7f4      	b.n	8001de8 <bno055_read_gyro_xyz+0x64>
            com_rslt = BNO055_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	4240      	negs	r0, r0
 8001e02:	e7f1      	b.n	8001de8 <bno055_read_gyro_xyz+0x64>
 8001e04:	080074c4 	.word	0x080074c4
 8001e08:	20000418 	.word	0x20000418

08001e0c <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8001e0c:	b530      	push	{r4, r5, lr}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	0004      	movs	r4, r0
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <bno055_read_euler_hrp+0x80>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	9200      	str	r2, [sp, #0]
 8001e18:	889b      	ldrh	r3, [r3, #4]
 8001e1a:	466a      	mov	r2, sp
 8001e1c:	8093      	strh	r3, [r2, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <bno055_read_euler_hrp+0x84>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02c      	beq.n	8001e80 <bno055_read_euler_hrp+0x74>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d123      	bne.n	8001e74 <bno055_read_euler_hrp+0x68>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <bno055_read_euler_hrp+0x84>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d127      	bne.n	8001e86 <bno055_read_euler_hrp+0x7a>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <bno055_read_euler_hrp+0x84>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691d      	ldr	r5, [r3, #16]
 8001e3c:	7a58      	ldrb	r0, [r3, #9]
 8001e3e:	2306      	movs	r3, #6
 8001e40:	466a      	mov	r2, sp
 8001e42:	211a      	movs	r1, #26
 8001e44:	47a8      	blx	r5
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001e46:	466b      	mov	r3, sp
 8001e48:	2201      	movs	r2, #1
 8001e4a:	569a      	ldrsb	r2, [r3, r2]
 8001e4c:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8001e4e:	781b      	ldrb	r3, [r3, #0]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001e50:	4313      	orrs	r3, r2
            euler->h =
 8001e52:	8023      	strh	r3, [r4, #0]
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001e54:	466b      	mov	r3, sp
 8001e56:	2203      	movs	r2, #3
 8001e58:	569a      	ldrsb	r2, [r3, r2]
 8001e5a:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8001e5c:	789b      	ldrb	r3, [r3, #2]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001e5e:	4313      	orrs	r3, r2
            euler->r =
 8001e60:	8063      	strh	r3, [r4, #2]
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001e62:	466b      	mov	r3, sp
 8001e64:	2205      	movs	r2, #5
 8001e66:	569a      	ldrsb	r2, [r3, r2]
 8001e68:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 8001e6a:	791b      	ldrb	r3, [r3, #4]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001e6c:	4313      	orrs	r3, r2
            euler->p =
 8001e6e:	80a3      	strh	r3, [r4, #4]
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8001e70:	b003      	add	sp, #12
 8001e72:	bd30      	pop	{r4, r5, pc}
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff ff55 	bl	8001d24 <bno055_write_page_id>
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d0db      	beq.n	8001e36 <bno055_read_euler_hrp+0x2a>
 8001e7e:	e7d5      	b.n	8001e2c <bno055_read_euler_hrp+0x20>
        return BNO055_E_NULL_PTR;
 8001e80:	207f      	movs	r0, #127	; 0x7f
 8001e82:	4240      	negs	r0, r0
 8001e84:	e7f4      	b.n	8001e70 <bno055_read_euler_hrp+0x64>
            com_rslt = BNO055_ERROR;
 8001e86:	2001      	movs	r0, #1
 8001e88:	4240      	negs	r0, r0
 8001e8a:	e7f1      	b.n	8001e70 <bno055_read_euler_hrp+0x64>
 8001e8c:	080074c4 	.word	0x080074c4
 8001e90:	20000418 	.word	0x20000418

08001e94 <bno055_read_linear_accel_xyz>:
 *  @return results of bus communication function
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_linear_accel_xyz(struct bno055_linear_accel_t *linear_accel)
{
 8001e94:	b530      	push	{r4, r5, lr}
 8001e96:	b083      	sub	sp, #12
 8001e98:	0004      	movs	r4, r0
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <bno055_read_linear_accel_xyz+0x80>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	9200      	str	r2, [sp, #0]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	466a      	mov	r2, sp
 8001ea4:	8093      	strh	r3, [r2, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <bno055_read_linear_accel_xyz+0x84>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02c      	beq.n	8001f08 <bno055_read_linear_accel_xyz+0x74>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001eae:	791b      	ldrb	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d123      	bne.n	8001efc <bno055_read_linear_accel_xyz+0x68>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <bno055_read_linear_accel_xyz+0x84>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	791b      	ldrb	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d127      	bne.n	8001f0e <bno055_read_linear_accel_xyz+0x7a>
        {
            /* Read the six byte value
             *  of linear accel xyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <bno055_read_linear_accel_xyz+0x84>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691d      	ldr	r5, [r3, #16]
 8001ec4:	7a58      	ldrb	r0, [r3, #9]
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	466a      	mov	r2, sp
 8001eca:	2128      	movs	r1, #40	; 0x28
 8001ecc:	47a8      	blx	r5
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
                                                                        BNO055_LINEAR_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
                                                                        BNO055_LINEAR_ACCEL_DATA_X_MSB_VALUEX);
            linear_accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001ece:	466b      	mov	r3, sp
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	569a      	ldrsb	r2, [r3, r2]
 8001ed4:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8001ed6:	781b      	ldrb	r3, [r3, #0]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001ed8:	4313      	orrs	r3, r2
            linear_accel->x =
 8001eda:	8023      	strh	r3, [r4, #0]
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
                                                                        BNO055_LINEAR_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
                                                                        BNO055_LINEAR_ACCEL_DATA_Y_MSB_VALUEY);
            linear_accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001edc:	466b      	mov	r3, sp
 8001ede:	2203      	movs	r2, #3
 8001ee0:	569a      	ldrsb	r2, [r3, r2]
 8001ee2:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8001ee4:	789b      	ldrb	r3, [r3, #2]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001ee6:	4313      	orrs	r3, r2
            linear_accel->y =
 8001ee8:	8063      	strh	r3, [r4, #2]
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
                                                                        BNO055_LINEAR_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
                                                                        BNO055_LINEAR_ACCEL_DATA_Z_MSB_VALUEZ);
            linear_accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001eea:	466b      	mov	r3, sp
 8001eec:	2205      	movs	r2, #5
 8001eee:	569a      	ldrsb	r2, [r3, r2]
 8001ef0:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001ef2:	791b      	ldrb	r3, [r3, #4]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001ef4:	4313      	orrs	r3, r2
            linear_accel->z =
 8001ef6:	80a3      	strh	r3, [r4, #4]
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8001ef8:	b003      	add	sp, #12
 8001efa:	bd30      	pop	{r4, r5, pc}
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff ff11 	bl	8001d24 <bno055_write_page_id>
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d0db      	beq.n	8001ebe <bno055_read_linear_accel_xyz+0x2a>
 8001f06:	e7d5      	b.n	8001eb4 <bno055_read_linear_accel_xyz+0x20>
        return BNO055_E_NULL_PTR;
 8001f08:	207f      	movs	r0, #127	; 0x7f
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	e7f4      	b.n	8001ef8 <bno055_read_linear_accel_xyz+0x64>
            com_rslt = BNO055_ERROR;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4240      	negs	r0, r0
 8001f12:	e7f1      	b.n	8001ef8 <bno055_read_linear_accel_xyz+0x64>
 8001f14:	080074c4 	.word	0x080074c4
 8001f18:	20000418 	.word	0x20000418

08001f1c <bno055_read_gravity_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gravity_xyz(struct bno055_gravity_t *gravity)
{
 8001f1c:	b530      	push	{r4, r5, lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	0004      	movs	r4, r0
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GRAVITY_XYZ_DATA_SIZE] = {
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <bno055_read_gravity_xyz+0x80>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	889b      	ldrh	r3, [r3, #4]
 8001f2a:	466a      	mov	r2, sp
 8001f2c:	8093      	strh	r3, [r2, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <bno055_read_gravity_xyz+0x84>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02c      	beq.n	8001f90 <bno055_read_gravity_xyz+0x74>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001f36:	791b      	ldrb	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d123      	bne.n	8001f84 <bno055_read_gravity_xyz+0x68>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <bno055_read_gravity_xyz+0x84>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	791b      	ldrb	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d127      	bne.n	8001f96 <bno055_read_gravity_xyz+0x7a>
        {
            /* Read the six byte value
             * of gravity xyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <bno055_read_gravity_xyz+0x84>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691d      	ldr	r5, [r3, #16]
 8001f4c:	7a58      	ldrb	r0, [r3, #9]
 8001f4e:	2306      	movs	r3, #6
 8001f50:	466a      	mov	r2, sp
 8001f52:	212e      	movs	r1, #46	; 0x2e
 8001f54:	47a8      	blx	r5
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
                                                                        BNO055_GRAVITY_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
                                                                        BNO055_GRAVITY_DATA_X_MSB_VALUEX);
            gravity->x =
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 8001f56:	466b      	mov	r3, sp
 8001f58:	2201      	movs	r2, #1
 8001f5a:	569a      	ldrsb	r2, [r3, r2]
 8001f5c:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8001f5e:	781b      	ldrb	r3, [r3, #0]
                (s16)(((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB]) << BNO055_SHIFT_EIGHT_BITS) |
 8001f60:	4313      	orrs	r3, r2
            gravity->x =
 8001f62:	8023      	strh	r3, [r4, #0]
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
                                                                        BNO055_GRAVITY_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
                                                                        BNO055_GRAVITY_DATA_Y_MSB_VALUEY);
            gravity->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001f64:	466b      	mov	r3, sp
 8001f66:	2203      	movs	r2, #3
 8001f68:	569a      	ldrsb	r2, [r3, r2]
 8001f6a:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8001f6c:	789b      	ldrb	r3, [r3, #2]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001f6e:	4313      	orrs	r3, r2
            gravity->y =
 8001f70:	8063      	strh	r3, [r4, #2]
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
                                                                        BNO055_GRAVITY_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
                                                                        BNO055_GRAVITY_DATA_Z_MSB_VALUEZ);
            gravity->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001f72:	466b      	mov	r3, sp
 8001f74:	2205      	movs	r2, #5
 8001f76:	569a      	ldrsb	r2, [r3, r2]
 8001f78:	0212      	lsls	r2, r2, #8
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001f7a:	791b      	ldrb	r3, [r3, #4]
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001f7c:	4313      	orrs	r3, r2
            gravity->z =
 8001f7e:	80a3      	strh	r3, [r4, #4]
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8001f80:	b003      	add	sp, #12
 8001f82:	bd30      	pop	{r4, r5, pc}
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fecd 	bl	8001d24 <bno055_write_page_id>
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d0db      	beq.n	8001f46 <bno055_read_gravity_xyz+0x2a>
 8001f8e:	e7d5      	b.n	8001f3c <bno055_read_gravity_xyz+0x20>
        return BNO055_E_NULL_PTR;
 8001f90:	207f      	movs	r0, #127	; 0x7f
 8001f92:	4240      	negs	r0, r0
 8001f94:	e7f4      	b.n	8001f80 <bno055_read_gravity_xyz+0x64>
            com_rslt = BNO055_ERROR;
 8001f96:	2001      	movs	r0, #1
 8001f98:	4240      	negs	r0, r0
 8001f9a:	e7f1      	b.n	8001f80 <bno055_read_gravity_xyz+0x64>
 8001f9c:	080074c4 	.word	0x080074c4
 8001fa0:	20000418 	.word	0x20000418

08001fa4 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	0004      	movs	r4, r0
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    u8 data_u8r = BNO055_INIT_VALUE;
 8001faa:	466b      	mov	r3, sp
 8001fac:	2200      	movs	r2, #0
 8001fae:	71da      	strb	r2, [r3, #7]
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <bno055_get_operation_mode+0x5c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01d      	beq.n	8001ff4 <bno055_get_operation_mode+0x50>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001fb8:	791b      	ldrb	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d114      	bne.n	8001fe8 <bno055_get_operation_mode+0x44>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <bno055_get_operation_mode+0x5c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <bno055_get_operation_mode+0x56>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <bno055_get_operation_mode+0x5c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691e      	ldr	r6, [r3, #16]
 8001fce:	466a      	mov	r2, sp
 8001fd0:	1dd5      	adds	r5, r2, #7
 8001fd2:	7a58      	ldrb	r0, [r3, #9]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	002a      	movs	r2, r5
 8001fd8:	213d      	movs	r1, #61	; 0x3d
 8001fda:	47b0      	blx	r6
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001fdc:	782a      	ldrb	r2, [r5, #0]
 8001fde:	230f      	movs	r3, #15
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	7023      	strb	r3, [r4, #0]
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fe9b 	bl	8001d24 <bno055_write_page_id>
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d0ea      	beq.n	8001fc8 <bno055_get_operation_mode+0x24>
 8001ff2:	e7e4      	b.n	8001fbe <bno055_get_operation_mode+0x1a>
        return BNO055_E_NULL_PTR;
 8001ff4:	207f      	movs	r0, #127	; 0x7f
 8001ff6:	4240      	negs	r0, r0
 8001ff8:	e7f4      	b.n	8001fe4 <bno055_get_operation_mode+0x40>
            com_rslt = BNO055_ERROR;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	4240      	negs	r0, r0
 8001ffe:	e7f1      	b.n	8001fe4 <bno055_get_operation_mode+0x40>
 8002000:	20000418 	.word	0x20000418

08002004 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	0006      	movs	r6, r0
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    u8 data_u8r = BNO055_INIT_VALUE;
 800200a:	2300      	movs	r3, #0
 800200c:	466a      	mov	r2, sp
 800200e:	71d3      	strb	r3, [r2, #7]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8002010:	466a      	mov	r2, sp
 8002012:	7193      	strb	r3, [r2, #6]
 8002014:	3206      	adds	r2, #6
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8002016:	4b44      	ldr	r3, [pc, #272]	; (8002128 <bno055_set_operation_mode+0x124>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d100      	bne.n	8002020 <bno055_set_operation_mode+0x1c>
 800201e:	e07d      	b.n	800211c <bno055_set_operation_mode+0x118>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8002020:	0010      	movs	r0, r2
 8002022:	f7ff ffbf 	bl	8001fa4 <bno055_get_operation_mode>
        if (stat_s8 == BNO055_SUCCESS)
 8002026:	2800      	cmp	r0, #0
 8002028:	d000      	beq.n	800202c <bno055_set_operation_mode+0x28>
 800202a:	e07a      	b.n	8002122 <bno055_set_operation_mode+0x11e>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 800202c:	466b      	mov	r3, sp
 800202e:	3306      	adds	r3, #6
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d128      	bne.n	8002088 <bno055_set_operation_mode+0x84>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8002036:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <bno055_set_operation_mode+0x124>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691c      	ldr	r4, [r3, #16]
 800203c:	7a58      	ldrb	r0, [r3, #9]
 800203e:	2301      	movs	r3, #1
 8002040:	466a      	mov	r2, sp
 8002042:	3207      	adds	r2, #7
 8002044:	213d      	movs	r1, #61	; 0x3d
 8002046:	47a0      	blx	r4
 8002048:	0005      	movs	r5, r0
 800204a:	1e04      	subs	r4, r0, #0
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800204c:	d119      	bne.n	8002082 <bno055_set_operation_mode+0x7e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800204e:	466b      	mov	r3, sp
 8002050:	79d8      	ldrb	r0, [r3, #7]
 8002052:	230f      	movs	r3, #15
 8002054:	4398      	bics	r0, r3
 8002056:	b240      	sxtb	r0, r0
 8002058:	401e      	ands	r6, r3
 800205a:	4330      	orrs	r0, r6
 800205c:	466b      	mov	r3, sp
 800205e:	71d8      	strb	r0, [r3, #7]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8002060:	4e31      	ldr	r6, [pc, #196]	; (8002128 <bno055_set_operation_mode+0x124>)
 8002062:	6833      	ldr	r3, [r6, #0]
 8002064:	68dc      	ldr	r4, [r3, #12]
 8002066:	7a58      	ldrb	r0, [r3, #9]
 8002068:	2301      	movs	r3, #1
 800206a:	466a      	mov	r2, sp
 800206c:	3207      	adds	r2, #7
 800206e:	213d      	movs	r1, #61	; 0x3d
 8002070:	47a0      	blx	r4
 8002072:	b2c4      	uxtb	r4, r0
 8002074:	1964      	adds	r4, r4, r5
 8002076:	b264      	sxtb	r4, r4
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8002078:	6833      	ldr	r3, [r6, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2096      	movs	r0, #150	; 0x96
 800207e:	0080      	lsls	r0, r0, #2
 8002080:	4798      	blx	r3
            com_rslt = BNO055_ERROR;
        }
    }

    return com_rslt;
}
 8002082:	0020      	movs	r0, r4
 8002084:	b002      	add	sp, #8
 8002086:	bd70      	pop	{r4, r5, r6, pc}
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <bno055_set_operation_mode+0x124>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691c      	ldr	r4, [r3, #16]
 800208e:	7a58      	ldrb	r0, [r3, #9]
 8002090:	2301      	movs	r3, #1
 8002092:	466a      	mov	r2, sp
 8002094:	3207      	adds	r2, #7
 8002096:	213d      	movs	r1, #61	; 0x3d
 8002098:	47a0      	blx	r4
 800209a:	0005      	movs	r5, r0
 800209c:	1e04      	subs	r4, r0, #0
                if (com_rslt == BNO055_SUCCESS)
 800209e:	d028      	beq.n	80020f2 <bno055_set_operation_mode+0xee>
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80020a0:	2e00      	cmp	r6, #0
 80020a2:	d0ee      	beq.n	8002082 <bno055_set_operation_mode+0x7e>
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <bno055_set_operation_mode+0x124>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691c      	ldr	r4, [r3, #16]
 80020aa:	7a58      	ldrb	r0, [r3, #9]
 80020ac:	2301      	movs	r3, #1
 80020ae:	466a      	mov	r2, sp
 80020b0:	3207      	adds	r2, #7
 80020b2:	213d      	movs	r1, #61	; 0x3d
 80020b4:	47a0      	blx	r4
 80020b6:	0005      	movs	r5, r0
 80020b8:	1e04      	subs	r4, r0, #0
                    if (com_rslt == BNO055_SUCCESS)
 80020ba:	d1e2      	bne.n	8002082 <bno055_set_operation_mode+0x7e>
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80020bc:	466b      	mov	r3, sp
 80020be:	79d8      	ldrb	r0, [r3, #7]
 80020c0:	230f      	movs	r3, #15
 80020c2:	4398      	bics	r0, r3
 80020c4:	b240      	sxtb	r0, r0
 80020c6:	401e      	ands	r6, r3
 80020c8:	4330      	orrs	r0, r6
 80020ca:	466b      	mov	r3, sp
 80020cc:	71d8      	strb	r0, [r3, #7]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80020ce:	4e16      	ldr	r6, [pc, #88]	; (8002128 <bno055_set_operation_mode+0x124>)
 80020d0:	6833      	ldr	r3, [r6, #0]
 80020d2:	68dc      	ldr	r4, [r3, #12]
 80020d4:	7a58      	ldrb	r0, [r3, #9]
 80020d6:	2301      	movs	r3, #1
 80020d8:	466a      	mov	r2, sp
 80020da:	3207      	adds	r2, #7
 80020dc:	213d      	movs	r1, #61	; 0x3d
 80020de:	47a0      	blx	r4
 80020e0:	b2c4      	uxtb	r4, r0
 80020e2:	1964      	adds	r4, r4, r5
 80020e4:	b264      	sxtb	r4, r4
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80020e6:	6833      	ldr	r3, [r6, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2096      	movs	r0, #150	; 0x96
 80020ec:	0080      	lsls	r0, r0, #2
 80020ee:	4798      	blx	r3
 80020f0:	e7c7      	b.n	8002082 <bno055_set_operation_mode+0x7e>
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80020f2:	466b      	mov	r3, sp
 80020f4:	79db      	ldrb	r3, [r3, #7]
 80020f6:	220f      	movs	r2, #15
 80020f8:	4393      	bics	r3, r2
 80020fa:	466a      	mov	r2, sp
 80020fc:	71d3      	strb	r3, [r2, #7]
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80020fe:	2201      	movs	r2, #1
 8002100:	466b      	mov	r3, sp
 8002102:	1dd9      	adds	r1, r3, #7
 8002104:	203d      	movs	r0, #61	; 0x3d
 8002106:	f7ff fdfb 	bl	8001d00 <bno055_write_register>
 800210a:	b2c0      	uxtb	r0, r0
                    com_rslt +=
 800210c:	1940      	adds	r0, r0, r5
 800210e:	b244      	sxtb	r4, r0
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <bno055_set_operation_mode+0x124>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2014      	movs	r0, #20
 8002118:	4798      	blx	r3
 800211a:	e7c1      	b.n	80020a0 <bno055_set_operation_mode+0x9c>
        return BNO055_E_NULL_PTR;
 800211c:	247f      	movs	r4, #127	; 0x7f
 800211e:	4264      	negs	r4, r4
 8002120:	e7af      	b.n	8002082 <bno055_set_operation_mode+0x7e>
            com_rslt = BNO055_ERROR;
 8002122:	2401      	movs	r4, #1
 8002124:	4264      	negs	r4, r4
 8002126:	e7ac      	b.n	8002082 <bno055_set_operation_mode+0x7e>
 8002128:	20000418 	.word	0x20000418

0800212c <bno055_set_gyro_unit>:
{
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	0006      	movs	r6, r0
    u8 data_u8r = BNO055_INIT_VALUE;
 8002132:	2300      	movs	r3, #0
 8002134:	466a      	mov	r2, sp
 8002136:	71d3      	strb	r3, [r2, #7]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8002138:	466a      	mov	r2, sp
 800213a:	7193      	strb	r3, [r2, #6]
 800213c:	3206      	adds	r2, #6
    if (p_bno055 == NULL)
 800213e:	4b27      	ldr	r3, [pc, #156]	; (80021dc <bno055_set_gyro_unit+0xb0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d047      	beq.n	80021d6 <bno055_set_gyro_unit+0xaa>
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8002146:	0010      	movs	r0, r2
 8002148:	f7ff ff2c 	bl	8001fa4 <bno055_get_operation_mode>
 800214c:	1e04      	subs	r4, r0, #0
        if (stat_s8 == BNO055_SUCCESS)
 800214e:	d130      	bne.n	80021b2 <bno055_set_gyro_unit+0x86>
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8002150:	466b      	mov	r3, sp
 8002152:	3306      	adds	r3, #6
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d125      	bne.n	80021a6 <bno055_set_gyro_unit+0x7a>
            if (stat_s8 == BNO055_SUCCESS)
 800215a:	2800      	cmp	r0, #0
 800215c:	d132      	bne.n	80021c4 <bno055_set_gyro_unit+0x98>
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <bno055_set_gyro_unit+0xb0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691c      	ldr	r4, [r3, #16]
 8002164:	7a58      	ldrb	r0, [r3, #9]
 8002166:	2301      	movs	r3, #1
 8002168:	466a      	mov	r2, sp
 800216a:	3207      	adds	r2, #7
 800216c:	213b      	movs	r1, #59	; 0x3b
 800216e:	47a0      	blx	r4
 8002170:	0005      	movs	r5, r0
 8002172:	1e04      	subs	r4, r0, #0
                if (com_rslt == BNO055_SUCCESS)
 8002174:	d11f      	bne.n	80021b6 <bno055_set_gyro_unit+0x8a>
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8002176:	466b      	mov	r3, sp
 8002178:	79db      	ldrb	r3, [r3, #7]
 800217a:	2202      	movs	r2, #2
 800217c:	4393      	bics	r3, r2
 800217e:	b25b      	sxtb	r3, r3
 8002180:	0076      	lsls	r6, r6, #1
 8002182:	2002      	movs	r0, #2
 8002184:	4006      	ands	r6, r0
 8002186:	431e      	orrs	r6, r3
 8002188:	466b      	mov	r3, sp
 800218a:	71de      	strb	r6, [r3, #7]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <bno055_set_gyro_unit+0xb0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68dc      	ldr	r4, [r3, #12]
 8002192:	7a58      	ldrb	r0, [r3, #9]
 8002194:	2301      	movs	r3, #1
 8002196:	466a      	mov	r2, sp
 8002198:	3207      	adds	r2, #7
 800219a:	213b      	movs	r1, #59	; 0x3b
 800219c:	47a0      	blx	r4
 800219e:	b2c4      	uxtb	r4, r0
 80021a0:	1964      	adds	r4, r4, r5
 80021a2:	b264      	sxtb	r4, r4
 80021a4:	e007      	b.n	80021b6 <bno055_set_gyro_unit+0x8a>
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80021a6:	f7ff ff2d 	bl	8002004 <bno055_set_operation_mode>
 80021aa:	b2c0      	uxtb	r0, r0
 80021ac:	1900      	adds	r0, r0, r4
 80021ae:	b240      	sxtb	r0, r0
 80021b0:	e7d3      	b.n	800215a <bno055_set_gyro_unit+0x2e>
            com_rslt = BNO055_ERROR;
 80021b2:	2401      	movs	r4, #1
 80021b4:	4264      	negs	r4, r4
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80021b6:	466b      	mov	r3, sp
 80021b8:	7998      	ldrb	r0, [r3, #6]
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d105      	bne.n	80021ca <bno055_set_gyro_unit+0x9e>
}
 80021be:	0020      	movs	r0, r4
 80021c0:	b002      	add	sp, #8
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
                com_rslt = BNO055_ERROR;
 80021c4:	2401      	movs	r4, #1
 80021c6:	4264      	negs	r4, r4
 80021c8:	e7f5      	b.n	80021b6 <bno055_set_gyro_unit+0x8a>
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80021ca:	f7ff ff1b 	bl	8002004 <bno055_set_operation_mode>
 80021ce:	b2c0      	uxtb	r0, r0
 80021d0:	1904      	adds	r4, r0, r4
 80021d2:	b264      	sxtb	r4, r4
 80021d4:	e7f3      	b.n	80021be <bno055_set_gyro_unit+0x92>
        return BNO055_E_NULL_PTR;
 80021d6:	247f      	movs	r4, #127	; 0x7f
 80021d8:	4264      	negs	r4, r4
 80021da:	e7f0      	b.n	80021be <bno055_set_gyro_unit+0x92>
 80021dc:	20000418 	.word	0x20000418

080021e0 <bno055_set_euler_unit>:
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	0006      	movs	r6, r0
    u8 data_u8r = BNO055_INIT_VALUE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	466a      	mov	r2, sp
 80021ea:	71d3      	strb	r3, [r2, #7]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80021ec:	466a      	mov	r2, sp
 80021ee:	7193      	strb	r3, [r2, #6]
 80021f0:	3206      	adds	r2, #6
    if (p_bno055 == NULL)
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <bno055_set_euler_unit+0xb0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d047      	beq.n	800228a <bno055_set_euler_unit+0xaa>
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80021fa:	0010      	movs	r0, r2
 80021fc:	f7ff fed2 	bl	8001fa4 <bno055_get_operation_mode>
 8002200:	1e04      	subs	r4, r0, #0
        if (stat_s8 == BNO055_SUCCESS)
 8002202:	d130      	bne.n	8002266 <bno055_set_euler_unit+0x86>
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8002204:	466b      	mov	r3, sp
 8002206:	3306      	adds	r3, #6
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d125      	bne.n	800225a <bno055_set_euler_unit+0x7a>
            if (stat_s8 == BNO055_SUCCESS)
 800220e:	2800      	cmp	r0, #0
 8002210:	d132      	bne.n	8002278 <bno055_set_euler_unit+0x98>
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <bno055_set_euler_unit+0xb0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691c      	ldr	r4, [r3, #16]
 8002218:	7a58      	ldrb	r0, [r3, #9]
 800221a:	2301      	movs	r3, #1
 800221c:	466a      	mov	r2, sp
 800221e:	3207      	adds	r2, #7
 8002220:	213b      	movs	r1, #59	; 0x3b
 8002222:	47a0      	blx	r4
 8002224:	0005      	movs	r5, r0
 8002226:	1e04      	subs	r4, r0, #0
                if (com_rslt == BNO055_SUCCESS)
 8002228:	d11f      	bne.n	800226a <bno055_set_euler_unit+0x8a>
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 800222a:	466b      	mov	r3, sp
 800222c:	79db      	ldrb	r3, [r3, #7]
 800222e:	2204      	movs	r2, #4
 8002230:	4393      	bics	r3, r2
 8002232:	b25b      	sxtb	r3, r3
 8002234:	00b6      	lsls	r6, r6, #2
 8002236:	2004      	movs	r0, #4
 8002238:	4006      	ands	r6, r0
 800223a:	431e      	orrs	r6, r3
 800223c:	466b      	mov	r3, sp
 800223e:	71de      	strb	r6, [r3, #7]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <bno055_set_euler_unit+0xb0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68dc      	ldr	r4, [r3, #12]
 8002246:	7a58      	ldrb	r0, [r3, #9]
 8002248:	2301      	movs	r3, #1
 800224a:	466a      	mov	r2, sp
 800224c:	3207      	adds	r2, #7
 800224e:	213b      	movs	r1, #59	; 0x3b
 8002250:	47a0      	blx	r4
 8002252:	b2c4      	uxtb	r4, r0
 8002254:	1964      	adds	r4, r4, r5
 8002256:	b264      	sxtb	r4, r4
 8002258:	e007      	b.n	800226a <bno055_set_euler_unit+0x8a>
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800225a:	f7ff fed3 	bl	8002004 <bno055_set_operation_mode>
 800225e:	b2c0      	uxtb	r0, r0
 8002260:	1900      	adds	r0, r0, r4
 8002262:	b240      	sxtb	r0, r0
 8002264:	e7d3      	b.n	800220e <bno055_set_euler_unit+0x2e>
            com_rslt = BNO055_ERROR;
 8002266:	2401      	movs	r4, #1
 8002268:	4264      	negs	r4, r4
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800226a:	466b      	mov	r3, sp
 800226c:	7998      	ldrb	r0, [r3, #6]
 800226e:	2800      	cmp	r0, #0
 8002270:	d105      	bne.n	800227e <bno055_set_euler_unit+0x9e>
}
 8002272:	0020      	movs	r0, r4
 8002274:	b002      	add	sp, #8
 8002276:	bd70      	pop	{r4, r5, r6, pc}
                com_rslt = BNO055_ERROR;
 8002278:	2401      	movs	r4, #1
 800227a:	4264      	negs	r4, r4
 800227c:	e7f5      	b.n	800226a <bno055_set_euler_unit+0x8a>
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800227e:	f7ff fec1 	bl	8002004 <bno055_set_operation_mode>
 8002282:	b2c0      	uxtb	r0, r0
 8002284:	1904      	adds	r4, r0, r4
 8002286:	b264      	sxtb	r4, r4
 8002288:	e7f3      	b.n	8002272 <bno055_set_euler_unit+0x92>
        return BNO055_E_NULL_PTR;
 800228a:	247f      	movs	r4, #127	; 0x7f
 800228c:	4264      	negs	r4, r4
 800228e:	e7f0      	b.n	8002272 <bno055_set_euler_unit+0x92>
 8002290:	20000418 	.word	0x20000418

08002294 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	0006      	movs	r6, r0
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    u8 data_u8r = BNO055_INIT_VALUE;
 800229a:	2300      	movs	r3, #0
 800229c:	466a      	mov	r2, sp
 800229e:	71d3      	strb	r3, [r2, #7]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80022a0:	466a      	mov	r2, sp
 80022a2:	7193      	strb	r3, [r2, #6]
 80022a4:	3206      	adds	r2, #6
    s8 stat_s8 = BNO055_ERROR;

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <bno055_set_power_mode+0xb0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d046      	beq.n	800233c <bno055_set_power_mode+0xa8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80022ae:	0010      	movs	r0, r2
 80022b0:	f7ff fe78 	bl	8001fa4 <bno055_get_operation_mode>
 80022b4:	1e04      	subs	r4, r0, #0
        if (stat_s8 == BNO055_SUCCESS)
 80022b6:	d12f      	bne.n	8002318 <bno055_set_power_mode+0x84>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80022b8:	466b      	mov	r3, sp
 80022ba:	3306      	adds	r3, #6
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d124      	bne.n	800230c <bno055_set_power_mode+0x78>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
            }
            if (stat_s8 == BNO055_SUCCESS)
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d131      	bne.n	800232a <bno055_set_power_mode+0x96>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <bno055_set_power_mode+0xb0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691c      	ldr	r4, [r3, #16]
 80022cc:	7a58      	ldrb	r0, [r3, #9]
 80022ce:	2301      	movs	r3, #1
 80022d0:	466a      	mov	r2, sp
 80022d2:	3207      	adds	r2, #7
 80022d4:	213e      	movs	r1, #62	; 0x3e
 80022d6:	47a0      	blx	r4
 80022d8:	0005      	movs	r5, r0
 80022da:	1e04      	subs	r4, r0, #0
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80022dc:	d11e      	bne.n	800231c <bno055_set_power_mode+0x88>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80022de:	466b      	mov	r3, sp
 80022e0:	79db      	ldrb	r3, [r3, #7]
 80022e2:	2203      	movs	r2, #3
 80022e4:	4393      	bics	r3, r2
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	2003      	movs	r0, #3
 80022ea:	4006      	ands	r6, r0
 80022ec:	431e      	orrs	r6, r3
 80022ee:	466b      	mov	r3, sp
 80022f0:	71de      	strb	r6, [r3, #7]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <bno055_set_power_mode+0xb0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68dc      	ldr	r4, [r3, #12]
 80022f8:	7a58      	ldrb	r0, [r3, #9]
 80022fa:	2301      	movs	r3, #1
 80022fc:	466a      	mov	r2, sp
 80022fe:	3207      	adds	r2, #7
 8002300:	213e      	movs	r1, #62	; 0x3e
 8002302:	47a0      	blx	r4
 8002304:	b2c4      	uxtb	r4, r0
 8002306:	1964      	adds	r4, r4, r5
 8002308:	b264      	sxtb	r4, r4
 800230a:	e007      	b.n	800231c <bno055_set_power_mode+0x88>
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800230c:	f7ff fe7a 	bl	8002004 <bno055_set_operation_mode>
 8002310:	b2c0      	uxtb	r0, r0
 8002312:	1900      	adds	r0, r0, r4
 8002314:	b240      	sxtb	r0, r0
 8002316:	e7d4      	b.n	80022c2 <bno055_set_power_mode+0x2e>
                com_rslt = BNO055_ERROR;
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8002318:	2401      	movs	r4, #1
 800231a:	4264      	negs	r4, r4
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800231c:	466b      	mov	r3, sp
 800231e:	7998      	ldrb	r0, [r3, #6]
 8002320:	2800      	cmp	r0, #0
 8002322:	d105      	bne.n	8002330 <bno055_set_power_mode+0x9c>
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
    }

    return com_rslt;
}
 8002324:	0020      	movs	r0, r4
 8002326:	b002      	add	sp, #8
 8002328:	bd70      	pop	{r4, r5, r6, pc}
                com_rslt = BNO055_ERROR;
 800232a:	2401      	movs	r4, #1
 800232c:	4264      	negs	r4, r4
 800232e:	e7f5      	b.n	800231c <bno055_set_power_mode+0x88>
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8002330:	f7ff fe68 	bl	8002004 <bno055_set_operation_mode>
 8002334:	b2c0      	uxtb	r0, r0
 8002336:	1904      	adds	r4, r0, r4
 8002338:	b264      	sxtb	r4, r4
 800233a:	e7f3      	b.n	8002324 <bno055_set_power_mode+0x90>
        return BNO055_E_NULL_PTR;
 800233c:	247f      	movs	r4, #127	; 0x7f
 800233e:	4264      	negs	r4, r4
 8002340:	e7f0      	b.n	8002324 <bno055_set_power_mode+0x90>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000418 	.word	0x20000418

08002348 <readUniqueID>:

bool isNodeAllocated() {
    return canDrv.nodeIdAllocated;
}

static void readUniqueID(uint8_t *out_uid) {
 8002348:	b530      	push	{r4, r5, lr}
 800234a:	b085      	sub	sp, #20
 800234c:	0005      	movs	r5, r0
    softAssert(12 <= UNIQUE_ID_LENGTH_BYTES, "Inv UUID size");
    uint32_t tmp[4] = {HAL_GetUIDw0(), HAL_GetUIDw1(), HAL_GetUIDw2(), 0};
 800234e:	f003 f8e1 	bl	8005514 <HAL_GetUIDw0>
 8002352:	9000      	str	r0, [sp, #0]
 8002354:	f003 f8e4 	bl	8005520 <HAL_GetUIDw1>
 8002358:	9001      	str	r0, [sp, #4]
 800235a:	f003 f8e7 	bl	800552c <HAL_GetUIDw2>
 800235e:	9002      	str	r0, [sp, #8]
 8002360:	2300      	movs	r3, #0
 8002362:	9303      	str	r3, [sp, #12]
    for (uint8_t i = 0; i < 4; i++) {
 8002364:	2400      	movs	r4, #0
 8002366:	e007      	b.n	8002378 <readUniqueID+0x30>
        memcpy(&out_uid[4 * i], &tmp[i], 4);
 8002368:	00a1      	lsls	r1, r4, #2
 800236a:	1868      	adds	r0, r5, r1
 800236c:	4469      	add	r1, sp
 800236e:	2204      	movs	r2, #4
 8002370:	f005 f88a 	bl	8007488 <memcpy>
    for (uint8_t i = 0; i < 4; i++) {
 8002374:	3401      	adds	r4, #1
 8002376:	b2e4      	uxtb	r4, r4
 8002378:	2c03      	cmp	r4, #3
 800237a:	d9f5      	bls.n	8002368 <readUniqueID+0x20>
    }
}
 800237c:	b005      	add	sp, #20
 800237e:	bd30      	pop	{r4, r5, pc}

08002380 <record1HzStats>:
    }

    canDrv.nodeMode = UAVCAN_NODE_MODE_OPERATIONAL;
}

static void record1HzStats() {
 8002380:	b500      	push	{lr}
 8002382:	b089      	sub	sp, #36	; 0x24
    softAssert(HAL_FDCAN_GetProtocolStatus(&hfdcan1, &canDrv.stats.protocolStatus) == HAL_OK, "HAL_FDCAN_GetErrorCounters failed");

#else
    static uint32_t lastRxOverflowCount = 0;
    static uint32_t lastRxTidErrorCount = 0;
	if (canardSTM32GetStats().rx_overflow_count != lastRxOverflowCount) {
 8002384:	4668      	mov	r0, sp
 8002386:	f002 fe6d 	bl	8005064 <canardSTM32GetStats>
 800238a:	9901      	ldr	r1, [sp, #4]
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <record1HzStats+0x50>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	9800      	ldr	r0, [sp, #0]
 8002394:	4298      	cmp	r0, r3
 8002396:	d101      	bne.n	800239c <record1HzStats+0x1c>
 8002398:	4291      	cmp	r1, r2
 800239a:	d00a      	beq.n	80023b2 <record1HzStats+0x32>
		// softAssert(0, "RX overflowed");
		canDrv.stats.rxCanOverflowCount++;
 800239c:	490d      	ldr	r1, [pc, #52]	; (80023d4 <record1HzStats+0x54>)
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <record1HzStats+0x58>)
 80023a0:	5a8b      	ldrh	r3, [r1, r2]
 80023a2:	3301      	adds	r3, #1
 80023a4:	528b      	strh	r3, [r1, r2]
		lastRxOverflowCount = canardSTM32GetStats().rx_overflow_count;
 80023a6:	a804      	add	r0, sp, #16
 80023a8:	f002 fe5c 	bl	8005064 <canardSTM32GetStats>
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <record1HzStats+0x50>)
 80023ae:	9a04      	ldr	r2, [sp, #16]
 80023b0:	601a      	str	r2, [r3, #0]
	}
    if (canDrv.gCanard.rx_tid_errors != lastRxTidErrorCount) {
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <record1HzStats+0x54>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <record1HzStats+0x5c>)
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d006      	beq.n	80023cc <record1HzStats+0x4c>
        // softAssert(0, "RX error");
        canDrv.stats.rxInvalidUavFrameCount++;
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <record1HzStats+0x54>)
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <record1HzStats+0x60>)
 80023c2:	5a42      	ldrh	r2, [r0, r1]
 80023c4:	3201      	adds	r2, #1
 80023c6:	5242      	strh	r2, [r0, r1]
        lastRxTidErrorCount = canDrv.gCanard.rx_tid_errors;
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <record1HzStats+0x5c>)
 80023ca:	6013      	str	r3, [r2, #0]
    }
#endif

}
 80023cc:	b009      	add	sp, #36	; 0x24
 80023ce:	bd00      	pop	{pc}
 80023d0:	20000b40 	.word	0x20000b40
 80023d4:	20000420 	.word	0x20000420
 80023d8:	00000706 	.word	0x00000706
 80023dc:	20000b44 	.word	0x20000b44
 80023e0:	00000704 	.word	0x00000704

080023e4 <convertTransferToDataPtr>:
static uint8_t * convertTransferToDataPtr(CanardRxTransfer * transfer, uint8_t * length) {
 80023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	0006      	movs	r6, r0
 80023ea:	000d      	movs	r5, r1
    if (transfer->payload_len >= 256) {
 80023ec:	8a83      	ldrh	r3, [r0, #20]
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d802      	bhi.n	80023f8 <convertTransferToDataPtr+0x14>
        *length = transfer->payload_len;
 80023f2:	700b      	strb	r3, [r1, #0]
        uint8_t bytesRead = 0;
 80023f4:	2400      	movs	r4, #0
        while (bytesRead < *length) {
 80023f6:	e017      	b.n	8002428 <convertTransferToDataPtr+0x44>
        softAssert(0, "Exceeded expected packet length");
 80023f8:	4811      	ldr	r0, [pc, #68]	; (8002440 <convertTransferToDataPtr+0x5c>)
 80023fa:	f7fe ff9d 	bl	8001338 <softAssertTmp>
        *length = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	702b      	strb	r3, [r5, #0]
        return NULL;
 8002402:	2000      	movs	r0, #0
 8002404:	e01a      	b.n	800243c <convertTransferToDataPtr+0x58>
            canardDecodeScalar(transfer, 8*bytesRead, 8*readLength, false, &canDrv.currentRxPacket[bytesRead]);
 8002406:	00d9      	lsls	r1, r3, #3
 8002408:	b2d7      	uxtb	r7, r2
 800240a:	22b7      	movs	r2, #183	; 0xb7
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	4694      	mov	ip, r2
 8002410:	4463      	add	r3, ip
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <convertTransferToDataPtr+0x60>)
 8002414:	189b      	adds	r3, r3, r2
 8002416:	00fa      	lsls	r2, r7, #3
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	0030      	movs	r0, r6
 8002420:	f001 fff4 	bl	800440c <canardDecodeScalar>
            bytesRead += readLength;
 8002424:	193c      	adds	r4, r7, r4
 8002426:	b2e4      	uxtb	r4, r4
        while (bytesRead < *length) {
 8002428:	782a      	ldrb	r2, [r5, #0]
 800242a:	42a2      	cmp	r2, r4
 800242c:	d905      	bls.n	800243a <convertTransferToDataPtr+0x56>
            uint16_t readLength = MIN((*length - bytesRead), 8);
 800242e:	0023      	movs	r3, r4
 8002430:	1b12      	subs	r2, r2, r4
 8002432:	2a08      	cmp	r2, #8
 8002434:	dde7      	ble.n	8002406 <convertTransferToDataPtr+0x22>
 8002436:	2208      	movs	r2, #8
 8002438:	e7e5      	b.n	8002406 <convertTransferToDataPtr+0x22>
        return canDrv.currentRxPacket;
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <convertTransferToDataPtr+0x64>)
}
 800243c:	b003      	add	sp, #12
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002440:	08007780 	.word	0x08007780
 8002444:	20000420 	.word	0x20000420
 8002448:	200009d8 	.word	0x200009d8

0800244c <hookCanFrameTransmitted>:
__attribute__((weak)) void hookCanFrameTransmitted(uint64_t timestamp, const CanardCANFrame *frame) {}
 800244c:	4770      	bx	lr

0800244e <hookCanFrameReceived>:
__attribute__((weak)) void hookCanFrameReceived(uint64_t timestamp, const CanardCANFrame *frame) {}
 800244e:	4770      	bx	lr

08002450 <processUavCanFrames>:
static void processUavCanFrames(const uint64_t timestamp) {
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	46de      	mov	lr, fp
 8002454:	4657      	mov	r7, sl
 8002456:	464e      	mov	r6, r9
 8002458:	4645      	mov	r5, r8
 800245a:	b5e0      	push	{r5, r6, r7, lr}
 800245c:	b085      	sub	sp, #20
 800245e:	4681      	mov	r9, r0
 8002460:	4688      	mov	r8, r1
    for (uint8_t iter=0; (iter<MAX_UAVCAN_TX_RX_ITERATIONS) && (txValid || rxValid); iter++) {
 8002462:	2600      	movs	r6, #0
    bool rxValid = 1;
 8002464:	2401      	movs	r4, #1
    bool txValid = 1;
 8002466:	2701      	movs	r7, #1
    for (uint8_t iter=0; (iter<MAX_UAVCAN_TX_RX_ITERATIONS) && (txValid || rxValid); iter++) {
 8002468:	e010      	b.n	800248c <processUavCanFrames+0x3c>
        txValid = (txFrame != NULL && !BUFFER_FULL(canDrv.txBuffer));
 800246a:	2700      	movs	r7, #0
        if (txValid) {
 800246c:	2f00      	cmp	r7, #0
 800246e:	d129      	bne.n	80024c4 <processUavCanFrames+0x74>
        rxValid = !BUFFER_EMPTY(canDrv.rxBuffer);
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <processUavCanFrames+0x1bc>)
 8002472:	22b6      	movs	r2, #182	; 0xb6
 8002474:	00d2      	lsls	r2, r2, #3
 8002476:	5c9d      	ldrb	r5, [r3, r2]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <processUavCanFrames+0x1c0>)
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	1aec      	subs	r4, r5, r3
 800247e:	1e62      	subs	r2, r4, #1
 8002480:	4194      	sbcs	r4, r2
 8002482:	b2e4      	uxtb	r4, r4
        if (rxValid) {
 8002484:	429d      	cmp	r5, r3
 8002486:	d171      	bne.n	800256c <processUavCanFrames+0x11c>
    for (uint8_t iter=0; (iter<MAX_UAVCAN_TX_RX_ITERATIONS) && (txValid || rxValid); iter++) {
 8002488:	3601      	adds	r6, #1
 800248a:	b2f6      	uxtb	r6, r6
 800248c:	2e13      	cmp	r6, #19
 800248e:	d900      	bls.n	8002492 <processUavCanFrames+0x42>
 8002490:	e0b5      	b.n	80025fe <processUavCanFrames+0x1ae>
 8002492:	433c      	orrs	r4, r7
 8002494:	d100      	bne.n	8002498 <processUavCanFrames+0x48>
 8002496:	e0b2      	b.n	80025fe <processUavCanFrames+0x1ae>
        const CanardCANFrame * txFrame = canardPeekTxQueue(&canDrv.gCanard);
 8002498:	485c      	ldr	r0, [pc, #368]	; (800260c <processUavCanFrames+0x1bc>)
 800249a:	f001 ff67 	bl	800436c <canardPeekTxQueue>
 800249e:	1e05      	subs	r5, r0, #0
        txValid = (txFrame != NULL && !BUFFER_FULL(canDrv.txBuffer));
 80024a0:	d0e3      	beq.n	800246a <processUavCanFrames+0x1a>
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <processUavCanFrames+0x1bc>)
 80024a4:	22b5      	movs	r2, #181	; 0xb5
 80024a6:	00d2      	lsls	r2, r2, #3
 80024a8:	5c9c      	ldrb	r4, [r3, r2]
 80024aa:	4a5a      	ldr	r2, [pc, #360]	; (8002614 <processUavCanFrames+0x1c4>)
 80024ac:	5c98      	ldrb	r0, [r3, r2]
 80024ae:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <processUavCanFrames+0x1c8>)
 80024b0:	5c9a      	ldrb	r2, [r3, r2]
 80024b2:	2101      	movs	r1, #1
 80024b4:	f001 fa0e 	bl	80038d4 <incrAndWrap>
 80024b8:	4284      	cmp	r4, r0
 80024ba:	d001      	beq.n	80024c0 <processUavCanFrames+0x70>
 80024bc:	2701      	movs	r7, #1
 80024be:	e7d5      	b.n	800246c <processUavCanFrames+0x1c>
 80024c0:	2700      	movs	r7, #0
 80024c2:	e7d3      	b.n	800246c <processUavCanFrames+0x1c>
            canDrv.stats.txUavCount++;
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <processUavCanFrames+0x1bc>)
 80024c6:	21df      	movs	r1, #223	; 0xdf
 80024c8:	00c9      	lsls	r1, r1, #3
 80024ca:	5a5a      	ldrh	r2, [r3, r1]
 80024cc:	3201      	adds	r2, #1
 80024ce:	525a      	strh	r2, [r3, r1]
            BUFFER_APPEND(canDrv.txBuffer, *txFrame);
 80024d0:	22b5      	movs	r2, #181	; 0xb5
 80024d2:	00d2      	lsls	r2, r2, #3
 80024d4:	5c9c      	ldrb	r4, [r3, r2]
 80024d6:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <processUavCanFrames+0x1c4>)
 80024d8:	5c98      	ldrb	r0, [r3, r2]
 80024da:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <processUavCanFrames+0x1c8>)
 80024dc:	5c9a      	ldrb	r2, [r3, r2]
 80024de:	2101      	movs	r1, #1
 80024e0:	f001 f9f8 	bl	80038d4 <incrAndWrap>
 80024e4:	4284      	cmp	r4, r0
 80024e6:	d032      	beq.n	800254e <processUavCanFrames+0xfe>
 80024e8:	4b4c      	ldr	r3, [pc, #304]	; (800261c <processUavCanFrames+0x1cc>)
 80024ea:	4a48      	ldr	r2, [pc, #288]	; (800260c <processUavCanFrames+0x1bc>)
 80024ec:	58d3      	ldr	r3, [r2, r3]
 80024ee:	4a49      	ldr	r2, [pc, #292]	; (8002614 <processUavCanFrames+0x1c4>)
 80024f0:	4692      	mov	sl, r2
 80024f2:	4946      	ldr	r1, [pc, #280]	; (800260c <processUavCanFrames+0x1bc>)
 80024f4:	5c8a      	ldrb	r2, [r1, r2]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	189b      	adds	r3, r3, r2
 80024fa:	0029      	movs	r1, r5
 80024fc:	c915      	ldmia	r1!, {r0, r2, r4}
 80024fe:	c315      	stmia	r3!, {r0, r2, r4}
 8002500:	001a      	movs	r2, r3
 8002502:	680b      	ldr	r3, [r1, #0]
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4653      	mov	r3, sl
 8002508:	4a40      	ldr	r2, [pc, #256]	; (800260c <processUavCanFrames+0x1bc>)
 800250a:	5cd0      	ldrb	r0, [r2, r3]
 800250c:	4b42      	ldr	r3, [pc, #264]	; (8002618 <processUavCanFrames+0x1c8>)
 800250e:	469b      	mov	fp, r3
 8002510:	5cd2      	ldrb	r2, [r2, r3]
 8002512:	2101      	movs	r1, #1
 8002514:	f001 f9de 	bl	80038d4 <incrAndWrap>
 8002518:	b2c0      	uxtb	r0, r0
 800251a:	4653      	mov	r3, sl
 800251c:	4a3b      	ldr	r2, [pc, #236]	; (800260c <processUavCanFrames+0x1bc>)
 800251e:	54d0      	strb	r0, [r2, r3]
            canDrv.txBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.txBuffer), canDrv.txBuffer.maxUsage);
 8002520:	3b01      	subs	r3, #1
 8002522:	5cd1      	ldrb	r1, [r2, r3]
 8002524:	465b      	mov	r3, fp
 8002526:	5cd2      	ldrb	r2, [r2, r3]
 8002528:	f001 f9d9 	bl	80038de <decrAndWrap>
 800252c:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <processUavCanFrames+0x1d0>)
 800252e:	4a37      	ldr	r2, [pc, #220]	; (800260c <processUavCanFrames+0x1bc>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	4298      	cmp	r0, r3
 8002534:	dc0f      	bgt.n	8002556 <processUavCanFrames+0x106>
 8002536:	4c35      	ldr	r4, [pc, #212]	; (800260c <processUavCanFrames+0x1bc>)
 8002538:	4a39      	ldr	r2, [pc, #228]	; (8002620 <processUavCanFrames+0x1d0>)
 800253a:	54a3      	strb	r3, [r4, r2]
            hookCanFrameTransmitted(timestamp, txFrame);
 800253c:	002a      	movs	r2, r5
 800253e:	4648      	mov	r0, r9
 8002540:	4641      	mov	r1, r8
 8002542:	f7ff ff83 	bl	800244c <hookCanFrameTransmitted>
            canardPopTxQueue(&canDrv.gCanard);
 8002546:	0020      	movs	r0, r4
 8002548:	f001 ff15 	bl	8004376 <canardPopTxQueue>
 800254c:	e790      	b.n	8002470 <processUavCanFrames+0x20>
            BUFFER_APPEND(canDrv.txBuffer, *txFrame);
 800254e:	4835      	ldr	r0, [pc, #212]	; (8002624 <processUavCanFrames+0x1d4>)
 8002550:	f7fe fef2 	bl	8001338 <softAssertTmp>
 8002554:	e7c8      	b.n	80024e8 <processUavCanFrames+0x98>
            canDrv.txBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.txBuffer), canDrv.txBuffer.maxUsage);
 8002556:	0013      	movs	r3, r2
 8002558:	4652      	mov	r2, sl
 800255a:	5c98      	ldrb	r0, [r3, r2]
 800255c:	3a01      	subs	r2, #1
 800255e:	5c99      	ldrb	r1, [r3, r2]
 8002560:	465a      	mov	r2, fp
 8002562:	5c9a      	ldrb	r2, [r3, r2]
 8002564:	f001 f9bb 	bl	80038de <decrAndWrap>
 8002568:	b2c3      	uxtb	r3, r0
 800256a:	e7e4      	b.n	8002536 <processUavCanFrames+0xe6>
            canDrv.stats.rxUavCount++;
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <processUavCanFrames+0x1bc>)
 800256e:	469a      	mov	sl, r3
 8002570:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <processUavCanFrames+0x1d8>)
 8002572:	5a9b      	ldrh	r3, [r3, r2]
 8002574:	3301      	adds	r3, #1
 8002576:	4651      	mov	r1, sl
 8002578:	528b      	strh	r3, [r1, r2]
            CanardCANFrame * rxFrame = BUFFER_PEEK(canDrv.rxBuffer);
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <processUavCanFrames+0x1dc>)
 800257c:	58cb      	ldr	r3, [r1, r3]
 800257e:	012d      	lsls	r5, r5, #4
 8002580:	195d      	adds	r5, r3, r5
            hookCanFrameReceived(timestamp, rxFrame);
 8002582:	002a      	movs	r2, r5
 8002584:	4648      	mov	r0, r9
 8002586:	4641      	mov	r1, r8
 8002588:	f7ff ff61 	bl	800244e <hookCanFrameReceived>
            volatile int16_t res = canardHandleRxFrame(&canDrv.gCanard, rxFrame, timestamp, USING_SERIAL_LINK);
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	464a      	mov	r2, r9
 8002592:	4643      	mov	r3, r8
 8002594:	0029      	movs	r1, r5
 8002596:	4650      	mov	r0, sl
 8002598:	f002 f8f2 	bl	8004780 <canardHandleRxFrame>
 800259c:	230e      	movs	r3, #14
 800259e:	446b      	add	r3, sp
 80025a0:	8018      	strh	r0, [r3, #0]
            if (!(res == 0
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d010      	beq.n	80025cc <processUavCanFrames+0x17c>
                || res == -CANARD_ERROR_RX_NOT_WANTED
 80025aa:	230e      	movs	r3, #14
 80025ac:	446b      	add	r3, sp
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	330c      	adds	r3, #12
 80025b4:	d00a      	beq.n	80025cc <processUavCanFrames+0x17c>
                || res == -CANARD_ERROR_RX_WRONG_ADDRESS)) {
 80025b6:	230e      	movs	r3, #14
 80025b8:	446b      	add	r3, sp
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b21b      	sxth	r3, r3
            if (!(res == 0
 80025be:	330b      	adds	r3, #11
 80025c0:	d004      	beq.n	80025cc <processUavCanFrames+0x17c>
                canDrv.stats.rxInvalidUavFrameCount++;
 80025c2:	4912      	ldr	r1, [pc, #72]	; (800260c <processUavCanFrames+0x1bc>)
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <processUavCanFrames+0x1e0>)
 80025c6:	5a8b      	ldrh	r3, [r1, r2]
 80025c8:	3301      	adds	r3, #1
 80025ca:	528b      	strh	r3, [r1, r2]
            BUFFER_POP(canDrv.rxBuffer);
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <processUavCanFrames+0x1bc>)
 80025ce:	22b6      	movs	r2, #182	; 0xb6
 80025d0:	00d2      	lsls	r2, r2, #3
 80025d2:	5c9a      	ldrb	r2, [r3, r2]
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <processUavCanFrames+0x1c0>)
 80025d6:	5c5b      	ldrb	r3, [r3, r1]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d00c      	beq.n	80025f6 <processUavCanFrames+0x1a6>
 80025dc:	4d0b      	ldr	r5, [pc, #44]	; (800260c <processUavCanFrames+0x1bc>)
 80025de:	23b6      	movs	r3, #182	; 0xb6
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	469a      	mov	sl, r3
 80025e4:	5ce8      	ldrb	r0, [r5, r3]
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <processUavCanFrames+0x1e4>)
 80025e8:	5cea      	ldrb	r2, [r5, r3]
 80025ea:	2101      	movs	r1, #1
 80025ec:	f001 f972 	bl	80038d4 <incrAndWrap>
 80025f0:	4653      	mov	r3, sl
 80025f2:	54e8      	strb	r0, [r5, r3]
 80025f4:	e748      	b.n	8002488 <processUavCanFrames+0x38>
 80025f6:	4810      	ldr	r0, [pc, #64]	; (8002638 <processUavCanFrames+0x1e8>)
 80025f8:	f7fe fe9e 	bl	8001338 <softAssertTmp>
 80025fc:	e7ee      	b.n	80025dc <processUavCanFrames+0x18c>
}
 80025fe:	b005      	add	sp, #20
 8002600:	bcf0      	pop	{r4, r5, r6, r7}
 8002602:	46bb      	mov	fp, r7
 8002604:	46b2      	mov	sl, r6
 8002606:	46a9      	mov	r9, r5
 8002608:	46a0      	mov	r8, r4
 800260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260c:	20000420 	.word	0x20000420
 8002610:	000005b1 	.word	0x000005b1
 8002614:	000005a9 	.word	0x000005a9
 8002618:	000005aa 	.word	0x000005aa
 800261c:	000005ac 	.word	0x000005ac
 8002620:	000005ab 	.word	0x000005ab
 8002624:	080077a0 	.word	0x080077a0
 8002628:	000006fa 	.word	0x000006fa
 800262c:	000005b4 	.word	0x000005b4
 8002630:	00000704 	.word	0x00000704
 8002634:	000005b2 	.word	0x000005b2
 8002638:	080077c0 	.word	0x080077c0

0800263c <usleep>:
int usleep(useconds_t usec) {
 800263c:	b510      	push	{r4, lr}
    HAL_Delay((uint32_t) (usec / 1000));
 800263e:	21fa      	movs	r1, #250	; 0xfa
 8002640:	0089      	lsls	r1, r1, #2
 8002642:	f7fd fd83 	bl	800014c <__udivsi3>
 8002646:	f002 ff53 	bl	80054f0 <HAL_Delay>
}
 800264a:	2000      	movs	r0, #0
 800264c:	bd10      	pop	{r4, pc}
	...

08002650 <getMonotonicTimestampUSec>:
    return canDrv.globalMicroSeconds;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <getMonotonicTimestampUSec+0x10>)
 8002652:	22e3      	movs	r2, #227	; 0xe3
 8002654:	00d2      	lsls	r2, r2, #3
 8002656:	4694      	mov	ip, r2
 8002658:	4463      	add	r3, ip
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
}
 800265e:	4770      	bx	lr
 8002660:	20000420 	.word	0x20000420

08002664 <makeNodeStatusMessage>:
static void makeNodeStatusMessage(uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE]) {
 8002664:	b530      	push	{r4, r5, lr}
 8002666:	b083      	sub	sp, #12
 8002668:	0004      	movs	r4, r0
    memset(buffer, 0, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 800266a:	2207      	movs	r2, #7
 800266c:	2100      	movs	r1, #0
 800266e:	f004 ff14 	bl	800749a <memset>
    if (startedAtSec == 0) {
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <makeNodeStatusMessage+0x64>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <makeNodeStatusMessage+0x26>
        startedAtSec = (uint32_t) (getMonotonicTimestampUSec() / 1000000U);
 800267a:	f7ff ffe9 	bl	8002650 <getMonotonicTimestampUSec>
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <makeNodeStatusMessage+0x68>)
 8002680:	2300      	movs	r3, #0
 8002682:	f7fd fdef 	bl	8000264 <__aeabi_uldivmod>
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <makeNodeStatusMessage+0x64>)
 8002688:	6018      	str	r0, [r3, #0]
    const uint32_t uptimeSec = ((uint32_t) (getMonotonicTimestampUSec() / 1000000U)) - startedAtSec;
 800268a:	f7ff ffe1 	bl	8002650 <getMonotonicTimestampUSec>
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <makeNodeStatusMessage+0x68>)
 8002690:	2300      	movs	r3, #0
 8002692:	f7fd fde7 	bl	8000264 <__aeabi_uldivmod>
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <makeNodeStatusMessage+0x64>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1ac0      	subs	r0, r0, r3
 800269c:	9001      	str	r0, [sp, #4]
    canardEncodeScalar(buffer, 0, 32, &uptimeSec);
 800269e:	ab01      	add	r3, sp, #4
 80026a0:	2220      	movs	r2, #32
 80026a2:	2100      	movs	r1, #0
 80026a4:	0020      	movs	r0, r4
 80026a6:	f001 ffe9 	bl	800467c <canardEncodeScalar>
    canardEncodeScalar(buffer, 32, 2, &canDrv.nodeHealth);
 80026aa:	4d09      	ldr	r5, [pc, #36]	; (80026d0 <makeNodeStatusMessage+0x6c>)
 80026ac:	002b      	movs	r3, r5
 80026ae:	2202      	movs	r2, #2
 80026b0:	2120      	movs	r1, #32
 80026b2:	0020      	movs	r0, r4
 80026b4:	f001 ffe2 	bl	800467c <canardEncodeScalar>
    canardEncodeScalar(buffer, 34, 3, &canDrv.nodeMode);
 80026b8:	1c6b      	adds	r3, r5, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	2122      	movs	r1, #34	; 0x22
 80026be:	0020      	movs	r0, r4
 80026c0:	f001 ffdc 	bl	800467c <canardEncodeScalar>
}
 80026c4:	b003      	add	sp, #12
 80026c6:	bd30      	pop	{r4, r5, pc}
 80026c8:	20000b48 	.word	0x20000b48
 80026cc:	000f4240 	.word	0x000f4240
 80026d0:	20000af0 	.word	0x20000af0

080026d4 <getNodeInfoResponse>:
static void getNodeInfoResponse(uint8_t * buffer, uint32_t * bufferSize, uint32_t maxBufferSize) {
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	0004      	movs	r4, r0
 80026da:	000f      	movs	r7, r1
 80026dc:	0016      	movs	r6, r2
    makeNodeStatusMessage(buffer);
 80026de:	f7ff ffc1 	bl	8002664 <makeNodeStatusMessage>
    buffer[7] = APP_VERSION_MAJOR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	71e3      	strb	r3, [r4, #7]
    buffer[8] = APP_VERSION_MINOR;
 80026e6:	7223      	strb	r3, [r4, #8]
    buffer[9] = 1; // Optional field flags, VCS commit is set
 80026e8:	7263      	strb	r3, [r4, #9]
    uint32_t u32 = GIT_HASH;
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <getNodeInfoResponse+0x60>)
 80026ec:	9301      	str	r3, [sp, #4]
    canardEncodeScalar(buffer, 80, 32, &u32);
 80026ee:	ab01      	add	r3, sp, #4
 80026f0:	2220      	movs	r2, #32
 80026f2:	2150      	movs	r1, #80	; 0x50
 80026f4:	0020      	movs	r0, r4
 80026f6:	f001 ffc1 	bl	800467c <canardEncodeScalar>
    readUniqueID(&buffer[24]);
 80026fa:	0020      	movs	r0, r4
 80026fc:	3018      	adds	r0, #24
 80026fe:	f7ff fe23 	bl	8002348 <readUniqueID>
    const size_t nameLen = strlen(getBoardNodeName());
 8002702:	f7fe fd11 	bl	8001128 <getBoardNodeName>
 8002706:	f7fd fd19 	bl	800013c <strlen>
 800270a:	0005      	movs	r5, r0
    *bufferSize = 41 + nameLen;
 800270c:	0003      	movs	r3, r0
 800270e:	3329      	adds	r3, #41	; 0x29
 8002710:	603b      	str	r3, [r7, #0]
    softAssert(*bufferSize < maxBufferSize, "Exceeded node info max size");
 8002712:	42b3      	cmp	r3, r6
 8002714:	d209      	bcs.n	800272a <getNodeInfoResponse+0x56>
    memcpy(&buffer[41], getBoardNodeName(), nameLen);
 8002716:	3429      	adds	r4, #41	; 0x29
 8002718:	f7fe fd06 	bl	8001128 <getBoardNodeName>
 800271c:	0001      	movs	r1, r0
 800271e:	002a      	movs	r2, r5
 8002720:	0020      	movs	r0, r4
 8002722:	f004 feb1 	bl	8007488 <memcpy>
}
 8002726:	b003      	add	sp, #12
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(*bufferSize < maxBufferSize, "Exceeded node info max size");
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <getNodeInfoResponse+0x64>)
 800272c:	f7fe fe04 	bl	8001338 <softAssertTmp>
 8002730:	e7f1      	b.n	8002716 <getNodeInfoResponse+0x42>
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	badc0ffe 	.word	0xbadc0ffe
 8002738:	080077e0 	.word	0x080077e0

0800273c <handleNodeAllocationBroadcast>:
static void handleNodeAllocationBroadcast(CanardRxTransfer *transfer, uint8_t * data, uint8_t dataLength) {
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	0005      	movs	r5, r0
 8002742:	000c      	movs	r4, r1
 8002744:	9201      	str	r2, [sp, #4]
    uint64_t tmp = getRandomInt(UAVCAN_NODE_ID_ALLOCATION_RANDOM_TIMEOUT_RANGE_USEC);
 8002746:	4822      	ldr	r0, [pc, #136]	; (80027d0 <handleNodeAllocationBroadcast+0x94>)
 8002748:	f001 f8c2 	bl	80038d0 <getRandomInt>
 800274c:	0006      	movs	r6, r0
 800274e:	2700      	movs	r7, #0
    canDrv.sendNextNodeIdAllocationRequestAt = getMonotonicTimestampUSec()
 8002750:	f7ff ff7e 	bl	8002650 <getMonotonicTimestampUSec>
        + (uint64_t) (tmp);
 8002754:	1980      	adds	r0, r0, r6
 8002756:	4179      	adcs	r1, r7
 8002758:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <handleNodeAllocationBroadcast+0x98>)
 800275a:	2300      	movs	r3, #0
 800275c:	1880      	adds	r0, r0, r2
 800275e:	4159      	adcs	r1, r3
    canDrv.sendNextNodeIdAllocationRequestAt = getMonotonicTimestampUSec()
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <handleNodeAllocationBroadcast+0x9c>)
 8002762:	22d7      	movs	r2, #215	; 0xd7
 8002764:	00d2      	lsls	r2, r2, #3
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	6018      	str	r0, [r3, #0]
 800276c:	6059      	str	r1, [r3, #4]
    if (transfer->source_node_id == CANARD_BROADCAST_NODE_ID) {
 800276e:	7eeb      	ldrb	r3, [r5, #27]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <handleNodeAllocationBroadcast+0x46>
        canDrv.nodeIdAllocationUniqueIdOffset = 0;
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <handleNodeAllocationBroadcast+0x9c>)
 8002776:	23d8      	movs	r3, #216	; 0xd8
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	2100      	movs	r1, #0
 800277c:	54d1      	strb	r1, [r2, r3]
}
 800277e:	b007      	add	sp, #28
 8002780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    readUniqueID(myId);
 8002782:	a802      	add	r0, sp, #8
 8002784:	f7ff fde0 	bl	8002348 <readUniqueID>
    uint8_t receivedIdLen = dataLength - 1;
 8002788:	9d01      	ldr	r5, [sp, #4]
 800278a:	3d01      	subs	r5, #1
 800278c:	b2ed      	uxtb	r5, r5
    uint8_t * receivedId = &data[1];
 800278e:	1c60      	adds	r0, r4, #1
    if (memcmp(receivedId, myId, receivedIdLen) != 0) {
 8002790:	002a      	movs	r2, r5
 8002792:	a902      	add	r1, sp, #8
 8002794:	f004 fe6a 	bl	800746c <memcmp>
 8002798:	2800      	cmp	r0, #0
 800279a:	d108      	bne.n	80027ae <handleNodeAllocationBroadcast+0x72>
    canDrv.newNodeAllocationInfo = 1;
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <handleNodeAllocationBroadcast+0x9c>)
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <handleNodeAllocationBroadcast+0xa0>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	54d1      	strb	r1, [r2, r3]
    if (receivedIdLen < UNIQUE_ID_LENGTH_BYTES) {
 80027a4:	2d0f      	cmp	r5, #15
 80027a6:	d808      	bhi.n	80027ba <handleNodeAllocationBroadcast+0x7e>
        canDrv.nodeIdAllocationUniqueIdOffset = receivedIdLen;
 80027a8:	3b01      	subs	r3, #1
 80027aa:	54d5      	strb	r5, [r2, r3]
 80027ac:	e7e7      	b.n	800277e <handleNodeAllocationBroadcast+0x42>
        canDrv.nodeIdAllocationUniqueIdOffset = 0;
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <handleNodeAllocationBroadcast+0x9c>)
 80027b0:	23d8      	movs	r3, #216	; 0xd8
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	2100      	movs	r1, #0
 80027b6:	54d1      	strb	r1, [r2, r3]
        return; // No match, return
 80027b8:	e7e1      	b.n	800277e <handleNodeAllocationBroadcast+0x42>
        uint8_t allocated_node_id = data[0] >> 1;
 80027ba:	7821      	ldrb	r1, [r4, #0]
 80027bc:	0849      	lsrs	r1, r1, #1
            canardSetLocalNodeID(&canDrv.gCanard, allocated_node_id);
 80027be:	4c06      	ldr	r4, [pc, #24]	; (80027d8 <handleNodeAllocationBroadcast+0x9c>)
 80027c0:	0020      	movs	r0, r4
 80027c2:	f001 fd01 	bl	80041c8 <canardSetLocalNodeID>
            canDrv.nodeIdAllocated = 1;
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <handleNodeAllocationBroadcast+0xa4>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	54e2      	strb	r2, [r4, r3]
 80027cc:	e7d7      	b.n	800277e <handleNodeAllocationBroadcast+0x42>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	00061a80 	.word	0x00061a80
 80027d4:	000927c0 	.word	0x000927c0
 80027d8:	20000420 	.word	0x20000420
 80027dc:	000006c1 	.word	0x000006c1
 80027e0:	000006c2 	.word	0x000006c2

080027e4 <getDataTypeSignature>:
uint64_t getDataTypeSignature(bool isBroadcast, uint16_t dataTypeId) {
 80027e4:	b510      	push	{r4, lr}
    if (isBroadcast) {
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d020      	beq.n	800282c <getDataTypeSignature+0x48>
        switch (dataTypeId) {
 80027ea:	4b25      	ldr	r3, [pc, #148]	; (8002880 <getDataTypeSignature+0x9c>)
 80027ec:	4299      	cmp	r1, r3
 80027ee:	d034      	beq.n	800285a <getDataTypeSignature+0x76>
 80027f0:	d80d      	bhi.n	800280e <getDataTypeSignature+0x2a>
 80027f2:	2903      	cmp	r1, #3
 80027f4:	d034      	beq.n	8002860 <getDataTypeSignature+0x7c>
 80027f6:	2356      	movs	r3, #86	; 0x56
 80027f8:	33ff      	adds	r3, #255	; 0xff
 80027fa:	4299      	cmp	r1, r3
 80027fc:	d102      	bne.n	8002804 <getDataTypeSignature+0x20>
                return UAVCAN_NODE_STATUS_DATA_TYPE_SIGNATURE;
 80027fe:	4821      	ldr	r0, [pc, #132]	; (8002884 <getDataTypeSignature+0xa0>)
 8002800:	4921      	ldr	r1, [pc, #132]	; (8002888 <getDataTypeSignature+0xa4>)
 8002802:	e00c      	b.n	800281e <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 8002804:	2901      	cmp	r1, #1
 8002806:	d10b      	bne.n	8002820 <getDataTypeSignature+0x3c>
 8002808:	4820      	ldr	r0, [pc, #128]	; (800288c <getDataTypeSignature+0xa8>)
 800280a:	4921      	ldr	r1, [pc, #132]	; (8002890 <getDataTypeSignature+0xac>)
 800280c:	e007      	b.n	800281e <getDataTypeSignature+0x3a>
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <getDataTypeSignature+0xb0>)
 8002810:	4299      	cmp	r1, r3
 8002812:	d028      	beq.n	8002866 <getDataTypeSignature+0x82>
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <getDataTypeSignature+0xb4>)
 8002816:	4299      	cmp	r1, r3
 8002818:	d102      	bne.n	8002820 <getDataTypeSignature+0x3c>
                return 0;
 800281a:	2000      	movs	r0, #0
 800281c:	2100      	movs	r1, #0
}
 800281e:	bd10      	pop	{r4, pc}
                softAssert(0, "Unknown dataTypeId");
 8002820:	481e      	ldr	r0, [pc, #120]	; (800289c <getDataTypeSignature+0xb8>)
 8002822:	f7fe fd89 	bl	8001338 <softAssertTmp>
                return 0;
 8002826:	2000      	movs	r0, #0
 8002828:	2100      	movs	r1, #0
 800282a:	e7f8      	b.n	800281e <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 800282c:	29ca      	cmp	r1, #202	; 0xca
 800282e:	d01d      	beq.n	800286c <getDataTypeSignature+0x88>
 8002830:	d906      	bls.n	8002840 <getDataTypeSignature+0x5c>
 8002832:	29cc      	cmp	r1, #204	; 0xcc
 8002834:	d020      	beq.n	8002878 <getDataTypeSignature+0x94>
 8002836:	29d8      	cmp	r1, #216	; 0xd8
 8002838:	d109      	bne.n	800284e <getDataTypeSignature+0x6a>
                return AF_SET_FIELDS_DATA_TYPE_SIGNATURE;
 800283a:	4819      	ldr	r0, [pc, #100]	; (80028a0 <getDataTypeSignature+0xbc>)
 800283c:	4919      	ldr	r1, [pc, #100]	; (80028a4 <getDataTypeSignature+0xc0>)
 800283e:	e7ee      	b.n	800281e <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 8002840:	2901      	cmp	r1, #1
 8002842:	d016      	beq.n	8002872 <getDataTypeSignature+0x8e>
 8002844:	29c8      	cmp	r1, #200	; 0xc8
 8002846:	d102      	bne.n	800284e <getDataTypeSignature+0x6a>
                return AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_SIGNATURE;
 8002848:	4817      	ldr	r0, [pc, #92]	; (80028a8 <getDataTypeSignature+0xc4>)
 800284a:	4918      	ldr	r1, [pc, #96]	; (80028ac <getDataTypeSignature+0xc8>)
 800284c:	e7e7      	b.n	800281e <getDataTypeSignature+0x3a>
                softAssert(0, "Unknown dataTypeId");
 800284e:	4813      	ldr	r0, [pc, #76]	; (800289c <getDataTypeSignature+0xb8>)
 8002850:	f7fe fd72 	bl	8001338 <softAssertTmp>
                return 0;
 8002854:	2000      	movs	r0, #0
 8002856:	2100      	movs	r1, #0
 8002858:	e7e1      	b.n	800281e <getDataTypeSignature+0x3a>
                return AF_PUBLISHED_FIELDS_DATA_TYPE_SIGNATURE;
 800285a:	4815      	ldr	r0, [pc, #84]	; (80028b0 <getDataTypeSignature+0xcc>)
 800285c:	4915      	ldr	r1, [pc, #84]	; (80028b4 <getDataTypeSignature+0xd0>)
 800285e:	e7de      	b.n	800281e <getDataTypeSignature+0x3a>
                return 0;
 8002860:	2000      	movs	r0, #0
 8002862:	2100      	movs	r1, #0
 8002864:	e7db      	b.n	800281e <getDataTypeSignature+0x3a>
                return 0;
 8002866:	2000      	movs	r0, #0
 8002868:	2100      	movs	r1, #0
 800286a:	e7d8      	b.n	800281e <getDataTypeSignature+0x3a>
                return AF_GET_PREFERRED_NAME_DATA_TYPE_SIGNATURE;
 800286c:	4812      	ldr	r0, [pc, #72]	; (80028b8 <getDataTypeSignature+0xd4>)
 800286e:	4913      	ldr	r1, [pc, #76]	; (80028bc <getDataTypeSignature+0xd8>)
 8002870:	e7d5      	b.n	800281e <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 8002872:	4813      	ldr	r0, [pc, #76]	; (80028c0 <getDataTypeSignature+0xdc>)
 8002874:	4913      	ldr	r1, [pc, #76]	; (80028c4 <getDataTypeSignature+0xe0>)
 8002876:	e7d2      	b.n	800281e <getDataTypeSignature+0x3a>
                return AF_GET_FIELD_META_DATA_DATA_TYPE_SIGNATURE;
 8002878:	4813      	ldr	r0, [pc, #76]	; (80028c8 <getDataTypeSignature+0xe4>)
 800287a:	4914      	ldr	r1, [pc, #80]	; (80028cc <getDataTypeSignature+0xe8>)
 800287c:	e7cf      	b.n	800281e <getDataTypeSignature+0x3a>
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	00004e20 	.word	0x00004e20
 8002884:	c1a7c6f1 	.word	0xc1a7c6f1
 8002888:	0f0868d0 	.word	0x0f0868d0
 800288c:	20a11d40 	.word	0x20a11d40
 8002890:	0b2a8126 	.word	0x0b2a8126
 8002894:	00005206 	.word	0x00005206
 8002898:	00005207 	.word	0x00005207
 800289c:	080077fc 	.word	0x080077fc
 80028a0:	ef513a1f 	.word	0xef513a1f
 80028a4:	7d07c058 	.word	0x7d07c058
 80028a8:	26f25016 	.word	0x26f25016
 80028ac:	ba43920c 	.word	0xba43920c
 80028b0:	bcd30eb0 	.word	0xbcd30eb0
 80028b4:	af951023 	.word	0xaf951023
 80028b8:	f779a9dd 	.word	0xf779a9dd
 80028bc:	eb3f9394 	.word	0xeb3f9394
 80028c0:	21c46a9e 	.word	0x21c46a9e
 80028c4:	ee468a81 	.word	0xee468a81
 80028c8:	1e1e0e09 	.word	0x1e1e0e09
 80028cc:	d997180a 	.word	0xd997180a

080028d0 <canLocalOrRemoteRequestOrRespond>:
                                                uint16_t payloadLength) {
 80028d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d2:	46ce      	mov	lr, r9
 80028d4:	4647      	mov	r7, r8
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b089      	sub	sp, #36	; 0x24
 80028da:	4689      	mov	r9, r1
 80028dc:	4690      	mov	r8, r2
 80028de:	001c      	movs	r4, r3
 80028e0:	ab11      	add	r3, sp, #68	; 0x44
 80028e2:	781f      	ldrb	r7, [r3, #0]
 80028e4:	ab12      	add	r3, sp, #72	; 0x48
 80028e6:	781d      	ldrb	r5, [r3, #0]
 80028e8:	ab14      	add	r3, sp, #80	; 0x50
 80028ea:	881e      	ldrh	r6, [r3, #0]
        return canardRequestOrRespond(
 80028ec:	0021      	movs	r1, r4
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7ff ff78 	bl	80027e4 <getDataTypeSignature>
 80028f4:	9607      	str	r6, [sp, #28]
 80028f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80028f8:	9306      	str	r3, [sp, #24]
 80028fa:	9505      	str	r5, [sp, #20]
 80028fc:	9704      	str	r7, [sp, #16]
 80028fe:	ab10      	add	r3, sp, #64	; 0x40
 8002900:	9303      	str	r3, [sp, #12]
 8002902:	b2e4      	uxtb	r4, r4
 8002904:	9402      	str	r4, [sp, #8]
 8002906:	9000      	str	r0, [sp, #0]
 8002908:	9101      	str	r1, [sp, #4]
 800290a:	4642      	mov	r2, r8
 800290c:	4649      	mov	r1, r9
 800290e:	4804      	ldr	r0, [pc, #16]	; (8002920 <canLocalOrRemoteRequestOrRespond+0x50>)
 8002910:	f001 fcd8 	bl	80042c4 <canardRequestOrRespond>
}
 8002914:	b009      	add	sp, #36	; 0x24
 8002916:	bcc0      	pop	{r6, r7}
 8002918:	46b9      	mov	r9, r7
 800291a:	46b0      	mov	r8, r6
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	20000420 	.word	0x20000420

08002924 <canLocalOrRemoteBroadcast>:
                    uint16_t payload_len) {
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002926:	46c6      	mov	lr, r8
 8002928:	b500      	push	{lr}
 800292a:	b086      	sub	sp, #24
 800292c:	4688      	mov	r8, r1
 800292e:	0014      	movs	r4, r2
 8002930:	001e      	movs	r6, r3
 8002932:	ab0c      	add	r3, sp, #48	; 0x30
 8002934:	781f      	ldrb	r7, [r3, #0]
 8002936:	ab0e      	add	r3, sp, #56	; 0x38
 8002938:	881d      	ldrh	r5, [r3, #0]
        uint64_t signature = getDataTypeSignature(true, dataTypeId);
 800293a:	0011      	movs	r1, r2
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff ff51 	bl	80027e4 <getDataTypeSignature>
 8002942:	0002      	movs	r2, r0
 8002944:	000b      	movs	r3, r1
        result = canardBroadcast(
 8002946:	9504      	str	r5, [sp, #16]
 8002948:	990d      	ldr	r1, [sp, #52]	; 0x34
 800294a:	9103      	str	r1, [sp, #12]
 800294c:	9702      	str	r7, [sp, #8]
 800294e:	9601      	str	r6, [sp, #4]
 8002950:	9400      	str	r4, [sp, #0]
 8002952:	4641      	mov	r1, r8
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <canLocalOrRemoteBroadcast+0x50>)
 8002956:	f001 fc53 	bl	8004200 <canardBroadcast>
        if (result <= 0) {
 800295a:	2800      	cmp	r0, #0
 800295c:	dd03      	ble.n	8002966 <canLocalOrRemoteBroadcast+0x42>
}
 800295e:	b006      	add	sp, #24
 8002960:	bc80      	pop	{r7}
 8002962:	46b8      	mov	r8, r7
 8002964:	bdf0      	pop	{r4, r5, r6, r7, pc}
            canDrv.stats.droppedTxPacketsOutOfMemory++;
 8002966:	4903      	ldr	r1, [pc, #12]	; (8002974 <canLocalOrRemoteBroadcast+0x50>)
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <canLocalOrRemoteBroadcast+0x54>)
 800296a:	5a8b      	ldrh	r3, [r1, r2]
 800296c:	3301      	adds	r3, #1
 800296e:	528b      	strh	r3, [r1, r2]
 8002970:	e7f5      	b.n	800295e <canLocalOrRemoteBroadcast+0x3a>
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	20000420 	.word	0x20000420
 8002978:	000006fe 	.word	0x000006fe

0800297c <getLocalNodeId>:
uint8_t getLocalNodeId() {
 800297c:	b510      	push	{r4, lr}
    return canardGetLocalNodeID(&canDrv.gCanard);
 800297e:	4802      	ldr	r0, [pc, #8]	; (8002988 <getLocalNodeId+0xc>)
 8002980:	f001 fc3c 	bl	80041fc <canardGetLocalNodeID>
}
 8002984:	bd10      	pop	{r4, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000420 	.word	0x20000420

0800298c <canRespondToRequest>:
static int16_t canRespondToRequest(bool canOverSerial, CanardRxTransfer *requestTransfer, uint8_t dataTypeId, const void* payload, uint16_t payloadLength) {
 800298c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298e:	46c6      	mov	lr, r8
 8002990:	b500      	push	{lr}
 8002992:	b088      	sub	sp, #32
 8002994:	4680      	mov	r8, r0
 8002996:	000d      	movs	r5, r1
 8002998:	9207      	str	r2, [sp, #28]
 800299a:	001f      	movs	r7, r3
 800299c:	ab0e      	add	r3, sp, #56	; 0x38
 800299e:	881e      	ldrh	r6, [r3, #0]
    uint8_t destNodeId = requestTransfer->source_node_id; // Reply to source node
 80029a0:	7ecc      	ldrb	r4, [r1, #27]
    return canLocalOrRemoteRequestOrRespond(
 80029a2:	f7ff ffeb 	bl	800297c <getLocalNodeId>
 80029a6:	0001      	movs	r1, r0
 80029a8:	466b      	mov	r3, sp
 80029aa:	8b9b      	ldrh	r3, [r3, #28]
 80029ac:	9604      	str	r6, [sp, #16]
 80029ae:	9703      	str	r7, [sp, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	7eaa      	ldrb	r2, [r5, #26]
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	7e6a      	ldrb	r2, [r5, #25]
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	0022      	movs	r2, r4
 80029be:	4640      	mov	r0, r8
 80029c0:	f7ff ff86 	bl	80028d0 <canLocalOrRemoteRequestOrRespond>
}
 80029c4:	b008      	add	sp, #32
 80029c6:	bc80      	pop	{r7}
 80029c8:	46b8      	mov	r8, r7
 80029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029cc <anonymousCanBroadcast>:
                            uint16_t payloadLength) {
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	46ce      	mov	lr, r9
 80029d0:	4647      	mov	r7, r8
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b085      	sub	sp, #20
 80029d6:	4680      	mov	r8, r0
 80029d8:	000c      	movs	r4, r1
 80029da:	4691      	mov	r9, r2
 80029dc:	001f      	movs	r7, r3
 80029de:	ab0c      	add	r3, sp, #48	; 0x30
 80029e0:	cb20      	ldmia	r3!, {r5}
 80029e2:	881e      	ldrh	r6, [r3, #0]
    softAssert(dataTypeId < 4, "Invalid dataTypeId for anonymous broadcast");
 80029e4:	2903      	cmp	r1, #3
 80029e6:	d811      	bhi.n	8002a0c <anonymousCanBroadcast+0x40>
    softAssert(getLocalNodeId() == 0, "Shouldn't be anon broadcasting when ID allocated");
 80029e8:	f7ff ffc8 	bl	800297c <getLocalNodeId>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d111      	bne.n	8002a14 <anonymousCanBroadcast+0x48>
    return canLocalOrRemoteBroadcast(
 80029f0:	9602      	str	r6, [sp, #8]
 80029f2:	9501      	str	r5, [sp, #4]
 80029f4:	9700      	str	r7, [sp, #0]
 80029f6:	464b      	mov	r3, r9
 80029f8:	0022      	movs	r2, r4
 80029fa:	2100      	movs	r1, #0
 80029fc:	4640      	mov	r0, r8
 80029fe:	f7ff ff91 	bl	8002924 <canLocalOrRemoteBroadcast>
}
 8002a02:	b005      	add	sp, #20
 8002a04:	bcc0      	pop	{r6, r7}
 8002a06:	46b9      	mov	r9, r7
 8002a08:	46b0      	mov	r8, r6
 8002a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(dataTypeId < 4, "Invalid dataTypeId for anonymous broadcast");
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <anonymousCanBroadcast+0x50>)
 8002a0e:	f7fe fc93 	bl	8001338 <softAssertTmp>
 8002a12:	e7e9      	b.n	80029e8 <anonymousCanBroadcast+0x1c>
    softAssert(getLocalNodeId() == 0, "Shouldn't be anon broadcasting when ID allocated");
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <anonymousCanBroadcast+0x54>)
 8002a16:	f7fe fc8f 	bl	8001338 <softAssertTmp>
 8002a1a:	e7e9      	b.n	80029f0 <anonymousCanBroadcast+0x24>
 8002a1c:	08007810 	.word	0x08007810
 8002a20:	0800783c 	.word	0x0800783c

08002a24 <sendNodeAllocationFrame>:
static void sendNodeAllocationFrame() {
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	46c6      	mov	lr, r8
 8002a28:	b500      	push	{lr}
 8002a2a:	b088      	sub	sp, #32
    allocationRequest[0] = (uint8_t) (PreferredNodeID << 1U);
 8002a2c:	ab06      	add	r3, sp, #24
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
    if (canDrv.nodeIdAllocationUniqueIdOffset == 0) {
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <sendNodeAllocationFrame+0xc0>)
 8002a34:	23d8      	movs	r3, #216	; 0xd8
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <sendNodeAllocationFrame+0x20>
        allocationRequest[0] |= 1; // First part of unique ID
 8002a3e:	ab06      	add	r3, sp, #24
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
    readUniqueID(myId);
 8002a44:	a802      	add	r0, sp, #8
 8002a46:	f7ff fc7f 	bl	8002348 <readUniqueID>
    uint8_t uid_size = (uint8_t) (UNIQUE_ID_LENGTH_BYTES - canDrv.nodeIdAllocationUniqueIdOffset);
 8002a4a:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <sendNodeAllocationFrame+0xc0>)
 8002a4c:	23d8      	movs	r3, #216	; 0xd8
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	2410      	movs	r4, #16
 8002a54:	1ae4      	subs	r4, r4, r3
 8002a56:	b2e4      	uxtb	r4, r4
    if (uid_size > maxLenOfUniqueIDInRequest) {
 8002a58:	2c06      	cmp	r4, #6
 8002a5a:	d900      	bls.n	8002a5e <sendNodeAllocationFrame+0x3a>
        uid_size = maxLenOfUniqueIDInRequest;
 8002a5c:	2406      	movs	r4, #6
    hardAssert(canDrv.nodeIdAllocationUniqueIdOffset < UNIQUE_ID_LENGTH_BYTES, "Inv uid offset");
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d830      	bhi.n	8002ac4 <sendNodeAllocationFrame+0xa0>
    hardAssert(uid_size <= maxLenOfUniqueIDInRequest, "Inv uid_size");
 8002a62:	2c06      	cmp	r4, #6
 8002a64:	d832      	bhi.n	8002acc <sendNodeAllocationFrame+0xa8>
    hardAssert(uid_size > 0, "Inv uid_size");
 8002a66:	2c00      	cmp	r4, #0
 8002a68:	d034      	beq.n	8002ad4 <sendNodeAllocationFrame+0xb0>
    hardAssert((uid_size + canDrv.nodeIdAllocationUniqueIdOffset) <= UNIQUE_ID_LENGTH_BYTES, "Inv uid_size");
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <sendNodeAllocationFrame+0xc0>)
 8002a6c:	23d8      	movs	r3, #216	; 0xd8
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	18e3      	adds	r3, r4, r3
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	dc31      	bgt.n	8002adc <sendNodeAllocationFrame+0xb8>
    memmove(&allocationRequest[1], &myId[canDrv.nodeIdAllocationUniqueIdOffset], uid_size);
 8002a78:	4f1a      	ldr	r7, [pc, #104]	; (8002ae4 <sendNodeAllocationFrame+0xc0>)
 8002a7a:	26d8      	movs	r6, #216	; 0xd8
 8002a7c:	00f6      	lsls	r6, r6, #3
 8002a7e:	5db9      	ldrb	r1, [r7, r6]
 8002a80:	ab02      	add	r3, sp, #8
 8002a82:	469c      	mov	ip, r3
 8002a84:	4461      	add	r1, ip
 8002a86:	ad06      	add	r5, sp, #24
 8002a88:	0022      	movs	r2, r4
 8002a8a:	2019      	movs	r0, #25
 8002a8c:	4468      	add	r0, sp
 8002a8e:	f004 fcfb 	bl	8007488 <memcpy>
    anonymousCanBroadcast(false, UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID, &transferId, CANARD_TRANSFER_PRIORITY_LOW, &allocationRequest[0], (uint16_t) (uid_size + 1));
 8002a92:	3401      	adds	r4, #1
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <sendNodeAllocationFrame+0xc4>)
 8002a96:	4698      	mov	r8, r3
 8002a98:	9401      	str	r4, [sp, #4]
 8002a9a:	9500      	str	r5, [sp, #0]
 8002a9c:	2318      	movs	r3, #24
 8002a9e:	4642      	mov	r2, r8
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7ff ff92 	bl	80029cc <anonymousCanBroadcast>
    anonymousCanBroadcast(true,  UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID, &transferId, CANARD_TRANSFER_PRIORITY_LOW, &allocationRequest[0], (uint16_t) (uid_size + 1));
 8002aa8:	9401      	str	r4, [sp, #4]
 8002aaa:	9500      	str	r5, [sp, #0]
 8002aac:	2318      	movs	r3, #24
 8002aae:	4642      	mov	r2, r8
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7ff ff8a 	bl	80029cc <anonymousCanBroadcast>
    canDrv.nodeIdAllocationUniqueIdOffset = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	55bb      	strb	r3, [r7, r6]
}
 8002abc:	b008      	add	sp, #32
 8002abe:	bc80      	pop	{r7}
 8002ac0:	46b8      	mov	r8, r7
 8002ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hardAssert(canDrv.nodeIdAllocationUniqueIdOffset < UNIQUE_ID_LENGTH_BYTES, "Inv uid offset");
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <sendNodeAllocationFrame+0xc8>)
 8002ac6:	f7fe fc59 	bl	800137c <hardAssertTmp>
 8002aca:	e7ca      	b.n	8002a62 <sendNodeAllocationFrame+0x3e>
    hardAssert(uid_size <= maxLenOfUniqueIDInRequest, "Inv uid_size");
 8002acc:	4808      	ldr	r0, [pc, #32]	; (8002af0 <sendNodeAllocationFrame+0xcc>)
 8002ace:	f7fe fc55 	bl	800137c <hardAssertTmp>
 8002ad2:	e7c8      	b.n	8002a66 <sendNodeAllocationFrame+0x42>
    hardAssert(uid_size > 0, "Inv uid_size");
 8002ad4:	4806      	ldr	r0, [pc, #24]	; (8002af0 <sendNodeAllocationFrame+0xcc>)
 8002ad6:	f7fe fc51 	bl	800137c <hardAssertTmp>
 8002ada:	e7c6      	b.n	8002a6a <sendNodeAllocationFrame+0x46>
    hardAssert((uid_size + canDrv.nodeIdAllocationUniqueIdOffset) <= UNIQUE_ID_LENGTH_BYTES, "Inv uid_size");
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <sendNodeAllocationFrame+0xcc>)
 8002ade:	f7fe fc4d 	bl	800137c <hardAssertTmp>
 8002ae2:	e7c9      	b.n	8002a78 <sendNodeAllocationFrame+0x54>
 8002ae4:	20000420 	.word	0x20000420
 8002ae8:	20000b59 	.word	0x20000b59
 8002aec:	08007870 	.word	0x08007870
 8002af0:	08007880 	.word	0x08007880

08002af4 <loopNodeAllocation>:
static void loopNodeAllocation() {
 8002af4:	b570      	push	{r4, r5, r6, lr}
    if ((getMonotonicTimestampUSec() > timeoutTime) || canDrv.newNodeAllocationInfo) {
 8002af6:	f7ff fdab 	bl	8002650 <getMonotonicTimestampUSec>
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <loopNodeAllocation+0x54>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4299      	cmp	r1, r3
 8002b02:	d805      	bhi.n	8002b10 <loopNodeAllocation+0x1c>
 8002b04:	d01d      	beq.n	8002b42 <loopNodeAllocation+0x4e>
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <loopNodeAllocation+0x58>)
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <loopNodeAllocation+0x5c>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <loopNodeAllocation+0x4c>
        canDrv.newNodeAllocationInfo = 0;
 8002b10:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <loopNodeAllocation+0x58>)
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <loopNodeAllocation+0x5c>)
 8002b14:	2100      	movs	r1, #0
 8002b16:	54d1      	strb	r1, [r2, r3]
        timeoutTime = getMonotonicTimestampUSec()
 8002b18:	f7ff fd9a 	bl	8002650 <getMonotonicTimestampUSec>
 8002b1c:	0004      	movs	r4, r0
 8002b1e:	000d      	movs	r5, r1
            + (uint64_t) (getRandomInt(UAVCAN_NODE_ID_ALLOCATION_RANDOM_TIMEOUT_RANGE_USEC));
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <loopNodeAllocation+0x60>)
 8002b22:	f000 fed5 	bl	80038d0 <getRandomInt>
 8002b26:	0002      	movs	r2, r0
 8002b28:	2300      	movs	r3, #0
 8002b2a:	18a4      	adds	r4, r4, r2
 8002b2c:	415d      	adcs	r5, r3
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <loopNodeAllocation+0x64>)
 8002b30:	2300      	movs	r3, #0
 8002b32:	18a4      	adds	r4, r4, r2
 8002b34:	415d      	adcs	r5, r3
        timeoutTime = getMonotonicTimestampUSec()
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <loopNodeAllocation+0x54>)
 8002b38:	601c      	str	r4, [r3, #0]
 8002b3a:	605d      	str	r5, [r3, #4]
        sendNodeAllocationFrame();
 8002b3c:	f7ff ff72 	bl	8002a24 <sendNodeAllocationFrame>
}
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
    if ((getMonotonicTimestampUSec() > timeoutTime) || canDrv.newNodeAllocationInfo) {
 8002b42:	4290      	cmp	r0, r2
 8002b44:	d9df      	bls.n	8002b06 <loopNodeAllocation+0x12>
 8002b46:	e7e3      	b.n	8002b10 <loopNodeAllocation+0x1c>
 8002b48:	20000b50 	.word	0x20000b50
 8002b4c:	20000420 	.word	0x20000420
 8002b50:	000006c1 	.word	0x000006c1
 8002b54:	00061a80 	.word	0x00061a80
 8002b58:	000927c0 	.word	0x000927c0

08002b5c <canProcessRxFrame>:
static void canProcessRxFrame(bool canOverSerial, CanardRxTransfer *transfer, uint8_t destNodeId, uint8_t * data, uint8_t dataLength) {
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	b09f      	sub	sp, #124	; 0x7c
 8002b60:	9003      	str	r0, [sp, #12]
 8002b62:	000c      	movs	r4, r1
 8002b64:	0015      	movs	r5, r2
 8002b66:	001e      	movs	r6, r3
 8002b68:	ab24      	add	r3, sp, #144	; 0x90
 8002b6a:	781f      	ldrb	r7, [r3, #0]
    if (transfer->transfer_type == CanardTransferTypeRequest && destNodeId == getLocalNodeId()) {
 8002b6c:	7e0b      	ldrb	r3, [r1, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <canProcessRxFrame+0x22>
    } else if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8002b72:	7e23      	ldrb	r3, [r4, #24]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d100      	bne.n	8002b7a <canProcessRxFrame+0x1e>
 8002b78:	e089      	b.n	8002c8e <canProcessRxFrame+0x132>
}
 8002b7a:	b01f      	add	sp, #124	; 0x7c
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (transfer->transfer_type == CanardTransferTypeRequest && destNodeId == getLocalNodeId()) {
 8002b7e:	f7ff fefd 	bl	800297c <getLocalNodeId>
 8002b82:	42a8      	cmp	r0, r5
 8002b84:	d1f5      	bne.n	8002b72 <canProcessRxFrame+0x16>
        if (transfer->data_type_id == AF_SET_FIELDS_DATA_TYPE_ID) {
 8002b86:	8ae3      	ldrh	r3, [r4, #22]
 8002b88:	2bd8      	cmp	r3, #216	; 0xd8
 8002b8a:	d00e      	beq.n	8002baa <canProcessRxFrame+0x4e>
        } else if (transfer->data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID) {
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d01a      	beq.n	8002bc6 <canProcessRxFrame+0x6a>
        } else if (transfer->data_type_id == AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_ID) {
 8002b90:	2bc8      	cmp	r3, #200	; 0xc8
 8002b92:	d02c      	beq.n	8002bee <canProcessRxFrame+0x92>
        } else if (transfer->data_type_id == AF_GET_PREFERRED_NAME_DATA_TYPE_ID) {
 8002b94:	2bca      	cmp	r3, #202	; 0xca
 8002b96:	d053      	beq.n	8002c40 <canProcessRxFrame+0xe4>
        } else if (transfer->data_type_id == AF_GET_FIELD_META_DATA_DATA_TYPE_ID) {
 8002b98:	2bcc      	cmp	r3, #204	; 0xcc
 8002b9a:	d05f      	beq.n	8002c5c <canProcessRxFrame+0x100>
            canDrv.stats.failedToRespond++;
 8002b9c:	4955      	ldr	r1, [pc, #340]	; (8002cf4 <canProcessRxFrame+0x198>)
 8002b9e:	22e2      	movs	r2, #226	; 0xe2
 8002ba0:	00d2      	lsls	r2, r2, #3
 8002ba2:	5a8b      	ldrh	r3, [r1, r2]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	528b      	strh	r3, [r1, r2]
 8002ba8:	e7e7      	b.n	8002b7a <canProcessRxFrame+0x1e>
            afProtocolProcessRx(data, dataLength);
 8002baa:	0039      	movs	r1, r7
 8002bac:	0030      	movs	r0, r6
 8002bae:	f7fe fe81 	bl	80018b4 <afProtocolProcessRx>
            result = canRespondToRequest(canOverSerial, transfer, AF_SET_FIELDS_DATA_TYPE_ID, NULL, 0);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	22d8      	movs	r2, #216	; 0xd8
 8002bb8:	0021      	movs	r1, r4
 8002bba:	9803      	ldr	r0, [sp, #12]
 8002bbc:	f7ff fee6 	bl	800298c <canRespondToRequest>
        if (result <= 0) {
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	dcda      	bgt.n	8002b7a <canProcessRxFrame+0x1e>
 8002bc4:	e7ea      	b.n	8002b9c <canProcessRxFrame+0x40>
            memset(buffer, 0, NODE_INFO_RESPONSE_MAX_SIZE);
 8002bc6:	2264      	movs	r2, #100	; 0x64
 8002bc8:	2100      	movs	r1, #0
 8002bca:	a805      	add	r0, sp, #20
 8002bcc:	f004 fc65 	bl	800749a <memset>
            getNodeInfoResponse(buffer, &totalSize, NODE_INFO_RESPONSE_MAX_SIZE);
 8002bd0:	2264      	movs	r2, #100	; 0x64
 8002bd2:	a904      	add	r1, sp, #16
 8002bd4:	a805      	add	r0, sp, #20
 8002bd6:	f7ff fd7d 	bl	80026d4 <getNodeInfoResponse>
            result = canRespondToRequest(canOverSerial, transfer, UAVCAN_GET_NODE_INFO_DATA_TYPE_ID, &buffer[0], (uint16_t) totalSize);
 8002bda:	9b04      	ldr	r3, [sp, #16]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	ab05      	add	r3, sp, #20
 8002be2:	2201      	movs	r2, #1
 8002be4:	0021      	movs	r1, r4
 8002be6:	9803      	ldr	r0, [sp, #12]
 8002be8:	f7ff fed0 	bl	800298c <canRespondToRequest>
 8002bec:	e7e8      	b.n	8002bc0 <canProcessRxFrame+0x64>
            uint32_t tick = HAL_GetTick();
 8002bee:	f002 fc79 	bl	80054e4 <HAL_GetTick>
 8002bf2:	0007      	movs	r7, r0
            uint8_t seconds = data[0];
 8002bf4:	7833      	ldrb	r3, [r6, #0]
            uint8_t bandwidth = data[1];
 8002bf6:	7876      	ldrb	r6, [r6, #1]
            canDrv.subscribeBeginTick = tick;
 8002bf8:	493e      	ldr	r1, [pc, #248]	; (8002cf4 <canProcessRxFrame+0x198>)
 8002bfa:	22db      	movs	r2, #219	; 0xdb
 8002bfc:	00d2      	lsls	r2, r2, #3
 8002bfe:	188a      	adds	r2, r1, r2
 8002c00:	6010      	str	r0, [r2, #0]
 8002c02:	2500      	movs	r5, #0
 8002c04:	6055      	str	r5, [r2, #4]
            canDrv.subscribeUntilTick = tick + 1000 * (uint32_t) seconds;
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	0090      	lsls	r0, r2, #2
 8002c0c:	18c0      	adds	r0, r0, r3
 8002c0e:	00c0      	lsls	r0, r0, #3
 8002c10:	19c0      	adds	r0, r0, r7
 8002c12:	23dc      	movs	r3, #220	; 0xdc
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	18cb      	adds	r3, r1, r3
 8002c18:	6018      	str	r0, [r3, #0]
 8002c1a:	605d      	str	r5, [r3, #4]
            canDrv.subscribeBandwidthLimit = bandwidth;
 8002c1c:	23dd      	movs	r3, #221	; 0xdd
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	54ce      	strb	r6, [r1, r3]
            canDrv.subscribeBytesPublished = 0; // Reset the counter when the subscription is renewed
 8002c22:	3308      	adds	r3, #8
 8002c24:	469c      	mov	ip, r3
 8002c26:	4461      	add	r1, ip
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	600a      	str	r2, [r1, #0]
 8002c2e:	604b      	str	r3, [r1, #4]
            result = canRespondToRequest(canOverSerial, transfer, AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_ID, NULL, 0);
 8002c30:	9500      	str	r5, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	32c8      	adds	r2, #200	; 0xc8
 8002c36:	0021      	movs	r1, r4
 8002c38:	9803      	ldr	r0, [sp, #12]
 8002c3a:	f7ff fea7 	bl	800298c <canRespondToRequest>
 8002c3e:	e7bf      	b.n	8002bc0 <canProcessRxFrame+0x64>
            const char *name = getBoardName(); // TODO: Get (and set) from flash
 8002c40:	f7fe fa6e 	bl	8001120 <getBoardName>
 8002c44:	0005      	movs	r5, r0
            result = canRespondToRequest(canOverSerial, transfer, AF_GET_PREFERRED_NAME_DATA_TYPE_ID, name, strlen(name));
 8002c46:	f7fd fa79 	bl	800013c <strlen>
 8002c4a:	b280      	uxth	r0, r0
 8002c4c:	9000      	str	r0, [sp, #0]
 8002c4e:	002b      	movs	r3, r5
 8002c50:	22ca      	movs	r2, #202	; 0xca
 8002c52:	0021      	movs	r1, r4
 8002c54:	9803      	ldr	r0, [sp, #12]
 8002c56:	f7ff fe99 	bl	800298c <canRespondToRequest>
 8002c5a:	e7b1      	b.n	8002bc0 <canProcessRxFrame+0x64>
            uint8_t * responsePacket = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9305      	str	r3, [sp, #20]
            handleMetaDataRequest(data, dataLength, &responsePacket, &responseLength);
 8002c60:	ab04      	add	r3, sp, #16
 8002c62:	aa05      	add	r2, sp, #20
 8002c64:	0039      	movs	r1, r7
 8002c66:	0030      	movs	r0, r6
 8002c68:	f7fe ffb8 	bl	8001bdc <handleMetaDataRequest>
            hardAssert(responsePacket, "");
 8002c6c:	9b05      	ldr	r3, [sp, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <canProcessRxFrame+0x12a>
            result = canRespondToRequest(canOverSerial, transfer, AF_GET_FIELD_META_DATA_DATA_TYPE_ID, responsePacket, responseLength);
 8002c72:	ab04      	add	r3, sp, #16
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	9b05      	ldr	r3, [sp, #20]
 8002c7a:	22cc      	movs	r2, #204	; 0xcc
 8002c7c:	0021      	movs	r1, r4
 8002c7e:	9803      	ldr	r0, [sp, #12]
 8002c80:	f7ff fe84 	bl	800298c <canRespondToRequest>
 8002c84:	e79c      	b.n	8002bc0 <canProcessRxFrame+0x64>
            hardAssert(responsePacket, "");
 8002c86:	481c      	ldr	r0, [pc, #112]	; (8002cf8 <canProcessRxFrame+0x19c>)
 8002c88:	f7fe fb78 	bl	800137c <hardAssertTmp>
 8002c8c:	e7f1      	b.n	8002c72 <canProcessRxFrame+0x116>
        if ((getLocalNodeId() == CANARD_BROADCAST_NODE_ID)
 8002c8e:	f7ff fe75 	bl	800297c <getLocalNodeId>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d102      	bne.n	8002c9c <canProcessRxFrame+0x140>
            && (transfer->data_type_id == UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID)) {
 8002c96:	8ae3      	ldrh	r3, [r4, #22]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d00b      	beq.n	8002cb4 <canProcessRxFrame+0x158>
        } else if (transfer->data_type_id == AF_TEST_BOARD_DATA_TYPE_ID) {
 8002c9c:	8ae3      	ldrh	r3, [r4, #22]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <canProcessRxFrame+0x1a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <canProcessRxFrame+0x164>
        } else if (transfer->data_type_id == AF_PROTECT_BOARD_DATA_TYPE_ID) {
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <canProcessRxFrame+0x1a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d000      	beq.n	8002cac <canProcessRxFrame+0x150>
 8002caa:	e766      	b.n	8002b7a <canProcessRxFrame+0x1e>
            uint8_t level = data[0];
 8002cac:	7830      	ldrb	r0, [r6, #0]
            setRdp(level);
 8002cae:	f000 fb85 	bl	80033bc <setRdp>
}
 8002cb2:	e762      	b.n	8002b7a <canProcessRxFrame+0x1e>
            handleNodeAllocationBroadcast(transfer, data, dataLength);
 8002cb4:	003a      	movs	r2, r7
 8002cb6:	0031      	movs	r1, r6
 8002cb8:	0020      	movs	r0, r4
 8002cba:	f7ff fd3f 	bl	800273c <handleNodeAllocationBroadcast>
 8002cbe:	e75c      	b.n	8002b7a <canProcessRxFrame+0x1e>
            uint8_t extraId = data[0];
 8002cc0:	7836      	ldrb	r6, [r6, #0]
            uint8_t errorCode = boardTest();
 8002cc2:	f7fe fa41 	bl	8001148 <boardTest>
 8002cc6:	0005      	movs	r5, r0
 8002cc8:	0004      	movs	r4, r0
            uint32_t rdpLevel = readRdpValue();
 8002cca:	f000 fb69 	bl	80033a0 <readRdpValue>
            if (rdpLevel != OB_RDP_LEVEL_2) {
 8002cce:	28cc      	cmp	r0, #204	; 0xcc
 8002cd0:	d003      	beq.n	8002cda <canProcessRxFrame+0x17e>
                errorCode |= 0x80;
 8002cd2:	2480      	movs	r4, #128	; 0x80
 8002cd4:	4264      	negs	r4, r4
 8002cd6:	432c      	orrs	r4, r5
 8002cd8:	b2e4      	uxtb	r4, r4
            uint8_t packet[2] = {errorCode, extraId};
 8002cda:	ab05      	add	r3, sp, #20
 8002cdc:	701c      	strb	r4, [r3, #0]
 8002cde:	705e      	strb	r6, [r3, #1]
            anonymousCanBroadcast(canOverSerial, AF_TEST_BOARD_RESULTS_DATA_TYPE_ID, &transferId, CANARD_TRANSFER_PRIORITY_LOW, packet, 2);
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	9201      	str	r2, [sp, #4]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2318      	movs	r3, #24
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <canProcessRxFrame+0x1a8>)
 8002cea:	2103      	movs	r1, #3
 8002cec:	9803      	ldr	r0, [sp, #12]
 8002cee:	f7ff fe6d 	bl	80029cc <anonymousCanBroadcast>
 8002cf2:	e742      	b.n	8002b7a <canProcessRxFrame+0x1e>
 8002cf4:	20000420 	.word	0x20000420
 8002cf8:	08007b90 	.word	0x08007b90
 8002cfc:	00005206 	.word	0x00005206
 8002d00:	00005207 	.word	0x00005207
 8002d04:	20000b5a 	.word	0x20000b5a

08002d08 <canBroadcast>:
                    uint16_t payloadLength) {
 8002d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0a:	46d6      	mov	lr, sl
 8002d0c:	464f      	mov	r7, r9
 8002d0e:	4646      	mov	r6, r8
 8002d10:	b5c0      	push	{r6, r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	4680      	mov	r8, r0
 8002d16:	4689      	mov	r9, r1
 8002d18:	4692      	mov	sl, r2
 8002d1a:	001d      	movs	r5, r3
 8002d1c:	ab0c      	add	r3, sp, #48	; 0x30
 8002d1e:	cb40      	ldmia	r3!, {r6}
 8002d20:	881f      	ldrh	r7, [r3, #0]
    uint8_t nodeId = getLocalNodeId();
 8002d22:	f7ff fe2b 	bl	800297c <getLocalNodeId>
 8002d26:	1e04      	subs	r4, r0, #0
    softAssert(nodeId, "The node ID needs to be set before canBroadcast");
 8002d28:	d00e      	beq.n	8002d48 <canBroadcast+0x40>
    return canLocalOrRemoteBroadcast(
 8002d2a:	9702      	str	r7, [sp, #8]
 8002d2c:	9601      	str	r6, [sp, #4]
 8002d2e:	9500      	str	r5, [sp, #0]
 8002d30:	4653      	mov	r3, sl
 8002d32:	464a      	mov	r2, r9
 8002d34:	0021      	movs	r1, r4
 8002d36:	4640      	mov	r0, r8
 8002d38:	f7ff fdf4 	bl	8002924 <canLocalOrRemoteBroadcast>
}
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bce0      	pop	{r5, r6, r7}
 8002d40:	46ba      	mov	sl, r7
 8002d42:	46b1      	mov	r9, r6
 8002d44:	46a8      	mov	r8, r5
 8002d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(nodeId, "The node ID needs to be set before canBroadcast");
 8002d48:	4801      	ldr	r0, [pc, #4]	; (8002d50 <canBroadcast+0x48>)
 8002d4a:	f7fe faf5 	bl	8001338 <softAssertTmp>
 8002d4e:	e7ec      	b.n	8002d2a <canBroadcast+0x22>
 8002d50:	08007890 	.word	0x08007890

08002d54 <process1HzTasks>:
static void process1HzTasks(uint64_t timestamp_usec) {
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	0002      	movs	r2, r0
 8002d5a:	000b      	movs	r3, r1
    canardCleanupStaleTransfers(&canDrv.gCanard, timestamp_usec);
 8002d5c:	4c13      	ldr	r4, [pc, #76]	; (8002dac <process1HzTasks+0x58>)
 8002d5e:	0020      	movs	r0, r4
 8002d60:	f001 fb12 	bl	8004388 <canardCleanupStaleTransfers>
    if (canDrv.nodeIdAllocated) {
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <process1HzTasks+0x5c>)
 8002d66:	5ce3      	ldrb	r3, [r4, r3]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <process1HzTasks+0x24>
    canDrv.nodeMode = UAVCAN_NODE_MODE_OPERATIONAL;
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <process1HzTasks+0x58>)
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <process1HzTasks+0x60>)
 8002d70:	2100      	movs	r1, #0
 8002d72:	54d1      	strb	r1, [r2, r3]
}
 8002d74:	b004      	add	sp, #16
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
        makeNodeStatusMessage(buffer);
 8002d78:	a802      	add	r0, sp, #8
 8002d7a:	f7ff fc73 	bl	8002664 <makeNodeStatusMessage>
        canBroadcast(true,  UAVCAN_NODE_STATUS_DATA_TYPE_ID, &transfer_id, CANARD_TRANSFER_PRIORITY_LOW, buffer, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 8002d7e:	4d0e      	ldr	r5, [pc, #56]	; (8002db8 <process1HzTasks+0x64>)
 8002d80:	2456      	movs	r4, #86	; 0x56
 8002d82:	34ff      	adds	r4, #255	; 0xff
 8002d84:	2607      	movs	r6, #7
 8002d86:	9601      	str	r6, [sp, #4]
 8002d88:	ab02      	add	r3, sp, #8
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2318      	movs	r3, #24
 8002d8e:	002a      	movs	r2, r5
 8002d90:	0021      	movs	r1, r4
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff ffb8 	bl	8002d08 <canBroadcast>
        canBroadcast(false, UAVCAN_NODE_STATUS_DATA_TYPE_ID, &transfer_id, CANARD_TRANSFER_PRIORITY_LOW, buffer, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 8002d98:	9601      	str	r6, [sp, #4]
 8002d9a:	ab02      	add	r3, sp, #8
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2318      	movs	r3, #24
 8002da0:	002a      	movs	r2, r5
 8002da2:	0021      	movs	r1, r4
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff ffaf 	bl	8002d08 <canBroadcast>
 8002daa:	e7df      	b.n	8002d6c <process1HzTasks+0x18>
 8002dac:	20000420 	.word	0x20000420
 8002db0:	000006c2 	.word	0x000006c2
 8002db4:	000006d1 	.word	0x000006d1
 8002db8:	20000b5b 	.word	0x20000b5b

08002dbc <canShouldAcceptTransfer>:
static bool canShouldAcceptTransfer(CanardTransferType transferType, uint16_t dataTypeId, uint64_t *outDataTypeSignature) {
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	0005      	movs	r5, r0
 8002dc0:	000c      	movs	r4, r1
 8002dc2:	0016      	movs	r6, r2
    *outDataTypeSignature = getDataTypeSignature((transferType == CanardTransferTypeBroadcast), dataTypeId);
 8002dc4:	3802      	subs	r0, #2
 8002dc6:	4242      	negs	r2, r0
 8002dc8:	4150      	adcs	r0, r2
 8002dca:	b2c0      	uxtb	r0, r0
 8002dcc:	f7ff fd0a 	bl	80027e4 <getDataTypeSignature>
 8002dd0:	6030      	str	r0, [r6, #0]
 8002dd2:	6071      	str	r1, [r6, #4]
    if (transferType == CanardTransferTypeBroadcast) {
 8002dd4:	2d02      	cmp	r5, #2
 8002dd6:	d00b      	beq.n	8002df0 <canShouldAcceptTransfer+0x34>
        if (dataTypeId == AF_SET_FIELDS_DATA_TYPE_ID) {
 8002dd8:	2cd8      	cmp	r4, #216	; 0xd8
 8002dda:	d01d      	beq.n	8002e18 <canShouldAcceptTransfer+0x5c>
        } else if (dataTypeId == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID) {
 8002ddc:	2c01      	cmp	r4, #1
 8002dde:	d01d      	beq.n	8002e1c <canShouldAcceptTransfer+0x60>
        } else if (dataTypeId == AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_ID) {
 8002de0:	2cc8      	cmp	r4, #200	; 0xc8
 8002de2:	d01d      	beq.n	8002e20 <canShouldAcceptTransfer+0x64>
        } else if (dataTypeId == AF_GET_FIELD_META_DATA_DATA_TYPE_ID) {
 8002de4:	2ccc      	cmp	r4, #204	; 0xcc
 8002de6:	d01d      	beq.n	8002e24 <canShouldAcceptTransfer+0x68>
        } else if (dataTypeId == AF_GET_PREFERRED_NAME_DATA_TYPE_ID) {
 8002de8:	2cca      	cmp	r4, #202	; 0xca
 8002dea:	d01d      	beq.n	8002e28 <canShouldAcceptTransfer+0x6c>
    return false;
 8002dec:	2000      	movs	r0, #0
}
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
        if ((getLocalNodeId() == CANARD_BROADCAST_NODE_ID) && (dataTypeId == UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID)) {
 8002df0:	f7ff fdc4 	bl	800297c <getLocalNodeId>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d101      	bne.n	8002dfc <canShouldAcceptTransfer+0x40>
 8002df8:	2c01      	cmp	r4, #1
 8002dfa:	d007      	beq.n	8002e0c <canShouldAcceptTransfer+0x50>
        if (dataTypeId == AF_TEST_BOARD_DATA_TYPE_ID) {
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <canShouldAcceptTransfer+0x70>)
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d006      	beq.n	8002e10 <canShouldAcceptTransfer+0x54>
        if (dataTypeId == AF_PROTECT_BOARD_DATA_TYPE_ID) {
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <canShouldAcceptTransfer+0x74>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	d005      	beq.n	8002e14 <canShouldAcceptTransfer+0x58>
    return false;
 8002e08:	2000      	movs	r0, #0
 8002e0a:	e7f0      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e7ee      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7ec      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e14:	2001      	movs	r0, #1
 8002e16:	e7ea      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e7e8      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	e7e6      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e20:	2001      	movs	r0, #1
 8002e22:	e7e4      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e24:	2001      	movs	r0, #1
 8002e26:	e7e2      	b.n	8002dee <canShouldAcceptTransfer+0x32>
            return true;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e7e0      	b.n	8002dee <canShouldAcceptTransfer+0x32>
 8002e2c:	00005206 	.word	0x00005206
 8002e30:	00005207 	.word	0x00005207

08002e34 <shouldAcceptTransfer>:
static bool shouldAcceptTransfer(const CanardInstance *ins, uint64_t *outDataTypeSignature, uint16_t dataTypeId, CanardTransferType transferType, uint8_t sourceNodeId) {
 8002e34:	b510      	push	{r4, lr}
 8002e36:	000c      	movs	r4, r1
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
    return canShouldAcceptTransfer(transferType, dataTypeId, outDataTypeSignature);
 8002e3c:	0022      	movs	r2, r4
 8002e3e:	f7ff ffbd 	bl	8002dbc <canShouldAcceptTransfer>
}
 8002e42:	bd10      	pop	{r4, pc}

08002e44 <canOnTransferReceived>:
void canOnTransferReceived(bool canOverSerial, CanardRxTransfer * transfer, uint8_t destNodeId, const void* payload, uint16_t payloadLength) {
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	b085      	sub	sp, #20
 8002e48:	9003      	str	r0, [sp, #12]
 8002e4a:	000c      	movs	r4, r1
 8002e4c:	0015      	movs	r5, r2
 8002e4e:	001f      	movs	r7, r3
 8002e50:	ab0a      	add	r3, sp, #40	; 0x28
 8002e52:	881e      	ldrh	r6, [r3, #0]
    bool isBroadcast = (transfer->transfer_type == CanardTransferTypeBroadcast);
 8002e54:	7e0b      	ldrb	r3, [r1, #24]
    if (isBroadcast || (destNodeId == getLocalNodeId())) {
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d003      	beq.n	8002e62 <canOnTransferReceived+0x1e>
 8002e5a:	f7ff fd8f 	bl	800297c <getLocalNodeId>
 8002e5e:	42a8      	cmp	r0, r5
 8002e60:	d107      	bne.n	8002e72 <canOnTransferReceived+0x2e>
        canProcessRxFrame(canOverSerial, transfer, destNodeId, (void*) payload, payloadLength);
 8002e62:	b2f3      	uxtb	r3, r6
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	003b      	movs	r3, r7
 8002e68:	002a      	movs	r2, r5
 8002e6a:	0021      	movs	r1, r4
 8002e6c:	9803      	ldr	r0, [sp, #12]
 8002e6e:	f7ff fe75 	bl	8002b5c <canProcessRxFrame>
}
 8002e72:	b005      	add	sp, #20
 8002e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e76 <onTransferReceived>:
static void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer, uint8_t destNodeId) {
 8002e76:	b530      	push	{r4, r5, lr}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	000c      	movs	r4, r1
 8002e7c:	0015      	movs	r5, r2
    uint8_t * data = convertTransferToDataPtr(transfer, &length);
 8002e7e:	210f      	movs	r1, #15
 8002e80:	4469      	add	r1, sp
 8002e82:	0020      	movs	r0, r4
 8002e84:	f7ff faae 	bl	80023e4 <convertTransferToDataPtr>
 8002e88:	1e03      	subs	r3, r0, #0
    if (data == NULL)
 8002e8a:	d008      	beq.n	8002e9e <onTransferReceived+0x28>
    canOnTransferReceived(false, transfer, destNodeId, data, length);
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	446a      	add	r2, sp
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	9200      	str	r2, [sp, #0]
 8002e94:	002a      	movs	r2, r5
 8002e96:	0021      	movs	r1, r4
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7ff ffd3 	bl	8002e44 <canOnTransferReceived>
}
 8002e9e:	b005      	add	sp, #20
 8002ea0:	bd30      	pop	{r4, r5, pc}
	...

08002ea4 <bufferRawCanFrames>:
void bufferRawCanFrames(const uint64_t timestamp) {
 8002ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea6:	b085      	sub	sp, #20
    for (uint32_t r=10; r--; ) {
 8002ea8:	230a      	movs	r3, #10
 8002eaa:	e040      	b.n	8002f2e <bufferRawCanFrames+0x8a>
                BUFFER_APPEND(canDrv.rxBuffer, rxFrame);
 8002eac:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002eae:	22b6      	movs	r2, #182	; 0xb6
 8002eb0:	00d2      	lsls	r2, r2, #3
 8002eb2:	5c9c      	ldrb	r4, [r3, r2]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	; (8002ff8 <bufferRawCanFrames+0x154>)
 8002eb6:	5c98      	ldrb	r0, [r3, r2]
 8002eb8:	4a50      	ldr	r2, [pc, #320]	; (8002ffc <bufferRawCanFrames+0x158>)
 8002eba:	5c9a      	ldrb	r2, [r3, r2]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	f000 fd09 	bl	80038d4 <incrAndWrap>
 8002ec2:	4284      	cmp	r4, r0
 8002ec4:	d021      	beq.n	8002f0a <bufferRawCanFrames+0x66>
 8002ec6:	4c4b      	ldr	r4, [pc, #300]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <bufferRawCanFrames+0x15c>)
 8002eca:	58e2      	ldr	r2, [r4, r3]
 8002ecc:	4e4a      	ldr	r6, [pc, #296]	; (8002ff8 <bufferRawCanFrames+0x154>)
 8002ece:	5da3      	ldrb	r3, [r4, r6]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	18d2      	adds	r2, r2, r3
 8002ed4:	466b      	mov	r3, sp
 8002ed6:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002ed8:	c283      	stmia	r2!, {r0, r1, r7}
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	5da0      	ldrb	r0, [r4, r6]
 8002ee0:	4f46      	ldr	r7, [pc, #280]	; (8002ffc <bufferRawCanFrames+0x158>)
 8002ee2:	5de2      	ldrb	r2, [r4, r7]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	f000 fcf5 	bl	80038d4 <incrAndWrap>
 8002eea:	b2c0      	uxtb	r0, r0
 8002eec:	55a0      	strb	r0, [r4, r6]
                canDrv.rxBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.rxBuffer), canDrv.rxBuffer.maxUsage);
 8002eee:	23b6      	movs	r3, #182	; 0xb6
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	5ce1      	ldrb	r1, [r4, r3]
 8002ef4:	5de2      	ldrb	r2, [r4, r7]
 8002ef6:	f000 fcf2 	bl	80038de <decrAndWrap>
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <bufferRawCanFrames+0x160>)
 8002efc:	5ce3      	ldrb	r3, [r4, r3]
 8002efe:	4298      	cmp	r0, r3
 8002f00:	dc07      	bgt.n	8002f12 <bufferRawCanFrames+0x6e>
 8002f02:	493c      	ldr	r1, [pc, #240]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f04:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <bufferRawCanFrames+0x160>)
 8002f06:	548b      	strb	r3, [r1, r2]
 8002f08:	e010      	b.n	8002f2c <bufferRawCanFrames+0x88>
                BUFFER_APPEND(canDrv.rxBuffer, rxFrame);
 8002f0a:	483f      	ldr	r0, [pc, #252]	; (8003008 <bufferRawCanFrames+0x164>)
 8002f0c:	f7fe fa14 	bl	8001338 <softAssertTmp>
 8002f10:	e7d9      	b.n	8002ec6 <bufferRawCanFrames+0x22>
                canDrv.rxBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.rxBuffer), canDrv.rxBuffer.maxUsage);
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f14:	0032      	movs	r2, r6
 8002f16:	5d98      	ldrb	r0, [r3, r6]
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	5c99      	ldrb	r1, [r3, r2]
 8002f1c:	5dda      	ldrb	r2, [r3, r7]
 8002f1e:	f000 fcde 	bl	80038de <decrAndWrap>
 8002f22:	b2c3      	uxtb	r3, r0
 8002f24:	e7ed      	b.n	8002f02 <bufferRawCanFrames+0x5e>
            softAssert(0, "Inv arg"); // Shouldn't happen
 8002f26:	4839      	ldr	r0, [pc, #228]	; (800300c <bufferRawCanFrames+0x168>)
 8002f28:	f7fe fa06 	bl	8001338 <softAssertTmp>
    for (uint32_t r=10; r--; ) {
 8002f2c:	002b      	movs	r3, r5
 8002f2e:	1e5d      	subs	r5, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <bufferRawCanFrames+0xc2>
            const int16_t rxResult = canardSTM32Receive(&rxFrame);
 8002f34:	4668      	mov	r0, sp
 8002f36:	f002 f845 	bl	8004fc4 <canardSTM32Receive>
        if (rxResult == 0) {
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d013      	beq.n	8002f66 <bufferRawCanFrames+0xc2>
        } else if (rxResult > 0) { // Success
 8002f3e:	ddf2      	ble.n	8002f26 <bufferRawCanFrames+0x82>
            if (BUFFER_FULL(canDrv.rxBuffer)) {
 8002f40:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f42:	22b6      	movs	r2, #182	; 0xb6
 8002f44:	00d2      	lsls	r2, r2, #3
 8002f46:	5c9c      	ldrb	r4, [r3, r2]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <bufferRawCanFrames+0x154>)
 8002f4a:	5c98      	ldrb	r0, [r3, r2]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <bufferRawCanFrames+0x158>)
 8002f4e:	5c9a      	ldrb	r2, [r3, r2]
 8002f50:	2101      	movs	r1, #1
 8002f52:	f000 fcbf 	bl	80038d4 <incrAndWrap>
 8002f56:	4284      	cmp	r4, r0
 8002f58:	d1a8      	bne.n	8002eac <bufferRawCanFrames+0x8>
                canDrv.stats.rxCanOverflowCount++;
 8002f5a:	4926      	ldr	r1, [pc, #152]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <bufferRawCanFrames+0x16c>)
 8002f5e:	5a8b      	ldrh	r3, [r1, r2]
 8002f60:	3301      	adds	r3, #1
 8002f62:	528b      	strh	r3, [r1, r2]
 8002f64:	e7e2      	b.n	8002f2c <bufferRawCanFrames+0x88>
    if (!BUFFER_EMPTY(canDrv.txBuffer)) {
 8002f66:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f68:	23b5      	movs	r3, #181	; 0xb5
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	5cd0      	ldrb	r0, [r2, r3]
 8002f6e:	4929      	ldr	r1, [pc, #164]	; (8003014 <bufferRawCanFrames+0x170>)
 8002f70:	5c52      	ldrb	r2, [r2, r1]
 8002f72:	4290      	cmp	r0, r2
 8002f74:	d101      	bne.n	8002f7a <bufferRawCanFrames+0xd6>
}
 8002f76:	b005      	add	sp, #20
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const CanardCANFrame * txFrame = BUFFER_PEEK(canDrv.txBuffer);
 8002f7a:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <bufferRawCanFrames+0x174>)
 8002f7e:	588a      	ldr	r2, [r1, r2]
 8002f80:	0100      	lsls	r0, r0, #4
 8002f82:	1810      	adds	r0, r2, r0
            const int16_t txResult = canardSTM32Transmit(txFrame);
 8002f84:	f001 ffa4 	bl	8004ed0 <canardSTM32Transmit>
        if (txResult > 0) { // Success
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	dd16      	ble.n	8002fba <bufferRawCanFrames+0x116>
            BUFFER_POP(canDrv.txBuffer);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f8e:	22b5      	movs	r2, #181	; 0xb5
 8002f90:	00d2      	lsls	r2, r2, #3
 8002f92:	5c9a      	ldrb	r2, [r3, r2]
 8002f94:	491f      	ldr	r1, [pc, #124]	; (8003014 <bufferRawCanFrames+0x170>)
 8002f96:	5c5b      	ldrb	r3, [r3, r1]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d00a      	beq.n	8002fb2 <bufferRawCanFrames+0x10e>
 8002f9c:	4c15      	ldr	r4, [pc, #84]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002f9e:	25b5      	movs	r5, #181	; 0xb5
 8002fa0:	00ed      	lsls	r5, r5, #3
 8002fa2:	5d60      	ldrb	r0, [r4, r5]
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <bufferRawCanFrames+0x178>)
 8002fa6:	5ce2      	ldrb	r2, [r4, r3]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	f000 fc93 	bl	80038d4 <incrAndWrap>
 8002fae:	5560      	strb	r0, [r4, r5]
 8002fb0:	e7e1      	b.n	8002f76 <bufferRawCanFrames+0xd2>
 8002fb2:	481b      	ldr	r0, [pc, #108]	; (8003020 <bufferRawCanFrames+0x17c>)
 8002fb4:	f7fe f9c0 	bl	8001338 <softAssertTmp>
 8002fb8:	e7f0      	b.n	8002f9c <bufferRawCanFrames+0xf8>
        } else if (txResult < 0) { // Failure
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	dadb      	bge.n	8002f76 <bufferRawCanFrames+0xd2>
            canDrv.stats.txFailedToTransmit++;
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002fc0:	4918      	ldr	r1, [pc, #96]	; (8003024 <bufferRawCanFrames+0x180>)
 8002fc2:	5a5a      	ldrh	r2, [r3, r1]
 8002fc4:	3201      	adds	r2, #1
 8002fc6:	525a      	strh	r2, [r3, r1]
            BUFFER_POP(canDrv.txBuffer);  // Note: We don't retry on error
 8002fc8:	22b5      	movs	r2, #181	; 0xb5
 8002fca:	00d2      	lsls	r2, r2, #3
 8002fcc:	5c9a      	ldrb	r2, [r3, r2]
 8002fce:	4911      	ldr	r1, [pc, #68]	; (8003014 <bufferRawCanFrames+0x170>)
 8002fd0:	5c5b      	ldrb	r3, [r3, r1]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d00a      	beq.n	8002fec <bufferRawCanFrames+0x148>
 8002fd6:	4c07      	ldr	r4, [pc, #28]	; (8002ff4 <bufferRawCanFrames+0x150>)
 8002fd8:	25b5      	movs	r5, #181	; 0xb5
 8002fda:	00ed      	lsls	r5, r5, #3
 8002fdc:	5d60      	ldrb	r0, [r4, r5]
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <bufferRawCanFrames+0x178>)
 8002fe0:	5ce2      	ldrb	r2, [r4, r3]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f000 fc76 	bl	80038d4 <incrAndWrap>
 8002fe8:	5560      	strb	r0, [r4, r5]
}
 8002fea:	e7c4      	b.n	8002f76 <bufferRawCanFrames+0xd2>
            BUFFER_POP(canDrv.txBuffer);  // Note: We don't retry on error
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <bufferRawCanFrames+0x17c>)
 8002fee:	f7fe f9a3 	bl	8001338 <softAssertTmp>
 8002ff2:	e7f0      	b.n	8002fd6 <bufferRawCanFrames+0x132>
 8002ff4:	20000420 	.word	0x20000420
 8002ff8:	000005b1 	.word	0x000005b1
 8002ffc:	000005b2 	.word	0x000005b2
 8003000:	000005b4 	.word	0x000005b4
 8003004:	000005b3 	.word	0x000005b3
 8003008:	080077a0 	.word	0x080077a0
 800300c:	080078c0 	.word	0x080078c0
 8003010:	00000706 	.word	0x00000706
 8003014:	000005a9 	.word	0x000005a9
 8003018:	000005ac 	.word	0x000005ac
 800301c:	000005aa 	.word	0x000005aa
 8003020:	080077c0 	.word	0x080077c0
 8003024:	00000702 	.word	0x00000702

08003028 <loopRawCan>:

// ================= //


// Takes ~7us to run when no frames - called every 100us
void loopRawCan() {
 8003028:	b570      	push	{r4, r5, r6, lr}
    // General timer - as this is called more often than ticks
    canDrv.globalMicroSeconds += 100; // This should be called by a timer every 100us
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <loopRawCan+0x24>)
 800302c:	22e3      	movs	r2, #227	; 0xe3
 800302e:	00d2      	lsls	r2, r2, #3
 8003030:	4694      	mov	ip, r2
 8003032:	4463      	add	r3, ip
 8003034:	2064      	movs	r0, #100	; 0x64
 8003036:	2100      	movs	r1, #0
 8003038:	681c      	ldr	r4, [r3, #0]
 800303a:	685d      	ldr	r5, [r3, #4]
 800303c:	1900      	adds	r0, r0, r4
 800303e:	4169      	adcs	r1, r5
 8003040:	6018      	str	r0, [r3, #0]
 8003042:	6059      	str	r1, [r3, #4]
    bufferRawCanFrames(canDrv.globalMicroSeconds);
 8003044:	f7ff ff2e 	bl	8002ea4 <bufferRawCanFrames>
}
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	20000420 	.word	0x20000420

08003050 <loopUavCan>:

void loopUavCan() {
 8003050:	b570      	push	{r4, r5, r6, lr}
    const uint64_t timestamp = getMonotonicTimestampUSec();
 8003052:	f7ff fafd 	bl	8002650 <getMonotonicTimestampUSec>
 8003056:	0004      	movs	r4, r0
 8003058:	000d      	movs	r5, r1
    // TODO: check that time passed is not too much
    canDrv.stats.maxUavCanLoopDiff = MAX(canDrv.stats.maxUavCanLoopDiff, (getMonotonicTimestampUSec() - timestamp));

    processUavCanFrames(timestamp);
 800305a:	f7ff f9f9 	bl	8002450 <processUavCanFrames>

    if (!canDrv.nodeIdAllocated) {
 800305e:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <loopUavCan+0x60>)
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <loopUavCan+0x64>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <loopUavCan+0x2c>
        loopNodeAllocation();
    }

    // General cleanup
    if (timestamp >= canDrv.next1hzServiceTime) {
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <loopUavCan+0x60>)
 800306a:	22d9      	movs	r2, #217	; 0xd9
 800306c:	00d2      	lsls	r2, r2, #3
 800306e:	4694      	mov	ip, r2
 8003070:	4463      	add	r3, ip
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	42ab      	cmp	r3, r5
 8003078:	d903      	bls.n	8003082 <loopUavCan+0x32>
        canDrv.next1hzServiceTime = timestamp + 1000000;
        record1HzStats();
        process1HzTasks(timestamp);
    }
}
 800307a:	bd70      	pop	{r4, r5, r6, pc}
        loopNodeAllocation();
 800307c:	f7ff fd3a 	bl	8002af4 <loopNodeAllocation>
 8003080:	e7f2      	b.n	8003068 <loopUavCan+0x18>
    if (timestamp >= canDrv.next1hzServiceTime) {
 8003082:	42ab      	cmp	r3, r5
 8003084:	d101      	bne.n	800308a <loopUavCan+0x3a>
 8003086:	42a2      	cmp	r2, r4
 8003088:	d8f7      	bhi.n	800307a <loopUavCan+0x2a>
        canDrv.next1hzServiceTime = timestamp + 1000000;
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <loopUavCan+0x68>)
 800308c:	2100      	movs	r1, #0
 800308e:	1900      	adds	r0, r0, r4
 8003090:	4169      	adcs	r1, r5
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <loopUavCan+0x60>)
 8003094:	22d9      	movs	r2, #217	; 0xd9
 8003096:	00d2      	lsls	r2, r2, #3
 8003098:	4694      	mov	ip, r2
 800309a:	4463      	add	r3, ip
 800309c:	6018      	str	r0, [r3, #0]
 800309e:	6059      	str	r1, [r3, #4]
        record1HzStats();
 80030a0:	f7ff f96e 	bl	8002380 <record1HzStats>
        process1HzTasks(timestamp);
 80030a4:	0020      	movs	r0, r4
 80030a6:	0029      	movs	r1, r5
 80030a8:	f7ff fe54 	bl	8002d54 <process1HzTasks>
}
 80030ac:	e7e5      	b.n	800307a <loopUavCan+0x2a>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20000420 	.word	0x20000420
 80030b4:	000006c2 	.word	0x000006c2
 80030b8:	000f4240 	.word	0x000f4240

080030bc <setupCan>:

void setupCan() {
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030be:	46d6      	mov	lr, sl
 80030c0:	464f      	mov	r7, r9
 80030c2:	4646      	mov	r6, r8
 80030c4:	b5c0      	push	{r6, r7, lr}
 80030c6:	b084      	sub	sp, #16
    canDrv.nodeHealth = UAVCAN_NODE_HEALTH_OK;
 80030c8:	4b67      	ldr	r3, [pc, #412]	; (8003268 <setupCan+0x1ac>)
 80030ca:	22da      	movs	r2, #218	; 0xda
 80030cc:	00d2      	lsls	r2, r2, #3
 80030ce:	2100      	movs	r1, #0
 80030d0:	5499      	strb	r1, [r3, r2]
    canDrv.nodeMode = UAVCAN_NODE_MODE_INITIALIZATION;
 80030d2:	4a66      	ldr	r2, [pc, #408]	; (800326c <setupCan+0x1b0>)
 80030d4:	3101      	adds	r1, #1
 80030d6:	5499      	strb	r1, [r3, r2]
    canDrv.txBuffer.size = TX_CAN_BUFFER_SIZE;
 80030d8:	4a65      	ldr	r2, [pc, #404]	; (8003270 <setupCan+0x1b4>)
 80030da:	3107      	adds	r1, #7
 80030dc:	5499      	strb	r1, [r3, r2]
    canDrv.txBuffer.entries = canDrv.txBufferEntries;
 80030de:	3a83      	subs	r2, #131	; 0x83
 80030e0:	3aff      	subs	r2, #255	; 0xff
 80030e2:	1899      	adds	r1, r3, r2
 80030e4:	4a63      	ldr	r2, [pc, #396]	; (8003274 <setupCan+0x1b8>)
 80030e6:	5099      	str	r1, [r3, r2]
    canDrv.rxBuffer.size = RX_CAN_BUFFER_SIZE;
 80030e8:	4a63      	ldr	r2, [pc, #396]	; (8003278 <setupCan+0x1bc>)
 80030ea:	2110      	movs	r1, #16
 80030ec:	5499      	strb	r1, [r3, r2]
    canDrv.rxBuffer.entries = canDrv.rxBufferEntries;
 80030ee:	3a0b      	subs	r2, #11
 80030f0:	3aff      	subs	r2, #255	; 0xff
 80030f2:	1899      	adds	r1, r3, r2
 80030f4:	4a61      	ldr	r2, [pc, #388]	; (800327c <setupCan+0x1c0>)
 80030f6:	5099      	str	r1, [r3, r2]
    // TODO: remove ifdefs
    #ifdef H7
        softAssert((HAL_FDCAN_Start(&hfdcan1) == HAL_OK), "CAN start failed");
    #else
        CanardSTM32CANTimings timings;
        int result = canardSTM32ComputeCANTimings(HAL_RCC_GetPCLK1Freq(), 1000000, &timings);
 80030f8:	f003 fcde 	bl	8006ab8 <HAL_RCC_GetPCLK1Freq>
 80030fc:	0007      	movs	r7, r0
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
    }

    CANARD_ASSERT(out_timings != NULL);  // NOLINT
    memset(out_timings, 0, sizeof(*out_timings));
 80030fe:	2206      	movs	r2, #6
 8003100:	2100      	movs	r1, #0
 8003102:	a802      	add	r0, sp, #8
 8003104:	f004 f9c9 	bl	800749a <memset>
     *   BS = 1 + BS1 + BS2                                             -- Number of time quanta per bit
     *   PRESCALER_BS = PRESCALER * BS
     * ==>
     *   PRESCALER_BS = PCLK / BITRATE
     */
    const uint32_t prescaler_bs = peripheral_clock_rate / target_bitrate;
 8003108:	495d      	ldr	r1, [pc, #372]	; (8003280 <setupCan+0x1c4>)
 800310a:	0038      	movs	r0, r7
 800310c:	f7fd f81e 	bl	800014c <__udivsi3>
 8003110:	0006      	movs	r6, r0

    /*
     * Searching for such prescaler value so that the number of quanta per bit is highest.
     */
    uint8_t bs1_bs2_sum = (uint8_t)(max_quanta_per_bit - 1);    // NOLINT
 8003112:	2409      	movs	r4, #9

    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8003114:	e001      	b.n	800311a <setupCan+0x5e>
    {
        if (bs1_bs2_sum <= 2)
        {
            return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;          // No solution
        }
        bs1_bs2_sum--;
 8003116:	3c01      	subs	r4, #1
 8003118:	b2e4      	uxtb	r4, r4
    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 800311a:	1c65      	adds	r5, r4, #1
 800311c:	0029      	movs	r1, r5
 800311e:	0030      	movs	r0, r6
 8003120:	f7fd f89a 	bl	8000258 <__aeabi_uidivmod>
 8003124:	2900      	cmp	r1, #0
 8003126:	d003      	beq.n	8003130 <setupCan+0x74>
        if (bs1_bs2_sum <= 2)
 8003128:	2c02      	cmp	r4, #2
 800312a:	d8f4      	bhi.n	8003116 <setupCan+0x5a>
            return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;          // No solution
 800312c:	4b55      	ldr	r3, [pc, #340]	; (8003284 <setupCan+0x1c8>)
 800312e:	e058      	b.n	80031e2 <setupCan+0x126>
    }

    const uint32_t prescaler = prescaler_bs / (1U + bs1_bs2_sum);
 8003130:	0029      	movs	r1, r5
 8003132:	0030      	movs	r0, r6
 8003134:	f7fd f80a 	bl	800014c <__udivsi3>
 8003138:	4680      	mov	r8, r0
    if ((prescaler < 1U) || (prescaler > 1024U))
 800313a:	1e42      	subs	r2, r0, #1
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	429a      	cmp	r2, r3
 8003142:	d300      	bcc.n	8003146 <setupCan+0x8a>
 8003144:	e086      	b.n	8003254 <setupCan+0x198>
     *
     * Since the optimal solution is so close to the maximum, we prepare two solutions, and then pick the best one:
     *   - With rounding to nearest
     *   - With rounding to zero
     */
    uint8_t bs1 = (uint8_t)(((7 * bs1_bs2_sum - 1) + 4) / 8);       // Trying rounding to nearest first  // NOLINT
 8003146:	00e3      	lsls	r3, r4, #3
 8003148:	1b1b      	subs	r3, r3, r4
 800314a:	4699      	mov	r9, r3
 800314c:	3303      	adds	r3, #3
 800314e:	17da      	asrs	r2, r3, #31
 8003150:	2107      	movs	r1, #7
 8003152:	4011      	ands	r1, r2
 8003154:	18c9      	adds	r1, r1, r3
 8003156:	10cb      	asrs	r3, r1, #3
 8003158:	469a      	mov	sl, r3
 800315a:	b2dd      	uxtb	r5, r3
    uint8_t bs2 = (uint8_t)(bs1_bs2_sum - bs1);  // NOLINT
 800315c:	1b66      	subs	r6, r4, r5
 800315e:	b2f6      	uxtb	r6, r6
    CANARD_ASSERT(bs1_bs2_sum > bs1);
 8003160:	42ac      	cmp	r4, r5
 8003162:	d925      	bls.n	80031b0 <setupCan+0xf4>

    {
        const uint16_t sample_point_permill = (uint16_t)(1000U * (1U + bs1) / (1U + bs1 + bs2));  // NOLINT
 8003164:	21ff      	movs	r1, #255	; 0xff
 8003166:	4653      	mov	r3, sl
 8003168:	4019      	ands	r1, r3
 800316a:	1c4b      	adds	r3, r1, #1
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	0090      	lsls	r0, r2, #2
 8003172:	18c0      	adds	r0, r0, r3
 8003174:	00c0      	lsls	r0, r0, #3
 8003176:	1871      	adds	r1, r6, r1
 8003178:	3101      	adds	r1, #1
 800317a:	f7fc ffe7 	bl	800014c <__udivsi3>
 800317e:	b280      	uxth	r0, r0

        if (sample_point_permill > MaxSamplePointLocationPermill)   // Strictly more!
 8003180:	23e1      	movs	r3, #225	; 0xe1
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4298      	cmp	r0, r3
 8003186:	d909      	bls.n	800319c <setupCan+0xe0>
        {
            bs1 = (uint8_t)((7 * bs1_bs2_sum - 1) / 8);             // Nope, too far; now rounding to zero
 8003188:	464b      	mov	r3, r9
 800318a:	3b01      	subs	r3, #1
 800318c:	17da      	asrs	r2, r3, #31
 800318e:	2507      	movs	r5, #7
 8003190:	4015      	ands	r5, r2
 8003192:	18ed      	adds	r5, r5, r3
 8003194:	10ed      	asrs	r5, r5, #3
 8003196:	b2ed      	uxtb	r5, r5
            bs2 = (uint8_t)(bs1_bs2_sum - bs1);
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	b2e6      	uxtb	r6, r4
        }
    }

    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 800319c:	1e6b      	subs	r3, r5, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d809      	bhi.n	80031b8 <setupCan+0xfc>
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	d04c      	beq.n	8003242 <setupCan+0x186>
 80031a8:	2e08      	cmp	r6, #8
 80031aa:	d94c      	bls.n	8003246 <setupCan+0x18a>
 80031ac:	2400      	movs	r4, #0
 80031ae:	e004      	b.n	80031ba <setupCan+0xfe>
    CANARD_ASSERT(bs1_bs2_sum > bs1);
 80031b0:	4835      	ldr	r0, [pc, #212]	; (8003288 <setupCan+0x1cc>)
 80031b2:	f7fe f8e3 	bl	800137c <hardAssertTmp>
 80031b6:	e7d5      	b.n	8003164 <setupCan+0xa8>
    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 80031b8:	2400      	movs	r4, #0
     * def sample_point_from_btr(x):
     *     assert 0b0011110010000000111111000000000 & x == 0
     *     ts2,ts1,brp = (x>>20)&7, (x>>16)&15, x&511
     *     return (1+ts1+1)/(1+ts1+1+ts2+1)
     */
    if ((target_bitrate != (peripheral_clock_rate / (prescaler * (1U + bs1 + bs2)))) ||
 80031ba:	19a9      	adds	r1, r5, r6
 80031bc:	3101      	adds	r1, #1
 80031be:	4643      	mov	r3, r8
 80031c0:	4359      	muls	r1, r3
 80031c2:	0038      	movs	r0, r7
 80031c4:	f7fc ffc2 	bl	800014c <__udivsi3>
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <setupCan+0x1c4>)
 80031ca:	4298      	cmp	r0, r3
 80031cc:	d13d      	bne.n	800324a <setupCan+0x18e>
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d03b      	beq.n	800324a <setupCan+0x18e>
        // This actually means that the algorithm has a logic error, hence assert(0).
        CANARD_ASSERT(0);  // NOLINT
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
    }

    out_timings->bit_rate_prescaler = (uint16_t) prescaler;
 80031d2:	ab02      	add	r3, sp, #8
 80031d4:	4642      	mov	r2, r8
 80031d6:	801a      	strh	r2, [r3, #0]
    out_timings->max_resynchronization_jump_width = 1;      // One is recommended by UAVCAN, CANOpen, and DeviceNet
 80031d8:	2201      	movs	r2, #1
 80031da:	711a      	strb	r2, [r3, #4]
    out_timings->bit_segment_1 = bs1;
 80031dc:	709d      	strb	r5, [r3, #2]
    out_timings->bit_segment_2 = bs2;
 80031de:	70de      	strb	r6, [r3, #3]

    return 0;
 80031e0:	2300      	movs	r3, #0
        hardAssert(result == 0, "ComputeCANTimings failed");
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d138      	bne.n	8003258 <setupCan+0x19c>
        result = canardSTM32Init(&timings, CanardSTM32IfaceModeNormal);
 80031e6:	2100      	movs	r1, #0
 80031e8:	a802      	add	r0, sp, #8
 80031ea:	f001 fd87 	bl	8004cfc <canardSTM32Init>
        hardAssert(result == 0, "canardSTM32Init failed");
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d136      	bne.n	8003260 <setupCan+0x1a4>
    #endif

    canDrv.next1hzServiceTime = 0;
 80031f2:	4c1d      	ldr	r4, [pc, #116]	; (8003268 <setupCan+0x1ac>)
 80031f4:	23d9      	movs	r3, #217	; 0xd9
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	18e3      	adds	r3, r4, r3
 80031fa:	2000      	movs	r0, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	6018      	str	r0, [r3, #0]
 8003200:	6059      	str	r1, [r3, #4]
    canardInit(&canDrv.gCanard, // Uninitialized library instance
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	0021      	movs	r1, r4
 8003206:	3128      	adds	r1, #40	; 0x28
 8003208:	2300      	movs	r3, #0
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <setupCan+0x1d0>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <setupCan+0x1d4>)
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	0020      	movs	r0, r4
 8003216:	f000 ffb1 	bl	800417c <canardInit>
        sizeof(canDrv.canardMemoryPool), // Size of the above, in bytes
        onTransferReceived, // Callback, see CanardOnTransferReception
        shouldAcceptTransfer, // Callback, see CanardShouldAcceptTransfer
        NULL);
    
    canDrv.globalMicroSeconds = 1000 * (uint64_t) HAL_GetTick();
 800321a:	f002 f963 	bl	80054e4 <HAL_GetTick>
 800321e:	22fa      	movs	r2, #250	; 0xfa
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	2300      	movs	r3, #0
 8003224:	2100      	movs	r1, #0
 8003226:	f7fd f83d 	bl	80002a4 <__aeabi_lmul>
 800322a:	23e3      	movs	r3, #227	; 0xe3
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	469c      	mov	ip, r3
 8003230:	4464      	add	r4, ip
 8003232:	6020      	str	r0, [r4, #0]
 8003234:	6061      	str	r1, [r4, #4]
}
 8003236:	b004      	add	sp, #16
 8003238:	bce0      	pop	{r5, r6, r7}
 800323a:	46ba      	mov	sl, r7
 800323c:	46b1      	mov	r9, r6
 800323e:	46a8      	mov	r8, r5
 8003240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 8003242:	2400      	movs	r4, #0
 8003244:	e7b9      	b.n	80031ba <setupCan+0xfe>
 8003246:	2401      	movs	r4, #1
 8003248:	e7b7      	b.n	80031ba <setupCan+0xfe>
        CANARD_ASSERT(0);  // NOLINT
 800324a:	480f      	ldr	r0, [pc, #60]	; (8003288 <setupCan+0x1cc>)
 800324c:	f7fe f896 	bl	800137c <hardAssertTmp>
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <setupCan+0x1c8>)
 8003252:	e7c6      	b.n	80031e2 <setupCan+0x126>
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;              // No solution
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <setupCan+0x1c8>)
 8003256:	e7c4      	b.n	80031e2 <setupCan+0x126>
        hardAssert(result == 0, "ComputeCANTimings failed");
 8003258:	480e      	ldr	r0, [pc, #56]	; (8003294 <setupCan+0x1d8>)
 800325a:	f7fe f88f 	bl	800137c <hardAssertTmp>
 800325e:	e7c2      	b.n	80031e6 <setupCan+0x12a>
        hardAssert(result == 0, "canardSTM32Init failed");
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <setupCan+0x1dc>)
 8003262:	f7fe f88b 	bl	800137c <hardAssertTmp>
 8003266:	e7c4      	b.n	80031f2 <setupCan+0x136>
 8003268:	20000420 	.word	0x20000420
 800326c:	000006d1 	.word	0x000006d1
 8003270:	000005aa 	.word	0x000005aa
 8003274:	000005ac 	.word	0x000005ac
 8003278:	000005b2 	.word	0x000005b2
 800327c:	000005b4 	.word	0x000005b4
 8003280:	000f4240 	.word	0x000f4240
 8003284:	fffffc18 	.word	0xfffffc18
 8003288:	08007b90 	.word	0x08007b90
 800328c:	08002e35 	.word	0x08002e35
 8003290:	08002e77 	.word	0x08002e77
 8003294:	080078c8 	.word	0x080078c8
 8003298:	080078e4 	.word	0x080078e4

0800329c <broadcastFieldsPacket>:
        packetBytes,
        numBytes
    );
}

void broadcastFieldsPacket(uint8_t packetBytes[], size_t numBytes) {
 800329c:	b530      	push	{r4, r5, lr}
 800329e:	b083      	sub	sp, #12
 80032a0:	000c      	movs	r4, r1
    if (!canDrv.nodeIdAllocated)
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <broadcastFieldsPacket+0x50>)
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <broadcastFieldsPacket+0x54>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d019      	beq.n	80032e0 <broadcastFieldsPacket+0x44>
        return;
    if (numBytes >= 256) {
 80032ac:	29ff      	cmp	r1, #255	; 0xff
 80032ae:	d819      	bhi.n	80032e4 <broadcastFieldsPacket+0x48>
        softAssert(0, "Packet too big");
        return;
    }
    static uint8_t transferId;
    const int16_t broadcast_result = canBroadcast(
 80032b0:	b28b      	uxth	r3, r1
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	2310      	movs	r3, #16
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <broadcastFieldsPacket+0x58>)
 80032ba:	490f      	ldr	r1, [pc, #60]	; (80032f8 <broadcastFieldsPacket+0x5c>)
 80032bc:	2000      	movs	r0, #0
 80032be:	f7ff fd23 	bl	8002d08 <canBroadcast>
        &transferId,
        CANARD_TRANSFER_PRIORITY_MEDIUM,
        (const void*) packetBytes,
        numBytes
    );
    if (broadcast_result >= 1) {
 80032c2:	2800      	cmp	r0, #0
 80032c4:	dd0c      	ble.n	80032e0 <broadcastFieldsPacket+0x44>
        canDrv.subscribeBytesPublished += numBytes;
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <broadcastFieldsPacket+0x50>)
 80032c8:	22de      	movs	r2, #222	; 0xde
 80032ca:	00d2      	lsls	r2, r2, #3
 80032cc:	4694      	mov	ip, r2
 80032ce:	4463      	add	r3, ip
 80032d0:	0020      	movs	r0, r4
 80032d2:	2100      	movs	r1, #0
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	685d      	ldr	r5, [r3, #4]
 80032d8:	1900      	adds	r0, r0, r4
 80032da:	4169      	adcs	r1, r5
 80032dc:	6018      	str	r0, [r3, #0]
 80032de:	6059      	str	r1, [r3, #4]
    }
}
 80032e0:	b003      	add	sp, #12
 80032e2:	bd30      	pop	{r4, r5, pc}
        softAssert(0, "Packet too big");
 80032e4:	4805      	ldr	r0, [pc, #20]	; (80032fc <broadcastFieldsPacket+0x60>)
 80032e6:	f7fe f827 	bl	8001338 <softAssertTmp>
        return;
 80032ea:	e7f9      	b.n	80032e0 <broadcastFieldsPacket+0x44>
 80032ec:	20000420 	.word	0x20000420
 80032f0:	000006c2 	.word	0x000006c2
 80032f4:	20000b58 	.word	0x20000b58
 80032f8:	00004e20 	.word	0x00004e20
 80032fc:	080078fc 	.word	0x080078fc

08003300 <publishFieldPacketIfBelowBandwidth>:

int8_t publishFieldPacketIfBelowBandwidth(uint8_t packetBytes[], size_t numBytes) {
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	46ce      	mov	lr, r9
 8003304:	4647      	mov	r7, r8
 8003306:	b580      	push	{r7, lr}
 8003308:	4680      	mov	r8, r0
 800330a:	4689      	mov	r9, r1
    uint32_t tick = HAL_GetTick();
 800330c:	f002 f8ea 	bl	80054e4 <HAL_GetTick>
 8003310:	0002      	movs	r2, r0
    uint32_t bandwidth = canDrv.subscribeBytesPublished / (tick - canDrv.subscribeBeginTick); // TODO: try and avoid divides
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <publishFieldPacketIfBelowBandwidth+0x9c>)
 8003314:	21de      	movs	r1, #222	; 0xde
 8003316:	00c9      	lsls	r1, r1, #3
 8003318:	1859      	adds	r1, r3, r1
 800331a:	6808      	ldr	r0, [r1, #0]
 800331c:	6849      	ldr	r1, [r1, #4]
 800331e:	0016      	movs	r6, r2
 8003320:	2700      	movs	r7, #0
 8003322:	22db      	movs	r2, #219	; 0xdb
 8003324:	00d2      	lsls	r2, r2, #3
 8003326:	4694      	mov	ip, r2
 8003328:	4463      	add	r3, ip
 800332a:	681c      	ldr	r4, [r3, #0]
 800332c:	685d      	ldr	r5, [r3, #4]
 800332e:	0032      	movs	r2, r6
 8003330:	003b      	movs	r3, r7
 8003332:	1b12      	subs	r2, r2, r4
 8003334:	41ab      	sbcs	r3, r5
 8003336:	f7fc ff95 	bl	8000264 <__aeabi_uldivmod>
    if (tick >= canDrv.subscribeBeginTick && tick <= canDrv.subscribeUntilTick) {
 800333a:	2d00      	cmp	r5, #0
 800333c:	d11c      	bne.n	8003378 <publishFieldPacketIfBelowBandwidth+0x78>
 800333e:	42bd      	cmp	r5, r7
 8003340:	d018      	beq.n	8003374 <publishFieldPacketIfBelowBandwidth+0x74>
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <publishFieldPacketIfBelowBandwidth+0x9c>)
 8003344:	22dc      	movs	r2, #220	; 0xdc
 8003346:	00d2      	lsls	r2, r2, #3
 8003348:	4694      	mov	ip, r2
 800334a:	4463      	add	r3, ip
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	429f      	cmp	r7, r3
 8003352:	d816      	bhi.n	8003382 <publishFieldPacketIfBelowBandwidth+0x82>
 8003354:	d013      	beq.n	800337e <publishFieldPacketIfBelowBandwidth+0x7e>
        if (bandwidth < (uint32_t) canDrv.subscribeBandwidthLimit) {
 8003356:	4a11      	ldr	r2, [pc, #68]	; (800339c <publishFieldPacketIfBelowBandwidth+0x9c>)
 8003358:	23dd      	movs	r3, #221	; 0xdd
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	4283      	cmp	r3, r0
 8003360:	d912      	bls.n	8003388 <publishFieldPacketIfBelowBandwidth+0x88>
            broadcastFieldsPacket(packetBytes, numBytes);
 8003362:	4649      	mov	r1, r9
 8003364:	4640      	mov	r0, r8
 8003366:	f7ff ff99 	bl	800329c <broadcastFieldsPacket>
            return 0;
 800336a:	2000      	movs	r0, #0
    } else {
        // Not subscribed
        // canDrv.stats.not++;
        return -1;
    }
}
 800336c:	bcc0      	pop	{r6, r7}
 800336e:	46b9      	mov	r9, r7
 8003370:	46b0      	mov	r8, r6
 8003372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tick >= canDrv.subscribeBeginTick && tick <= canDrv.subscribeUntilTick) {
 8003374:	42b4      	cmp	r4, r6
 8003376:	d9e4      	bls.n	8003342 <publishFieldPacketIfBelowBandwidth+0x42>
        return -1;
 8003378:	2001      	movs	r0, #1
 800337a:	4240      	negs	r0, r0
 800337c:	e7f6      	b.n	800336c <publishFieldPacketIfBelowBandwidth+0x6c>
    if (tick >= canDrv.subscribeBeginTick && tick <= canDrv.subscribeUntilTick) {
 800337e:	4296      	cmp	r6, r2
 8003380:	d9e9      	bls.n	8003356 <publishFieldPacketIfBelowBandwidth+0x56>
        return -1;
 8003382:	2001      	movs	r0, #1
 8003384:	4240      	negs	r0, r0
 8003386:	e7f1      	b.n	800336c <publishFieldPacketIfBelowBandwidth+0x6c>
            canDrv.stats.droppedTxPacketsOverBandwidth++;
 8003388:	4904      	ldr	r1, [pc, #16]	; (800339c <publishFieldPacketIfBelowBandwidth+0x9c>)
 800338a:	22e0      	movs	r2, #224	; 0xe0
 800338c:	00d2      	lsls	r2, r2, #3
 800338e:	5a8b      	ldrh	r3, [r1, r2]
 8003390:	3301      	adds	r3, #1
 8003392:	528b      	strh	r3, [r1, r2]
            return -1;
 8003394:	2001      	movs	r0, #1
 8003396:	4240      	negs	r0, r0
 8003398:	e7e8      	b.n	800336c <publishFieldPacketIfBelowBandwidth+0x6c>
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	20000420 	.word	0x20000420

080033a0 <readRdpValue>:

#define DEBUG_FIELD_OFFSET 60000 // Just needs to be sufficiently high not to conflict with other fields

uint32_t rdpLevel = 0;

uint32_t readRdpValue() {
 80033a0:	b500      	push	{lr}
 80033a2:	b087      	sub	sp, #28
    FLASH_OBProgramInitTypeDef pOBInit;
    HAL_FLASHEx_OBGetConfig(&pOBInit);
 80033a4:	4668      	mov	r0, sp
 80033a6:	f002 fb57 	bl	8005a58 <HAL_FLASHEx_OBGetConfig>
    rdpLevel = pOBInit.RDPLevel;
 80033aa:	466b      	mov	r3, sp
 80033ac:	7b18      	ldrb	r0, [r3, #12]
 80033ae:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <readRdpValue+0x18>)
 80033b0:	6018      	str	r0, [r3, #0]
    return rdpLevel;
}
 80033b2:	b007      	add	sp, #28
 80033b4:	bd00      	pop	{pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	20000b60 	.word	0x20000b60

080033bc <setRdp>:

void setRdp(uint8_t value) {
 80033bc:	b510      	push	{r4, lr}
 80033be:	b086      	sub	sp, #24
        uint8_t rdpRegVal;
    #endif
    #ifdef H7
        uint32_t rdpRegVal;
    #endif
    if (value == 0) {
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d007      	beq.n	80033d4 <setRdp+0x18>
        rdpRegVal = OB_RDP_LEVEL_0;
    } else if (value == 1) {
 80033c4:	2801      	cmp	r0, #1
 80033c6:	d018      	beq.n	80033fa <setRdp+0x3e>
        rdpRegVal = OB_RDP_LEVEL_1;
    } else if (value == 2) {
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d014      	beq.n	80033f6 <setRdp+0x3a>
#ifndef PRODUCTION
    return;
#endif
        rdpRegVal = OB_RDP_LEVEL_2;
    } else {
        hardAssert(0, "Invalid RDP");
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <setRdp+0x44>)
 80033ce:	f7fd ffd5 	bl	800137c <hardAssertTmp>
        return;
 80033d2:	e010      	b.n	80033f6 <setRdp+0x3a>
        rdpRegVal = OB_RDP_LEVEL_0;
 80033d4:	24aa      	movs	r4, #170	; 0xaa
    }
    FLASH_OBProgramInitTypeDef pOBInit;
    HAL_FLASHEx_OBGetConfig(&pOBInit);
 80033d6:	4668      	mov	r0, sp
 80033d8:	f002 fb3e 	bl	8005a58 <HAL_FLASHEx_OBGetConfig>
    HAL_FLASH_Unlock();
 80033dc:	f002 f96c 	bl	80056b8 <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80033e0:	f002 f982 	bl	80056e8 <HAL_FLASH_OB_Unlock>
    pOBInit.OptionType = OPTIONBYTE_RDP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	9300      	str	r3, [sp, #0]
    pOBInit.RDPLevel = rdpRegVal;
 80033e8:	466b      	mov	r3, sp
 80033ea:	731c      	strb	r4, [r3, #12]
    HAL_FLASHEx_OBProgram(&pOBInit);
 80033ec:	4668      	mov	r0, sp
 80033ee:	f002 fae9 	bl	80059c4 <HAL_FLASHEx_OBProgram>
    HAL_FLASH_OB_Launch();
 80033f2:	f002 f9b9 	bl	8005768 <HAL_FLASH_OB_Launch>
}
 80033f6:	b006      	add	sp, #24
 80033f8:	bd10      	pop	{r4, pc}
        rdpRegVal = OB_RDP_LEVEL_1;
 80033fa:	24bb      	movs	r4, #187	; 0xbb
 80033fc:	e7eb      	b.n	80033d6 <setRdp+0x1a>
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	0800790c 	.word	0x0800790c

08003404 <setRdpField>:

static void setRdpField(const sFieldInfoEntry * fieldInfo, field_t startFieldIndex, field_t endFieldIndex, uint8_t * data) {
 8003404:	b510      	push	{r4, lr}
    setRdp(*data);
 8003406:	7818      	ldrb	r0, [r3, #0]
 8003408:	f7ff ffd8 	bl	80033bc <setRdp>
}
 800340c:	bd10      	pop	{r4, pc}
	...

08003410 <initialiseDebug>:
    { &assertCount,        "assert_count",   DEBUG_FIELD_OFFSET+1,                   1,  AF_FIELD_TYPE_UINT,      2, 0, &debugFieldMetaData, NULL, NULL },
    { &assertBuffer[0],    "asserts",        DEBUG_FIELD_OFFSET+2,  ASSERT_BUFFER_SIZE,  AF_FIELD_TYPE_UTF8_CHAR, 1, 0, &debugFieldMetaData, NULL, NULL },
};
const uint32_t debugFieldTableSize = sizeof(debugFieldTable)/sizeof(sFieldInfoEntry);

void initialiseDebug() {
 8003410:	b510      	push	{r4, lr}
    addComponentFieldTableToGlobalTable(debugFieldTable, debugFieldTableSize);
 8003412:	2103      	movs	r1, #3
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <initialiseDebug+0x10>)
 8003416:	f7fe f89f 	bl	8001558 <addComponentFieldTableToGlobalTable>
    readRdpValue();
 800341a:	f7ff ffc1 	bl	80033a0 <readRdpValue>
}
 800341e:	bd10      	pop	{r4, pc}
 8003420:	20000014 	.word	0x20000014

08003424 <loopDebug>:

void loopDebug(uint32_t ticks) {
 8003424:	b510      	push	{r4, lr}
    static uint32_t next = 0;
    if (ticks > next) {
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <loopDebug+0x24>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4283      	cmp	r3, r0
 800342c:	d300      	bcc.n	8003430 <loopDebug+0xc>
        next = ticks + 5000;
        readRdpValue();
        broadcastFields(DEBUG_FIELD_OFFSET, DEBUG_FIELD_OFFSET + 1);
    }
}
 800342e:	bd10      	pop	{r4, pc}
        next = ticks + 5000;
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <loopDebug+0x28>)
 8003432:	469c      	mov	ip, r3
 8003434:	4460      	add	r0, ip
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <loopDebug+0x24>)
 8003438:	6018      	str	r0, [r3, #0]
        readRdpValue();
 800343a:	f7ff ffb1 	bl	80033a0 <readRdpValue>
        broadcastFields(DEBUG_FIELD_OFFSET, DEBUG_FIELD_OFFSET + 1);
 800343e:	4904      	ldr	r1, [pc, #16]	; (8003450 <loopDebug+0x2c>)
 8003440:	4804      	ldr	r0, [pc, #16]	; (8003454 <loopDebug+0x30>)
 8003442:	f7fe fa2f 	bl	80018a4 <broadcastFields>
}
 8003446:	e7f2      	b.n	800342e <loopDebug+0xa>
 8003448:	20000b5c 	.word	0x20000b5c
 800344c:	00001388 	.word	0x00001388
 8003450:	0000ea61 	.word	0x0000ea61
 8003454:	0000ea60 	.word	0x0000ea60

08003458 <BNO055_delay_msec>:

const uint32_t imuFieldTableSize = sizeof(imuFieldTable) / sizeof(sFieldInfoEntry);

// ======================== //

static void BNO055_delay_msec(unsigned msec) {
 8003458:	b510      	push	{r4, lr}
    HAL_Delay(msec);
 800345a:	f002 f849 	bl	80054f0 <HAL_Delay>
}
 800345e:	bd10      	pop	{r4, pc}

08003460 <BNO055_I2C_bus_read>:
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(imu.i2c, dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
     softAssert(status == HAL_OK, "I2C write failed");
    return ((status == HAL_OK) ? 0 : -1);
}

static int8_t BNO055_I2C_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt) {
 8003460:	b530      	push	{r4, r5, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	0014      	movs	r4, r2
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(imu.i2c, dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 8003466:	000a      	movs	r2, r1
 8003468:	0041      	lsls	r1, r0, #1
 800346a:	480b      	ldr	r0, [pc, #44]	; (8003498 <BNO055_I2C_bus_read+0x38>)
 800346c:	6800      	ldr	r0, [r0, #0]
 800346e:	2564      	movs	r5, #100	; 0x64
 8003470:	9502      	str	r5, [sp, #8]
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	9400      	str	r4, [sp, #0]
 8003476:	2301      	movs	r3, #1
 8003478:	f002 fe60 	bl	800613c <HAL_I2C_Mem_Read>
 800347c:	1e04      	subs	r4, r0, #0
     softAssert(status == HAL_OK, "I2C read failed");
 800347e:	d104      	bne.n	800348a <BNO055_I2C_bus_read+0x2a>
    return ((status == HAL_OK) ? 0 : -1);
 8003480:	2c00      	cmp	r4, #0
 8003482:	d106      	bne.n	8003492 <BNO055_I2C_bus_read+0x32>
 8003484:	2000      	movs	r0, #0
}
 8003486:	b005      	add	sp, #20
 8003488:	bd30      	pop	{r4, r5, pc}
     softAssert(status == HAL_OK, "I2C read failed");
 800348a:	4804      	ldr	r0, [pc, #16]	; (800349c <BNO055_I2C_bus_read+0x3c>)
 800348c:	f7fd ff54 	bl	8001338 <softAssertTmp>
 8003490:	e7f6      	b.n	8003480 <BNO055_I2C_bus_read+0x20>
    return ((status == HAL_OK) ? 0 : -1);
 8003492:	2001      	movs	r0, #1
 8003494:	4240      	negs	r0, r0
 8003496:	e7f6      	b.n	8003486 <BNO055_I2C_bus_read+0x26>
 8003498:	20000b64 	.word	0x20000b64
 800349c:	0800793c 	.word	0x0800793c

080034a0 <BNO055_I2C_bus_write>:
static int8_t BNO055_I2C_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt) {
 80034a0:	b530      	push	{r4, r5, lr}
 80034a2:	b085      	sub	sp, #20
 80034a4:	0014      	movs	r4, r2
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(imu.i2c, dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 80034a6:	000a      	movs	r2, r1
 80034a8:	0041      	lsls	r1, r0, #1
 80034aa:	480b      	ldr	r0, [pc, #44]	; (80034d8 <BNO055_I2C_bus_write+0x38>)
 80034ac:	6800      	ldr	r0, [r0, #0]
 80034ae:	2564      	movs	r5, #100	; 0x64
 80034b0:	9502      	str	r5, [sp, #8]
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	9400      	str	r4, [sp, #0]
 80034b6:	2301      	movs	r3, #1
 80034b8:	f002 fd70 	bl	8005f9c <HAL_I2C_Mem_Write>
 80034bc:	1e04      	subs	r4, r0, #0
     softAssert(status == HAL_OK, "I2C write failed");
 80034be:	d104      	bne.n	80034ca <BNO055_I2C_bus_write+0x2a>
    return ((status == HAL_OK) ? 0 : -1);
 80034c0:	2c00      	cmp	r4, #0
 80034c2:	d106      	bne.n	80034d2 <BNO055_I2C_bus_write+0x32>
 80034c4:	2000      	movs	r0, #0
}
 80034c6:	b005      	add	sp, #20
 80034c8:	bd30      	pop	{r4, r5, pc}
     softAssert(status == HAL_OK, "I2C write failed");
 80034ca:	4804      	ldr	r0, [pc, #16]	; (80034dc <BNO055_I2C_bus_write+0x3c>)
 80034cc:	f7fd ff34 	bl	8001338 <softAssertTmp>
 80034d0:	e7f6      	b.n	80034c0 <BNO055_I2C_bus_write+0x20>
    return ((status == HAL_OK) ? 0 : -1);
 80034d2:	2001      	movs	r0, #1
 80034d4:	4240      	negs	r0, r0
 80034d6:	e7f6      	b.n	80034c6 <BNO055_I2C_bus_write+0x26>
 80034d8:	20000b64 	.word	0x20000b64
 80034dc:	0800794c 	.word	0x0800794c

080034e0 <readAndProcess>:

#endif

void readAndProcess() {
 80034e0:	b530      	push	{r4, r5, lr}
 80034e2:	b089      	sub	sp, #36	; 0x24
    struct bno055_gyro_t angularVelocityInt;
    struct bno055_linear_accel_t accelerationInt;
    struct bno055_gravity_t gravityInt;
    struct bno055_euler_t orientationInt;

    hardAssert(BNO055_SUCCESS == bno055_read_gyro_xyz(&angularVelocityInt), "Read gyro failed");
 80034e4:	a806      	add	r0, sp, #24
 80034e6:	f7fe fc4d 	bl	8001d84 <bno055_read_gyro_xyz>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d000      	beq.n	80034f0 <readAndProcess+0x10>
 80034ee:	e0e7      	b.n	80036c0 <readAndProcess+0x1e0>
    hardAssert(BNO055_SUCCESS == bno055_read_linear_accel_xyz(&accelerationInt), "Read acceleration failed");
 80034f0:	a804      	add	r0, sp, #16
 80034f2:	f7fe fccf 	bl	8001e94 <bno055_read_linear_accel_xyz>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d000      	beq.n	80034fc <readAndProcess+0x1c>
 80034fa:	e0e5      	b.n	80036c8 <readAndProcess+0x1e8>
    hardAssert(BNO055_SUCCESS == bno055_read_gravity_xyz(&gravityInt), "Read gravity failed");
 80034fc:	a802      	add	r0, sp, #8
 80034fe:	f7fe fd0d 	bl	8001f1c <bno055_read_gravity_xyz>
 8003502:	2800      	cmp	r0, #0
 8003504:	d000      	beq.n	8003508 <readAndProcess+0x28>
 8003506:	e0e3      	b.n	80036d0 <readAndProcess+0x1f0>
    hardAssert(BNO055_SUCCESS == bno055_read_euler_hrp(&orientationInt), "Read orientation failed");
 8003508:	4668      	mov	r0, sp
 800350a:	f7fe fc7f 	bl	8001e0c <bno055_read_euler_hrp>
 800350e:	2800      	cmp	r0, #0
 8003510:	d000      	beq.n	8003514 <readAndProcess+0x34>
 8003512:	e0e1      	b.n	80036d8 <readAndProcess+0x1f8>
    
    imu.sumGravityX100 = gravityInt.x + gravityInt.y + gravityInt.z;
 8003514:	aa02      	add	r2, sp, #8
 8003516:	2100      	movs	r1, #0
 8003518:	5e53      	ldrsh	r3, [r2, r1]
 800351a:	2002      	movs	r0, #2
 800351c:	5e11      	ldrsh	r1, [r2, r0]
 800351e:	185b      	adds	r3, r3, r1
 8003520:	2104      	movs	r1, #4
 8003522:	5e52      	ldrsh	r2, [r2, r1]
 8003524:	189b      	adds	r3, r3, r2
 8003526:	4a7a      	ldr	r2, [pc, #488]	; (8003710 <readAndProcess+0x230>)
 8003528:	64d3      	str	r3, [r2, #76]	; 0x4c

    hardAssert(orientationInt.p > (-180 * 16) && orientationInt.p < (180 * 16), "Invalid pitch");
 800352a:	466b      	mov	r3, sp
 800352c:	2204      	movs	r2, #4
 800352e:	5e9b      	ldrsh	r3, [r3, r2]
 8003530:	4a78      	ldr	r2, [pc, #480]	; (8003714 <readAndProcess+0x234>)
 8003532:	4694      	mov	ip, r2
 8003534:	4463      	add	r3, ip
 8003536:	b29b      	uxth	r3, r3
 8003538:	4a77      	ldr	r2, [pc, #476]	; (8003718 <readAndProcess+0x238>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d900      	bls.n	8003540 <readAndProcess+0x60>
 800353e:	e0cf      	b.n	80036e0 <readAndProcess+0x200>
    hardAssert(orientationInt.r > (-180 * 16) && orientationInt.r < (180 * 16), "Invalid roll");
 8003540:	466b      	mov	r3, sp
 8003542:	2202      	movs	r2, #2
 8003544:	5e9b      	ldrsh	r3, [r3, r2]
 8003546:	4a73      	ldr	r2, [pc, #460]	; (8003714 <readAndProcess+0x234>)
 8003548:	4694      	mov	ip, r2
 800354a:	4463      	add	r3, ip
 800354c:	b29b      	uxth	r3, r3
 800354e:	4a72      	ldr	r2, [pc, #456]	; (8003718 <readAndProcess+0x238>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d900      	bls.n	8003556 <readAndProcess+0x76>
 8003554:	e0c8      	b.n	80036e8 <readAndProcess+0x208>
    hardAssert(orientationInt.h >= 0 && orientationInt.h < (16 * 360), "Invalid yaw");
 8003556:	466b      	mov	r3, sp
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	23b4      	movs	r3, #180	; 0xb4
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	429a      	cmp	r2, r3
 8003560:	d300      	bcc.n	8003564 <readAndProcess+0x84>
 8003562:	e0c5      	b.n	80036f0 <readAndProcess+0x210>
    hardAssert(gravityInt.x < (10*100) && gravityInt.x > (-10 * 100), "Invalid gravity");
 8003564:	ab02      	add	r3, sp, #8
 8003566:	2200      	movs	r2, #0
 8003568:	5e9b      	ldrsh	r3, [r3, r2]
 800356a:	4a6c      	ldr	r2, [pc, #432]	; (800371c <readAndProcess+0x23c>)
 800356c:	4694      	mov	ip, r2
 800356e:	4463      	add	r3, ip
 8003570:	b29b      	uxth	r3, r3
 8003572:	4a6b      	ldr	r2, [pc, #428]	; (8003720 <readAndProcess+0x240>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d900      	bls.n	800357a <readAndProcess+0x9a>
 8003578:	e0be      	b.n	80036f8 <readAndProcess+0x218>
    hardAssert(gravityInt.y < (10*100) && gravityInt.y > (-10 * 100), "Invalid gravity");
 800357a:	ab02      	add	r3, sp, #8
 800357c:	2202      	movs	r2, #2
 800357e:	5e9b      	ldrsh	r3, [r3, r2]
 8003580:	4a66      	ldr	r2, [pc, #408]	; (800371c <readAndProcess+0x23c>)
 8003582:	4694      	mov	ip, r2
 8003584:	4463      	add	r3, ip
 8003586:	b29b      	uxth	r3, r3
 8003588:	4a65      	ldr	r2, [pc, #404]	; (8003720 <readAndProcess+0x240>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d900      	bls.n	8003590 <readAndProcess+0xb0>
 800358e:	e0b7      	b.n	8003700 <readAndProcess+0x220>
    hardAssert(gravityInt.z < (10*100) && gravityInt.z > (-10 * 100), "Invalid gravity");
 8003590:	ab02      	add	r3, sp, #8
 8003592:	2204      	movs	r2, #4
 8003594:	5e9b      	ldrsh	r3, [r3, r2]
 8003596:	4a61      	ldr	r2, [pc, #388]	; (800371c <readAndProcess+0x23c>)
 8003598:	4694      	mov	ip, r2
 800359a:	4463      	add	r3, ip
 800359c:	b29b      	uxth	r3, r3
 800359e:	4a60      	ldr	r2, [pc, #384]	; (8003720 <readAndProcess+0x240>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d900      	bls.n	80035a6 <readAndProcess+0xc6>
 80035a4:	e0b0      	b.n	8003708 <readAndProcess+0x228>

    imu.angularVelocity.x = angularVelocityInt.x / BNO055_GYRO_DIV_DPS;
 80035a6:	ad06      	add	r5, sp, #24
 80035a8:	2300      	movs	r3, #0
 80035aa:	5ee8      	ldrsh	r0, [r5, r3]
 80035ac:	f7fd fcd6 	bl	8000f5c <__aeabi_i2d>
 80035b0:	2200      	movs	r2, #0
 80035b2:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <readAndProcess+0x244>)
 80035b4:	f7fd fa66 	bl	8000a84 <__aeabi_dmul>
 80035b8:	f7fd fd00 	bl	8000fbc <__aeabi_d2f>
 80035bc:	4c54      	ldr	r4, [pc, #336]	; (8003710 <readAndProcess+0x230>)
 80035be:	62a0      	str	r0, [r4, #40]	; 0x28
    imu.angularVelocity.y = angularVelocityInt.y / BNO055_GYRO_DIV_DPS;
 80035c0:	2302      	movs	r3, #2
 80035c2:	5ee8      	ldrsh	r0, [r5, r3]
 80035c4:	f7fd fcca 	bl	8000f5c <__aeabi_i2d>
 80035c8:	2200      	movs	r2, #0
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <readAndProcess+0x244>)
 80035cc:	f7fd fa5a 	bl	8000a84 <__aeabi_dmul>
 80035d0:	f7fd fcf4 	bl	8000fbc <__aeabi_d2f>
 80035d4:	62e0      	str	r0, [r4, #44]	; 0x2c
    imu.angularVelocity.z = angularVelocityInt.z / BNO055_GYRO_DIV_DPS;
 80035d6:	2304      	movs	r3, #4
 80035d8:	5ee8      	ldrsh	r0, [r5, r3]
 80035da:	f7fd fcbf 	bl	8000f5c <__aeabi_i2d>
 80035de:	2200      	movs	r2, #0
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <readAndProcess+0x244>)
 80035e2:	f7fd fa4f 	bl	8000a84 <__aeabi_dmul>
 80035e6:	f7fd fce9 	bl	8000fbc <__aeabi_d2f>
 80035ea:	6320      	str	r0, [r4, #48]	; 0x30

    imu.acceleration.x = accelerationInt.x / BNO055_LINEAR_ACCEL_DIV_MSQ;
 80035ec:	ad04      	add	r5, sp, #16
 80035ee:	2300      	movs	r3, #0
 80035f0:	5ee8      	ldrsh	r0, [r5, r3]
 80035f2:	f7fd fcb3 	bl	8000f5c <__aeabi_i2d>
 80035f6:	2200      	movs	r2, #0
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <readAndProcess+0x248>)
 80035fa:	f7fc ff4d 	bl	8000498 <__aeabi_ddiv>
 80035fe:	f7fd fcdd 	bl	8000fbc <__aeabi_d2f>
 8003602:	6120      	str	r0, [r4, #16]
    imu.acceleration.y = accelerationInt.y / BNO055_LINEAR_ACCEL_DIV_MSQ;
 8003604:	2302      	movs	r3, #2
 8003606:	5ee8      	ldrsh	r0, [r5, r3]
 8003608:	f7fd fca8 	bl	8000f5c <__aeabi_i2d>
 800360c:	2200      	movs	r2, #0
 800360e:	4b46      	ldr	r3, [pc, #280]	; (8003728 <readAndProcess+0x248>)
 8003610:	f7fc ff42 	bl	8000498 <__aeabi_ddiv>
 8003614:	f7fd fcd2 	bl	8000fbc <__aeabi_d2f>
 8003618:	6160      	str	r0, [r4, #20]
    imu.acceleration.z = accelerationInt.z / BNO055_LINEAR_ACCEL_DIV_MSQ;
 800361a:	2304      	movs	r3, #4
 800361c:	5ee8      	ldrsh	r0, [r5, r3]
 800361e:	f7fd fc9d 	bl	8000f5c <__aeabi_i2d>
 8003622:	2200      	movs	r2, #0
 8003624:	4b40      	ldr	r3, [pc, #256]	; (8003728 <readAndProcess+0x248>)
 8003626:	f7fc ff37 	bl	8000498 <__aeabi_ddiv>
 800362a:	f7fd fcc7 	bl	8000fbc <__aeabi_d2f>
 800362e:	61a0      	str	r0, [r4, #24]

    imu.gravity.x = gravityInt.x / BNO055_GRAVITY_DIV_MSQ;
 8003630:	ad02      	add	r5, sp, #8
 8003632:	2300      	movs	r3, #0
 8003634:	5ee8      	ldrsh	r0, [r5, r3]
 8003636:	f7fd fc91 	bl	8000f5c <__aeabi_i2d>
 800363a:	2200      	movs	r2, #0
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <readAndProcess+0x248>)
 800363e:	f7fc ff2b 	bl	8000498 <__aeabi_ddiv>
 8003642:	f7fd fcbb 	bl	8000fbc <__aeabi_d2f>
 8003646:	61e0      	str	r0, [r4, #28]
    imu.gravity.y = gravityInt.y / BNO055_GRAVITY_DIV_MSQ;
 8003648:	2302      	movs	r3, #2
 800364a:	5ee8      	ldrsh	r0, [r5, r3]
 800364c:	f7fd fc86 	bl	8000f5c <__aeabi_i2d>
 8003650:	2200      	movs	r2, #0
 8003652:	4b35      	ldr	r3, [pc, #212]	; (8003728 <readAndProcess+0x248>)
 8003654:	f7fc ff20 	bl	8000498 <__aeabi_ddiv>
 8003658:	f7fd fcb0 	bl	8000fbc <__aeabi_d2f>
 800365c:	6220      	str	r0, [r4, #32]
    imu.gravity.z = gravityInt.z / BNO055_GRAVITY_DIV_MSQ;
 800365e:	2304      	movs	r3, #4
 8003660:	5ee8      	ldrsh	r0, [r5, r3]
 8003662:	f7fd fc7b 	bl	8000f5c <__aeabi_i2d>
 8003666:	2200      	movs	r2, #0
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <readAndProcess+0x248>)
 800366a:	f7fc ff15 	bl	8000498 <__aeabi_ddiv>
 800366e:	f7fd fca5 	bl	8000fbc <__aeabi_d2f>
 8003672:	6260      	str	r0, [r4, #36]	; 0x24

    imu.orientation.r = orientationInt.r / BNO055_EULER_DIV_DEG;
 8003674:	466b      	mov	r3, sp
 8003676:	2002      	movs	r0, #2
 8003678:	5e18      	ldrsh	r0, [r3, r0]
 800367a:	f7fd fc6f 	bl	8000f5c <__aeabi_i2d>
 800367e:	2200      	movs	r2, #0
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <readAndProcess+0x244>)
 8003682:	f7fd f9ff 	bl	8000a84 <__aeabi_dmul>
 8003686:	f7fd fc99 	bl	8000fbc <__aeabi_d2f>
 800368a:	60a0      	str	r0, [r4, #8]
    imu.orientation.h = orientationInt.h / BNO055_EULER_DIV_DEG;
 800368c:	466b      	mov	r3, sp
 800368e:	2000      	movs	r0, #0
 8003690:	5e18      	ldrsh	r0, [r3, r0]
 8003692:	f7fd fc63 	bl	8000f5c <__aeabi_i2d>
 8003696:	2200      	movs	r2, #0
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <readAndProcess+0x244>)
 800369a:	f7fd f9f3 	bl	8000a84 <__aeabi_dmul>
 800369e:	f7fd fc8d 	bl	8000fbc <__aeabi_d2f>
 80036a2:	6060      	str	r0, [r4, #4]
    imu.orientation.p = orientationInt.p / BNO055_EULER_DIV_DEG;
 80036a4:	466b      	mov	r3, sp
 80036a6:	2004      	movs	r0, #4
 80036a8:	5e18      	ldrsh	r0, [r3, r0]
 80036aa:	f7fd fc57 	bl	8000f5c <__aeabi_i2d>
 80036ae:	2200      	movs	r2, #0
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <readAndProcess+0x244>)
 80036b2:	f7fd f9e7 	bl	8000a84 <__aeabi_dmul>
 80036b6:	f7fd fc81 	bl	8000fbc <__aeabi_d2f>
 80036ba:	60e0      	str	r0, [r4, #12]
}
 80036bc:	b009      	add	sp, #36	; 0x24
 80036be:	bd30      	pop	{r4, r5, pc}
    hardAssert(BNO055_SUCCESS == bno055_read_gyro_xyz(&angularVelocityInt), "Read gyro failed");
 80036c0:	481a      	ldr	r0, [pc, #104]	; (800372c <readAndProcess+0x24c>)
 80036c2:	f7fd fe5b 	bl	800137c <hardAssertTmp>
 80036c6:	e713      	b.n	80034f0 <readAndProcess+0x10>
    hardAssert(BNO055_SUCCESS == bno055_read_linear_accel_xyz(&accelerationInt), "Read acceleration failed");
 80036c8:	4819      	ldr	r0, [pc, #100]	; (8003730 <readAndProcess+0x250>)
 80036ca:	f7fd fe57 	bl	800137c <hardAssertTmp>
 80036ce:	e715      	b.n	80034fc <readAndProcess+0x1c>
    hardAssert(BNO055_SUCCESS == bno055_read_gravity_xyz(&gravityInt), "Read gravity failed");
 80036d0:	4818      	ldr	r0, [pc, #96]	; (8003734 <readAndProcess+0x254>)
 80036d2:	f7fd fe53 	bl	800137c <hardAssertTmp>
 80036d6:	e717      	b.n	8003508 <readAndProcess+0x28>
    hardAssert(BNO055_SUCCESS == bno055_read_euler_hrp(&orientationInt), "Read orientation failed");
 80036d8:	4817      	ldr	r0, [pc, #92]	; (8003738 <readAndProcess+0x258>)
 80036da:	f7fd fe4f 	bl	800137c <hardAssertTmp>
 80036de:	e719      	b.n	8003514 <readAndProcess+0x34>
    hardAssert(orientationInt.p > (-180 * 16) && orientationInt.p < (180 * 16), "Invalid pitch");
 80036e0:	4816      	ldr	r0, [pc, #88]	; (800373c <readAndProcess+0x25c>)
 80036e2:	f7fd fe4b 	bl	800137c <hardAssertTmp>
 80036e6:	e72b      	b.n	8003540 <readAndProcess+0x60>
    hardAssert(orientationInt.r > (-180 * 16) && orientationInt.r < (180 * 16), "Invalid roll");
 80036e8:	4815      	ldr	r0, [pc, #84]	; (8003740 <readAndProcess+0x260>)
 80036ea:	f7fd fe47 	bl	800137c <hardAssertTmp>
 80036ee:	e732      	b.n	8003556 <readAndProcess+0x76>
    hardAssert(orientationInt.h >= 0 && orientationInt.h < (16 * 360), "Invalid yaw");
 80036f0:	4814      	ldr	r0, [pc, #80]	; (8003744 <readAndProcess+0x264>)
 80036f2:	f7fd fe43 	bl	800137c <hardAssertTmp>
 80036f6:	e735      	b.n	8003564 <readAndProcess+0x84>
    hardAssert(gravityInt.x < (10*100) && gravityInt.x > (-10 * 100), "Invalid gravity");
 80036f8:	4813      	ldr	r0, [pc, #76]	; (8003748 <readAndProcess+0x268>)
 80036fa:	f7fd fe3f 	bl	800137c <hardAssertTmp>
 80036fe:	e73c      	b.n	800357a <readAndProcess+0x9a>
    hardAssert(gravityInt.y < (10*100) && gravityInt.y > (-10 * 100), "Invalid gravity");
 8003700:	4811      	ldr	r0, [pc, #68]	; (8003748 <readAndProcess+0x268>)
 8003702:	f7fd fe3b 	bl	800137c <hardAssertTmp>
 8003706:	e743      	b.n	8003590 <readAndProcess+0xb0>
    hardAssert(gravityInt.z < (10*100) && gravityInt.z > (-10 * 100), "Invalid gravity");
 8003708:	480f      	ldr	r0, [pc, #60]	; (8003748 <readAndProcess+0x268>)
 800370a:	f7fd fe37 	bl	800137c <hardAssertTmp>
 800370e:	e74a      	b.n	80035a6 <readAndProcess+0xc6>
 8003710:	20000b64 	.word	0x20000b64
 8003714:	00000b3f 	.word	0x00000b3f
 8003718:	0000167e 	.word	0x0000167e
 800371c:	000003e7 	.word	0x000003e7
 8003720:	000007ce 	.word	0x000007ce
 8003724:	3fb00000 	.word	0x3fb00000
 8003728:	40590000 	.word	0x40590000
 800372c:	08007960 	.word	0x08007960
 8003730:	08007974 	.word	0x08007974
 8003734:	08007990 	.word	0x08007990
 8003738:	080079a4 	.word	0x080079a4
 800373c:	080079bc 	.word	0x080079bc
 8003740:	080079cc 	.word	0x080079cc
 8003744:	080079dc 	.word	0x080079dc
 8003748:	080079e8 	.word	0x080079e8

0800374c <testImu>:

// ======================== //

uint8_t testImu() {
 800374c:	b510      	push	{r4, lr}
    readAndProcess();
 800374e:	f7ff fec7 	bl	80034e0 <readAndProcess>
    // Just check Gravity values are sensible
    uint8_t failed = (imu.sumGravityX100 < 900 || imu.sumGravityX100 > 2000);
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <testImu+0x28>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <testImu+0x2c>)
 8003758:	4694      	mov	ip, r2
 800375a:	4463      	add	r3, ip
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <testImu+0x30>)
 800375e:	429a      	cmp	r2, r3
 8003760:	41a4      	sbcs	r4, r4
 8003762:	4264      	negs	r4, r4
    softAssert(!failed, "IMU self test failed");
 8003764:	4293      	cmp	r3, r2
 8003766:	d801      	bhi.n	800376c <testImu+0x20>
    return failed;
}
 8003768:	0020      	movs	r0, r4
 800376a:	bd10      	pop	{r4, pc}
    softAssert(!failed, "IMU self test failed");
 800376c:	4804      	ldr	r0, [pc, #16]	; (8003780 <testImu+0x34>)
 800376e:	f7fd fde3 	bl	8001338 <softAssertTmp>
 8003772:	e7f9      	b.n	8003768 <testImu+0x1c>
 8003774:	20000b64 	.word	0x20000b64
 8003778:	fffffc7c 	.word	0xfffffc7c
 800377c:	0000044c 	.word	0x0000044c
 8003780:	080079f8 	.word	0x080079f8

08003784 <initialiseImu>:
                    #ifdef IMU_I2C
                        I2C_HandleTypeDef * i2c
                    #else
                        UART_HandleTypeDef * uart
                    #endif
                    ) {
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	46d6      	mov	lr, sl
 8003788:	464f      	mov	r7, r9
 800378a:	4646      	mov	r6, r8
 800378c:	b5c0      	push	{r6, r7, lr}
 800378e:	0004      	movs	r4, r0
 8003790:	000d      	movs	r5, r1
 8003792:	0016      	movs	r6, r2
 8003794:	001f      	movs	r7, r3
 8003796:	ab08      	add	r3, sp, #32
 8003798:	cb04      	ldmia	r3!, {r2}
 800379a:	4691      	mov	r9, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	469a      	mov	sl, r3
 80037a0:	ab0d      	add	r3, sp, #52	; 0x34
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	4698      	mov	r8, r3
    addComponentFieldTableToGlobalTable(imuFieldTable, imuFieldTableSize);
 80037a6:	210c      	movs	r1, #12
 80037a8:	4835      	ldr	r0, [pc, #212]	; (8003880 <initialiseImu+0xfc>)
 80037aa:	f7fd fed5 	bl	8001558 <addComponentFieldTableToGlobalTable>
    
#ifdef IMU_I2C
    imu.i2c = i2c;
 80037ae:	4b35      	ldr	r3, [pc, #212]	; (8003884 <initialiseImu+0x100>)
 80037b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037b2:	601a      	str	r2, [r3, #0]
    imu.bno055.bus_write = BNO055_I2C_bus_write;
 80037b4:	4a34      	ldr	r2, [pc, #208]	; (8003888 <initialiseImu+0x104>)
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    imu.bno055.bus_read = BNO055_I2C_bus_read;
 80037b8:	4a34      	ldr	r2, [pc, #208]	; (800388c <initialiseImu+0x108>)
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_GPIO_WritePin(ps1Gpio, ps1GpioPin, GPIO_PIN_RESET);
 80037bc:	2200      	movs	r2, #0
 80037be:	4651      	mov	r1, sl
 80037c0:	4648      	mov	r0, r9
 80037c2:	f002 fa1e 	bl	8005c02 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ps1Gpio, ps1GpioPin, GPIO_PIN_SET);
#endif
    
        
    // Ensure bootloader is not selected
    HAL_GPIO_WritePin(bootloaderGpio, bootloaderGpioPin, GPIO_PIN_SET);
 80037c6:	2201      	movs	r2, #1
 80037c8:	0039      	movs	r1, r7
 80037ca:	0030      	movs	r0, r6
 80037cc:	f002 fa19 	bl	8005c02 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f001 fe8d 	bl	80054f0 <HAL_Delay>
    // Apply reset
    HAL_GPIO_WritePin(resetGpio, resetGpioPin, GPIO_PIN_RESET);
 80037d6:	2200      	movs	r2, #0
 80037d8:	0029      	movs	r1, r5
 80037da:	0020      	movs	r0, r4
 80037dc:	f002 fa11 	bl	8005c02 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80037e0:	26fa      	movs	r6, #250	; 0xfa
 80037e2:	00b6      	lsls	r6, r6, #2
 80037e4:	0030      	movs	r0, r6
 80037e6:	f001 fe83 	bl	80054f0 <HAL_Delay>
    // Release reset
    HAL_GPIO_WritePin(resetGpio, resetGpioPin, GPIO_PIN_SET);
 80037ea:	2201      	movs	r2, #1
 80037ec:	0029      	movs	r1, r5
 80037ee:	0020      	movs	r0, r4
 80037f0:	f002 fa07 	bl	8005c02 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80037f4:	0030      	movs	r0, r6
 80037f6:	f001 fe7b 	bl	80054f0 <HAL_Delay>
    softAssert(HAL_GPIO_ReadPin(bootloadIndicatorGpio, bootloadIndicatorGpioPin) == GPIO_PIN_RESET, "Bootloader indicator not set");
 80037fa:	4641      	mov	r1, r8
 80037fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80037fe:	f002 f9f9 	bl	8005bf4 <HAL_GPIO_ReadPin>
 8003802:	2800      	cmp	r0, #0
 8003804:	d123      	bne.n	800384e <initialiseImu+0xca>

    imu.bno055.delay_msec = BNO055_delay_msec;
 8003806:	481f      	ldr	r0, [pc, #124]	; (8003884 <initialiseImu+0x100>)
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <initialiseImu+0x10c>)
 800380a:	6483      	str	r3, [r0, #72]	; 0x48
    imu.bno055.dev_addr = BNO055_I2C_ADDR1;
 800380c:	233d      	movs	r3, #61	; 0x3d
 800380e:	2228      	movs	r2, #40	; 0x28
 8003810:	54c2      	strb	r2, [r0, r3]
    
    hardAssert(bno055_init(&imu.bno055) == BNO055_SUCCESS, "bno055_init failed");
 8003812:	3034      	adds	r0, #52	; 0x34
 8003814:	f7fe f9fc 	bl	8001c10 <bno055_init>
 8003818:	2800      	cmp	r0, #0
 800381a:	d11c      	bne.n	8003856 <initialiseImu+0xd2>
    hardAssert(bno055_set_power_mode(BNO055_POWER_MODE_NORMAL) == BNO055_SUCCESS, "set_power_mode failed");
 800381c:	2000      	movs	r0, #0
 800381e:	f7fe fd39 	bl	8002294 <bno055_set_power_mode>
 8003822:	2800      	cmp	r0, #0
 8003824:	d11b      	bne.n	800385e <initialiseImu+0xda>
    hardAssert(bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF) == BNO055_SUCCESS, "set_operation_mode failed");
 8003826:	200c      	movs	r0, #12
 8003828:	f7fe fbec 	bl	8002004 <bno055_set_operation_mode>
 800382c:	2800      	cmp	r0, #0
 800382e:	d11a      	bne.n	8003866 <initialiseImu+0xe2>
    hardAssert(bno055_set_euler_unit(BNO055_EULER_UNIT_DEG) == BNO055_SUCCESS, "set_euler_unit failed");
 8003830:	2000      	movs	r0, #0
 8003832:	f7fe fcd5 	bl	80021e0 <bno055_set_euler_unit>
 8003836:	2800      	cmp	r0, #0
 8003838:	d119      	bne.n	800386e <initialiseImu+0xea>
    hardAssert(bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS) == BNO055_SUCCESS, "set_gyro_unit failed");
 800383a:	2000      	movs	r0, #0
 800383c:	f7fe fc76 	bl	800212c <bno055_set_gyro_unit>
 8003840:	2800      	cmp	r0, #0
 8003842:	d118      	bne.n	8003876 <initialiseImu+0xf2>
}
 8003844:	bce0      	pop	{r5, r6, r7}
 8003846:	46ba      	mov	sl, r7
 8003848:	46b1      	mov	r9, r6
 800384a:	46a8      	mov	r8, r5
 800384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(HAL_GPIO_ReadPin(bootloadIndicatorGpio, bootloadIndicatorGpioPin) == GPIO_PIN_RESET, "Bootloader indicator not set");
 800384e:	4811      	ldr	r0, [pc, #68]	; (8003894 <initialiseImu+0x110>)
 8003850:	f7fd fd72 	bl	8001338 <softAssertTmp>
 8003854:	e7d7      	b.n	8003806 <initialiseImu+0x82>
    hardAssert(bno055_init(&imu.bno055) == BNO055_SUCCESS, "bno055_init failed");
 8003856:	4810      	ldr	r0, [pc, #64]	; (8003898 <initialiseImu+0x114>)
 8003858:	f7fd fd90 	bl	800137c <hardAssertTmp>
 800385c:	e7de      	b.n	800381c <initialiseImu+0x98>
    hardAssert(bno055_set_power_mode(BNO055_POWER_MODE_NORMAL) == BNO055_SUCCESS, "set_power_mode failed");
 800385e:	480f      	ldr	r0, [pc, #60]	; (800389c <initialiseImu+0x118>)
 8003860:	f7fd fd8c 	bl	800137c <hardAssertTmp>
 8003864:	e7df      	b.n	8003826 <initialiseImu+0xa2>
    hardAssert(bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF) == BNO055_SUCCESS, "set_operation_mode failed");
 8003866:	480e      	ldr	r0, [pc, #56]	; (80038a0 <initialiseImu+0x11c>)
 8003868:	f7fd fd88 	bl	800137c <hardAssertTmp>
 800386c:	e7e0      	b.n	8003830 <initialiseImu+0xac>
    hardAssert(bno055_set_euler_unit(BNO055_EULER_UNIT_DEG) == BNO055_SUCCESS, "set_euler_unit failed");
 800386e:	480d      	ldr	r0, [pc, #52]	; (80038a4 <initialiseImu+0x120>)
 8003870:	f7fd fd84 	bl	800137c <hardAssertTmp>
 8003874:	e7e1      	b.n	800383a <initialiseImu+0xb6>
    hardAssert(bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS) == BNO055_SUCCESS, "set_gyro_unit failed");
 8003876:	480c      	ldr	r0, [pc, #48]	; (80038a8 <initialiseImu+0x124>)
 8003878:	f7fd fd80 	bl	800137c <hardAssertTmp>
}
 800387c:	e7e2      	b.n	8003844 <initialiseImu+0xc0>
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	200000b4 	.word	0x200000b4
 8003884:	20000b64 	.word	0x20000b64
 8003888:	080034a1 	.word	0x080034a1
 800388c:	08003461 	.word	0x08003461
 8003890:	08003459 	.word	0x08003459
 8003894:	08007a10 	.word	0x08007a10
 8003898:	08007a30 	.word	0x08007a30
 800389c:	08007a44 	.word	0x08007a44
 80038a0:	08007a5c 	.word	0x08007a5c
 80038a4:	08007a78 	.word	0x08007a78
 80038a8:	08007a90 	.word	0x08007a90

080038ac <loopImu>:

void loopImu(uint32_t ticks) {
 80038ac:	b510      	push	{r4, lr}
    static uint32_t nextTicks = 0;
    if (ticks > nextTicks) {
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <loopImu+0x20>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4283      	cmp	r3, r0
 80038b4:	d300      	bcc.n	80038b8 <loopImu+0xc>
        nextTicks = ticks + 100;
        readAndProcess();
        publishFieldsIfBelowBandwidth(0, 11);
    }
}
 80038b6:	bd10      	pop	{r4, pc}
        nextTicks = ticks + 100;
 80038b8:	3064      	adds	r0, #100	; 0x64
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <loopImu+0x20>)
 80038bc:	6018      	str	r0, [r3, #0]
        readAndProcess();
 80038be:	f7ff fe0f 	bl	80034e0 <readAndProcess>
        publishFieldsIfBelowBandwidth(0, 11);
 80038c2:	210b      	movs	r1, #11
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7fe f89d 	bl	8001a04 <publishFieldsIfBelowBandwidth>
}
 80038ca:	e7f4      	b.n	80038b6 <loopImu+0xa>
 80038cc:	20000bb4 	.word	0x20000bb4

080038d0 <getRandomInt>:
    //     srand((uint32_t) time(NULL));
    // }
    // // Plus RAND_MAX/2 so that it rounds (rather than always rounding down)
    // // RAND_MAX +1 is optimisation - it should mean the divide becomes a bit shift
    // return (((rand() * max) + (RAND_MAX/2)) / ((uint32_t) RAND_MAX + 1));
}
 80038d0:	2001      	movs	r0, #1
 80038d2:	4770      	bx	lr

080038d4 <incrAndWrap>:
// append only touches the end pointer
// pop only touches the start pointer
// The buffer is empty if start == end

unsigned incrAndWrap(unsigned val, unsigned inc, unsigned max) {
    unsigned newVal = val + inc;
 80038d4:	1840      	adds	r0, r0, r1
    return ((newVal >= max) ? (newVal - max) : (newVal));
 80038d6:	4290      	cmp	r0, r2
 80038d8:	d300      	bcc.n	80038dc <incrAndWrap+0x8>
 80038da:	1a80      	subs	r0, r0, r2
}
 80038dc:	4770      	bx	lr

080038de <decrAndWrap>:
int decrAndWrap(unsigned val, unsigned decr, unsigned max) {
    int newVal = val - decr;
 80038de:	1a41      	subs	r1, r0, r1
 80038e0:	1e08      	subs	r0, r1, #0
    return ((newVal < 0) ? (newVal + max) : newVal);
 80038e2:	db00      	blt.n	80038e6 <decrAndWrap+0x8>
}
 80038e4:	4770      	bx	lr
    return ((newVal < 0) ? (newVal + max) : newVal);
 80038e6:	1888      	adds	r0, r1, r2
 80038e8:	e7fc      	b.n	80038e4 <decrAndWrap+0x6>

080038ea <computeTransferIDForwardDistance>:
/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
    int16_t d = (int16_t)(a - b);
 80038ea:	1a40      	subs	r0, r0, r1
 80038ec:	b283      	uxth	r3, r0
    if (d < 0)
 80038ee:	2800      	cmp	r0, #0
 80038f0:	db00      	blt.n	80038f4 <computeTransferIDForwardDistance+0xa>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
    }
    return d;
}
 80038f2:	4770      	bx	lr
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 80038f4:	3320      	adds	r3, #32
 80038f6:	b218      	sxth	r0, r3
 80038f8:	e7fb      	b.n	80038f2 <computeTransferIDForwardDistance+0x8>

080038fa <isPriorityHigher>:

/**
 * Returns true if priority of self is higher than other.
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t self, uint32_t other)
{
 80038fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fc:	0003      	movs	r3, r0
    const uint32_t self_clean_id = self & CANARD_CAN_EXT_ID_MASK;
 80038fe:	00c5      	lsls	r5, r0, #3
 8003900:	08ed      	lsrs	r5, r5, #3
    const uint32_t other_clean_id = other & CANARD_CAN_EXT_ID_MASK;
 8003902:	00ca      	lsls	r2, r1, #3
 8003904:	08d2      	lsrs	r2, r2, #3

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool self_ext = (self & CANARD_CAN_FRAME_EFF) != 0;
 8003906:	0fc4      	lsrs	r4, r0, #31
    const bool other_ext = (other & CANARD_CAN_FRAME_EFF) != 0;
 8003908:	000e      	movs	r6, r1
 800390a:	0fc8      	lsrs	r0, r1, #31
    if (self_ext != other_ext)
 800390c:	4284      	cmp	r4, r0
 800390e:	d00d      	beq.n	800392c <isPriorityHigher+0x32>
    {
        const uint32_t self_arb11 = self_ext ? (self_clean_id >> 18U) : self_clean_id;
 8003910:	2b00      	cmp	r3, #0
 8003912:	db07      	blt.n	8003924 <isPriorityHigher+0x2a>
        const uint32_t other_arb11 = other_ext ? (other_clean_id >> 18U) : other_clean_id;
 8003914:	2e00      	cmp	r6, #0
 8003916:	db07      	blt.n	8003928 <isPriorityHigher+0x2e>
        if (self_arb11 != other_arb11)
 8003918:	4295      	cmp	r5, r2
 800391a:	d002      	beq.n	8003922 <isPriorityHigher+0x28>
        {
            return self_arb11 < other_arb11;
 800391c:	4295      	cmp	r5, r2
 800391e:	4192      	sbcs	r2, r2
 8003920:	4250      	negs	r0, r2

    /*
     * Plain ID arbitration - greater value loses.
     */
    return self_clean_id < other_clean_id;
}
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t self_arb11 = self_ext ? (self_clean_id >> 18U) : self_clean_id;
 8003924:	0cad      	lsrs	r5, r5, #18
 8003926:	e7f5      	b.n	8003914 <isPriorityHigher+0x1a>
        const uint32_t other_arb11 = other_ext ? (other_clean_id >> 18U) : other_clean_id;
 8003928:	0c92      	lsrs	r2, r2, #18
 800392a:	e7f5      	b.n	8003918 <isPriorityHigher+0x1e>
    const bool self_rtr = (self & CANARD_CAN_FRAME_RTR) != 0;
 800392c:	2080      	movs	r0, #128	; 0x80
 800392e:	05c0      	lsls	r0, r0, #23
 8003930:	4003      	ands	r3, r0
 8003932:	1e5c      	subs	r4, r3, #1
 8003934:	41a3      	sbcs	r3, r4
 8003936:	b2db      	uxtb	r3, r3
    const bool other_rtr = (other & CANARD_CAN_FRAME_RTR) != 0;
 8003938:	4001      	ands	r1, r0
 800393a:	1e48      	subs	r0, r1, #1
 800393c:	4181      	sbcs	r1, r0
 800393e:	b2c8      	uxtb	r0, r1
    if (self_clean_id == other_clean_id && self_rtr != other_rtr)
 8003940:	4295      	cmp	r5, r2
 8003942:	d003      	beq.n	800394c <isPriorityHigher+0x52>
    return self_clean_id < other_clean_id;
 8003944:	4295      	cmp	r5, r2
 8003946:	4192      	sbcs	r2, r2
 8003948:	4250      	negs	r0, r2
 800394a:	e7ea      	b.n	8003922 <isPriorityHigher+0x28>
    if (self_clean_id == other_clean_id && self_rtr != other_rtr)
 800394c:	4283      	cmp	r3, r0
 800394e:	d1e8      	bne.n	8003922 <isPriorityHigher+0x28>
 8003950:	e7f8      	b.n	8003944 <isPriorityHigher+0x4a>

08003952 <extractTransferType>:
 * returns transfer type from id
 */
CANARD_INTERNAL CanardTransferType extractTransferType(uint32_t id)
{
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
    if (!is_service)
 8003952:	0603      	lsls	r3, r0, #24
 8003954:	d503      	bpl.n	800395e <extractTransferType+0xc>
    {
        return CanardTransferTypeBroadcast;
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8003956:	0403      	lsls	r3, r0, #16
 8003958:	d503      	bpl.n	8003962 <extractTransferType+0x10>
    {
        return CanardTransferTypeRequest;
 800395a:	2001      	movs	r0, #1
    }
    else
    {
        return CanardTransferTypeResponse;
    }
}
 800395c:	4770      	bx	lr
        return CanardTransferTypeBroadcast;
 800395e:	2002      	movs	r0, #2
 8003960:	e7fc      	b.n	800395c <extractTransferType+0xa>
        return CanardTransferTypeResponse;
 8003962:	2000      	movs	r0, #0
 8003964:	e7fa      	b.n	800395c <extractTransferType+0xa>

08003966 <extractDataType>:
{
 8003966:	b510      	push	{r4, lr}
 8003968:	0004      	movs	r4, r0
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 800396a:	f7ff fff2 	bl	8003952 <extractTransferType>
 800396e:	2802      	cmp	r0, #2
 8003970:	d002      	beq.n	8003978 <extractDataType+0x12>
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8003972:	0c24      	lsrs	r4, r4, #16
 8003974:	b2e0      	uxtb	r0, r4
}
 8003976:	bd10      	pop	{r4, pc}
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8003978:	0a20      	lsrs	r0, r4, #8
 800397a:	b280      	uxth	r0, r0
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 800397c:	0663      	lsls	r3, r4, #25
 800397e:	d1fa      	bne.n	8003976 <extractDataType+0x10>
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8003980:	2303      	movs	r3, #3
 8003982:	4018      	ands	r0, r3
        return dtid;
 8003984:	e7f7      	b.n	8003976 <extractDataType+0x10>

08003986 <findRxState>:
/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardRxState* state, uint32_t transfer_descriptor)
{
    while (state != NULL)
 8003986:	e000      	b.n	800398a <findRxState+0x4>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
        {
            return state;
        }
        state = state->next;
 8003988:	6800      	ldr	r0, [r0, #0]
    while (state != NULL)
 800398a:	2800      	cmp	r0, #0
 800398c:	d002      	beq.n	8003994 <findRxState+0xe>
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 800398e:	6903      	ldr	r3, [r0, #16]
 8003990:	428b      	cmp	r3, r1
 8003992:	d1f9      	bne.n	8003988 <findRxState+0x2>
    }
    return NULL;
}
 8003994:	4770      	bx	lr

08003996 <isBigEndian>:
        uint8_t b[2];
    } u;
    u.a = 1;
    return u.b[1] == 1;                             // Some don't...
#endif
}
 8003996:	2000      	movs	r0, #0
 8003998:	4770      	bx	lr
	...

0800399c <crcAddByte>:
/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800399c:	0209      	lsls	r1, r1, #8
 800399e:	4048      	eors	r0, r1
    for (uint8_t j = 0; j < 8; j++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	e003      	b.n	80039ac <crcAddByte+0x10>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 80039a4:	0040      	lsls	r0, r0, #1
 80039a6:	b280      	uxth	r0, r0
    for (uint8_t j = 0; j < 8; j++)
 80039a8:	3301      	adds	r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b07      	cmp	r3, #7
 80039ae:	d807      	bhi.n	80039c0 <crcAddByte+0x24>
        if (crc_val & 0x8000U)
 80039b0:	b202      	sxth	r2, r0
 80039b2:	2a00      	cmp	r2, #0
 80039b4:	daf6      	bge.n	80039a4 <crcAddByte+0x8>
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 80039b6:	0040      	lsls	r0, r0, #1
 80039b8:	b281      	uxth	r1, r0
 80039ba:	4802      	ldr	r0, [pc, #8]	; (80039c4 <crcAddByte+0x28>)
 80039bc:	4048      	eors	r0, r1
 80039be:	e7f3      	b.n	80039a8 <crcAddByte+0xc>
        }
    }
    return crc_val;
}
 80039c0:	4770      	bx	lr
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	00001021 	.word	0x00001021

080039c8 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	0016      	movs	r6, r2
 80039cc:	001d      	movs	r5, r3
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80039ce:	2400      	movs	r4, #0
 80039d0:	e00b      	b.n	80039ea <crcAddSignature+0x22>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80039d2:	2320      	movs	r3, #32
 80039d4:	1b1b      	subs	r3, r3, r4
 80039d6:	002a      	movs	r2, r5
 80039d8:	409a      	lsls	r2, r3
 80039da:	0031      	movs	r1, r6
 80039dc:	40e1      	lsrs	r1, r4
 80039de:	4311      	orrs	r1, r2
 80039e0:	b2c9      	uxtb	r1, r1
 80039e2:	f7ff ffdb 	bl	800399c <crcAddByte>
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80039e6:	3408      	adds	r4, #8
 80039e8:	b2a4      	uxth	r4, r4
 80039ea:	2c3f      	cmp	r4, #63	; 0x3f
 80039ec:	d806      	bhi.n	80039fc <crcAddSignature+0x34>
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80039ee:	2320      	movs	r3, #32
 80039f0:	425b      	negs	r3, r3
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	d4ed      	bmi.n	80039d2 <crcAddSignature+0xa>
 80039f6:	0029      	movs	r1, r5
 80039f8:	40d9      	lsrs	r1, r3
 80039fa:	e7f1      	b.n	80039e0 <crcAddSignature+0x18>
    }
    return crc_val;
}
 80039fc:	bd70      	pop	{r4, r5, r6, pc}

080039fe <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 80039fe:	b570      	push	{r4, r5, r6, lr}
    while (len--)
 8003a00:	e005      	b.n	8003a0e <crcAdd+0x10>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8003a02:	1c4d      	adds	r5, r1, #1
 8003a04:	7809      	ldrb	r1, [r1, #0]
 8003a06:	f7ff ffc9 	bl	800399c <crcAddByte>
    while (len--)
 8003a0a:	0022      	movs	r2, r4
        crc_val = crcAddByte(crc_val, *bytes++);
 8003a0c:	0029      	movs	r1, r5
    while (len--)
 8003a0e:	1e54      	subs	r4, r2, #1
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	d1f6      	bne.n	8003a02 <crcAdd+0x4>
    }
    return crc_val;
}
 8003a14:	bd70      	pop	{r4, r5, r6, pc}

08003a16 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       CanardPoolAllocatorBlock* buf,
                                       uint16_t buf_len)
{
 8003a16:	b530      	push	{r4, r5, lr}
    size_t current_index = 0;
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8003a18:	0005      	movs	r5, r0
    size_t current_index = 0;
 8003a1a:	2400      	movs	r4, #0
    while (current_index < buf_len)
 8003a1c:	e004      	b.n	8003a28 <initPoolAllocator+0x12>
    {
        *current_block = &buf[current_index];
 8003a1e:	0163      	lsls	r3, r4, #5
 8003a20:	18cb      	adds	r3, r1, r3
 8003a22:	602b      	str	r3, [r5, #0]
        current_block = &((*current_block)->next);
 8003a24:	001d      	movs	r5, r3
        current_index++;
 8003a26:	3401      	adds	r4, #1
    while (current_index < buf_len)
 8003a28:	42a2      	cmp	r2, r4
 8003a2a:	d8f8      	bhi.n	8003a1e <initPoolAllocator+0x8>
    }
    *current_block = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	602b      	str	r3, [r5, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8003a30:	8082      	strh	r2, [r0, #4]
    allocator->statistics.current_usage_blocks = 0;
 8003a32:	80c3      	strh	r3, [r0, #6]
    allocator->statistics.peak_usage_blocks = 0;
 8003a34:	8103      	strh	r3, [r0, #8]
}
 8003a36:	bd30      	pop	{r4, r5, pc}

08003a38 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8003a38:	0003      	movs	r3, r0
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8003a3a:	6800      	ldr	r0, [r0, #0]
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d009      	beq.n	8003a54 <allocateBlock+0x1c>
        return NULL;
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
    allocator->free_list = allocator->free_list->next;
 8003a40:	6802      	ldr	r2, [r0, #0]
 8003a42:	601a      	str	r2, [r3, #0]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8003a44:	88da      	ldrh	r2, [r3, #6]
 8003a46:	3201      	adds	r2, #1
 8003a48:	b292      	uxth	r2, r2
 8003a4a:	80da      	strh	r2, [r3, #6]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8003a4c:	8919      	ldrh	r1, [r3, #8]
 8003a4e:	428a      	cmp	r2, r1
 8003a50:	d900      	bls.n	8003a54 <allocateBlock+0x1c>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8003a52:	811a      	strh	r2, [r3, #8]
    }

    return result;
}
 8003a54:	4770      	bx	lr

08003a56 <createBufferBlock>:
{
 8003a56:	b510      	push	{r4, lr}
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8003a58:	f7ff ffee 	bl	8003a38 <allocateBlock>
    if (block == NULL)
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d001      	beq.n	8003a64 <createBufferBlock+0xe>
    block->next = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	6003      	str	r3, [r0, #0]
}
 8003a64:	bd10      	pop	{r4, pc}

08003a66 <bufferBlockPushBytes>:
{
 8003a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a68:	46de      	mov	lr, fp
 8003a6a:	464f      	mov	r7, r9
 8003a6c:	4646      	mov	r6, r8
 8003a6e:	b5c0      	push	{r6, r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	4683      	mov	fp, r0
 8003a74:	000e      	movs	r6, r1
 8003a76:	0017      	movs	r7, r2
 8003a78:	9300      	str	r3, [sp, #0]
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8003a7a:	8acb      	ldrh	r3, [r1, #22]
 8003a7c:	059b      	lsls	r3, r3, #22
 8003a7e:	0d9b      	lsrs	r3, r3, #22
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d02d      	beq.n	8003ae0 <bufferBlockPushBytes+0x7a>
        for (uint16_t i = (uint16_t)state->payload_len;
 8003a84:	0018      	movs	r0, r3
    uint16_t data_index = 0;
 8003a86:	2400      	movs	r4, #0
        for (uint16_t i = (uint16_t)state->payload_len;
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d80b      	bhi.n	8003aa4 <bufferBlockPushBytes+0x3e>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8003a8c:	466a      	mov	r2, sp
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	42a2      	cmp	r2, r4
 8003a92:	d907      	bls.n	8003aa4 <bufferBlockPushBytes+0x3e>
            state->buffer_head[i] = data[data_index];
 8003a94:	5d39      	ldrb	r1, [r7, r4]
 8003a96:	18f2      	adds	r2, r6, r3
 8003a98:	7691      	strb	r1, [r2, #26]
             i++, data_index++)
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3401      	adds	r4, #1
 8003aa0:	b2a4      	uxth	r4, r4
 8003aa2:	e7f1      	b.n	8003a88 <bufferBlockPushBytes+0x22>
        if (data_index >= data_len)
 8003aa4:	466b      	mov	r3, sp
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d90f      	bls.n	8003acc <bufferBlockPushBytes+0x66>
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8003aac:	8af3      	ldrh	r3, [r6, #22]
 8003aae:	059b      	lsls	r3, r3, #22
 8003ab0:	0d9b      	lsrs	r3, r3, #22
 8003ab2:	4698      	mov	r8, r3
 8003ab4:	1f98      	subs	r0, r3, #6
 8003ab6:	211c      	movs	r1, #28
 8003ab8:	f7fc fbce 	bl	8000258 <__aeabi_uidivmod>
    uint16_t index_at_nth_block =
 8003abc:	b28b      	uxth	r3, r1
 8003abe:	9301      	str	r3, [sp, #4]
    if (state->buffer_blocks == NULL)
 8003ac0:	6875      	ldr	r5, [r6, #4]
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	d00e      	beq.n	8003ae4 <bufferBlockPushBytes+0x7e>
        uint16_t nth_block = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4699      	mov	r9, r3
 8003aca:	e019      	b.n	8003b00 <bufferBlockPushBytes+0x9a>
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8003acc:	181b      	adds	r3, r3, r0
            state->payload_len =
 8003ace:	059b      	lsls	r3, r3, #22
 8003ad0:	0d9b      	lsrs	r3, r3, #22
 8003ad2:	8af2      	ldrh	r2, [r6, #22]
 8003ad4:	0a92      	lsrs	r2, r2, #10
 8003ad6:	0292      	lsls	r2, r2, #10
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	82f3      	strh	r3, [r6, #22]
            return 1;
 8003adc:	2001      	movs	r0, #1
 8003ade:	e050      	b.n	8003b82 <bufferBlockPushBytes+0x11c>
    uint16_t data_index = 0;
 8003ae0:	2400      	movs	r4, #0
 8003ae2:	e7e3      	b.n	8003aac <bufferBlockPushBytes+0x46>
        state->buffer_blocks = createBufferBlock(allocator);
 8003ae4:	4658      	mov	r0, fp
 8003ae6:	f7ff ffb6 	bl	8003a56 <createBufferBlock>
 8003aea:	1e05      	subs	r5, r0, #0
 8003aec:	6070      	str	r0, [r6, #4]
        if (state->buffer_blocks == NULL)
 8003aee:	d04e      	beq.n	8003b8e <bufferBlockPushBytes+0x128>
        index_at_nth_block = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	e02a      	b.n	8003b4c <bufferBlockPushBytes+0xe6>
            nth_block++;
 8003af6:	464a      	mov	r2, r9
 8003af8:	3201      	adds	r2, #1
 8003afa:	b292      	uxth	r2, r2
 8003afc:	4691      	mov	r9, r2
            block = block->next;
 8003afe:	001d      	movs	r5, r3
        while (block->next != NULL)
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f7      	bne.n	8003af6 <bufferBlockPushBytes+0x90>
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8003b06:	9800      	ldr	r0, [sp, #0]
 8003b08:	4440      	add	r0, r8
 8003b0a:	3806      	subs	r0, #6
 8003b0c:	211c      	movs	r1, #28
 8003b0e:	f7fc fb1d 	bl	800014c <__udivsi3>
 8003b12:	b283      	uxth	r3, r0
        const uint16_t num_buffer_blocks =
 8003b14:	3301      	adds	r3, #1
 8003b16:	b29b      	uxth	r3, r3
        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8003b18:	4599      	cmp	r9, r3
 8003b1a:	d217      	bcs.n	8003b4c <bufferBlockPushBytes+0xe6>
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d114      	bne.n	8003b4c <bufferBlockPushBytes+0xe6>
            block->next = createBufferBlock(allocator);
 8003b22:	4658      	mov	r0, fp
 8003b24:	f7ff ff97 	bl	8003a56 <createBufferBlock>
 8003b28:	6028      	str	r0, [r5, #0]
            if (block->next == NULL)
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d032      	beq.n	8003b94 <bufferBlockPushBytes+0x12e>
            block = block->next;
 8003b2e:	0005      	movs	r5, r0
 8003b30:	e00c      	b.n	8003b4c <bufferBlockPushBytes+0xe6>
            block->data[i] = data[data_index];
 8003b32:	5d39      	ldrb	r1, [r7, r4]
 8003b34:	18ea      	adds	r2, r5, r3
 8003b36:	7111      	strb	r1, [r2, #4]
             i++, data_index++)
 8003b38:	3301      	adds	r3, #1
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3401      	adds	r4, #1
 8003b3e:	b2a4      	uxth	r4, r4
        for (uint16_t i = index_at_nth_block;
 8003b40:	2b1b      	cmp	r3, #27
 8003b42:	d801      	bhi.n	8003b48 <bufferBlockPushBytes+0xe2>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 8003b44:	42a0      	cmp	r0, r4
 8003b46:	d8f4      	bhi.n	8003b32 <bufferBlockPushBytes+0xcc>
        if (data_index < data_len)
 8003b48:	42a0      	cmp	r0, r4
 8003b4a:	d805      	bhi.n	8003b58 <bufferBlockPushBytes+0xf2>
    while (data_index < data_len)
 8003b4c:	466b      	mov	r3, sp
 8003b4e:	8818      	ldrh	r0, [r3, #0]
 8003b50:	42a0      	cmp	r0, r4
 8003b52:	d90b      	bls.n	8003b6c <bufferBlockPushBytes+0x106>
        for (uint16_t i = index_at_nth_block;
 8003b54:	9b01      	ldr	r3, [sp, #4]
 8003b56:	e7f3      	b.n	8003b40 <bufferBlockPushBytes+0xda>
            block->next = createBufferBlock(allocator);
 8003b58:	4658      	mov	r0, fp
 8003b5a:	f7ff ff7c 	bl	8003a56 <createBufferBlock>
 8003b5e:	6028      	str	r0, [r5, #0]
            if (block->next == NULL)
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d01a      	beq.n	8003b9a <bufferBlockPushBytes+0x134>
            block = block->next;
 8003b64:	0005      	movs	r5, r0
            index_at_nth_block = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	e7ef      	b.n	8003b4c <bufferBlockPushBytes+0xe6>
    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8003b6c:	8af2      	ldrh	r2, [r6, #22]
 8003b6e:	0593      	lsls	r3, r2, #22
 8003b70:	0d9b      	lsrs	r3, r3, #22
 8003b72:	18c3      	adds	r3, r0, r3
 8003b74:	059b      	lsls	r3, r3, #22
 8003b76:	0d9b      	lsrs	r3, r3, #22
 8003b78:	0a92      	lsrs	r2, r2, #10
 8003b7a:	0292      	lsls	r2, r2, #10
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	82f3      	strh	r3, [r6, #22]
    return 1;
 8003b80:	2001      	movs	r0, #1
}
 8003b82:	b002      	add	sp, #8
 8003b84:	bce0      	pop	{r5, r6, r7}
 8003b86:	46bb      	mov	fp, r7
 8003b88:	46b1      	mov	r9, r6
 8003b8a:	46a8      	mov	r8, r5
 8003b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003b8e:	2003      	movs	r0, #3
 8003b90:	4240      	negs	r0, r0
 8003b92:	e7f6      	b.n	8003b82 <bufferBlockPushBytes+0x11c>
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003b94:	2003      	movs	r0, #3
 8003b96:	4240      	negs	r0, r0
 8003b98:	e7f3      	b.n	8003b82 <bufferBlockPushBytes+0x11c>
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	4240      	negs	r0, r0
 8003b9e:	e7f0      	b.n	8003b82 <bufferBlockPushBytes+0x11c>

08003ba0 <pushTxQueue>:
{
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	0007      	movs	r7, r0
 8003ba6:	000e      	movs	r6, r1
    CANARD_ASSERT(ins != NULL);
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d015      	beq.n	8003bd8 <pushTxQueue+0x38>
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 8003bac:	7c33      	ldrb	r3, [r6, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <pushTxQueue+0x40>
    if (ins->tx_queue == NULL)
 8003bb2:	69fd      	ldr	r5, [r7, #28]
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	d017      	beq.n	8003be8 <pushTxQueue+0x48>
    CanardTxQueueItem* previous = ins->tx_queue;
 8003bb8:	9501      	str	r5, [sp, #4]
    CanardTxQueueItem* queue = ins->tx_queue;
 8003bba:	002c      	movs	r4, r5
    while (queue != NULL)
 8003bbc:	2c00      	cmp	r4, #0
 8003bbe:	d01f      	beq.n	8003c00 <pushTxQueue+0x60>
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8003bc0:	6871      	ldr	r1, [r6, #4]
 8003bc2:	6860      	ldr	r0, [r4, #4]
 8003bc4:	f7ff fe99 	bl	80038fa <isPriorityHigher>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d10f      	bne.n	8003bec <pushTxQueue+0x4c>
            if (queue->next == NULL)
 8003bcc:	6823      	ldr	r3, [r4, #0]
                previous = queue;
 8003bce:	9401      	str	r4, [sp, #4]
            if (queue->next == NULL)
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d014      	beq.n	8003bfe <pushTxQueue+0x5e>
                queue = queue->next;
 8003bd4:	001c      	movs	r4, r3
 8003bd6:	e7f1      	b.n	8003bbc <pushTxQueue+0x1c>
    CANARD_ASSERT(ins != NULL);
 8003bd8:	480a      	ldr	r0, [pc, #40]	; (8003c04 <pushTxQueue+0x64>)
 8003bda:	f7fd fbcf 	bl	800137c <hardAssertTmp>
 8003bde:	e7e5      	b.n	8003bac <pushTxQueue+0xc>
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 8003be0:	4808      	ldr	r0, [pc, #32]	; (8003c04 <pushTxQueue+0x64>)
 8003be2:	f7fd fbcb 	bl	800137c <hardAssertTmp>
 8003be6:	e7e4      	b.n	8003bb2 <pushTxQueue+0x12>
        ins->tx_queue = item;
 8003be8:	61fe      	str	r6, [r7, #28]
        return;
 8003bea:	e009      	b.n	8003c00 <pushTxQueue+0x60>
            if (queue == ins->tx_queue)
 8003bec:	42a5      	cmp	r5, r4
 8003bee:	d003      	beq.n	8003bf8 <pushTxQueue+0x58>
                previous->next = item;
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	601e      	str	r6, [r3, #0]
                item->next = queue;
 8003bf4:	6034      	str	r4, [r6, #0]
            return;
 8003bf6:	e003      	b.n	8003c00 <pushTxQueue+0x60>
                item->next = queue;
 8003bf8:	6034      	str	r4, [r6, #0]
                ins->tx_queue = item;
 8003bfa:	61fe      	str	r6, [r7, #28]
 8003bfc:	e000      	b.n	8003c00 <pushTxQueue+0x60>
                queue->next = item;
 8003bfe:	6026      	str	r6, [r4, #0]
}
 8003c00:	b003      	add	sp, #12
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c04:	08007b90 	.word	0x08007b90

08003c08 <incrementTransferID>:
{
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	1e04      	subs	r4, r0, #0
    CANARD_ASSERT(transfer_id != NULL);
 8003c0c:	d008      	beq.n	8003c20 <incrementTransferID+0x18>
    (*transfer_id)++;
 8003c0e:	7823      	ldrb	r3, [r4, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	7023      	strb	r3, [r4, #0]
    if (*transfer_id >= 32)
 8003c16:	2b1f      	cmp	r3, #31
 8003c18:	d901      	bls.n	8003c1e <incrementTransferID+0x16>
        *transfer_id = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	7023      	strb	r3, [r4, #0]
}
 8003c1e:	bd10      	pop	{r4, pc}
    CANARD_ASSERT(transfer_id != NULL);
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <incrementTransferID+0x20>)
 8003c22:	f7fd fbab 	bl	800137c <hardAssertTmp>
 8003c26:	e7f2      	b.n	8003c0e <incrementTransferID+0x6>
 8003c28:	08007b90 	.word	0x08007b90

08003c2c <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	0004      	movs	r4, r0
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;

    block->next = allocator->free_list;
 8003c30:	6803      	ldr	r3, [r0, #0]
 8003c32:	600b      	str	r3, [r1, #0]
    allocator->free_list = block;
 8003c34:	6001      	str	r1, [r0, #0]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 8003c36:	88c3      	ldrh	r3, [r0, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <freeBlock+0x18>
    allocator->statistics.current_usage_blocks--;
 8003c3c:	88e3      	ldrh	r3, [r4, #6]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	80e3      	strh	r3, [r4, #6]
}
 8003c42:	bd10      	pop	{r4, pc}
    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <freeBlock+0x20>)
 8003c46:	f7fd fb99 	bl	800137c <hardAssertTmp>
 8003c4a:	e7f7      	b.n	8003c3c <freeBlock+0x10>
 8003c4c:	08007b90 	.word	0x08007b90

08003c50 <releaseStatePayload>:
{
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	0006      	movs	r6, r0
 8003c54:	000c      	movs	r4, r1
    while (rxstate->buffer_blocks != NULL)
 8003c56:	e005      	b.n	8003c64 <releaseStatePayload+0x14>
        CanardBufferBlock* const temp = rxstate->buffer_blocks->next;
 8003c58:	680d      	ldr	r5, [r1, #0]
        freeBlock(&ins->allocator, rxstate->buffer_blocks);
 8003c5a:	0030      	movs	r0, r6
 8003c5c:	300c      	adds	r0, #12
 8003c5e:	f7ff ffe5 	bl	8003c2c <freeBlock>
        rxstate->buffer_blocks = temp;
 8003c62:	6065      	str	r5, [r4, #4]
    while (rxstate->buffer_blocks != NULL)
 8003c64:	6861      	ldr	r1, [r4, #4]
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d1f6      	bne.n	8003c58 <releaseStatePayload+0x8>
    rxstate->payload_len = 0;
 8003c6a:	8ae3      	ldrh	r3, [r4, #22]
 8003c6c:	0a9b      	lsrs	r3, r3, #10
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	82e3      	strh	r3, [r4, #22]
}
 8003c72:	2000      	movs	r0, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	bd70      	pop	{r4, r5, r6, pc}

08003c78 <prepareForNextTransfer>:
{
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	0004      	movs	r4, r0
    CANARD_ASSERT(state->buffer_blocks == NULL);
 8003c7c:	6843      	ldr	r3, [r0, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <prepareForNextTransfer+0x10>
 8003c82:	480b      	ldr	r0, [pc, #44]	; (8003cb0 <prepareForNextTransfer+0x38>)
 8003c84:	f7fd fb7a 	bl	800137c <hardAssertTmp>
    state->transfer_id++;
 8003c88:	7de3      	ldrb	r3, [r4, #23]
 8003c8a:	0659      	lsls	r1, r3, #25
 8003c8c:	0ec9      	lsrs	r1, r1, #27
 8003c8e:	3101      	adds	r1, #1
 8003c90:	221f      	movs	r2, #31
 8003c92:	400a      	ands	r2, r1
 8003c94:	0092      	lsls	r2, r2, #2
 8003c96:	217c      	movs	r1, #124	; 0x7c
 8003c98:	438b      	bics	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	75e3      	strb	r3, [r4, #23]
    state->payload_len = 0;
 8003c9e:	8ae3      	ldrh	r3, [r4, #22]
 8003ca0:	0a9b      	lsrs	r3, r3, #10
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	82e3      	strh	r3, [r4, #22]
    state->next_toggle = 0;
 8003ca6:	7de2      	ldrb	r2, [r4, #23]
 8003ca8:	237f      	movs	r3, #127	; 0x7f
 8003caa:	4013      	ands	r3, r2
 8003cac:	75e3      	strb	r3, [r4, #23]
}
 8003cae:	bd10      	pop	{r4, pc}
 8003cb0:	08007b90 	.word	0x08007b90

08003cb4 <copyBitArray>:
{
 8003cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb6:	46de      	mov	lr, fp
 8003cb8:	4657      	mov	r7, sl
 8003cba:	464e      	mov	r6, r9
 8003cbc:	4645      	mov	r5, r8
 8003cbe:	b5e0      	push	{r5, r6, r7, lr}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	4683      	mov	fp, r0
 8003cc4:	000d      	movs	r5, r1
 8003cc6:	0014      	movs	r4, r2
 8003cc8:	001e      	movs	r6, r3
    CANARD_ASSERT(src_len > 0U);
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	d00b      	beq.n	8003ce6 <copyBitArray+0x32>
    src += src_offset / 8U;
 8003cce:	08eb      	lsrs	r3, r5, #3
 8003cd0:	469c      	mov	ip, r3
    dst += dst_offset / 8U;
 8003cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	18f6      	adds	r6, r6, r3
    src_offset %= 8U;
 8003cd8:	2307      	movs	r3, #7
 8003cda:	0028      	movs	r0, r5
 8003cdc:	4018      	ands	r0, r3
    dst_offset %= 8U;
 8003cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ce0:	401d      	ands	r5, r3
    const size_t last_bit = src_offset + src_len;
 8003ce2:	1824      	adds	r4, r4, r0
    while (last_bit - src_offset)
 8003ce4:	e01e      	b.n	8003d24 <copyBitArray+0x70>
    CANARD_ASSERT(src_len > 0U);
 8003ce6:	481c      	ldr	r0, [pc, #112]	; (8003d58 <copyBitArray+0xa4>)
 8003ce8:	f7fd fb48 	bl	800137c <hardAssertTmp>
 8003cec:	e7ef      	b.n	8003cce <copyBitArray+0x1a>
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8003cee:	23ff      	movs	r3, #255	; 0xff
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	40cb      	lsrs	r3, r1
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	413a      	asrs	r2, r7
 8003cfa:	9201      	str	r2, [sp, #4]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8003cfc:	08c3      	lsrs	r3, r0, #3
 8003cfe:	46da      	mov	sl, fp
 8003d00:	44e2      	add	sl, ip
 8003d02:	4652      	mov	r2, sl
 8003d04:	5cd3      	ldrb	r3, [r2, r3]
 8003d06:	464a      	mov	r2, r9
 8003d08:	4093      	lsls	r3, r2
 8003d0a:	40fb      	lsrs	r3, r7
 8003d0c:	b2db      	uxtb	r3, r3
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8003d0e:	08ef      	lsrs	r7, r5, #3
 8003d10:	5df2      	ldrb	r2, [r6, r7]
 8003d12:	4690      	mov	r8, r2
 8003d14:	4053      	eors	r3, r2
 8003d16:	9a01      	ldr	r2, [sp, #4]
 8003d18:	401a      	ands	r2, r3
 8003d1a:	4643      	mov	r3, r8
 8003d1c:	405a      	eors	r2, r3
        dst[dst_offset / 8U] =
 8003d1e:	55f2      	strb	r2, [r6, r7]
        src_offset += copy_bits;
 8003d20:	1840      	adds	r0, r0, r1
        dst_offset += copy_bits;
 8003d22:	186d      	adds	r5, r5, r1
    while (last_bit - src_offset)
 8003d24:	42a0      	cmp	r0, r4
 8003d26:	d010      	beq.n	8003d4a <copyBitArray+0x96>
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8003d28:	2707      	movs	r7, #7
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	403b      	ands	r3, r7
 8003d2e:	4699      	mov	r9, r3
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8003d30:	402f      	ands	r7, r5
        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8003d32:	1c19      	adds	r1, r3, #0
 8003d34:	42bb      	cmp	r3, r7
 8003d36:	d200      	bcs.n	8003d3a <copyBitArray+0x86>
 8003d38:	1c39      	adds	r1, r7, #0
 8003d3a:	b2c9      	uxtb	r1, r1
        const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
 8003d3c:	1a23      	subs	r3, r4, r0
 8003d3e:	2208      	movs	r2, #8
 8003d40:	1a51      	subs	r1, r2, r1
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d9d3      	bls.n	8003cee <copyBitArray+0x3a>
 8003d46:	0019      	movs	r1, r3
 8003d48:	e7d1      	b.n	8003cee <copyBitArray+0x3a>
}
 8003d4a:	b003      	add	sp, #12
 8003d4c:	bcf0      	pop	{r4, r5, r6, r7}
 8003d4e:	46bb      	mov	fp, r7
 8003d50:	46b2      	mov	sl, r6
 8003d52:	46a9      	mov	r9, r5
 8003d54:	46a0      	mov	r8, r4
 8003d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d58:	08007b90 	.word	0x08007b90

08003d5c <descatterTransferPayload>:
{
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	46de      	mov	lr, fp
 8003d60:	4657      	mov	r7, sl
 8003d62:	464e      	mov	r6, r9
 8003d64:	4645      	mov	r5, r8
 8003d66:	b5e0      	push	{r5, r6, r7, lr}
 8003d68:	b087      	sub	sp, #28
 8003d6a:	4683      	mov	fp, r0
 8003d6c:	000d      	movs	r5, r1
 8003d6e:	9203      	str	r2, [sp, #12]
 8003d70:	9304      	str	r3, [sp, #16]
    CANARD_ASSERT(transfer != 0);
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d041      	beq.n	8003dfa <descatterTransferPayload+0x9e>
    if (bit_offset >= transfer->payload_len * 8)
 8003d76:	465b      	mov	r3, fp
 8003d78:	8a9b      	ldrh	r3, [r3, #20]
 8003d7a:	00da      	lsls	r2, r3, #3
 8003d7c:	42aa      	cmp	r2, r5
 8003d7e:	d800      	bhi.n	8003d82 <descatterTransferPayload+0x26>
 8003d80:	e0e5      	b.n	8003f4e <descatterTransferPayload+0x1f2>
    if (bit_offset + bit_length > transfer->payload_len * 8)
 8003d82:	9903      	ldr	r1, [sp, #12]
 8003d84:	1949      	adds	r1, r1, r5
 8003d86:	428a      	cmp	r2, r1
 8003d88:	d204      	bcs.n	8003d94 <descatterTransferPayload+0x38>
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	b2eb      	uxtb	r3, r5
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	b2d3      	uxtb	r3, r2
 8003d92:	9303      	str	r3, [sp, #12]
    CANARD_ASSERT(bit_length > 0);
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d033      	beq.n	8003e02 <descatterTransferPayload+0xa6>
    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8003d9a:	465b      	mov	r3, fp
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d033      	beq.n	8003e0a <descatterTransferPayload+0xae>
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8003da2:	2d2f      	cmp	r5, #47	; 0x2f
 8003da4:	d842      	bhi.n	8003e2c <descatterTransferPayload+0xd0>
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8003da6:	2330      	movs	r3, #48	; 0x30
 8003da8:	1b5b      	subs	r3, r3, r5
 8003daa:	9a03      	ldr	r2, [sp, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d33a      	bcc.n	8003e26 <descatterTransferPayload+0xca>
 8003db0:	b2eb      	uxtb	r3, r5
 8003db2:	2230      	movs	r2, #48	; 0x30
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	9302      	str	r3, [sp, #8]
            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	9b04      	ldr	r3, [sp, #16]
 8003dc0:	9c02      	ldr	r4, [sp, #8]
 8003dc2:	0022      	movs	r2, r4
 8003dc4:	0029      	movs	r1, r5
 8003dc6:	4658      	mov	r0, fp
 8003dc8:	6880      	ldr	r0, [r0, #8]
 8003dca:	f7ff ff73 	bl	8003cb4 <copyBitArray>
            input_bit_offset += amount;
 8003dce:	46a4      	mov	ip, r4
 8003dd0:	4465      	add	r5, ip
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8003dd2:	9a03      	ldr	r2, [sp, #12]
 8003dd4:	1b14      	subs	r4, r2, r4
 8003dd6:	b2e4      	uxtb	r4, r4
        uint32_t remaining_bits = transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8003dd8:	465b      	mov	r3, fp
 8003dda:	8a9f      	ldrh	r7, [r3, #20]
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <descatterTransferPayload+0x1f8>)
 8003dde:	469c      	mov	ip, r3
 8003de0:	4467      	add	r7, ip
 8003de2:	00ff      	lsls	r7, r7, #3
        const CanardBufferBlock* block = transfer->payload_middle;
 8003de4:	465b      	mov	r3, fp
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	469a      	mov	sl, r3
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8003dea:	2330      	movs	r3, #48	; 0x30
 8003dec:	4699      	mov	r9, r3
 8003dee:	465b      	mov	r3, fp
 8003df0:	9305      	str	r3, [sp, #20]
 8003df2:	46a3      	mov	fp, r4
 8003df4:	464c      	mov	r4, r9
 8003df6:	46a8      	mov	r8, r5
        while ((block != NULL) && (remaining_bit_length > 0))
 8003df8:	e03e      	b.n	8003e78 <descatterTransferPayload+0x11c>
    CANARD_ASSERT(transfer != 0);
 8003dfa:	4857      	ldr	r0, [pc, #348]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003dfc:	f7fd fabe 	bl	800137c <hardAssertTmp>
 8003e00:	e7b9      	b.n	8003d76 <descatterTransferPayload+0x1a>
    CANARD_ASSERT(bit_length > 0);
 8003e02:	4855      	ldr	r0, [pc, #340]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003e04:	f7fd faba 	bl	800137c <hardAssertTmp>
 8003e08:	e7c7      	b.n	8003d9a <descatterTransferPayload+0x3e>
    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8003e0a:	465b      	mov	r3, fp
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1c7      	bne.n	8003da2 <descatterTransferPayload+0x46>
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8003e12:	465b      	mov	r3, fp
 8003e14:	6898      	ldr	r0, [r3, #8]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	9b04      	ldr	r3, [sp, #16]
 8003e1c:	9a03      	ldr	r2, [sp, #12]
 8003e1e:	0029      	movs	r1, r5
 8003e20:	f7ff ff48 	bl	8003cb4 <copyBitArray>
 8003e24:	e075      	b.n	8003f12 <descatterTransferPayload+0x1b6>
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8003e26:	9b03      	ldr	r3, [sp, #12]
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	e7c6      	b.n	8003dba <descatterTransferPayload+0x5e>
        uint8_t remaining_bit_length = bit_length;
 8003e2c:	9c03      	ldr	r4, [sp, #12]
        uint8_t output_bit_offset = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	e7d1      	b.n	8003dd8 <descatterTransferPayload+0x7c>
            CANARD_ASSERT(remaining_bits > 0);
 8003e34:	4848      	ldr	r0, [pc, #288]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003e36:	f7fd faa1 	bl	800137c <hardAssertTmp>
 8003e3a:	e025      	b.n	8003e88 <descatterTransferPayload+0x12c>
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8003e3c:	465e      	mov	r6, fp
                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003e3e:	45a0      	cmp	r8, r4
 8003e40:	d335      	bcc.n	8003eae <descatterTransferPayload+0x152>
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8003e42:	4643      	mov	r3, r8
 8003e44:	1b19      	subs	r1, r3, r4
                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8003e46:	4653      	mov	r3, sl
 8003e48:	1d18      	adds	r0, r3, #4
 8003e4a:	9b02      	ldr	r3, [sp, #8]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	9b04      	ldr	r3, [sp, #16]
 8003e50:	0032      	movs	r2, r6
 8003e52:	f7ff ff2f 	bl	8003cb4 <copyBitArray>
                input_bit_offset += amount;
 8003e56:	44b0      	add	r8, r6
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8003e58:	9b02      	ldr	r3, [sp, #8]
 8003e5a:	199b      	adds	r3, r3, r6
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	9302      	str	r3, [sp, #8]
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8003e60:	465b      	mov	r3, fp
 8003e62:	1b9e      	subs	r6, r3, r6
 8003e64:	b2f3      	uxtb	r3, r6
 8003e66:	469b      	mov	fp, r3
            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
 8003e68:	42ac      	cmp	r4, r5
 8003e6a:	d224      	bcs.n	8003eb6 <descatterTransferPayload+0x15a>
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	1aff      	subs	r7, r7, r3
            block = block->next;
 8003e70:	4653      	mov	r3, sl
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	469a      	mov	sl, r3
            block_bit_offset = block_end_bit_offset;
 8003e76:	002c      	movs	r4, r5
        while ((block != NULL) && (remaining_bit_length > 0))
 8003e78:	4653      	mov	r3, sl
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01f      	beq.n	8003ebe <descatterTransferPayload+0x162>
 8003e7e:	465b      	mov	r3, fp
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01c      	beq.n	8003ebe <descatterTransferPayload+0x162>
            CANARD_ASSERT(remaining_bits > 0);
 8003e84:	2f00      	cmp	r7, #0
 8003e86:	d0d5      	beq.n	8003e34 <descatterTransferPayload+0xd8>
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8003e88:	46b9      	mov	r9, r7
 8003e8a:	2fe0      	cmp	r7, #224	; 0xe0
 8003e8c:	d901      	bls.n	8003e92 <descatterTransferPayload+0x136>
 8003e8e:	23e0      	movs	r3, #224	; 0xe0
 8003e90:	4699      	mov	r9, r3
 8003e92:	464b      	mov	r3, r9
 8003e94:	191d      	adds	r5, r3, r4
            if (block_end_bit_offset > input_bit_offset)
 8003e96:	45a8      	cmp	r8, r5
 8003e98:	d2e6      	bcs.n	8003e68 <descatterTransferPayload+0x10c>
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8003e9a:	4643      	mov	r3, r8
 8003e9c:	1aeb      	subs	r3, r5, r3
 8003e9e:	459b      	cmp	fp, r3
 8003ea0:	d3cc      	bcc.n	8003e3c <descatterTransferPayload+0xe0>
 8003ea2:	b2ee      	uxtb	r6, r5
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	1af6      	subs	r6, r6, r3
 8003eaa:	b2f6      	uxtb	r6, r6
 8003eac:	e7c7      	b.n	8003e3e <descatterTransferPayload+0xe2>
                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003eae:	482a      	ldr	r0, [pc, #168]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003eb0:	f7fd fa64 	bl	800137c <hardAssertTmp>
 8003eb4:	e7c5      	b.n	8003e42 <descatterTransferPayload+0xe6>
            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
 8003eb6:	4828      	ldr	r0, [pc, #160]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003eb8:	f7fd fa60 	bl	800137c <hardAssertTmp>
 8003ebc:	e7d6      	b.n	8003e6c <descatterTransferPayload+0x110>
        CANARD_ASSERT(remaining_bit_length <= remaining_bits);
 8003ebe:	46a1      	mov	r9, r4
 8003ec0:	465c      	mov	r4, fp
 8003ec2:	9b05      	ldr	r3, [sp, #20]
 8003ec4:	469b      	mov	fp, r3
 8003ec6:	4645      	mov	r5, r8
 8003ec8:	0026      	movs	r6, r4
 8003eca:	42bc      	cmp	r4, r7
 8003ecc:	d82b      	bhi.n	8003f26 <descatterTransferPayload+0x1ca>
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8003ece:	465b      	mov	r3, fp
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d013      	beq.n	8003efe <descatterTransferPayload+0x1a2>
 8003ed6:	2c00      	cmp	r4, #0
 8003ed8:	d011      	beq.n	8003efe <descatterTransferPayload+0x1a2>
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003eda:	454d      	cmp	r5, r9
 8003edc:	d327      	bcc.n	8003f2e <descatterTransferPayload+0x1d2>
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8003ede:	464b      	mov	r3, r9
 8003ee0:	1ae9      	subs	r1, r5, r3
            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8003ee2:	9f02      	ldr	r7, [sp, #8]
 8003ee4:	9700      	str	r7, [sp, #0]
 8003ee6:	9b04      	ldr	r3, [sp, #16]
 8003ee8:	0032      	movs	r2, r6
 8003eea:	4658      	mov	r0, fp
 8003eec:	6900      	ldr	r0, [r0, #16]
 8003eee:	f7ff fee1 	bl	8003cb4 <copyBitArray>
            input_bit_offset += remaining_bit_length;
 8003ef2:	19ad      	adds	r5, r5, r6
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8003ef4:	46bc      	mov	ip, r7
 8003ef6:	4464      	add	r4, ip
 8003ef8:	b2e3      	uxtb	r3, r4
 8003efa:	9302      	str	r3, [sp, #8]
            remaining_bit_length = 0;
 8003efc:	2400      	movs	r4, #0
        CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
 8003efe:	465b      	mov	r3, fp
 8003f00:	8a9b      	ldrh	r3, [r3, #20]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	42ab      	cmp	r3, r5
 8003f06:	d316      	bcc.n	8003f36 <descatterTransferPayload+0x1da>
        CANARD_ASSERT(output_bit_offset <= 64);
 8003f08:	9b02      	ldr	r3, [sp, #8]
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d817      	bhi.n	8003f3e <descatterTransferPayload+0x1e2>
        CANARD_ASSERT(remaining_bit_length == 0);
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	d119      	bne.n	8003f46 <descatterTransferPayload+0x1ea>
    return bit_length;
 8003f12:	466b      	mov	r3, sp
 8003f14:	200c      	movs	r0, #12
 8003f16:	5e18      	ldrsh	r0, [r3, r0]
}
 8003f18:	b007      	add	sp, #28
 8003f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f1c:	46bb      	mov	fp, r7
 8003f1e:	46b2      	mov	sl, r6
 8003f20:	46a9      	mov	r9, r5
 8003f22:	46a0      	mov	r8, r4
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CANARD_ASSERT(remaining_bit_length <= remaining_bits);
 8003f26:	480c      	ldr	r0, [pc, #48]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003f28:	f7fd fa28 	bl	800137c <hardAssertTmp>
 8003f2c:	e7cf      	b.n	8003ece <descatterTransferPayload+0x172>
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003f2e:	480a      	ldr	r0, [pc, #40]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003f30:	f7fd fa24 	bl	800137c <hardAssertTmp>
 8003f34:	e7d3      	b.n	8003ede <descatterTransferPayload+0x182>
        CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
 8003f36:	4808      	ldr	r0, [pc, #32]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003f38:	f7fd fa20 	bl	800137c <hardAssertTmp>
 8003f3c:	e7e4      	b.n	8003f08 <descatterTransferPayload+0x1ac>
        CANARD_ASSERT(output_bit_offset <= 64);
 8003f3e:	4806      	ldr	r0, [pc, #24]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003f40:	f7fd fa1c 	bl	800137c <hardAssertTmp>
 8003f44:	e7e3      	b.n	8003f0e <descatterTransferPayload+0x1b2>
        CANARD_ASSERT(remaining_bit_length == 0);
 8003f46:	4804      	ldr	r0, [pc, #16]	; (8003f58 <descatterTransferPayload+0x1fc>)
 8003f48:	f7fd fa18 	bl	800137c <hardAssertTmp>
 8003f4c:	e7e1      	b.n	8003f12 <descatterTransferPayload+0x1b6>
        return 0;       // Out of range, reading zero bits
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e7e2      	b.n	8003f18 <descatterTransferPayload+0x1bc>
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	1ffffffa 	.word	0x1ffffffa
 8003f58:	08007b90 	.word	0x08007b90

08003f5c <swapByteOrder>:
{
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	0005      	movs	r5, r0
 8003f60:	000c      	movs	r4, r1
    CANARD_ASSERT(data != NULL);
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d002      	beq.n	8003f6c <swapByteOrder+0x10>
    size_t rev = size - 1;
 8003f66:	3c01      	subs	r4, #1
    size_t fwd = 0;
 8003f68:	2300      	movs	r3, #0
    while (fwd < rev)
 8003f6a:	e009      	b.n	8003f80 <swapByteOrder+0x24>
    CANARD_ASSERT(data != NULL);
 8003f6c:	4806      	ldr	r0, [pc, #24]	; (8003f88 <swapByteOrder+0x2c>)
 8003f6e:	f7fd fa05 	bl	800137c <hardAssertTmp>
 8003f72:	e7f8      	b.n	8003f66 <swapByteOrder+0xa>
        const uint8_t x = bytes[fwd];
 8003f74:	5cea      	ldrb	r2, [r5, r3]
        bytes[fwd] = bytes[rev];
 8003f76:	5d28      	ldrb	r0, [r5, r4]
 8003f78:	54e8      	strb	r0, [r5, r3]
        bytes[rev] = x;
 8003f7a:	552a      	strb	r2, [r5, r4]
        fwd++;
 8003f7c:	3301      	adds	r3, #1
        rev--;
 8003f7e:	3c01      	subs	r4, #1
    while (fwd < rev)
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d3f7      	bcc.n	8003f74 <swapByteOrder+0x18>
}
 8003f84:	bd70      	pop	{r4, r5, r6, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	08007b90 	.word	0x08007b90

08003f8c <createTxItem>:
{
 8003f8c:	b510      	push	{r4, lr}
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8003f8e:	f7ff fd53 	bl	8003a38 <allocateBlock>
 8003f92:	1e04      	subs	r4, r0, #0
    if (item == NULL)
 8003f94:	d003      	beq.n	8003f9e <createTxItem+0x12>
    memset(item, 0, sizeof(*item));
 8003f96:	2214      	movs	r2, #20
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f003 fa7e 	bl	800749a <memset>
}
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	bd10      	pop	{r4, pc}
	...

08003fa4 <enqueueTxFrames>:
{
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	46de      	mov	lr, fp
 8003fa8:	4657      	mov	r7, sl
 8003faa:	464e      	mov	r6, r9
 8003fac:	4645      	mov	r5, r8
 8003fae:	b5e0      	push	{r5, r6, r7, lr}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	4682      	mov	sl, r0
 8003fb4:	468b      	mov	fp, r1
 8003fb6:	9200      	str	r2, [sp, #0]
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	ab0c      	add	r3, sp, #48	; 0x30
 8003fbc:	cb80      	ldmia	r3!, {r7}
 8003fbe:	881d      	ldrh	r5, [r3, #0]
    CANARD_ASSERT(ins != NULL);
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d016      	beq.n	8003ff2 <enqueueTxFrames+0x4e>
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 8003fc4:	465b      	mov	r3, fp
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	455b      	cmp	r3, fp
 8003fcc:	d115      	bne.n	8003ffa <enqueueTxFrames+0x56>
    if (transfer_id == NULL)
 8003fce:	9b00      	ldr	r3, [sp, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d100      	bne.n	8003fd6 <enqueueTxFrames+0x32>
 8003fd4:	e085      	b.n	80040e2 <enqueueTxFrames+0x13e>
    if ((payload_len > 0) && (payload == NULL))
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	d002      	beq.n	8003fe0 <enqueueTxFrames+0x3c>
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	d100      	bne.n	8003fe0 <enqueueTxFrames+0x3c>
 8003fde:	e084      	b.n	80040ea <enqueueTxFrames+0x146>
    if (payload_len < CANARD_CAN_FRAME_MAX_DATA_LEN)                        // Single frame transfer
 8003fe0:	2d07      	cmp	r5, #7
 8003fe2:	d90e      	bls.n	8004002 <enqueueTxFrames+0x5e>
        uint8_t sot_eot = 0x80;
 8003fe4:	2680      	movs	r6, #128	; 0x80
        uint8_t toggle = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	4698      	mov	r8, r3
        uint16_t data_index = 0;
 8003fea:	2400      	movs	r4, #0
    int16_t result = 0;
 8003fec:	46b1      	mov	r9, r6
 8003fee:	001e      	movs	r6, r3
 8003ff0:	e05b      	b.n	80040aa <enqueueTxFrames+0x106>
    CANARD_ASSERT(ins != NULL);
 8003ff2:	4844      	ldr	r0, [pc, #272]	; (8004104 <enqueueTxFrames+0x160>)
 8003ff4:	f7fd f9c2 	bl	800137c <hardAssertTmp>
 8003ff8:	e7e4      	b.n	8003fc4 <enqueueTxFrames+0x20>
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 8003ffa:	4842      	ldr	r0, [pc, #264]	; (8004104 <enqueueTxFrames+0x160>)
 8003ffc:	f7fd f9be 	bl	800137c <hardAssertTmp>
 8004000:	e7e5      	b.n	8003fce <enqueueTxFrames+0x2a>
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8004002:	4650      	mov	r0, sl
 8004004:	300c      	adds	r0, #12
 8004006:	f7ff ffc1 	bl	8003f8c <createTxItem>
 800400a:	1e04      	subs	r4, r0, #0
        if (queue_item == NULL)
 800400c:	d100      	bne.n	8004010 <enqueueTxFrames+0x6c>
 800400e:	e070      	b.n	80040f2 <enqueueTxFrames+0x14e>
        memcpy(queue_item->frame.data, payload, payload_len);
 8004010:	3008      	adds	r0, #8
 8004012:	002a      	movs	r2, r5
 8004014:	0039      	movs	r1, r7
 8004016:	f003 fa37 	bl	8007488 <memcpy>
        queue_item->frame.data_len = (uint8_t)(payload_len + 1);
 800401a:	1c6b      	adds	r3, r5, #1
 800401c:	7423      	strb	r3, [r4, #16]
        queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 800401e:	9b00      	ldr	r3, [sp, #0]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	231f      	movs	r3, #31
 8004024:	401a      	ands	r2, r3
 8004026:	3b5f      	subs	r3, #95	; 0x5f
 8004028:	4313      	orrs	r3, r2
 800402a:	1965      	adds	r5, r4, r5
 800402c:	722b      	strb	r3, [r5, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	0609      	lsls	r1, r1, #24
 8004032:	465b      	mov	r3, fp
 8004034:	4319      	orrs	r1, r3
 8004036:	6061      	str	r1, [r4, #4]
        pushTxQueue(ins, queue_item);
 8004038:	0021      	movs	r1, r4
 800403a:	4650      	mov	r0, sl
 800403c:	f7ff fdb0 	bl	8003ba0 <pushTxQueue>
        result++;
 8004040:	2301      	movs	r3, #1
 8004042:	4699      	mov	r9, r3
 8004044:	e045      	b.n	80040d2 <enqueueTxFrames+0x12e>
                i = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	e006      	b.n	8004058 <enqueueTxFrames+0xb4>
                queue_item->frame.data[i] = payload[data_index];
 800404a:	5d38      	ldrb	r0, [r7, r4]
 800404c:	18ca      	adds	r2, r1, r3
 800404e:	7210      	strb	r0, [r2, #8]
            for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_index++)
 8004050:	3301      	adds	r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3401      	adds	r4, #1
 8004056:	b2a4      	uxth	r4, r4
 8004058:	2b06      	cmp	r3, #6
 800405a:	d801      	bhi.n	8004060 <enqueueTxFrames+0xbc>
 800405c:	42ac      	cmp	r4, r5
 800405e:	d3f4      	bcc.n	800404a <enqueueTxFrames+0xa6>
            sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 8004060:	42ac      	cmp	r4, r5
 8004062:	d032      	beq.n	80040ca <enqueueTxFrames+0x126>
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer_id & 31U));
 8004064:	4642      	mov	r2, r8
 8004066:	0152      	lsls	r2, r2, #5
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	4648      	mov	r0, r9
 800406c:	4302      	orrs	r2, r0
 800406e:	4694      	mov	ip, r2
 8004070:	9800      	ldr	r0, [sp, #0]
 8004072:	7800      	ldrb	r0, [r0, #0]
 8004074:	4681      	mov	r9, r0
 8004076:	201f      	movs	r0, #31
 8004078:	464a      	mov	r2, r9
 800407a:	4010      	ands	r0, r2
 800407c:	4662      	mov	r2, ip
 800407e:	4302      	orrs	r2, r0
 8004080:	18c8      	adds	r0, r1, r3
 8004082:	7202      	strb	r2, [r0, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	0612      	lsls	r2, r2, #24
 8004088:	4658      	mov	r0, fp
 800408a:	4302      	orrs	r2, r0
 800408c:	604a      	str	r2, [r1, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 800408e:	3301      	adds	r3, #1
 8004090:	740b      	strb	r3, [r1, #16]
            pushTxQueue(ins, queue_item);
 8004092:	4650      	mov	r0, sl
 8004094:	f7ff fd84 	bl	8003ba0 <pushTxQueue>
            result++;
 8004098:	3601      	adds	r6, #1
 800409a:	b236      	sxth	r6, r6
            toggle ^= 1;
 800409c:	2301      	movs	r3, #1
 800409e:	4642      	mov	r2, r8
 80040a0:	4053      	eors	r3, r2
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4698      	mov	r8, r3
            sot_eot = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	4699      	mov	r9, r3
        while (payload_len - data_index != 0)
 80040aa:	42ac      	cmp	r4, r5
 80040ac:	d010      	beq.n	80040d0 <enqueueTxFrames+0x12c>
            queue_item = createTxItem(&ins->allocator);
 80040ae:	4650      	mov	r0, sl
 80040b0:	300c      	adds	r0, #12
 80040b2:	f7ff ff6b 	bl	8003f8c <createTxItem>
 80040b6:	1e01      	subs	r1, r0, #0
            if (queue_item == NULL)
 80040b8:	d01f      	beq.n	80040fa <enqueueTxFrames+0x156>
            if (data_index == 0)
 80040ba:	2c00      	cmp	r4, #0
 80040bc:	d1c3      	bne.n	8004046 <enqueueTxFrames+0xa2>
                queue_item->frame.data[0] = (uint8_t) (crc);
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	7203      	strb	r3, [r0, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	7243      	strb	r3, [r0, #9]
                i = 2;
 80040c6:	2302      	movs	r3, #2
 80040c8:	e7c6      	b.n	8004058 <enqueueTxFrames+0xb4>
            sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	4691      	mov	r9, r2
 80040ce:	e7c9      	b.n	8004064 <enqueueTxFrames+0xc0>
 80040d0:	46b1      	mov	r9, r6
}
 80040d2:	4648      	mov	r0, r9
 80040d4:	b003      	add	sp, #12
 80040d6:	bcf0      	pop	{r4, r5, r6, r7}
 80040d8:	46bb      	mov	fp, r7
 80040da:	46b2      	mov	sl, r6
 80040dc:	46a9      	mov	r9, r5
 80040de:	46a0      	mov	r8, r4
 80040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80040e2:	2302      	movs	r3, #2
 80040e4:	425b      	negs	r3, r3
 80040e6:	4699      	mov	r9, r3
 80040e8:	e7f3      	b.n	80040d2 <enqueueTxFrames+0x12e>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80040ea:	2302      	movs	r3, #2
 80040ec:	425b      	negs	r3, r3
 80040ee:	4699      	mov	r9, r3
 80040f0:	e7ef      	b.n	80040d2 <enqueueTxFrames+0x12e>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80040f2:	2303      	movs	r3, #3
 80040f4:	425b      	negs	r3, r3
 80040f6:	4699      	mov	r9, r3
 80040f8:	e7eb      	b.n	80040d2 <enqueueTxFrames+0x12e>
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 80040fa:	2303      	movs	r3, #3
 80040fc:	425b      	negs	r3, r3
 80040fe:	4699      	mov	r9, r3
 8004100:	e7e7      	b.n	80040d2 <enqueueTxFrames+0x12e>
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	08007b90 	.word	0x08007b90

08004108 <createRxState>:
{
 8004108:	b530      	push	{r4, r5, lr}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	0004      	movs	r4, r0
 800410e:	000d      	movs	r5, r1
    CanardRxState init = {
 8004110:	2220      	movs	r2, #32
 8004112:	2100      	movs	r1, #0
 8004114:	4668      	mov	r0, sp
 8004116:	f003 f9c0 	bl	800749a <memset>
 800411a:	9504      	str	r5, [sp, #16]
    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 800411c:	0020      	movs	r0, r4
 800411e:	f7ff fc8b 	bl	8003a38 <allocateBlock>
 8004122:	1e04      	subs	r4, r0, #0
    if (state == NULL)
 8004124:	d003      	beq.n	800412e <createRxState+0x26>
    memcpy(state, &init, sizeof(*state));
 8004126:	2220      	movs	r2, #32
 8004128:	4669      	mov	r1, sp
 800412a:	f003 f9ad 	bl	8007488 <memcpy>
}
 800412e:	0020      	movs	r0, r4
 8004130:	b009      	add	sp, #36	; 0x24
 8004132:	bd30      	pop	{r4, r5, pc}

08004134 <prependRxState>:
{
 8004134:	b510      	push	{r4, lr}
 8004136:	0004      	movs	r4, r0
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8004138:	300c      	adds	r0, #12
 800413a:	f7ff ffe5 	bl	8004108 <createRxState>
    if(state == NULL)
 800413e:	2800      	cmp	r0, #0
 8004140:	d002      	beq.n	8004148 <prependRxState+0x14>
    state->next = ins->rx_states;
 8004142:	69a3      	ldr	r3, [r4, #24]
 8004144:	6003      	str	r3, [r0, #0]
    ins->rx_states = state;
 8004146:	61a0      	str	r0, [r4, #24]
}
 8004148:	bd10      	pop	{r4, pc}

0800414a <traverseRxStates>:
{
 800414a:	b570      	push	{r4, r5, r6, lr}
 800414c:	0004      	movs	r4, r0
 800414e:	000d      	movs	r5, r1
    CanardRxState* states = ins->rx_states;
 8004150:	6980      	ldr	r0, [r0, #24]
    if (states == NULL) // initialize CanardRxStates
 8004152:	2800      	cmp	r0, #0
 8004154:	d004      	beq.n	8004160 <traverseRxStates+0x16>
    states = findRxState(states, transfer_descriptor);
 8004156:	f7ff fc16 	bl	8003986 <findRxState>
    if (states != NULL)
 800415a:	2800      	cmp	r0, #0
 800415c:	d008      	beq.n	8004170 <traverseRxStates+0x26>
}
 800415e:	bd70      	pop	{r4, r5, r6, pc}
        states = createRxState(&ins->allocator, transfer_descriptor);
 8004160:	0020      	movs	r0, r4
 8004162:	300c      	adds	r0, #12
 8004164:	f7ff ffd0 	bl	8004108 <createRxState>
        if(states == NULL)
 8004168:	2800      	cmp	r0, #0
 800416a:	d0f8      	beq.n	800415e <traverseRxStates+0x14>
        ins->rx_states = states;
 800416c:	61a0      	str	r0, [r4, #24]
        return states;
 800416e:	e7f6      	b.n	800415e <traverseRxStates+0x14>
        return prependRxState(ins, transfer_descriptor);
 8004170:	0029      	movs	r1, r5
 8004172:	0020      	movs	r0, r4
 8004174:	f7ff ffde 	bl	8004134 <prependRxState>
 8004178:	e7f1      	b.n	800415e <traverseRxStates+0x14>
	...

0800417c <canardInit>:
{
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	0004      	movs	r4, r0
 8004180:	000e      	movs	r6, r1
 8004182:	0015      	movs	r5, r2
 8004184:	001f      	movs	r7, r3
    CANARD_ASSERT(out_ins != NULL);
 8004186:	2800      	cmp	r0, #0
 8004188:	d016      	beq.n	80041b8 <canardInit+0x3c>
    memset(out_ins, 0, sizeof(*out_ins));
 800418a:	2228      	movs	r2, #40	; 0x28
 800418c:	2100      	movs	r1, #0
 800418e:	0020      	movs	r0, r4
 8004190:	f003 f983 	bl	800749a <memset>
    out_ins->on_reception = on_reception;
 8004194:	60a7      	str	r7, [r4, #8]
    out_ins->should_accept = should_accept;
 8004196:	9b06      	ldr	r3, [sp, #24]
 8004198:	6063      	str	r3, [r4, #4]
    out_ins->user_reference = user_reference;
 800419a:	9b07      	ldr	r3, [sp, #28]
 800419c:	6223      	str	r3, [r4, #32]
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800419e:	096a      	lsrs	r2, r5, #5
    if (pool_capacity > 0xFFFFU)
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	039b      	lsls	r3, r3, #14
 80041a4:	429d      	cmp	r5, r3
 80041a6:	d300      	bcc.n	80041aa <canardInit+0x2e>
        pool_capacity = 0xFFFFU;
 80041a8:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <canardInit+0x44>)
    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80041aa:	b292      	uxth	r2, r2
 80041ac:	0020      	movs	r0, r4
 80041ae:	300c      	adds	r0, #12
 80041b0:	0031      	movs	r1, r6
 80041b2:	f7ff fc30 	bl	8003a16 <initPoolAllocator>
}
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CANARD_ASSERT(out_ins != NULL);
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <canardInit+0x48>)
 80041ba:	f7fd f8df 	bl	800137c <hardAssertTmp>
 80041be:	e7e4      	b.n	800418a <canardInit+0xe>
 80041c0:	0000ffff 	.word	0x0000ffff
 80041c4:	08007b90 	.word	0x08007b90

080041c8 <canardSetLocalNodeID>:
{
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	0004      	movs	r4, r0
 80041cc:	000d      	movs	r5, r1
    CANARD_ASSERT(ins != NULL);
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d009      	beq.n	80041e6 <canardSetLocalNodeID+0x1e>
    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 80041d2:	7823      	ldrb	r3, [r4, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <canardSetLocalNodeID+0x26>
 80041d8:	2d00      	cmp	r5, #0
 80041da:	d008      	beq.n	80041ee <canardSetLocalNodeID+0x26>
        (self_node_id <= CANARD_MAX_NODE_ID))
 80041dc:	b26b      	sxtb	r3, r5
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 80041de:	2b00      	cmp	r3, #0
 80041e0:	db05      	blt.n	80041ee <canardSetLocalNodeID+0x26>
        ins->node_id = self_node_id;
 80041e2:	7025      	strb	r5, [r4, #0]
 80041e4:	e006      	b.n	80041f4 <canardSetLocalNodeID+0x2c>
    CANARD_ASSERT(ins != NULL);
 80041e6:	4804      	ldr	r0, [pc, #16]	; (80041f8 <canardSetLocalNodeID+0x30>)
 80041e8:	f7fd f8c8 	bl	800137c <hardAssertTmp>
 80041ec:	e7f1      	b.n	80041d2 <canardSetLocalNodeID+0xa>
        CANARD_ASSERT(false);
 80041ee:	4802      	ldr	r0, [pc, #8]	; (80041f8 <canardSetLocalNodeID+0x30>)
 80041f0:	f7fd f8c4 	bl	800137c <hardAssertTmp>
}
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	08007b90 	.word	0x08007b90

080041fc <canardGetLocalNodeID>:
    return ins->node_id;
 80041fc:	7800      	ldrb	r0, [r0, #0]
}
 80041fe:	4770      	bx	lr

08004200 <canardBroadcast>:
{
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	46d6      	mov	lr, sl
 8004204:	4647      	mov	r7, r8
 8004206:	b580      	push	{r7, lr}
 8004208:	b083      	sub	sp, #12
 800420a:	4680      	mov	r8, r0
 800420c:	000d      	movs	r5, r1
 800420e:	a90a      	add	r1, sp, #40	; 0x28
 8004210:	880e      	ldrh	r6, [r1, #0]
 8004212:	a90c      	add	r1, sp, #48	; 0x30
 8004214:	780c      	ldrb	r4, [r1, #0]
 8004216:	a90e      	add	r1, sp, #56	; 0x38
 8004218:	880f      	ldrh	r7, [r1, #0]
    if (payload == NULL && payload_len > 0)
 800421a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800421c:	2900      	cmp	r1, #0
 800421e:	d02e      	beq.n	800427e <canardBroadcast+0x7e>
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8004220:	2c1f      	cmp	r4, #31
 8004222:	d842      	bhi.n	80042aa <canardBroadcast+0xaa>
    if (source_node_id == 0)
 8004224:	2d00      	cmp	r5, #0
 8004226:	d12f      	bne.n	8004288 <canardBroadcast+0x88>
        if (payload_len > 7)
 8004228:	2f07      	cmp	r7, #7
 800422a:	d841      	bhi.n	80042b0 <canardBroadcast+0xb0>
        if ((data_type_id & DTIDMask) != data_type_id)
 800422c:	2303      	movs	r3, #3
 800422e:	4033      	ands	r3, r6
 8004230:	42b3      	cmp	r3, r6
 8004232:	d140      	bne.n	80042b6 <canardBroadcast+0xb6>
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, payload, payload_len)) & 0x7FFEU);
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <canardBroadcast+0xbc>)
 8004236:	469a      	mov	sl, r3
 8004238:	003a      	movs	r2, r7
 800423a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fbde 	bl	80039fe <crcAdd>
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <canardBroadcast+0xc0>)
 8004244:	4018      	ands	r0, r3
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8004246:	0624      	lsls	r4, r4, #24
 8004248:	0240      	lsls	r0, r0, #9
 800424a:	4304      	orrs	r4, r0
                 ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) source_node_id;
 800424c:	0236      	lsls	r6, r6, #8
 800424e:	21c0      	movs	r1, #192	; 0xc0
 8004250:	0089      	lsls	r1, r1, #2
 8004252:	400e      	ands	r6, r1
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8004254:	4334      	orrs	r4, r6
 8004256:	432c      	orrs	r4, r5
    uint16_t crc = 0xFFFFU;
 8004258:	4653      	mov	r3, sl
    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 800425a:	9701      	str	r7, [sp, #4]
 800425c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800425e:	9200      	str	r2, [sp, #0]
 8004260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004262:	0021      	movs	r1, r4
 8004264:	4640      	mov	r0, r8
 8004266:	f7ff fe9d 	bl	8003fa4 <enqueueTxFrames>
 800426a:	0004      	movs	r4, r0
    incrementTransferID(inout_transfer_id);
 800426c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800426e:	f7ff fccb 	bl	8003c08 <incrementTransferID>
}
 8004272:	0020      	movs	r0, r4
 8004274:	b003      	add	sp, #12
 8004276:	bcc0      	pop	{r6, r7}
 8004278:	46ba      	mov	sl, r7
 800427a:	46b0      	mov	r8, r6
 800427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (payload == NULL && payload_len > 0)
 800427e:	2f00      	cmp	r7, #0
 8004280:	d0ce      	beq.n	8004220 <canardBroadcast+0x20>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004282:	2402      	movs	r4, #2
 8004284:	4264      	negs	r4, r4
 8004286:	e7f4      	b.n	8004272 <canardBroadcast+0x72>
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 8U) | (uint32_t) source_node_id;
 8004288:	0624      	lsls	r4, r4, #24
 800428a:	0236      	lsls	r6, r6, #8
 800428c:	4334      	orrs	r4, r6
 800428e:	432c      	orrs	r4, r5
        if (payload_len > 7)
 8004290:	2f07      	cmp	r7, #7
 8004292:	d908      	bls.n	80042a6 <canardBroadcast+0xa6>
            crc = crcAddSignature(crc, data_type_signature);
 8004294:	4809      	ldr	r0, [pc, #36]	; (80042bc <canardBroadcast+0xbc>)
 8004296:	f7ff fb97 	bl	80039c8 <crcAddSignature>
            crc = crcAdd(crc, payload, payload_len);
 800429a:	003a      	movs	r2, r7
 800429c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800429e:	f7ff fbae 	bl	80039fe <crcAdd>
 80042a2:	0003      	movs	r3, r0
 80042a4:	e7d9      	b.n	800425a <canardBroadcast+0x5a>
    uint16_t crc = 0xFFFFU;
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <canardBroadcast+0xbc>)
 80042a8:	e7d7      	b.n	800425a <canardBroadcast+0x5a>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80042aa:	2402      	movs	r4, #2
 80042ac:	4264      	negs	r4, r4
 80042ae:	e7e0      	b.n	8004272 <canardBroadcast+0x72>
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 80042b0:	2404      	movs	r4, #4
 80042b2:	4264      	negs	r4, r4
 80042b4:	e7dd      	b.n	8004272 <canardBroadcast+0x72>
            return -CANARD_ERROR_INVALID_ARGUMENT;
 80042b6:	2402      	movs	r4, #2
 80042b8:	4264      	negs	r4, r4
 80042ba:	e7da      	b.n	8004272 <canardBroadcast+0x72>
 80042bc:	0000ffff 	.word	0x0000ffff
 80042c0:	00007ffe 	.word	0x00007ffe

080042c4 <canardRequestOrRespond>:
{
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	46ce      	mov	lr, r9
 80042c8:	4647      	mov	r7, r8
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b083      	sub	sp, #12
 80042ce:	4680      	mov	r8, r0
 80042d0:	000d      	movs	r5, r1
 80042d2:	ab0a      	add	r3, sp, #40	; 0x28
 80042d4:	cb03      	ldmia	r3!, {r0, r1}
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	4699      	mov	r9, r3
 80042da:	ab0e      	add	r3, sp, #56	; 0x38
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	ac0f      	add	r4, sp, #60	; 0x3c
 80042e0:	7826      	ldrb	r6, [r4, #0]
 80042e2:	ac11      	add	r4, sp, #68	; 0x44
 80042e4:	8827      	ldrh	r7, [r4, #0]
    if (payload == NULL && payload_len > 0)
 80042e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d01b      	beq.n	8004324 <canardRequestOrRespond+0x60>
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80042ec:	2b1f      	cmp	r3, #31
 80042ee:	d834      	bhi.n	800435a <canardRequestOrRespond+0x96>
    if (source_node_id == 0)
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	d035      	beq.n	8004360 <canardRequestOrRespond+0x9c>
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 80042f4:	061c      	lsls	r4, r3, #24
 80042f6:	464b      	mov	r3, r9
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431c      	orrs	r4, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 80042fc:	03f3      	lsls	r3, r6, #15
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 80042fe:	431c      	orrs	r4, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8004300:	0212      	lsls	r2, r2, #8
 8004302:	4314      	orrs	r4, r2
                            (1U << 7U) | (uint32_t) source_node_id;
 8004304:	432c      	orrs	r4, r5
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	431c      	orrs	r4, r3
    if (payload_len > 7)
 800430a:	2f07      	cmp	r7, #7
 800430c:	d90f      	bls.n	800432e <canardRequestOrRespond+0x6a>
        crc = crcAddSignature(crc, data_type_signature);
 800430e:	0002      	movs	r2, r0
 8004310:	000b      	movs	r3, r1
 8004312:	4815      	ldr	r0, [pc, #84]	; (8004368 <canardRequestOrRespond+0xa4>)
 8004314:	f7ff fb58 	bl	80039c8 <crcAddSignature>
        crc = crcAdd(crc, payload, payload_len);
 8004318:	003a      	movs	r2, r7
 800431a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800431c:	f7ff fb6f 	bl	80039fe <crcAdd>
 8004320:	0003      	movs	r3, r0
 8004322:	e005      	b.n	8004330 <canardRequestOrRespond+0x6c>
    if (payload == NULL && payload_len > 0)
 8004324:	2f00      	cmp	r7, #0
 8004326:	d0e1      	beq.n	80042ec <canardRequestOrRespond+0x28>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004328:	2402      	movs	r4, #2
 800432a:	4264      	negs	r4, r4
 800432c:	e00b      	b.n	8004346 <canardRequestOrRespond+0x82>
    uint16_t crc = 0xFFFFU;
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <canardRequestOrRespond+0xa4>)
    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8004330:	9701      	str	r7, [sp, #4]
 8004332:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004334:	9200      	str	r2, [sp, #0]
 8004336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004338:	0021      	movs	r1, r4
 800433a:	4640      	mov	r0, r8
 800433c:	f7ff fe32 	bl	8003fa4 <enqueueTxFrames>
 8004340:	0004      	movs	r4, r0
    if (kind == CanardRequest)                      // Response Transfer ID must not be altered
 8004342:	2e01      	cmp	r6, #1
 8004344:	d005      	beq.n	8004352 <canardRequestOrRespond+0x8e>
}
 8004346:	0020      	movs	r0, r4
 8004348:	b003      	add	sp, #12
 800434a:	bcc0      	pop	{r6, r7}
 800434c:	46b9      	mov	r9, r7
 800434e:	46b0      	mov	r8, r6
 8004350:	bdf0      	pop	{r4, r5, r6, r7, pc}
        incrementTransferID(inout_transfer_id);
 8004352:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004354:	f7ff fc58 	bl	8003c08 <incrementTransferID>
 8004358:	e7f5      	b.n	8004346 <canardRequestOrRespond+0x82>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800435a:	2402      	movs	r4, #2
 800435c:	4264      	negs	r4, r4
 800435e:	e7f2      	b.n	8004346 <canardRequestOrRespond+0x82>
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8004360:	2404      	movs	r4, #4
 8004362:	4264      	negs	r4, r4
 8004364:	e7ef      	b.n	8004346 <canardRequestOrRespond+0x82>
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	0000ffff 	.word	0x0000ffff

0800436c <canardPeekTxQueue>:
    if (ins->tx_queue == NULL)
 800436c:	69c0      	ldr	r0, [r0, #28]
 800436e:	2800      	cmp	r0, #0
 8004370:	d000      	beq.n	8004374 <canardPeekTxQueue+0x8>
    return &ins->tx_queue->frame;
 8004372:	3004      	adds	r0, #4
}
 8004374:	4770      	bx	lr

08004376 <canardPopTxQueue>:
{
 8004376:	b510      	push	{r4, lr}
    CanardTxQueueItem* item = ins->tx_queue;
 8004378:	69c1      	ldr	r1, [r0, #28]
    ins->tx_queue = item->next;
 800437a:	680b      	ldr	r3, [r1, #0]
 800437c:	61c3      	str	r3, [r0, #28]
    freeBlock(&ins->allocator, item);
 800437e:	300c      	adds	r0, #12
 8004380:	f7ff fc54 	bl	8003c2c <freeBlock>
}
 8004384:	bd10      	pop	{r4, pc}
	...

08004388 <canardCleanupStaleTransfers>:
{
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	46c6      	mov	lr, r8
 800438c:	b500      	push	{lr}
 800438e:	0005      	movs	r5, r0
 8004390:	0016      	movs	r6, r2
 8004392:	001f      	movs	r7, r3
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8004394:	6983      	ldr	r3, [r0, #24]
 8004396:	4698      	mov	r8, r3
 8004398:	001c      	movs	r4, r3
    while (state != NULL)
 800439a:	e010      	b.n	80043be <canardCleanupStaleTransfers+0x36>
                releaseStatePayload(ins, state);
 800439c:	0021      	movs	r1, r4
 800439e:	0028      	movs	r0, r5
 80043a0:	f7ff fc56 	bl	8003c50 <releaseStatePayload>
                ins->rx_states = ins->rx_states->next;
 80043a4:	69ab      	ldr	r3, [r5, #24]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	61ab      	str	r3, [r5, #24]
                freeBlock(&ins->allocator, state);
 80043aa:	0028      	movs	r0, r5
 80043ac:	300c      	adds	r0, #12
 80043ae:	0021      	movs	r1, r4
 80043b0:	f7ff fc3c 	bl	8003c2c <freeBlock>
                state = ins->rx_states;
 80043b4:	69ac      	ldr	r4, [r5, #24]
 80043b6:	46a0      	mov	r8, r4
 80043b8:	e001      	b.n	80043be <canardCleanupStaleTransfers+0x36>
            prev = state;
 80043ba:	46a0      	mov	r8, r4
            state = state->next;
 80043bc:	6824      	ldr	r4, [r4, #0]
    while (state != NULL)
 80043be:	2c00      	cmp	r4, #0
 80043c0:	d01e      	beq.n	8004400 <canardCleanupStaleTransfers+0x78>
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 80043c2:	0032      	movs	r2, r6
 80043c4:	003b      	movs	r3, r7
 80043c6:	68a0      	ldr	r0, [r4, #8]
 80043c8:	68e1      	ldr	r1, [r4, #12]
 80043ca:	1a12      	subs	r2, r2, r0
 80043cc:	418b      	sbcs	r3, r1
 80043ce:	0011      	movs	r1, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <canardCleanupStaleTransfers+0x54>
 80043d4:	d1f1      	bne.n	80043ba <canardCleanupStaleTransfers+0x32>
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <canardCleanupStaleTransfers+0x80>)
 80043d8:	4299      	cmp	r1, r3
 80043da:	d9ee      	bls.n	80043ba <canardCleanupStaleTransfers+0x32>
            if (state == ins->rx_states)
 80043dc:	69ab      	ldr	r3, [r5, #24]
 80043de:	42a3      	cmp	r3, r4
 80043e0:	d0dc      	beq.n	800439c <canardCleanupStaleTransfers+0x14>
                releaseStatePayload(ins, state);
 80043e2:	0021      	movs	r1, r4
 80043e4:	0028      	movs	r0, r5
 80043e6:	f7ff fc33 	bl	8003c50 <releaseStatePayload>
                prev->next = state->next;
 80043ea:	4643      	mov	r3, r8
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 80043f0:	0028      	movs	r0, r5
 80043f2:	300c      	adds	r0, #12
 80043f4:	0021      	movs	r1, r4
 80043f6:	f7ff fc19 	bl	8003c2c <freeBlock>
                state = prev->next;
 80043fa:	4643      	mov	r3, r8
 80043fc:	681c      	ldr	r4, [r3, #0]
 80043fe:	e7de      	b.n	80043be <canardCleanupStaleTransfers+0x36>
}
 8004400:	bc80      	pop	{r7}
 8004402:	46b8      	mov	r8, r7
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	001e8480 	.word	0x001e8480

0800440c <canardDecodeScalar>:
{
 800440c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440e:	b083      	sub	sp, #12
 8004410:	0006      	movs	r6, r0
 8004412:	000f      	movs	r7, r1
 8004414:	0014      	movs	r4, r2
 8004416:	001d      	movs	r5, r3
    if (transfer == NULL || out_value == NULL)
 8004418:	2800      	cmp	r0, #0
 800441a:	d100      	bne.n	800441e <canardDecodeScalar+0x12>
 800441c:	e120      	b.n	8004660 <canardDecodeScalar+0x254>
 800441e:	9b08      	ldr	r3, [sp, #32]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d100      	bne.n	8004426 <canardDecodeScalar+0x1a>
 8004424:	e11f      	b.n	8004666 <canardDecodeScalar+0x25a>
    if (bit_length < 1 || bit_length > 64)
 8004426:	1e53      	subs	r3, r2, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b3f      	cmp	r3, #63	; 0x3f
 800442c:	d900      	bls.n	8004430 <canardDecodeScalar+0x24>
 800442e:	e11d      	b.n	800466c <canardDecodeScalar+0x260>
    if (bit_length == 1 && value_is_signed)
 8004430:	2a01      	cmp	r2, #1
 8004432:	d102      	bne.n	800443a <canardDecodeScalar+0x2e>
 8004434:	2d00      	cmp	r5, #0
 8004436:	d000      	beq.n	800443a <canardDecodeScalar+0x2e>
 8004438:	e11b      	b.n	8004672 <canardDecodeScalar+0x266>
    memset(&storage, 0, sizeof(storage));   // This is important
 800443a:	2208      	movs	r2, #8
 800443c:	2100      	movs	r1, #0
 800443e:	4668      	mov	r0, sp
 8004440:	f003 f82b 	bl	800749a <memset>
    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8004444:	466b      	mov	r3, sp
 8004446:	0022      	movs	r2, r4
 8004448:	0039      	movs	r1, r7
 800444a:	0030      	movs	r0, r6
 800444c:	f7ff fc86 	bl	8003d5c <descatterTransferPayload>
 8004450:	1e06      	subs	r6, r0, #0
    if (result <= 0)
 8004452:	dd52      	ble.n	80044fa <canardDecodeScalar+0xee>
    CANARD_ASSERT((result > 0) && (result <= 64) && (result <= bit_length));
 8004454:	3801      	subs	r0, #1
 8004456:	b280      	uxth	r0, r0
 8004458:	283f      	cmp	r0, #63	; 0x3f
 800445a:	d801      	bhi.n	8004460 <canardDecodeScalar+0x54>
 800445c:	42a6      	cmp	r6, r4
 800445e:	dd02      	ble.n	8004466 <canardDecodeScalar+0x5a>
 8004460:	4885      	ldr	r0, [pc, #532]	; (8004678 <canardDecodeScalar+0x26c>)
 8004462:	f7fc ff8b 	bl	800137c <hardAssertTmp>
    if ((bit_length % 8) != 0)
 8004466:	0763      	lsls	r3, r4, #29
 8004468:	d008      	beq.n	800447c <canardDecodeScalar+0x70>
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 800446a:	08e3      	lsrs	r3, r4, #3
 800446c:	466a      	mov	r2, sp
 800446e:	5cd2      	ldrb	r2, [r2, r3]
 8004470:	4260      	negs	r0, r4
 8004472:	2107      	movs	r1, #7
 8004474:	4001      	ands	r1, r0
 8004476:	410a      	asrs	r2, r1
 8004478:	4669      	mov	r1, sp
 800447a:	54ca      	strb	r2, [r1, r3]
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 800447c:	2c01      	cmp	r4, #1
 800447e:	d00f      	beq.n	80044a0 <canardDecodeScalar+0x94>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8004480:	2c08      	cmp	r4, #8
 8004482:	d93d      	bls.n	8004500 <canardDecodeScalar+0xf4>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8004484:	2c10      	cmp	r4, #16
 8004486:	d93d      	bls.n	8004504 <canardDecodeScalar+0xf8>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8004488:	2c20      	cmp	r4, #32
 800448a:	d93d      	bls.n	8004508 <canardDecodeScalar+0xfc>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 800448c:	2c40      	cmp	r4, #64	; 0x40
 800448e:	d801      	bhi.n	8004494 <canardDecodeScalar+0x88>
 8004490:	2708      	movs	r7, #8
 8004492:	e006      	b.n	80044a2 <canardDecodeScalar+0x96>
        CANARD_ASSERT(false);
 8004494:	4878      	ldr	r0, [pc, #480]	; (8004678 <canardDecodeScalar+0x26c>)
 8004496:	f7fc ff71 	bl	800137c <hardAssertTmp>
        return -CANARD_ERROR_INTERNAL;
 800449a:	2609      	movs	r6, #9
 800449c:	4276      	negs	r6, r6
 800449e:	e02c      	b.n	80044fa <canardDecodeScalar+0xee>
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80044a0:	0027      	movs	r7, r4
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 80044a2:	1e7b      	subs	r3, r7, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b07      	cmp	r3, #7
 80044a8:	d830      	bhi.n	800450c <canardDecodeScalar+0x100>
    if (isBigEndian())
 80044aa:	f7ff fa74 	bl	8003996 <isBigEndian>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d130      	bne.n	8004514 <canardDecodeScalar+0x108>
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 80044b2:	2d00      	cmp	r5, #0
 80044b4:	d013      	beq.n	80044de <canardDecodeScalar+0xd2>
 80044b6:	00ff      	lsls	r7, r7, #3
 80044b8:	42a7      	cmp	r7, r4
 80044ba:	d010      	beq.n	80044de <canardDecodeScalar+0xd2>
        if (bit_length <= 8)
 80044bc:	2c08      	cmp	r4, #8
 80044be:	d82e      	bhi.n	800451e <canardDecodeScalar+0x112>
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80044c0:	466b      	mov	r3, sp
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	1e63      	subs	r3, r4, #1
 80044c6:	0011      	movs	r1, r2
 80044c8:	40d9      	lsrs	r1, r3
 80044ca:	000b      	movs	r3, r1
 80044cc:	07db      	lsls	r3, r3, #31
 80044ce:	d506      	bpl.n	80044de <canardDecodeScalar+0xd2>
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80044d0:	2301      	movs	r3, #1
 80044d2:	40a3      	lsls	r3, r4
 80044d4:	425b      	negs	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4313      	orrs	r3, r2
 80044da:	466a      	mov	r2, sp
 80044dc:	7013      	strb	r3, [r2, #0]
    if (value_is_signed)
 80044de:	2d00      	cmp	r5, #0
 80044e0:	d100      	bne.n	80044e4 <canardDecodeScalar+0xd8>
 80044e2:	e090      	b.n	8004606 <canardDecodeScalar+0x1fa>
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80044e4:	2c08      	cmp	r4, #8
 80044e6:	d900      	bls.n	80044ea <canardDecodeScalar+0xde>
 80044e8:	e071      	b.n	80045ce <canardDecodeScalar+0x1c2>
 80044ea:	466b      	mov	r3, sp
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b25b      	sxtb	r3, r3
 80044f0:	9a08      	ldr	r2, [sp, #32]
 80044f2:	7013      	strb	r3, [r2, #0]
    CANARD_ASSERT(result <= bit_length);
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	dd00      	ble.n	80044fa <canardDecodeScalar+0xee>
 80044f8:	e0ae      	b.n	8004658 <canardDecodeScalar+0x24c>
}
 80044fa:	0030      	movs	r0, r6
 80044fc:	b003      	add	sp, #12
 80044fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8004500:	2701      	movs	r7, #1
 8004502:	e7ce      	b.n	80044a2 <canardDecodeScalar+0x96>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8004504:	2702      	movs	r7, #2
 8004506:	e7cc      	b.n	80044a2 <canardDecodeScalar+0x96>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8004508:	2704      	movs	r7, #4
 800450a:	e7ca      	b.n	80044a2 <canardDecodeScalar+0x96>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 800450c:	485a      	ldr	r0, [pc, #360]	; (8004678 <canardDecodeScalar+0x26c>)
 800450e:	f7fc ff35 	bl	800137c <hardAssertTmp>
 8004512:	e7ca      	b.n	80044aa <canardDecodeScalar+0x9e>
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8004514:	0039      	movs	r1, r7
 8004516:	4668      	mov	r0, sp
 8004518:	f7ff fd20 	bl	8003f5c <swapByteOrder>
 800451c:	e7c9      	b.n	80044b2 <canardDecodeScalar+0xa6>
        else if (bit_length <= 16)
 800451e:	2c10      	cmp	r4, #16
 8004520:	d80f      	bhi.n	8004542 <canardDecodeScalar+0x136>
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8004522:	466b      	mov	r3, sp
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	1e63      	subs	r3, r4, #1
 8004528:	0011      	movs	r1, r2
 800452a:	40d9      	lsrs	r1, r3
 800452c:	000b      	movs	r3, r1
 800452e:	07db      	lsls	r3, r3, #31
 8004530:	d5d5      	bpl.n	80044de <canardDecodeScalar+0xd2>
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8004532:	2301      	movs	r3, #1
 8004534:	40a3      	lsls	r3, r4
 8004536:	425b      	negs	r3, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	466a      	mov	r2, sp
 800453e:	8013      	strh	r3, [r2, #0]
 8004540:	e7cd      	b.n	80044de <canardDecodeScalar+0xd2>
        else if (bit_length <= 32)
 8004542:	2c20      	cmp	r4, #32
 8004544:	d80c      	bhi.n	8004560 <canardDecodeScalar+0x154>
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8004546:	9b00      	ldr	r3, [sp, #0]
 8004548:	1e62      	subs	r2, r4, #1
 800454a:	0019      	movs	r1, r3
 800454c:	40d1      	lsrs	r1, r2
 800454e:	000a      	movs	r2, r1
 8004550:	07d2      	lsls	r2, r2, #31
 8004552:	d5c4      	bpl.n	80044de <canardDecodeScalar+0xd2>
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8004554:	2201      	movs	r2, #1
 8004556:	40a2      	lsls	r2, r4
 8004558:	4252      	negs	r2, r2
 800455a:	4313      	orrs	r3, r2
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	e7be      	b.n	80044de <canardDecodeScalar+0xd2>
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8004560:	2c3f      	cmp	r4, #63	; 0x3f
 8004562:	d82e      	bhi.n	80045c2 <canardDecodeScalar+0x1b6>
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8004564:	9b00      	ldr	r3, [sp, #0]
 8004566:	469c      	mov	ip, r3
 8004568:	9f01      	ldr	r7, [sp, #4]
 800456a:	1e63      	subs	r3, r4, #1
 800456c:	2221      	movs	r2, #33	; 0x21
 800456e:	4252      	negs	r2, r2
 8004570:	18a2      	adds	r2, r4, r2
 8004572:	d416      	bmi.n	80045a2 <canardDecodeScalar+0x196>
 8004574:	003b      	movs	r3, r7
 8004576:	40d3      	lsrs	r3, r2
 8004578:	07db      	lsls	r3, r3, #31
 800457a:	d5b0      	bpl.n	80044de <canardDecodeScalar+0xd2>
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 800457c:	2320      	movs	r3, #32
 800457e:	425b      	negs	r3, r3
 8004580:	18e1      	adds	r1, r4, r3
 8004582:	d418      	bmi.n	80045b6 <canardDecodeScalar+0x1aa>
 8004584:	2001      	movs	r0, #1
 8004586:	4088      	lsls	r0, r1
 8004588:	0003      	movs	r3, r0
 800458a:	2101      	movs	r1, #1
 800458c:	40a1      	lsls	r1, r4
 800458e:	000a      	movs	r2, r1
 8004590:	2100      	movs	r1, #0
 8004592:	4250      	negs	r0, r2
 8004594:	4199      	sbcs	r1, r3
 8004596:	4663      	mov	r3, ip
 8004598:	4303      	orrs	r3, r0
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	430f      	orrs	r7, r1
 800459e:	9701      	str	r7, [sp, #4]
 80045a0:	e79d      	b.n	80044de <canardDecodeScalar+0xd2>
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80045a2:	2220      	movs	r2, #32
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	0039      	movs	r1, r7
 80045a8:	4091      	lsls	r1, r2
 80045aa:	000a      	movs	r2, r1
 80045ac:	4661      	mov	r1, ip
 80045ae:	40d9      	lsrs	r1, r3
 80045b0:	000b      	movs	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	e7e0      	b.n	8004578 <canardDecodeScalar+0x16c>
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80045b6:	2120      	movs	r1, #32
 80045b8:	1b09      	subs	r1, r1, r4
 80045ba:	2001      	movs	r0, #1
 80045bc:	40c8      	lsrs	r0, r1
 80045be:	0003      	movs	r3, r0
 80045c0:	e7e3      	b.n	800458a <canardDecodeScalar+0x17e>
            CANARD_ASSERT(false);
 80045c2:	482d      	ldr	r0, [pc, #180]	; (8004678 <canardDecodeScalar+0x26c>)
 80045c4:	f7fc feda 	bl	800137c <hardAssertTmp>
            return -CANARD_ERROR_INTERNAL;
 80045c8:	2609      	movs	r6, #9
 80045ca:	4276      	negs	r6, r6
 80045cc:	e795      	b.n	80044fa <canardDecodeScalar+0xee>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80045ce:	2c10      	cmp	r4, #16
 80045d0:	d805      	bhi.n	80045de <canardDecodeScalar+0x1d2>
 80045d2:	466b      	mov	r3, sp
 80045d4:	2200      	movs	r2, #0
 80045d6:	5e9b      	ldrsh	r3, [r3, r2]
 80045d8:	9a08      	ldr	r2, [sp, #32]
 80045da:	8013      	strh	r3, [r2, #0]
 80045dc:	e78a      	b.n	80044f4 <canardDecodeScalar+0xe8>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80045de:	2c20      	cmp	r4, #32
 80045e0:	d803      	bhi.n	80045ea <canardDecodeScalar+0x1de>
 80045e2:	9b08      	ldr	r3, [sp, #32]
 80045e4:	9a00      	ldr	r2, [sp, #0]
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e784      	b.n	80044f4 <canardDecodeScalar+0xe8>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80045ea:	2c40      	cmp	r4, #64	; 0x40
 80045ec:	d805      	bhi.n	80045fa <canardDecodeScalar+0x1ee>
 80045ee:	9908      	ldr	r1, [sp, #32]
 80045f0:	9a00      	ldr	r2, [sp, #0]
 80045f2:	9b01      	ldr	r3, [sp, #4]
 80045f4:	600a      	str	r2, [r1, #0]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	e77c      	b.n	80044f4 <canardDecodeScalar+0xe8>
            CANARD_ASSERT(false);
 80045fa:	481f      	ldr	r0, [pc, #124]	; (8004678 <canardDecodeScalar+0x26c>)
 80045fc:	f7fc febe 	bl	800137c <hardAssertTmp>
            return -CANARD_ERROR_INTERNAL;
 8004600:	2609      	movs	r6, #9
 8004602:	4276      	negs	r6, r6
 8004604:	e779      	b.n	80044fa <canardDecodeScalar+0xee>
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8004606:	2c01      	cmp	r4, #1
 8004608:	d006      	beq.n	8004618 <canardDecodeScalar+0x20c>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 800460a:	2c08      	cmp	r4, #8
 800460c:	d809      	bhi.n	8004622 <canardDecodeScalar+0x216>
 800460e:	466b      	mov	r3, sp
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	9a08      	ldr	r2, [sp, #32]
 8004614:	7013      	strb	r3, [r2, #0]
 8004616:	e76d      	b.n	80044f4 <canardDecodeScalar+0xe8>
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8004618:	466b      	mov	r3, sp
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	9a08      	ldr	r2, [sp, #32]
 800461e:	7013      	strb	r3, [r2, #0]
 8004620:	e768      	b.n	80044f4 <canardDecodeScalar+0xe8>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8004622:	2c10      	cmp	r4, #16
 8004624:	d804      	bhi.n	8004630 <canardDecodeScalar+0x224>
 8004626:	466b      	mov	r3, sp
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	9a08      	ldr	r2, [sp, #32]
 800462c:	8013      	strh	r3, [r2, #0]
 800462e:	e761      	b.n	80044f4 <canardDecodeScalar+0xe8>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8004630:	2c20      	cmp	r4, #32
 8004632:	d803      	bhi.n	800463c <canardDecodeScalar+0x230>
 8004634:	9b08      	ldr	r3, [sp, #32]
 8004636:	9a00      	ldr	r2, [sp, #0]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e75b      	b.n	80044f4 <canardDecodeScalar+0xe8>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 800463c:	2c40      	cmp	r4, #64	; 0x40
 800463e:	d805      	bhi.n	800464c <canardDecodeScalar+0x240>
 8004640:	9908      	ldr	r1, [sp, #32]
 8004642:	9a00      	ldr	r2, [sp, #0]
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	600a      	str	r2, [r1, #0]
 8004648:	604b      	str	r3, [r1, #4]
 800464a:	e753      	b.n	80044f4 <canardDecodeScalar+0xe8>
            CANARD_ASSERT(false);
 800464c:	480a      	ldr	r0, [pc, #40]	; (8004678 <canardDecodeScalar+0x26c>)
 800464e:	f7fc fe95 	bl	800137c <hardAssertTmp>
            return -CANARD_ERROR_INTERNAL;
 8004652:	2609      	movs	r6, #9
 8004654:	4276      	negs	r6, r6
 8004656:	e750      	b.n	80044fa <canardDecodeScalar+0xee>
    CANARD_ASSERT(result <= bit_length);
 8004658:	4807      	ldr	r0, [pc, #28]	; (8004678 <canardDecodeScalar+0x26c>)
 800465a:	f7fc fe8f 	bl	800137c <hardAssertTmp>
 800465e:	e74c      	b.n	80044fa <canardDecodeScalar+0xee>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004660:	2602      	movs	r6, #2
 8004662:	4276      	negs	r6, r6
 8004664:	e749      	b.n	80044fa <canardDecodeScalar+0xee>
 8004666:	2602      	movs	r6, #2
 8004668:	4276      	negs	r6, r6
 800466a:	e746      	b.n	80044fa <canardDecodeScalar+0xee>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800466c:	2602      	movs	r6, #2
 800466e:	4276      	negs	r6, r6
 8004670:	e743      	b.n	80044fa <canardDecodeScalar+0xee>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004672:	2602      	movs	r6, #2
 8004674:	4276      	negs	r6, r6
 8004676:	e740      	b.n	80044fa <canardDecodeScalar+0xee>
 8004678:	08007b90 	.word	0x08007b90

0800467c <canardEncodeScalar>:
{
 800467c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467e:	b085      	sub	sp, #20
 8004680:	0005      	movs	r5, r0
 8004682:	000f      	movs	r7, r1
 8004684:	0014      	movs	r4, r2
 8004686:	001e      	movs	r6, r3
    CANARD_ASSERT(destination != NULL);
 8004688:	2800      	cmp	r0, #0
 800468a:	d013      	beq.n	80046b4 <canardEncodeScalar+0x38>
    CANARD_ASSERT(value != NULL);
 800468c:	2e00      	cmp	r6, #0
 800468e:	d015      	beq.n	80046bc <canardEncodeScalar+0x40>
    if (bit_length > 64)
 8004690:	2c40      	cmp	r4, #64	; 0x40
 8004692:	d817      	bhi.n	80046c4 <canardEncodeScalar+0x48>
    if (bit_length < 1)
 8004694:	2c00      	cmp	r4, #0
 8004696:	d01a      	beq.n	80046ce <canardEncodeScalar+0x52>
    memset(&storage, 0, sizeof(storage));
 8004698:	2208      	movs	r2, #8
 800469a:	2100      	movs	r1, #0
 800469c:	a802      	add	r0, sp, #8
 800469e:	f002 fefc 	bl	800749a <memset>
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80046a2:	2c01      	cmp	r4, #1
 80046a4:	d018      	beq.n	80046d8 <canardEncodeScalar+0x5c>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 80046a6:	2c08      	cmp	r4, #8
 80046a8:	d831      	bhi.n	800470e <canardEncodeScalar+0x92>
 80046aa:	7832      	ldrb	r2, [r6, #0]
 80046ac:	ab02      	add	r3, sp, #8
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	2601      	movs	r6, #1
 80046b2:	e015      	b.n	80046e0 <canardEncodeScalar+0x64>
    CANARD_ASSERT(destination != NULL);
 80046b4:	4827      	ldr	r0, [pc, #156]	; (8004754 <canardEncodeScalar+0xd8>)
 80046b6:	f7fc fe61 	bl	800137c <hardAssertTmp>
 80046ba:	e7e7      	b.n	800468c <canardEncodeScalar+0x10>
    CANARD_ASSERT(value != NULL);
 80046bc:	4825      	ldr	r0, [pc, #148]	; (8004754 <canardEncodeScalar+0xd8>)
 80046be:	f7fc fe5d 	bl	800137c <hardAssertTmp>
 80046c2:	e7e5      	b.n	8004690 <canardEncodeScalar+0x14>
        CANARD_ASSERT(false);
 80046c4:	4823      	ldr	r0, [pc, #140]	; (8004754 <canardEncodeScalar+0xd8>)
 80046c6:	f7fc fe59 	bl	800137c <hardAssertTmp>
        bit_length = 64;
 80046ca:	2440      	movs	r4, #64	; 0x40
 80046cc:	e7e4      	b.n	8004698 <canardEncodeScalar+0x1c>
        CANARD_ASSERT(false);
 80046ce:	4821      	ldr	r0, [pc, #132]	; (8004754 <canardEncodeScalar+0xd8>)
 80046d0:	f7fc fe54 	bl	800137c <hardAssertTmp>
        bit_length = 1;
 80046d4:	3401      	adds	r4, #1
 80046d6:	e7df      	b.n	8004698 <canardEncodeScalar+0x1c>
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80046d8:	7832      	ldrb	r2, [r6, #0]
 80046da:	ab02      	add	r3, sp, #8
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	0026      	movs	r6, r4
    if (isBigEndian())
 80046e0:	f7ff f959 	bl	8003996 <isBigEndian>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d130      	bne.n	800474a <canardEncodeScalar+0xce>
    if ((bit_length % 8) != 0)
 80046e8:	0763      	lsls	r3, r4, #29
 80046ea:	d007      	beq.n	80046fc <canardEncodeScalar+0x80>
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 80046ec:	08e3      	lsrs	r3, r4, #3
 80046ee:	a902      	add	r1, sp, #8
 80046f0:	5cca      	ldrb	r2, [r1, r3]
 80046f2:	4266      	negs	r6, r4
 80046f4:	2007      	movs	r0, #7
 80046f6:	4030      	ands	r0, r6
 80046f8:	4082      	lsls	r2, r0
 80046fa:	54ca      	strb	r2, [r1, r3]
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 80046fc:	9700      	str	r7, [sp, #0]
 80046fe:	002b      	movs	r3, r5
 8004700:	0022      	movs	r2, r4
 8004702:	2100      	movs	r1, #0
 8004704:	a802      	add	r0, sp, #8
 8004706:	f7ff fad5 	bl	8003cb4 <copyBitArray>
}
 800470a:	b005      	add	sp, #20
 800470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 800470e:	2c10      	cmp	r4, #16
 8004710:	d804      	bhi.n	800471c <canardEncodeScalar+0xa0>
 8004712:	8832      	ldrh	r2, [r6, #0]
 8004714:	ab02      	add	r3, sp, #8
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	2602      	movs	r6, #2
 800471a:	e7e1      	b.n	80046e0 <canardEncodeScalar+0x64>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 800471c:	2c20      	cmp	r4, #32
 800471e:	d803      	bhi.n	8004728 <canardEncodeScalar+0xac>
 8004720:	6833      	ldr	r3, [r6, #0]
 8004722:	9302      	str	r3, [sp, #8]
 8004724:	2604      	movs	r6, #4
 8004726:	e7db      	b.n	80046e0 <canardEncodeScalar+0x64>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8004728:	2c40      	cmp	r4, #64	; 0x40
 800472a:	d805      	bhi.n	8004738 <canardEncodeScalar+0xbc>
 800472c:	6832      	ldr	r2, [r6, #0]
 800472e:	6873      	ldr	r3, [r6, #4]
 8004730:	9202      	str	r2, [sp, #8]
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	2608      	movs	r6, #8
 8004736:	e7d3      	b.n	80046e0 <canardEncodeScalar+0x64>
        CANARD_ASSERT(false);
 8004738:	4e06      	ldr	r6, [pc, #24]	; (8004754 <canardEncodeScalar+0xd8>)
 800473a:	0030      	movs	r0, r6
 800473c:	f7fc fe1e 	bl	800137c <hardAssertTmp>
    CANARD_ASSERT(std_byte_length > 0);
 8004740:	0030      	movs	r0, r6
 8004742:	f7fc fe1b 	bl	800137c <hardAssertTmp>
    uint8_t std_byte_length = 0;
 8004746:	2600      	movs	r6, #0
 8004748:	e7ca      	b.n	80046e0 <canardEncodeScalar+0x64>
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800474a:	0031      	movs	r1, r6
 800474c:	a802      	add	r0, sp, #8
 800474e:	f7ff fc05 	bl	8003f5c <swapByteOrder>
 8004752:	e7c9      	b.n	80046e8 <canardEncodeScalar+0x6c>
 8004754:	08007b90 	.word	0x08007b90

08004758 <canardReleaseRxTransferPayload>:
{
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	0006      	movs	r6, r0
 800475c:	000c      	movs	r4, r1
    while (transfer->payload_middle != NULL)
 800475e:	e005      	b.n	800476c <canardReleaseRxTransferPayload+0x14>
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8004760:	680d      	ldr	r5, [r1, #0]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8004762:	0030      	movs	r0, r6
 8004764:	300c      	adds	r0, #12
 8004766:	f7ff fa61 	bl	8003c2c <freeBlock>
        transfer->payload_middle = temp;
 800476a:	60e5      	str	r5, [r4, #12]
    while (transfer->payload_middle != NULL)
 800476c:	68e1      	ldr	r1, [r4, #12]
 800476e:	2900      	cmp	r1, #0
 8004770:	d1f6      	bne.n	8004760 <canardReleaseRxTransferPayload+0x8>
    transfer->payload_middle = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	60e3      	str	r3, [r4, #12]
    transfer->payload_head = NULL;
 8004776:	60a3      	str	r3, [r4, #8]
    transfer->payload_tail = NULL;
 8004778:	6123      	str	r3, [r4, #16]
    transfer->payload_len = 0;
 800477a:	82a3      	strh	r3, [r4, #20]
}
 800477c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004780 <canardHandleRxFrame>:
{
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	46de      	mov	lr, fp
 8004784:	4657      	mov	r7, sl
 8004786:	464e      	mov	r6, r9
 8004788:	4645      	mov	r5, r8
 800478a:	b5e0      	push	{r5, r6, r7, lr}
 800478c:	b093      	sub	sp, #76	; 0x4c
 800478e:	0006      	movs	r6, r0
 8004790:	000d      	movs	r5, r1
 8004792:	9202      	str	r2, [sp, #8]
 8004794:	9303      	str	r3, [sp, #12]
 8004796:	ab1c      	add	r3, sp, #112	; 0x70
 8004798:	781f      	ldrb	r7, [r3, #0]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 800479a:	680c      	ldr	r4, [r1, #0]
 800479c:	0020      	movs	r0, r4
 800479e:	f7ff f8d8 	bl	8003952 <extractTransferType>
 80047a2:	0002      	movs	r2, r0
 80047a4:	9006      	str	r0, [sp, #24]
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80047a6:	2802      	cmp	r0, #2
 80047a8:	d100      	bne.n	80047ac <canardHandleRxFrame+0x2c>
 80047aa:	e085      	b.n	80048b8 <canardHandleRxFrame+0x138>
                                        DEST_ID_FROM_ID(frame->id);
 80047ac:	0a23      	lsrs	r3, r4, #8
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80047ae:	217f      	movs	r1, #127	; 0x7f
 80047b0:	400b      	ands	r3, r1
 80047b2:	469b      	mov	fp, r3
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80047b4:	2c00      	cmp	r4, #0
 80047b6:	db00      	blt.n	80047ba <canardHandleRxFrame+0x3a>
 80047b8:	e1f9      	b.n	8004bae <canardHandleRxFrame+0x42e>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80047ba:	23c0      	movs	r3, #192	; 0xc0
 80047bc:	05db      	lsls	r3, r3, #23
 80047be:	421c      	tst	r4, r3
 80047c0:	d000      	beq.n	80047c4 <canardHandleRxFrame+0x44>
 80047c2:	e1f7      	b.n	8004bb4 <canardHandleRxFrame+0x434>
        (frame->data_len < 1))
 80047c4:	7b2b      	ldrb	r3, [r5, #12]
 80047c6:	4699      	mov	r9, r3
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d100      	bne.n	80047ce <canardHandleRxFrame+0x4e>
 80047cc:	e1f5      	b.n	8004bba <canardHandleRxFrame+0x43a>
    if (!forwardingMode) {
 80047ce:	2f00      	cmp	r7, #0
 80047d0:	d107      	bne.n	80047e2 <canardHandleRxFrame+0x62>
        if (transfer_type != CanardTransferTypeBroadcast &&
 80047d2:	2a02      	cmp	r2, #2
 80047d4:	d005      	beq.n	80047e2 <canardHandleRxFrame+0x62>
            destination_node_id != canardGetLocalNodeID(ins))
 80047d6:	0030      	movs	r0, r6
 80047d8:	f7ff fd10 	bl	80041fc <canardGetLocalNodeID>
        if (transfer_type != CanardTransferTypeBroadcast &&
 80047dc:	4558      	cmp	r0, fp
 80047de:	d000      	beq.n	80047e2 <canardHandleRxFrame+0x62>
 80047e0:	e1ee      	b.n	8004bc0 <canardHandleRxFrame+0x440>
    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 80047e2:	0e23      	lsrs	r3, r4, #24
 80047e4:	221f      	movs	r2, #31
 80047e6:	401a      	ands	r2, r3
 80047e8:	9207      	str	r2, [sp, #28]
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 80047ea:	237f      	movs	r3, #127	; 0x7f
 80047ec:	4023      	ands	r3, r4
 80047ee:	4698      	mov	r8, r3
    const uint16_t data_type_id = extractDataType(frame->id);
 80047f0:	0020      	movs	r0, r4
 80047f2:	f7ff f8b8 	bl	8003966 <extractDataType>
 80047f6:	9008      	str	r0, [sp, #32]
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 80047f8:	9906      	ldr	r1, [sp, #24]
 80047fa:	040c      	lsls	r4, r1, #16
 80047fc:	4304      	orrs	r4, r0
 80047fe:	4643      	mov	r3, r8
 8004800:	049b      	lsls	r3, r3, #18
 8004802:	431c      	orrs	r4, r3
 8004804:	465b      	mov	r3, fp
 8004806:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8004808:	431c      	orrs	r4, r3
 800480a:	9404      	str	r4, [sp, #16]
    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 800480c:	464b      	mov	r3, r9
 800480e:	3b01      	subs	r3, #1
 8004810:	18eb      	adds	r3, r5, r3
 8004812:	791b      	ldrb	r3, [r3, #4]
 8004814:	4699      	mov	r9, r3
        uint64_t data_type_signature = 0;
 8004816:	2200      	movs	r2, #0
 8004818:	2300      	movs	r3, #0
 800481a:	920a      	str	r2, [sp, #40]	; 0x28
 800481c:	930b      	str	r3, [sp, #44]	; 0x2c
        bool accept = ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id);
 800481e:	4643      	mov	r3, r8
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	000b      	movs	r3, r1
 8004824:	0002      	movs	r2, r0
 8004826:	a90a      	add	r1, sp, #40	; 0x28
 8004828:	0030      	movs	r0, r6
 800482a:	6874      	ldr	r4, [r6, #4]
 800482c:	47a0      	blx	r4
        if (forwardingMode || accept)
 800482e:	4307      	orrs	r7, r0
 8004830:	b2ff      	uxtb	r7, r7
 8004832:	2f00      	cmp	r7, #0
 8004834:	d04c      	beq.n	80048d0 <canardHandleRxFrame+0x150>
            if (IS_START_OF_TRANSFER(tail_byte))
 8004836:	464b      	mov	r3, r9
 8004838:	09db      	lsrs	r3, r3, #7
 800483a:	469a      	mov	sl, r3
 800483c:	d03f      	beq.n	80048be <canardHandleRxFrame+0x13e>
                rx_state = traverseRxStates(ins, transfer_descriptor);
 800483e:	9904      	ldr	r1, [sp, #16]
 8004840:	0030      	movs	r0, r6
 8004842:	f7ff fc82 	bl	800414a <traverseRxStates>
 8004846:	1e04      	subs	r4, r0, #0
                if(rx_state == NULL)
 8004848:	d04b      	beq.n	80048e2 <canardHandleRxFrame+0x162>
                rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 800484a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800484c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484e:	48b2      	ldr	r0, [pc, #712]	; (8004b18 <canardHandleRxFrame+0x398>)
 8004850:	f7ff f8ba 	bl	80039c8 <crcAddSignature>
 8004854:	82a0      	strh	r0, [r4, #20]
    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
 8004856:	2c00      	cmp	r4, #0
 8004858:	d046      	beq.n	80048e8 <canardHandleRxFrame+0x168>
    const bool not_initialized = rx_state->timestamp_usec == 0;
 800485a:	68a2      	ldr	r2, [r4, #8]
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	0017      	movs	r7, r2
 8004860:	431f      	orrs	r7, r3
 8004862:	4279      	negs	r1, r7
 8004864:	414f      	adcs	r7, r1
 8004866:	b2ff      	uxtb	r7, r7
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8004868:	9802      	ldr	r0, [sp, #8]
 800486a:	9903      	ldr	r1, [sp, #12]
 800486c:	1a80      	subs	r0, r0, r2
 800486e:	4199      	sbcs	r1, r3
 8004870:	0002      	movs	r2, r0
 8004872:	000b      	movs	r3, r1
 8004874:	2101      	movs	r1, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <canardHandleRxFrame+0x10c>
 800487a:	9204      	str	r2, [sp, #16]
 800487c:	9305      	str	r3, [sp, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <canardHandleRxFrame+0x10a>
 8004882:	4ba6      	ldr	r3, [pc, #664]	; (8004b1c <canardHandleRxFrame+0x39c>)
 8004884:	9a04      	ldr	r2, [sp, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	d800      	bhi.n	800488c <canardHandleRxFrame+0x10c>
 800488a:	2100      	movs	r1, #0
 800488c:	b2cb      	uxtb	r3, r1
 800488e:	9309      	str	r3, [sp, #36]	; 0x24
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8004890:	7de0      	ldrb	r0, [r4, #23]
 8004892:	0640      	lsls	r0, r0, #25
 8004894:	0ec0      	lsrs	r0, r0, #27
 8004896:	231f      	movs	r3, #31
 8004898:	464a      	mov	r2, r9
 800489a:	401a      	ands	r2, r3
 800489c:	9204      	str	r2, [sp, #16]
 800489e:	0011      	movs	r1, r2
 80048a0:	f7ff f823 	bl	80038ea <computeTransferIDForwardDistance>
            (not_initialized) ||
 80048a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a6:	431f      	orrs	r7, r3
            (tid_timed_out) ||
 80048a8:	d124      	bne.n	80048f4 <canardHandleRxFrame+0x174>
 80048aa:	4653      	mov	r3, sl
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d055      	beq.n	800495c <canardHandleRxFrame+0x1dc>
            (first_frame && not_previous_tid);
 80048b0:	2801      	cmp	r0, #1
 80048b2:	dd1d      	ble.n	80048f0 <canardHandleRxFrame+0x170>
            (tid_timed_out) ||
 80048b4:	2301      	movs	r3, #1
 80048b6:	e01e      	b.n	80048f6 <canardHandleRxFrame+0x176>
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80048b8:	2300      	movs	r3, #0
 80048ba:	469b      	mov	fp, r3
 80048bc:	e77a      	b.n	80047b4 <canardHandleRxFrame+0x34>
                rx_state = findRxState(ins->rx_states, transfer_descriptor);
 80048be:	9904      	ldr	r1, [sp, #16]
 80048c0:	69b0      	ldr	r0, [r6, #24]
 80048c2:	f7ff f860 	bl	8003986 <findRxState>
 80048c6:	1e04      	subs	r4, r0, #0
                if (rx_state == NULL)
 80048c8:	d1c5      	bne.n	8004856 <canardHandleRxFrame+0xd6>
                    return -CANARD_ERROR_RX_MISSED_START;
 80048ca:	200d      	movs	r0, #13
 80048cc:	4240      	negs	r0, r0
 80048ce:	e001      	b.n	80048d4 <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_NOT_WANTED;
 80048d0:	200c      	movs	r0, #12
 80048d2:	4240      	negs	r0, r0
}
 80048d4:	b013      	add	sp, #76	; 0x4c
 80048d6:	bcf0      	pop	{r4, r5, r6, r7}
 80048d8:	46bb      	mov	fp, r7
 80048da:	46b2      	mov	sl, r6
 80048dc:	46a9      	mov	r9, r5
 80048de:	46a0      	mov	r8, r4
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return -CANARD_ERROR_OUT_OF_MEMORY;
 80048e2:	2003      	movs	r0, #3
 80048e4:	4240      	negs	r0, r0
 80048e6:	e7f5      	b.n	80048d4 <canardHandleRxFrame+0x154>
    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
 80048e8:	488d      	ldr	r0, [pc, #564]	; (8004b20 <canardHandleRxFrame+0x3a0>)
 80048ea:	f7fc fd47 	bl	800137c <hardAssertTmp>
 80048ee:	e7b4      	b.n	800485a <canardHandleRxFrame+0xda>
            (tid_timed_out) ||
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <canardHandleRxFrame+0x176>
 80048f4:	2301      	movs	r3, #1
    if (need_restart)
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d132      	bne.n	8004960 <canardHandleRxFrame+0x1e0>
    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 80048fa:	4653      	mov	r3, sl
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d054      	beq.n	80049aa <canardHandleRxFrame+0x22a>
 8004900:	464b      	mov	r3, r9
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	d551      	bpl.n	80049aa <canardHandleRxFrame+0x22a>
        if (TOGGLE_BIT(tail_byte) != 0)
 8004906:	464b      	mov	r3, r9
 8004908:	069b      	lsls	r3, r3, #26
 800490a:	d44b      	bmi.n	80049a4 <canardHandleRxFrame+0x224>
        rx_state->timestamp_usec = timestamp_usec;
 800490c:	9a02      	ldr	r2, [sp, #8]
 800490e:	9b03      	ldr	r3, [sp, #12]
 8004910:	60a2      	str	r2, [r4, #8]
 8004912:	60e3      	str	r3, [r4, #12]
        CanardRxTransfer rx_transfer = {
 8004914:	af0a      	add	r7, sp, #40	; 0x28
 8004916:	2220      	movs	r2, #32
 8004918:	2100      	movs	r1, #0
 800491a:	0038      	movs	r0, r7
 800491c:	f002 fdbd 	bl	800749a <memset>
 8004920:	9a02      	ldr	r2, [sp, #8]
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	920a      	str	r2, [sp, #40]	; 0x28
 8004926:	930b      	str	r3, [sp, #44]	; 0x2c
            .payload_head = frame->data,
 8004928:	1d2b      	adds	r3, r5, #4
        CanardRxTransfer rx_transfer = {
 800492a:	930c      	str	r3, [sp, #48]	; 0x30
            .payload_len = (uint8_t)(frame->data_len - 1U),
 800492c:	7b2b      	ldrb	r3, [r5, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8004932:	82bb      	strh	r3, [r7, #20]
 8004934:	9b08      	ldr	r3, [sp, #32]
 8004936:	82fb      	strh	r3, [r7, #22]
 8004938:	9b06      	ldr	r3, [sp, #24]
 800493a:	763b      	strb	r3, [r7, #24]
 800493c:	9b04      	ldr	r3, [sp, #16]
 800493e:	767b      	strb	r3, [r7, #25]
 8004940:	9b07      	ldr	r3, [sp, #28]
 8004942:	76bb      	strb	r3, [r7, #26]
 8004944:	4643      	mov	r3, r8
 8004946:	76fb      	strb	r3, [r7, #27]
        ins->on_reception(ins, &rx_transfer, destination_node_id);
 8004948:	68b3      	ldr	r3, [r6, #8]
 800494a:	465a      	mov	r2, fp
 800494c:	0039      	movs	r1, r7
 800494e:	0030      	movs	r0, r6
 8004950:	4798      	blx	r3
        prepareForNextTransfer(rx_state);
 8004952:	0020      	movs	r0, r4
 8004954:	f7ff f990 	bl	8003c78 <prepareForNextTransfer>
        return CANARD_OK;
 8004958:	2000      	movs	r0, #0
 800495a:	e7bb      	b.n	80048d4 <canardHandleRxFrame+0x154>
            (tid_timed_out) ||
 800495c:	2300      	movs	r3, #0
 800495e:	e7ca      	b.n	80048f6 <canardHandleRxFrame+0x176>
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8004960:	231f      	movs	r3, #31
 8004962:	464a      	mov	r2, r9
 8004964:	4013      	ands	r3, r2
 8004966:	009a      	lsls	r2, r3, #2
 8004968:	7de3      	ldrb	r3, [r4, #23]
 800496a:	217c      	movs	r1, #124	; 0x7c
 800496c:	438b      	bics	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	75e3      	strb	r3, [r4, #23]
        rx_state->next_toggle = 0;
 8004972:	b2da      	uxtb	r2, r3
 8004974:	237f      	movs	r3, #127	; 0x7f
 8004976:	4013      	ands	r3, r2
 8004978:	75e3      	strb	r3, [r4, #23]
        releaseStatePayload(ins, rx_state);
 800497a:	0021      	movs	r1, r4
 800497c:	0030      	movs	r0, r6
 800497e:	f7ff f967 	bl	8003c50 <releaseStatePayload>
        if (!IS_START_OF_TRANSFER(tail_byte))
 8004982:	4653      	mov	r3, sl
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1b8      	bne.n	80048fa <canardHandleRxFrame+0x17a>
            rx_state->transfer_id++;
 8004988:	7de3      	ldrb	r3, [r4, #23]
 800498a:	065a      	lsls	r2, r3, #25
 800498c:	0ed2      	lsrs	r2, r2, #27
 800498e:	1c51      	adds	r1, r2, #1
 8004990:	221f      	movs	r2, #31
 8004992:	400a      	ands	r2, r1
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	217c      	movs	r1, #124	; 0x7c
 8004998:	438b      	bics	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	75e3      	strb	r3, [r4, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 800499e:	200d      	movs	r0, #13
 80049a0:	4240      	negs	r0, r0
 80049a2:	e797      	b.n	80048d4 <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_WRONG_TOGGLE;
 80049a4:	200e      	movs	r0, #14
 80049a6:	4240      	negs	r0, r0
 80049a8:	e794      	b.n	80048d4 <canardHandleRxFrame+0x154>
    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 80049aa:	7de3      	ldrb	r3, [r4, #23]
 80049ac:	065b      	lsls	r3, r3, #25
 80049ae:	0edb      	lsrs	r3, r3, #27
 80049b0:	9a04      	ldr	r2, [sp, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d000      	beq.n	80049b8 <canardHandleRxFrame+0x238>
 80049b6:	e106      	b.n	8004bc6 <canardHandleRxFrame+0x446>
    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 80049b8:	464b      	mov	r3, r9
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2201      	movs	r2, #1
 80049be:	401a      	ands	r2, r3
 80049c0:	7de3      	ldrb	r3, [r4, #23]
 80049c2:	09db      	lsrs	r3, r3, #7
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d000      	beq.n	80049ca <canardHandleRxFrame+0x24a>
 80049c8:	e100      	b.n	8004bcc <canardHandleRxFrame+0x44c>
    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 80049ca:	4653      	mov	r3, sl
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d037      	beq.n	8004a40 <canardHandleRxFrame+0x2c0>
 80049d0:	464b      	mov	r3, r9
 80049d2:	065b      	lsls	r3, r3, #25
 80049d4:	d434      	bmi.n	8004a40 <canardHandleRxFrame+0x2c0>
        if (frame->data_len <= 3)
 80049d6:	7b2b      	ldrb	r3, [r5, #12]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d800      	bhi.n	80049de <canardHandleRxFrame+0x25e>
 80049dc:	e0f9      	b.n	8004bd2 <canardHandleRxFrame+0x452>
        rx_state->timestamp_usec = timestamp_usec;
 80049de:	9a02      	ldr	r2, [sp, #8]
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	60a2      	str	r2, [r4, #8]
 80049e4:	60e3      	str	r3, [r4, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80049e6:	1daf      	adds	r7, r5, #6
                                                 (uint8_t) (frame->data_len - 3));
 80049e8:	7b2b      	ldrb	r3, [r5, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80049ea:	3b03      	subs	r3, #3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	0030      	movs	r0, r6
 80049f0:	300c      	adds	r0, #12
 80049f2:	003a      	movs	r2, r7
 80049f4:	0021      	movs	r1, r4
 80049f6:	f7ff f836 	bl	8003a66 <bufferBlockPushBytes>
        if (ret < 0)
 80049fa:	2800      	cmp	r0, #0
 80049fc:	db17      	blt.n	8004a2e <canardHandleRxFrame+0x2ae>
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80049fe:	792b      	ldrb	r3, [r5, #4]
 8004a00:	796a      	ldrb	r2, [r5, #5]
 8004a02:	0212      	lsls	r2, r2, #8
 8004a04:	4313      	orrs	r3, r2
 8004a06:	8323      	strh	r3, [r4, #24]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8004a08:	7b2a      	ldrb	r2, [r5, #12]
 8004a0a:	3a03      	subs	r2, #3
 8004a0c:	b2d2      	uxtb	r2, r2
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004a0e:	8aa0      	ldrh	r0, [r4, #20]
 8004a10:	0039      	movs	r1, r7
 8004a12:	f7fe fff4 	bl	80039fe <crcAdd>
 8004a16:	82a0      	strh	r0, [r4, #20]
    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8004a18:	7de1      	ldrb	r1, [r4, #23]
 8004a1a:	43cb      	mvns	r3, r1
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	09db      	lsrs	r3, r3, #7
 8004a20:	01db      	lsls	r3, r3, #7
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	400a      	ands	r2, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	75e3      	strb	r3, [r4, #23]
    return CANARD_OK;
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e752      	b.n	80048d4 <canardHandleRxFrame+0x154>
            releaseStatePayload(ins, rx_state);
 8004a2e:	0021      	movs	r1, r4
 8004a30:	0030      	movs	r0, r6
 8004a32:	f7ff f90d 	bl	8003c50 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8004a36:	0020      	movs	r0, r4
 8004a38:	f7ff f91e 	bl	8003c78 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	e749      	b.n	80048d4 <canardHandleRxFrame+0x154>
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8004a40:	4653      	mov	r3, sl
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <canardHandleRxFrame+0x2cc>
 8004a46:	464b      	mov	r3, r9
 8004a48:	065b      	lsls	r3, r3, #25
 8004a4a:	d50b      	bpl.n	8004a64 <canardHandleRxFrame+0x2e4>
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8004a4c:	7b2b      	ldrb	r3, [r5, #12]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4699      	mov	r9, r3
        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8004a54:	8ae2      	ldrh	r2, [r4, #22]
 8004a56:	0592      	lsls	r2, r2, #22
 8004a58:	0d92      	lsrs	r2, r2, #22
 8004a5a:	2a05      	cmp	r2, #5
 8004a5c:	d82d      	bhi.n	8004aba <canardHandleRxFrame+0x33a>
        uint8_t tail_offset = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	464f      	mov	r7, r9
            for (size_t i = rx_state->payload_len;
 8004a62:	e024      	b.n	8004aae <canardHandleRxFrame+0x32e>
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8004a64:	1d2f      	adds	r7, r5, #4
                                                 (uint8_t) (frame->data_len - 1));
 8004a66:	7b2b      	ldrb	r3, [r5, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	0030      	movs	r0, r6
 8004a6e:	300c      	adds	r0, #12
 8004a70:	003a      	movs	r2, r7
 8004a72:	0021      	movs	r1, r4
 8004a74:	f7fe fff7 	bl	8003a66 <bufferBlockPushBytes>
        if (ret < 0)
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	db08      	blt.n	8004a8e <canardHandleRxFrame+0x30e>
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8004a7c:	7b2a      	ldrb	r2, [r5, #12]
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	b2d2      	uxtb	r2, r2
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004a82:	8aa0      	ldrh	r0, [r4, #20]
 8004a84:	0039      	movs	r1, r7
 8004a86:	f7fe ffba 	bl	80039fe <crcAdd>
 8004a8a:	82a0      	strh	r0, [r4, #20]
    {
 8004a8c:	e7c4      	b.n	8004a18 <canardHandleRxFrame+0x298>
            releaseStatePayload(ins, rx_state);
 8004a8e:	0021      	movs	r1, r4
 8004a90:	0030      	movs	r0, r6
 8004a92:	f7ff f8dd 	bl	8003c50 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8004a96:	0020      	movs	r0, r4
 8004a98:	f7ff f8ee 	bl	8003c78 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 8004a9c:	2003      	movs	r0, #3
 8004a9e:	e719      	b.n	80048d4 <canardHandleRxFrame+0x154>
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8004aa0:	18e9      	adds	r1, r5, r3
 8004aa2:	7908      	ldrb	r0, [r1, #4]
 8004aa4:	18a1      	adds	r1, r4, r2
 8004aa6:	7688      	strb	r0, [r1, #26]
                 i++, tail_offset++)
 8004aa8:	3201      	adds	r2, #1
 8004aaa:	3301      	adds	r3, #1
 8004aac:	b2db      	uxtb	r3, r3
            for (size_t i = rx_state->payload_len;
 8004aae:	2a05      	cmp	r2, #5
 8004ab0:	d838      	bhi.n	8004b24 <canardHandleRxFrame+0x3a4>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8004ab2:	42bb      	cmp	r3, r7
 8004ab4:	d3f4      	bcc.n	8004aa0 <canardHandleRxFrame+0x320>
 8004ab6:	46b9      	mov	r9, r7
 8004ab8:	e035      	b.n	8004b26 <canardHandleRxFrame+0x3a6>
            CanardBufferBlock* block = rx_state->buffer_blocks;
 8004aba:	6863      	ldr	r3, [r4, #4]
            if (block != NULL)          // If there's no middle, that's fine, we'll use only head and tail
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d032      	beq.n	8004b26 <canardHandleRxFrame+0x3a6>
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8004ac0:	2706      	movs	r7, #6
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	e001      	b.n	8004aca <canardHandleRxFrame+0x34a>
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8004ac6:	371c      	adds	r7, #28
                    block = block->next;
 8004ac8:	001a      	movs	r2, r3
                while (block->next != NULL)
 8004aca:	6813      	ldr	r3, [r2, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1fa      	bne.n	8004ac6 <canardHandleRxFrame+0x346>
                CANARD_ASSERT(block != NULL);
 8004ad0:	4692      	mov	sl, r2
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	d00a      	beq.n	8004aec <canardHandleRxFrame+0x36c>
                const size_t offset_within_block = rx_state->payload_len - offset;
 8004ad6:	8ae3      	ldrh	r3, [r4, #22]
 8004ad8:	059b      	lsls	r3, r3, #22
 8004ada:	0d9b      	lsrs	r3, r3, #22
 8004adc:	1bdf      	subs	r7, r3, r7
                CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 8004ade:	2f1b      	cmp	r7, #27
 8004ae0:	d808      	bhi.n	8004af4 <canardHandleRxFrame+0x374>
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	46a4      	mov	ip, r4
 8004ae6:	4654      	mov	r4, sl
 8004ae8:	4648      	mov	r0, r9
 8004aea:	e00e      	b.n	8004b0a <canardHandleRxFrame+0x38a>
                CANARD_ASSERT(block != NULL);
 8004aec:	480c      	ldr	r0, [pc, #48]	; (8004b20 <canardHandleRxFrame+0x3a0>)
 8004aee:	f7fc fc45 	bl	800137c <hardAssertTmp>
 8004af2:	e7f0      	b.n	8004ad6 <canardHandleRxFrame+0x356>
                CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 8004af4:	480a      	ldr	r0, [pc, #40]	; (8004b20 <canardHandleRxFrame+0x3a0>)
 8004af6:	f7fc fc41 	bl	800137c <hardAssertTmp>
 8004afa:	e7f2      	b.n	8004ae2 <canardHandleRxFrame+0x362>
                    block->data[i] = frame->data[tail_offset];
 8004afc:	18ea      	adds	r2, r5, r3
 8004afe:	7911      	ldrb	r1, [r2, #4]
 8004b00:	19e2      	adds	r2, r4, r7
 8004b02:	7111      	strb	r1, [r2, #4]
                     i++, tail_offset++)
 8004b04:	3701      	adds	r7, #1
 8004b06:	3301      	adds	r3, #1
 8004b08:	b2db      	uxtb	r3, r3
                for (size_t i = offset_within_block;
 8004b0a:	2f1b      	cmp	r7, #27
 8004b0c:	d842      	bhi.n	8004b94 <canardHandleRxFrame+0x414>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8004b0e:	4283      	cmp	r3, r0
 8004b10:	d3f4      	bcc.n	8004afc <canardHandleRxFrame+0x37c>
 8004b12:	4664      	mov	r4, ip
 8004b14:	4681      	mov	r9, r0
 8004b16:	e006      	b.n	8004b26 <canardHandleRxFrame+0x3a6>
 8004b18:	0000ffff 	.word	0x0000ffff
 8004b1c:	001e8480 	.word	0x001e8480
 8004b20:	08007b90 	.word	0x08007b90
 8004b24:	46b9      	mov	r9, r7
        CanardRxTransfer rx_transfer = {
 8004b26:	9902      	ldr	r1, [sp, #8]
 8004b28:	9a03      	ldr	r2, [sp, #12]
 8004b2a:	910a      	str	r1, [sp, #40]	; 0x28
 8004b2c:	920b      	str	r2, [sp, #44]	; 0x2c
            .payload_head = rx_state->buffer_head,
 8004b2e:	0022      	movs	r2, r4
 8004b30:	321a      	adds	r2, #26
        CanardRxTransfer rx_transfer = {
 8004b32:	920c      	str	r2, [sp, #48]	; 0x30
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	920d      	str	r2, [sp, #52]	; 0x34
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8004b38:	454b      	cmp	r3, r9
 8004b3a:	d22e      	bcs.n	8004b9a <canardHandleRxFrame+0x41a>
 8004b3c:	18eb      	adds	r3, r5, r3
 8004b3e:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8004b40:	aa0a      	add	r2, sp, #40	; 0x28
 8004b42:	930e      	str	r3, [sp, #56]	; 0x38
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8004b44:	8ae3      	ldrh	r3, [r4, #22]
 8004b46:	059b      	lsls	r3, r3, #22
 8004b48:	0d9b      	lsrs	r3, r3, #22
 8004b4a:	444b      	add	r3, r9
        CanardRxTransfer rx_transfer = {
 8004b4c:	8293      	strh	r3, [r2, #20]
 8004b4e:	9b08      	ldr	r3, [sp, #32]
 8004b50:	82d3      	strh	r3, [r2, #22]
 8004b52:	9b06      	ldr	r3, [sp, #24]
 8004b54:	7613      	strb	r3, [r2, #24]
 8004b56:	9b04      	ldr	r3, [sp, #16]
 8004b58:	7653      	strb	r3, [r2, #25]
 8004b5a:	9b07      	ldr	r3, [sp, #28]
 8004b5c:	7693      	strb	r3, [r2, #26]
 8004b5e:	4643      	mov	r3, r8
 8004b60:	76d3      	strb	r3, [r2, #27]
        rx_state->buffer_blocks = NULL;     // Block list ownership has been transferred to rx_transfer!
 8004b62:	2300      	movs	r3, #0
 8004b64:	6063      	str	r3, [r4, #4]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8004b66:	1d29      	adds	r1, r5, #4
 8004b68:	7b2a      	ldrb	r2, [r5, #12]
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	8aa0      	ldrh	r0, [r4, #20]
 8004b6e:	f7fe ff46 	bl	80039fe <crcAdd>
 8004b72:	82a0      	strh	r0, [r4, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8004b74:	8b23      	ldrh	r3, [r4, #24]
 8004b76:	4298      	cmp	r0, r3
 8004b78:	d011      	beq.n	8004b9e <canardHandleRxFrame+0x41e>
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8004b7a:	a90a      	add	r1, sp, #40	; 0x28
 8004b7c:	0030      	movs	r0, r6
 8004b7e:	f7ff fdeb 	bl	8004758 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 8004b82:	0020      	movs	r0, r4
 8004b84:	f7ff f878 	bl	8003c78 <prepareForNextTransfer>
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8004b88:	8aa2      	ldrh	r2, [r4, #20]
 8004b8a:	8b23      	ldrh	r3, [r4, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d00c      	beq.n	8004baa <canardHandleRxFrame+0x42a>
            return CANARD_ERROR_RX_BAD_CRC;
 8004b90:	2011      	movs	r0, #17
 8004b92:	e69f      	b.n	80048d4 <canardHandleRxFrame+0x154>
 8004b94:	4664      	mov	r4, ip
 8004b96:	4681      	mov	r9, r0
 8004b98:	e7c5      	b.n	8004b26 <canardHandleRxFrame+0x3a6>
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e7d0      	b.n	8004b40 <canardHandleRxFrame+0x3c0>
            ins->on_reception(ins, &rx_transfer, destination_node_id);
 8004b9e:	465a      	mov	r2, fp
 8004ba0:	a90a      	add	r1, sp, #40	; 0x28
 8004ba2:	0030      	movs	r0, r6
 8004ba4:	68b3      	ldr	r3, [r6, #8]
 8004ba6:	4798      	blx	r3
 8004ba8:	e7e7      	b.n	8004b7a <canardHandleRxFrame+0x3fa>
            return CANARD_OK;
 8004baa:	2000      	movs	r0, #0
 8004bac:	e692      	b.n	80048d4 <canardHandleRxFrame+0x154>
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8004bae:	200a      	movs	r0, #10
 8004bb0:	4240      	negs	r0, r0
 8004bb2:	e68f      	b.n	80048d4 <canardHandleRxFrame+0x154>
 8004bb4:	200a      	movs	r0, #10
 8004bb6:	4240      	negs	r0, r0
 8004bb8:	e68c      	b.n	80048d4 <canardHandleRxFrame+0x154>
 8004bba:	200a      	movs	r0, #10
 8004bbc:	4240      	negs	r0, r0
 8004bbe:	e689      	b.n	80048d4 <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8004bc0:	200b      	movs	r0, #11
 8004bc2:	4240      	negs	r0, r0
 8004bc4:	e686      	b.n	80048d4 <canardHandleRxFrame+0x154>
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8004bc6:	200f      	movs	r0, #15
 8004bc8:	4240      	negs	r0, r0
 8004bca:	e683      	b.n	80048d4 <canardHandleRxFrame+0x154>
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8004bcc:	200e      	movs	r0, #14
 8004bce:	4240      	negs	r0, r0
 8004bd0:	e680      	b.n	80048d4 <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8004bd2:	2010      	movs	r0, #16
 8004bd4:	4240      	negs	r0, r0
 8004bd6:	e67d      	b.n	80048d4 <canardHandleRxFrame+0x154>

08004bd8 <isFramePriorityHigher>:

static bool g_abort_tx_on_error = false;
static bool g_abort_tx_on_nack = false;

static bool isFramePriorityHigher(uint32_t a, uint32_t b)
{
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	0003      	movs	r3, r0
    const uint32_t clean_a = a & CANARD_CAN_EXT_ID_MASK;
 8004bdc:	00c5      	lsls	r5, r0, #3
 8004bde:	08ed      	lsrs	r5, r5, #3
    const uint32_t clean_b = b & CANARD_CAN_EXT_ID_MASK;
 8004be0:	00ca      	lsls	r2, r1, #3
 8004be2:	08d2      	lsrs	r2, r2, #3

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext_a = (a & CANARD_CAN_FRAME_EFF) != 0;
 8004be4:	0fc4      	lsrs	r4, r0, #31
    const bool ext_b = (b & CANARD_CAN_FRAME_EFF) != 0;
 8004be6:	000e      	movs	r6, r1
 8004be8:	0fc8      	lsrs	r0, r1, #31
    if (ext_a != ext_b)
 8004bea:	4284      	cmp	r4, r0
 8004bec:	d00d      	beq.n	8004c0a <isFramePriorityHigher+0x32>
    {
        const uint32_t arb11_a = ext_a ? (clean_a >> 18U) : clean_a;
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db07      	blt.n	8004c02 <isFramePriorityHigher+0x2a>
        const uint32_t arb11_b = ext_b ? (clean_b >> 18U) : clean_b;
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	db07      	blt.n	8004c06 <isFramePriorityHigher+0x2e>
        if (arb11_a != arb11_b)
 8004bf6:	4295      	cmp	r5, r2
 8004bf8:	d002      	beq.n	8004c00 <isFramePriorityHigher+0x28>
        {
            return arb11_a < arb11_b;
 8004bfa:	4295      	cmp	r5, r2
 8004bfc:	4192      	sbcs	r2, r2
 8004bfe:	4250      	negs	r0, r2

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_a < clean_b;
}
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t arb11_a = ext_a ? (clean_a >> 18U) : clean_a;
 8004c02:	0cad      	lsrs	r5, r5, #18
 8004c04:	e7f5      	b.n	8004bf2 <isFramePriorityHigher+0x1a>
        const uint32_t arb11_b = ext_b ? (clean_b >> 18U) : clean_b;
 8004c06:	0c92      	lsrs	r2, r2, #18
 8004c08:	e7f5      	b.n	8004bf6 <isFramePriorityHigher+0x1e>
    const bool rtr_a = (a & CANARD_CAN_FRAME_RTR) != 0;
 8004c0a:	2080      	movs	r0, #128	; 0x80
 8004c0c:	05c0      	lsls	r0, r0, #23
 8004c0e:	4003      	ands	r3, r0
 8004c10:	1e5c      	subs	r4, r3, #1
 8004c12:	41a3      	sbcs	r3, r4
 8004c14:	b2db      	uxtb	r3, r3
    const bool rtr_b = (b & CANARD_CAN_FRAME_RTR) != 0;
 8004c16:	4001      	ands	r1, r0
 8004c18:	1e48      	subs	r0, r1, #1
 8004c1a:	4181      	sbcs	r1, r0
 8004c1c:	b2c8      	uxtb	r0, r1
    if ((clean_a == clean_b) && (rtr_a != rtr_b))
 8004c1e:	4295      	cmp	r5, r2
 8004c20:	d003      	beq.n	8004c2a <isFramePriorityHigher+0x52>
    return clean_a < clean_b;
 8004c22:	4295      	cmp	r5, r2
 8004c24:	4192      	sbcs	r2, r2
 8004c26:	4250      	negs	r0, r2
 8004c28:	e7ea      	b.n	8004c00 <isFramePriorityHigher+0x28>
    if ((clean_a == clean_b) && (rtr_a != rtr_b))
 8004c2a:	4283      	cmp	r3, r0
 8004c2c:	d1e8      	bne.n	8004c00 <isFramePriorityHigher+0x28>
 8004c2e:	e7f8      	b.n	8004c22 <isFramePriorityHigher+0x4a>

08004c30 <convertFrameIDCanardToRegister>:

/// Converts libcanard ID value into the bxCAN TX ID register format.
static uint32_t convertFrameIDCanardToRegister(const uint32_t id)
{
 8004c30:	1e03      	subs	r3, r0, #0
    uint32_t out = 0;

    if (id & CANARD_CAN_FRAME_EFF)
 8004c32:	db05      	blt.n	8004c40 <convertFrameIDCanardToRegister+0x10>
    {
        out = ((id & CANARD_CAN_EXT_ID_MASK) << 3U) | CANARD_STM32_CAN_TIR_IDE;
    }
    else
    {
        out = ((id & CANARD_CAN_STD_ID_MASK) << 21U);
 8004c34:	0540      	lsls	r0, r0, #21
    }

    if (id & CANARD_CAN_FRAME_RTR)
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	d501      	bpl.n	8004c3e <convertFrameIDCanardToRegister+0xe>
    {
        out |= CANARD_STM32_CAN_TIR_RTR;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	4318      	orrs	r0, r3
    }

    return out;
}
 8004c3e:	4770      	bx	lr
        out = ((id & CANARD_CAN_EXT_ID_MASK) << 3U) | CANARD_STM32_CAN_TIR_IDE;
 8004c40:	00c0      	lsls	r0, r0, #3
 8004c42:	2204      	movs	r2, #4
 8004c44:	4310      	orrs	r0, r2
 8004c46:	e7f6      	b.n	8004c36 <convertFrameIDCanardToRegister+0x6>

08004c48 <convertFrameIDRegisterToCanard>:

/// Converts bxCAN TX/RX (sic! both RX/TX are supported) ID register value into the libcanard ID format.
static uint32_t convertFrameIDRegisterToCanard(const uint32_t id)
{
 8004c48:	0003      	movs	r3, r0
# error "RIR bits do not match TIR bits, TIR --> libcanard conversion is not possible"
#endif

    uint32_t out = 0;

    if ((id & CANARD_STM32_CAN_RIR_IDE) == 0)
 8004c4a:	0742      	lsls	r2, r0, #29
 8004c4c:	d406      	bmi.n	8004c5c <convertFrameIDRegisterToCanard+0x14>
    {
        out = (CANARD_CAN_STD_ID_MASK & (id >> 21U));
 8004c4e:	0d40      	lsrs	r0, r0, #21
    else
    {
        out = (CANARD_CAN_EXT_ID_MASK & (id >> 3U)) | CANARD_CAN_FRAME_EFF;
    }

    if ((id & CANARD_STM32_CAN_RIR_RTR) != 0)
 8004c50:	079b      	lsls	r3, r3, #30
 8004c52:	d502      	bpl.n	8004c5a <convertFrameIDRegisterToCanard+0x12>
    {
        out |= CANARD_CAN_FRAME_RTR;
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	05db      	lsls	r3, r3, #23
 8004c58:	4318      	orrs	r0, r3
    }

    return out;
}
 8004c5a:	4770      	bx	lr
        out = (CANARD_CAN_EXT_ID_MASK & (id >> 3U)) | CANARD_CAN_FRAME_EFF;
 8004c5c:	08c2      	lsrs	r2, r0, #3
 8004c5e:	2080      	movs	r0, #128	; 0x80
 8004c60:	0600      	lsls	r0, r0, #24
 8004c62:	4310      	orrs	r0, r2
 8004c64:	e7f4      	b.n	8004c50 <convertFrameIDRegisterToCanard+0x8>
	...

08004c68 <processErrorStatus>:
    return false;
}


static void processErrorStatus(void)
{
 8004c68:	b530      	push	{r4, r5, lr}
    /*
     * Aborting TX transmissions if abort on error was requested
     * Updating error counter
     */
    const uint8_t lec = (uint8_t)((BXCAN->ESR & CANARD_STM32_CAN_ESR_LEC_MASK) >> CANARD_STM32_CAN_ESR_LEC_SHIFT);
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <processErrorStatus+0x50>)
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	2207      	movs	r2, #7
 8004c72:	0018      	movs	r0, r3
 8004c74:	4010      	ands	r0, r2
    // 110: CRC Error - rx - invalid data
    // 111: Set by software
    
    
    
    if (lec != 0)
 8004c76:	4213      	tst	r3, r2
 8004c78:	d01c      	beq.n	8004cb4 <processErrorStatus+0x4c>
    {
        BXCAN->ESR = 0;                 // This action does only affect the LEC bits, other bits are read only!
 8004c7a:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <processErrorStatus+0x50>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
        g_stats.error_count++;
 8004c80:	490e      	ldr	r1, [pc, #56]	; (8004cbc <processErrorStatus+0x54>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	2300      	movs	r3, #0
 8004c86:	688c      	ldr	r4, [r1, #8]
 8004c88:	68cd      	ldr	r5, [r1, #12]
 8004c8a:	1912      	adds	r2, r2, r4
 8004c8c:	416b      	adcs	r3, r5
 8004c8e:	608a      	str	r2, [r1, #8]
 8004c90:	60cb      	str	r3, [r1, #12]

        // Abort pending transmissions if auto abort on error is enabled, or if we're in bus off mode
        if ((g_abort_tx_on_error) ||
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <processErrorStatus+0x58>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <processErrorStatus+0x46>
            (g_abort_tx_on_nack && (lec == 3)) || // (lec == 3) => AckError // TODO: Potentially also abort when (lec == 5) => Bit0Error (which can occur during bus-off recovery)?
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <processErrorStatus+0x5c>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
        if ((g_abort_tx_on_error) ||
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <processErrorStatus+0x3e>
            (g_abort_tx_on_nack && (lec == 3)) || // (lec == 3) => AckError // TODO: Potentially also abort when (lec == 5) => Bit0Error (which can occur during bus-off recovery)?
 8004ca2:	2803      	cmp	r0, #3
 8004ca4:	d003      	beq.n	8004cae <processErrorStatus+0x46>
            (BXCAN->ESR & CANARD_STM32_CAN_ESR_BOFF))
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <processErrorStatus+0x50>)
 8004ca8:	699b      	ldr	r3, [r3, #24]
            (g_abort_tx_on_nack && (lec == 3)) || // (lec == 3) => AckError // TODO: Potentially also abort when (lec == 5) => Bit0Error (which can occur during bus-off recovery)?
 8004caa:	075b      	lsls	r3, r3, #29
 8004cac:	d502      	bpl.n	8004cb4 <processErrorStatus+0x4c>
        {
            BXCAN->TSR = CANARD_STM32_CAN_TSR_ABRQ0 | CANARD_STM32_CAN_TSR_ABRQ1 | CANARD_STM32_CAN_TSR_ABRQ2;
 8004cae:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <processErrorStatus+0x50>)
 8004cb0:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <processErrorStatus+0x60>)
 8004cb2:	609a      	str	r2, [r3, #8]
//       g_stats.error_count++;
//   }
//   if (BXCAN->ESR & CANARD_STM32_CAN_ESR_REC_MASK) {
//       g_stats.rx_overflow_count++;
//   }
}
 8004cb4:	bd30      	pop	{r4, r5, pc}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	40006400 	.word	0x40006400
 8004cbc:	20000bc0 	.word	0x20000bc0
 8004cc0:	20000bb9 	.word	0x20000bb9
 8004cc4:	20000bba 	.word	0x20000bba
 8004cc8:	00808080 	.word	0x00808080

08004ccc <waitMSRINAKBitStateChange>:
{
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	0006      	movs	r6, r0
 8004cd0:	000d      	movs	r5, r1
    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 8004cd2:	2400      	movs	r4, #0
 8004cd4:	23fa      	movs	r3, #250	; 0xfa
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d20b      	bcs.n	8004cf4 <waitMSRINAKBitStateChange+0x28>
        const bool state = (bxcan->MSR & CANARD_STM32_CAN_MSR_INAK) != 0;
 8004cdc:	6872      	ldr	r2, [r6, #4]
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4013      	ands	r3, r2
        if (state == target_state)
 8004ce2:	42ab      	cmp	r3, r5
 8004ce4:	d008      	beq.n	8004cf8 <waitMSRINAKBitStateChange+0x2c>
        usleep(1000);           // TODO: This function may be missing on some platforms
 8004ce6:	20fa      	movs	r0, #250	; 0xfa
 8004ce8:	0080      	lsls	r0, r0, #2
 8004cea:	f7fd fca7 	bl	800263c <usleep>
    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 8004cee:	3401      	adds	r4, #1
 8004cf0:	b2a4      	uxth	r4, r4
 8004cf2:	e7ef      	b.n	8004cd4 <waitMSRINAKBitStateChange+0x8>
    return false;
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	e000      	b.n	8004cfa <waitMSRINAKBitStateChange+0x2e>
            return true;
 8004cf8:	2001      	movs	r0, #1
}
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}

08004cfc <canardSTM32Init>:


int16_t canardSTM32Init(const CanardSTM32CANTimings* const timings,
                        const CanardSTM32IfaceMode iface_mode)
{
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	0005      	movs	r5, r0
 8004d00:	000c      	movs	r4, r1
    /*
     * Paranoia time.
     */
    if ((iface_mode != CanardSTM32IfaceModeNormal) &&
 8004d02:	2903      	cmp	r1, #3
 8004d04:	d900      	bls.n	8004d08 <canardSTM32Init+0xc>
 8004d06:	e0ae      	b.n	8004e66 <canardSTM32Init+0x16a>
        (iface_mode != CanardSTM32IfaceModeAutomaticTxAbortOnNack))
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
    }

    if ((timings == NULL) ||
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d100      	bne.n	8004d0e <canardSTM32Init+0x12>
 8004d0c:	e0ae      	b.n	8004e6c <canardSTM32Init+0x170>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8004d0e:	8803      	ldrh	r3, [r0, #0]
    if ((timings == NULL) ||
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d100      	bne.n	8004d16 <canardSTM32Init+0x1a>
 8004d14:	e0ad      	b.n	8004e72 <canardSTM32Init+0x176>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8004d16:	2280      	movs	r2, #128	; 0x80
 8004d18:	00d2      	lsls	r2, r2, #3
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d900      	bls.n	8004d20 <canardSTM32Init+0x24>
 8004d1e:	e0ab      	b.n	8004e78 <canardSTM32Init+0x17c>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8004d20:	7903      	ldrb	r3, [r0, #4]
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d100      	bne.n	8004d28 <canardSTM32Init+0x2c>
 8004d26:	e0aa      	b.n	8004e7e <canardSTM32Init+0x182>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d900      	bls.n	8004d2e <canardSTM32Init+0x32>
 8004d2c:	e0aa      	b.n	8004e84 <canardSTM32Init+0x188>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8004d2e:	7883      	ldrb	r3, [r0, #2]
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d100      	bne.n	8004d36 <canardSTM32Init+0x3a>
 8004d34:	e0a9      	b.n	8004e8a <canardSTM32Init+0x18e>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d900      	bls.n	8004d3c <canardSTM32Init+0x40>
 8004d3a:	e0a9      	b.n	8004e90 <canardSTM32Init+0x194>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 8004d3c:	78c3      	ldrb	r3, [r0, #3]
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d100      	bne.n	8004d44 <canardSTM32Init+0x48>
 8004d42:	e0a8      	b.n	8004e96 <canardSTM32Init+0x19a>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d900      	bls.n	8004d4a <canardSTM32Init+0x4e>
 8004d48:	e0a8      	b.n	8004e9c <canardSTM32Init+0x1a0>
    }

    /*
     * Initial setup
     */
    memset(&g_stats, 0, sizeof(g_stats));
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4855      	ldr	r0, [pc, #340]	; (8004ea4 <canardSTM32Init+0x1a8>)
 8004d50:	f002 fba3 	bl	800749a <memset>

    g_abort_tx_on_error = (iface_mode == CanardSTM32IfaceModeAutomaticTxAbortOnError);
 8004d54:	1ea3      	subs	r3, r4, #2
 8004d56:	425a      	negs	r2, r3
 8004d58:	4153      	adcs	r3, r2
 8004d5a:	4a53      	ldr	r2, [pc, #332]	; (8004ea8 <canardSTM32Init+0x1ac>)
 8004d5c:	7013      	strb	r3, [r2, #0]
    g_abort_tx_on_nack = (iface_mode == CanardSTM32IfaceModeAutomaticTxAbortOnNack);
 8004d5e:	1ee3      	subs	r3, r4, #3
 8004d60:	425a      	negs	r2, r3
 8004d62:	4153      	adcs	r3, r2
 8004d64:	4a51      	ldr	r2, [pc, #324]	; (8004eac <canardSTM32Init+0x1b0>)
 8004d66:	7013      	strb	r3, [r2, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
    }
    // CAN1 will be left in the initialization mode forever, in this mode it does not affect the bus at all.
#endif

    BXCAN->IER = 0;                                             // We need no interrupts
 8004d68:	4851      	ldr	r0, [pc, #324]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6143      	str	r3, [r0, #20]
    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_SLEEP;                  // Exit sleep mode
 8004d6e:	6803      	ldr	r3, [r0, #0]
 8004d70:	2202      	movs	r2, #2
 8004d72:	4393      	bics	r3, r2
 8004d74:	6003      	str	r3, [r0, #0]
    BXCAN->MCR |= CANARD_STM32_CAN_MCR_INRQ;                    // Request init
 8004d76:	6803      	ldr	r3, [r0, #0]
 8004d78:	3a01      	subs	r2, #1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	6003      	str	r3, [r0, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, true))                // Wait for synchronization
 8004d7e:	2101      	movs	r1, #1
 8004d80:	f7ff ffa4 	bl	8004ccc <waitMSRINAKBitStateChange>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d057      	beq.n	8004e38 <canardSTM32Init+0x13c>
    }

    /*
     * Hardware initialization (the hardware has already confirmed initialization mode, see above)
     */
    BXCAN->MCR = CANARD_STM32_CAN_MCR_ABOM | CANARD_STM32_CAN_MCR_AWUM | CANARD_STM32_CAN_MCR_INRQ;  // RM page 648
 8004d88:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004d8a:	2261      	movs	r2, #97	; 0x61
 8004d8c:	601a      	str	r2, [r3, #0]

    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8004d8e:	792b      	ldrb	r3, [r5, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	061b      	lsls	r3, r3, #24
 8004d94:	22c0      	movs	r2, #192	; 0xc0
 8004d96:	0492      	lsls	r2, r2, #18
 8004d98:	4013      	ands	r3, r2
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 8004d9a:	78aa      	ldrb	r2, [r5, #2]
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	0412      	lsls	r2, r2, #16
 8004da0:	21f0      	movs	r1, #240	; 0xf0
 8004da2:	0309      	lsls	r1, r1, #12
 8004da4:	400a      	ands	r2, r1
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8004da6:	4313      	orrs	r3, r2
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 8004da8:	78ea      	ldrb	r2, [r5, #3]
 8004daa:	3a01      	subs	r2, #1
 8004dac:	0512      	lsls	r2, r2, #20
 8004dae:	21e0      	movs	r1, #224	; 0xe0
 8004db0:	03c9      	lsls	r1, r1, #15
 8004db2:	400a      	ands	r2, r1
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 8004db4:	4313      	orrs	r3, r2
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 8004db6:	882a      	ldrh	r2, [r5, #0]
 8004db8:	3a01      	subs	r2, #1
 8004dba:	0592      	lsls	r2, r2, #22
 8004dbc:	0d92      	lsrs	r2, r2, #22
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 8004dbe:	4313      	orrs	r3, r2
                 ((iface_mode == CanardSTM32IfaceModeSilent) ? CANARD_STM32_CAN_BTR_SILM : 0);
 8004dc0:	2c01      	cmp	r4, #1
 8004dc2:	d03f      	beq.n	8004e44 <canardSTM32Init+0x148>
 8004dc4:	2200      	movs	r2, #0
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 8004dc6:	4313      	orrs	r3, r2
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8004dc8:	4a39      	ldr	r2, [pc, #228]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004dca:	61d3      	str	r3, [r2, #28]

    CANARD_ASSERT(0 == BXCAN->IER);             // Making sure the iterrupts are indeed disabled
 8004dcc:	6953      	ldr	r3, [r2, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d13b      	bne.n	8004e4a <canardSTM32Init+0x14e>

    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_INRQ;   // Leave init mode
 8004dd2:	4837      	ldr	r0, [pc, #220]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004dd4:	6803      	ldr	r3, [r0, #0]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4393      	bics	r3, r2
 8004dda:	6003      	str	r3, [r0, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, false))
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f7ff ff75 	bl	8004ccc <waitMSRINAKBitStateChange>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d035      	beq.n	8004e52 <canardSTM32Init+0x156>
     * CAN2 filters are offset by 14.
     * We use 14 filters at most always which simplifies the code and ensures compatibility with all
     * MCU within the STM32 family.
     */
    {
        uint32_t fmr = CANARD_STM32_CAN1->FMR & 0xFFFFC0F1U;
 8004de6:	4a32      	ldr	r2, [pc, #200]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	58d1      	ldr	r1, [r2, r3]
 8004dee:	4831      	ldr	r0, [pc, #196]	; (8004eb4 <canardSTM32Init+0x1b8>)
 8004df0:	4008      	ands	r0, r1
        fmr |= CANARD_STM32_NUM_ACCEPTANCE_FILTERS << 8U;                // CAN2 start bank = 14 (if CAN2 is present)
        CANARD_STM32_CAN1->FMR = fmr | CANARD_STM32_CAN_FMR_FINIT;
 8004df2:	4931      	ldr	r1, [pc, #196]	; (8004eb8 <canardSTM32Init+0x1bc>)
 8004df4:	4301      	orrs	r1, r0
 8004df6:	50d1      	str	r1, [r2, r3]
    }

    CANARD_ASSERT(((CANARD_STM32_CAN1->FMR >> 8U) & 0x3FU) == CANARD_STM32_NUM_ACCEPTANCE_FILTERS);
 8004df8:	58d2      	ldr	r2, [r2, r3]
 8004dfa:	0a12      	lsrs	r2, r2, #8
 8004dfc:	3bc2      	subs	r3, #194	; 0xc2
 8004dfe:	3bff      	subs	r3, #255	; 0xff
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b0e      	cmp	r3, #14
 8004e04:	d12b      	bne.n	8004e5e <canardSTM32Init+0x162>

    CANARD_STM32_CAN1->FM1R = 0;                                        // Indentifier Mask mode
 8004e06:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2181      	movs	r1, #129	; 0x81
 8004e0c:	0089      	lsls	r1, r1, #2
 8004e0e:	505a      	str	r2, [r3, r1]
    CANARD_STM32_CAN1->FS1R = 0x0FFFFFFF;                               // All 32-bit
 8004e10:	3108      	adds	r1, #8
 8004e12:	482a      	ldr	r0, [pc, #168]	; (8004ebc <canardSTM32Init+0x1c0>)
 8004e14:	5058      	str	r0, [r3, r1]

    // Filters are alternating between FIFO0 and FIFO1 in order to equalize the load.
    // This will cause occasional priority inversion and frame reordering on reception,
    // but that is acceptable for UAVCAN, and a majority of other protocols will tolerate
    // this too, since there will be no reordering within the same CAN ID.
    CANARD_STM32_CAN1->FFA1R = 0x0AAAAAAA;
 8004e16:	3108      	adds	r1, #8
 8004e18:	4829      	ldr	r0, [pc, #164]	; (8004ec0 <canardSTM32Init+0x1c4>)
 8004e1a:	5058      	str	r0, [r3, r1]
#if CANARD_STM32_USE_CAN2
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR1 = 0;
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR2 = 0;
    CANARD_STM32_CAN1->FA1R = (1 << CANARD_STM32_NUM_ACCEPTANCE_FILTERS);  // One filter enabled
#else
    CANARD_STM32_CAN1->FilterRegister[0].FR1 = 0;
 8004e1c:	312c      	adds	r1, #44	; 0x2c
 8004e1e:	505a      	str	r2, [r3, r1]
    CANARD_STM32_CAN1->FilterRegister[0].FR2 = 0;
 8004e20:	3104      	adds	r1, #4
 8004e22:	505a      	str	r2, [r3, r1]
    CANARD_STM32_CAN1->FA1R = 1;                                        // One filter enabled
 8004e24:	2001      	movs	r0, #1
 8004e26:	2287      	movs	r2, #135	; 0x87
 8004e28:	0092      	lsls	r2, r2, #2
 8004e2a:	5098      	str	r0, [r3, r2]
#endif

    CANARD_STM32_CAN1->FMR &= ~CANARD_STM32_CAN_FMR_FINIT;              // Leave initialization mode
 8004e2c:	3944      	subs	r1, #68	; 0x44
 8004e2e:	585a      	ldr	r2, [r3, r1]
 8004e30:	4382      	bics	r2, r0
 8004e32:	505a      	str	r2, [r3, r1]

    return 0;
 8004e34:	2000      	movs	r0, #0
}
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	0212      	lsls	r2, r2, #8
 8004e3e:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
 8004e40:	4820      	ldr	r0, [pc, #128]	; (8004ec4 <canardSTM32Init+0x1c8>)
 8004e42:	e7f8      	b.n	8004e36 <canardSTM32Init+0x13a>
                 ((iface_mode == CanardSTM32IfaceModeSilent) ? CANARD_STM32_CAN_BTR_SILM : 0);
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	0612      	lsls	r2, r2, #24
 8004e48:	e7bd      	b.n	8004dc6 <canardSTM32Init+0xca>
    CANARD_ASSERT(0 == BXCAN->IER);             // Making sure the iterrupts are indeed disabled
 8004e4a:	481f      	ldr	r0, [pc, #124]	; (8004ec8 <canardSTM32Init+0x1cc>)
 8004e4c:	f7fc fa96 	bl	800137c <hardAssertTmp>
 8004e50:	e7bf      	b.n	8004dd2 <canardSTM32Init+0xd6>
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <canardSTM32Init+0x1b4>)
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	0212      	lsls	r2, r2, #8
 8004e58:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_CLEARED;
 8004e5a:	481c      	ldr	r0, [pc, #112]	; (8004ecc <canardSTM32Init+0x1d0>)
 8004e5c:	e7eb      	b.n	8004e36 <canardSTM32Init+0x13a>
    CANARD_ASSERT(((CANARD_STM32_CAN1->FMR >> 8U) & 0x3FU) == CANARD_STM32_NUM_ACCEPTANCE_FILTERS);
 8004e5e:	481a      	ldr	r0, [pc, #104]	; (8004ec8 <canardSTM32Init+0x1cc>)
 8004e60:	f7fc fa8c 	bl	800137c <hardAssertTmp>
 8004e64:	e7cf      	b.n	8004e06 <canardSTM32Init+0x10a>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004e66:	2002      	movs	r0, #2
 8004e68:	4240      	negs	r0, r0
 8004e6a:	e7e4      	b.n	8004e36 <canardSTM32Init+0x13a>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	4240      	negs	r0, r0
 8004e70:	e7e1      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e72:	2002      	movs	r0, #2
 8004e74:	4240      	negs	r0, r0
 8004e76:	e7de      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e78:	2002      	movs	r0, #2
 8004e7a:	4240      	negs	r0, r0
 8004e7c:	e7db      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e7e:	2002      	movs	r0, #2
 8004e80:	4240      	negs	r0, r0
 8004e82:	e7d8      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e84:	2002      	movs	r0, #2
 8004e86:	4240      	negs	r0, r0
 8004e88:	e7d5      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e8a:	2002      	movs	r0, #2
 8004e8c:	4240      	negs	r0, r0
 8004e8e:	e7d2      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e90:	2002      	movs	r0, #2
 8004e92:	4240      	negs	r0, r0
 8004e94:	e7cf      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e96:	2002      	movs	r0, #2
 8004e98:	4240      	negs	r0, r0
 8004e9a:	e7cc      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004e9c:	2002      	movs	r0, #2
 8004e9e:	4240      	negs	r0, r0
 8004ea0:	e7c9      	b.n	8004e36 <canardSTM32Init+0x13a>
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20000bc0 	.word	0x20000bc0
 8004ea8:	20000bb9 	.word	0x20000bb9
 8004eac:	20000bba 	.word	0x20000bba
 8004eb0:	40006400 	.word	0x40006400
 8004eb4:	ffffc0f1 	.word	0xffffc0f1
 8004eb8:	00000e01 	.word	0x00000e01
 8004ebc:	0fffffff 	.word	0x0fffffff
 8004ec0:	0aaaaaaa 	.word	0x0aaaaaaa
 8004ec4:	fffffc17 	.word	0xfffffc17
 8004ec8:	08007b90 	.word	0x08007b90
 8004ecc:	fffffc16 	.word	0xfffffc16

08004ed0 <canardSTM32Transmit>:
    return 0;
}


int16_t canardSTM32Transmit(const CanardCANFrame* const frame)
{
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	1e05      	subs	r5, r0, #0
    if (frame == NULL)
 8004ed6:	d069      	beq.n	8004fac <canardSTM32Transmit+0xdc>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
    }

    if (frame->id & CANARD_CAN_FRAME_ERR)
 8004ed8:	6803      	ldr	r3, [r0, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	d469      	bmi.n	8004fb2 <canardSTM32Transmit+0xe2>
    }

    /*
     * Handling error status might free up some slots through aborts
     */
    processErrorStatus();
 8004ede:	f7ff fec3 	bl	8004c68 <processErrorStatus>
     */
    uint8_t tx_mailbox = 0xFF;

    static const uint32_t AllTME = CANARD_STM32_CAN_TSR_TME0 | CANARD_STM32_CAN_TSR_TME1 | CANARD_STM32_CAN_TSR_TME2;

    if ((BXCAN->TSR & AllTME) != AllTME)                // At least one TX mailbox is used, detailed check is needed
 8004ee2:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <canardSTM32Transmit+0xe8>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	22e0      	movs	r2, #224	; 0xe0
 8004ee8:	0552      	lsls	r2, r2, #21
 8004eea:	4013      	ands	r3, r2
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d037      	beq.n	8004f60 <canardSTM32Transmit+0x90>
    {
        const bool tme[3] =
        {
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME0) != 0,
 8004ef0:	4931      	ldr	r1, [pc, #196]	; (8004fb8 <canardSTM32Transmit+0xe8>)
 8004ef2:	688b      	ldr	r3, [r1, #8]
 8004ef4:	2280      	movs	r2, #128	; 0x80
 8004ef6:	04d2      	lsls	r2, r2, #19
 8004ef8:	4013      	ands	r3, r2
 8004efa:	1e5a      	subs	r2, r3, #1
 8004efc:	4193      	sbcs	r3, r2
        const bool tme[3] =
 8004efe:	aa01      	add	r2, sp, #4
 8004f00:	7013      	strb	r3, [r2, #0]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME1) != 0,
 8004f02:	688b      	ldr	r3, [r1, #8]
 8004f04:	2080      	movs	r0, #128	; 0x80
 8004f06:	0500      	lsls	r0, r0, #20
 8004f08:	4003      	ands	r3, r0
 8004f0a:	1e58      	subs	r0, r3, #1
 8004f0c:	4183      	sbcs	r3, r0
        const bool tme[3] =
 8004f0e:	7053      	strb	r3, [r2, #1]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME2) != 0
 8004f10:	688b      	ldr	r3, [r1, #8]
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	0549      	lsls	r1, r1, #21
 8004f16:	400b      	ands	r3, r1
 8004f18:	1e59      	subs	r1, r3, #1
 8004f1a:	418b      	sbcs	r3, r1
        const bool tme[3] =
 8004f1c:	7093      	strb	r3, [r2, #2]
        };

        for (uint8_t i = 0; i < 3; i++)
 8004f1e:	2400      	movs	r4, #0
    uint8_t tx_mailbox = 0xFF;
 8004f20:	26ff      	movs	r6, #255	; 0xff
        for (uint8_t i = 0; i < 3; i++)
 8004f22:	e002      	b.n	8004f2a <canardSTM32Transmit+0x5a>
        {
            if (tme[i])                                 // This TX mailbox is free, we can use it
            {
                tx_mailbox = i;
 8004f24:	0026      	movs	r6, r4
        for (uint8_t i = 0; i < 3; i++)
 8004f26:	3401      	adds	r4, #1
 8004f28:	b2e4      	uxtb	r4, r4
 8004f2a:	2c02      	cmp	r4, #2
 8004f2c:	d812      	bhi.n	8004f54 <canardSTM32Transmit+0x84>
            if (tme[i])                                 // This TX mailbox is free, we can use it
 8004f2e:	ab01      	add	r3, sp, #4
 8004f30:	5d1b      	ldrb	r3, [r3, r4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f6      	bne.n	8004f24 <canardSTM32Transmit+0x54>
            }
            else                                        // This TX mailbox is pending, check for priority inversion
            {
                if (!isFramePriorityHigher(frame->id, convertFrameIDRegisterToCanard(BXCAN->TxMailbox[i].TIR)))
 8004f36:	0023      	movs	r3, r4
 8004f38:	3318      	adds	r3, #24
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <canardSTM32Transmit+0xe8>)
 8004f3e:	5898      	ldr	r0, [r3, r2]
 8004f40:	f7ff fe82 	bl	8004c48 <convertFrameIDRegisterToCanard>
 8004f44:	0001      	movs	r1, r0
 8004f46:	6828      	ldr	r0, [r5, #0]
 8004f48:	f7ff fe46 	bl	8004bd8 <isFramePriorityHigher>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d1ea      	bne.n	8004f26 <canardSTM32Transmit+0x56>
                {
                    // There's a mailbox whose priority is higher or equal the priority of the new frame.
                    return 0;                           // Priority inversion would occur! Reject transmission.
 8004f50:	2000      	movs	r0, #0
 8004f52:	e029      	b.n	8004fa8 <canardSTM32Transmit+0xd8>
                }
            }
        }

        if (tx_mailbox == 0xFF)
 8004f54:	2eff      	cmp	r6, #255	; 0xff
 8004f56:	d0fb      	beq.n	8004f50 <canardSTM32Transmit+0x80>
        tx_mailbox = 0;
    }

    // Avoid using asserts
    // CANARD_ASSERT(tx_mailbox < 3);                      // Index check - the value must be correct here
    if (tx_mailbox >= 3)
 8004f58:	2e02      	cmp	r6, #2
 8004f5a:	d902      	bls.n	8004f62 <canardSTM32Transmit+0x92>
        return 0;
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e023      	b.n	8004fa8 <canardSTM32Transmit+0xd8>
        tx_mailbox = 0;
 8004f60:	2600      	movs	r6, #0

    /*
     * By this time we've proved that a priority inversion would not occur, and we've also found a free TX mailbox.
     * Therefore it is safe to enqueue the frame now.
     */
    volatile CanardSTM32TxMailboxType* const mb = &BXCAN->TxMailbox[tx_mailbox];
 8004f62:	0134      	lsls	r4, r6, #4
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <canardSTM32Transmit+0xec>)
 8004f66:	469c      	mov	ip, r3
 8004f68:	4464      	add	r4, ip

    mb->TDTR = frame->data_len;                         // DLC equals data length except in CAN FD
 8004f6a:	7b2b      	ldrb	r3, [r5, #12]
 8004f6c:	6063      	str	r3, [r4, #4]

    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8004f6e:	7aeb      	ldrb	r3, [r5, #11]
 8004f70:	061b      	lsls	r3, r3, #24
               (((uint32_t)frame->data[6]) << 16U) |
 8004f72:	7aaa      	ldrb	r2, [r5, #10]
 8004f74:	0412      	lsls	r2, r2, #16
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8004f76:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[5]) <<  8U) |
 8004f78:	7a6a      	ldrb	r2, [r5, #9]
 8004f7a:	0212      	lsls	r2, r2, #8
               (((uint32_t)frame->data[6]) << 16U) |
 8004f7c:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[4]) <<  0U);
 8004f7e:	7a2a      	ldrb	r2, [r5, #8]
               (((uint32_t)frame->data[5]) <<  8U) |
 8004f80:	4313      	orrs	r3, r2
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8004f82:	60e3      	str	r3, [r4, #12]
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8004f84:	79eb      	ldrb	r3, [r5, #7]
 8004f86:	061b      	lsls	r3, r3, #24
               (((uint32_t)frame->data[2]) << 16U) |
 8004f88:	79aa      	ldrb	r2, [r5, #6]
 8004f8a:	0412      	lsls	r2, r2, #16
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8004f8c:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[1]) <<  8U) |
 8004f8e:	796a      	ldrb	r2, [r5, #5]
 8004f90:	0212      	lsls	r2, r2, #8
               (((uint32_t)frame->data[2]) << 16U) |
 8004f92:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[0]) <<  0U);
 8004f94:	792a      	ldrb	r2, [r5, #4]
               (((uint32_t)frame->data[1]) <<  8U) |
 8004f96:	4313      	orrs	r3, r2
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8004f98:	60a3      	str	r3, [r4, #8]

    mb->TIR = convertFrameIDCanardToRegister(frame->id) | CANARD_STM32_CAN_TIR_TXRQ;    // Go.
 8004f9a:	6828      	ldr	r0, [r5, #0]
 8004f9c:	f7ff fe48 	bl	8004c30 <convertFrameIDCanardToRegister>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4318      	orrs	r0, r3
 8004fa4:	6020      	str	r0, [r4, #0]

    /*
     * The frame is now enqueued and pending transmission.
     */
    return 1;
 8004fa6:	2001      	movs	r0, #1
}
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004fac:	2002      	movs	r0, #2
 8004fae:	4240      	negs	r0, r0
 8004fb0:	e7fa      	b.n	8004fa8 <canardSTM32Transmit+0xd8>
        return -CANARD_STM32_ERROR_UNSUPPORTED_FRAME_FORMAT;
 8004fb2:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <canardSTM32Transmit+0xf0>)
 8004fb4:	e7f8      	b.n	8004fa8 <canardSTM32Transmit+0xd8>
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	40006400 	.word	0x40006400
 8004fbc:	40006580 	.word	0x40006580
 8004fc0:	fffffc15 	.word	0xfffffc15

08004fc4 <canardSTM32Receive>:


int16_t canardSTM32Receive(CanardCANFrame* const out_frame)
{
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	46c6      	mov	lr, r8
 8004fc8:	b500      	push	{lr}
 8004fca:	1e05      	subs	r5, r0, #0
    if (out_frame == NULL)
 8004fcc:	d040      	beq.n	8005050 <canardSTM32Receive+0x8c>
    };

    /*
     * This function must be polled periodically, so we use this opportunity to do it.
     */
    processErrorStatus();
 8004fce:	f7ff fe4b 	bl	8004c68 <processErrorStatus>

    /*
     * Reading the TX FIFO
     */
    for (uint_fast8_t i = 0; i < 2; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d837      	bhi.n	8005048 <canardSTM32Receive+0x84>
    {
        volatile CanardSTM32RxMailboxType* const mb = &BXCAN->RxMailbox[i];
 8004fd8:	011e      	lsls	r6, r3, #4
 8004fda:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <canardSTM32Receive+0x94>)
 8004fdc:	4694      	mov	ip, r2
 8004fde:	4466      	add	r6, ip
 8004fe0:	46b0      	mov	r8, r6

        if (((*RFxR[i]) & CANARD_STM32_CAN_RFR_FMP_MASK) != 0)
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	491d      	ldr	r1, [pc, #116]	; (800505c <canardSTM32Receive+0x98>)
 8004fe6:	5854      	ldr	r4, [r2, r1]
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	0792      	lsls	r2, r2, #30
 8004fec:	d101      	bne.n	8004ff2 <canardSTM32Receive+0x2e>
    for (uint_fast8_t i = 0; i < 2; i++)
 8004fee:	3301      	adds	r3, #1
 8004ff0:	e7f0      	b.n	8004fd4 <canardSTM32Receive+0x10>
        {
            if (*RFxR[i] & CANARD_STM32_CAN_RFR_FOVR)
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	06db      	lsls	r3, r3, #27
 8004ff6:	d508      	bpl.n	800500a <canardSTM32Receive+0x46>
            {
                g_stats.rx_overflow_count++;
 8004ff8:	4919      	ldr	r1, [pc, #100]	; (8005060 <canardSTM32Receive+0x9c>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	680e      	ldr	r6, [r1, #0]
 8005000:	684f      	ldr	r7, [r1, #4]
 8005002:	1992      	adds	r2, r2, r6
 8005004:	417b      	adcs	r3, r7
 8005006:	600a      	str	r2, [r1, #0]
 8005008:	604b      	str	r3, [r1, #4]
            }

            out_frame->id = convertFrameIDRegisterToCanard(mb->RIR);
 800500a:	4643      	mov	r3, r8
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	f7ff fe1b 	bl	8004c48 <convertFrameIDRegisterToCanard>
 8005012:	6028      	str	r0, [r5, #0]

            out_frame->data_len = (uint8_t)(mb->RDTR & CANARD_STM32_CAN_RDTR_DLC_MASK);
 8005014:	4643      	mov	r3, r8
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	230f      	movs	r3, #15
 800501a:	4013      	ands	r3, r2
 800501c:	732b      	strb	r3, [r5, #12]

            // Caching to regular (non volatile) memory for faster reads
            const uint32_t rdlr = mb->RDLR;
 800501e:	4643      	mov	r3, r8
 8005020:	689a      	ldr	r2, [r3, #8]
            const uint32_t rdhr = mb->RDHR;
 8005022:	68db      	ldr	r3, [r3, #12]

            out_frame->data[0] = (uint8_t)(0xFFU & (rdlr >>  0U));
 8005024:	712a      	strb	r2, [r5, #4]
            out_frame->data[1] = (uint8_t)(0xFFU & (rdlr >>  8U));
 8005026:	0a11      	lsrs	r1, r2, #8
 8005028:	7169      	strb	r1, [r5, #5]
            out_frame->data[2] = (uint8_t)(0xFFU & (rdlr >> 16U));
 800502a:	0c11      	lsrs	r1, r2, #16
 800502c:	71a9      	strb	r1, [r5, #6]
            out_frame->data[3] = (uint8_t)(0xFFU & (rdlr >> 24U));
 800502e:	0e12      	lsrs	r2, r2, #24
 8005030:	71ea      	strb	r2, [r5, #7]
            out_frame->data[4] = (uint8_t)(0xFFU & (rdhr >>  0U));
 8005032:	722b      	strb	r3, [r5, #8]
            out_frame->data[5] = (uint8_t)(0xFFU & (rdhr >>  8U));
 8005034:	0a1a      	lsrs	r2, r3, #8
 8005036:	726a      	strb	r2, [r5, #9]
            out_frame->data[6] = (uint8_t)(0xFFU & (rdhr >> 16U));
 8005038:	0c1a      	lsrs	r2, r3, #16
 800503a:	72aa      	strb	r2, [r5, #10]
            out_frame->data[7] = (uint8_t)(0xFFU & (rdhr >> 24U));
 800503c:	0e1b      	lsrs	r3, r3, #24
 800503e:	72eb      	strb	r3, [r5, #11]

            // Release FIFO entry we just read
            *RFxR[i] = CANARD_STM32_CAN_RFR_RFOM | CANARD_STM32_CAN_RFR_FOVR | CANARD_STM32_CAN_RFR_FULL;
 8005040:	2338      	movs	r3, #56	; 0x38
 8005042:	6023      	str	r3, [r4, #0]

            // Reading successful
            return 1;
 8005044:	2001      	movs	r0, #1
 8005046:	e000      	b.n	800504a <canardSTM32Receive+0x86>
        }
    }

    // No frames to read
    return 0;
 8005048:	2000      	movs	r0, #0
}
 800504a:	bc80      	pop	{r7}
 800504c:	46b8      	mov	r8, r7
 800504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8005050:	2002      	movs	r0, #2
 8005052:	4240      	negs	r0, r0
 8005054:	e7f9      	b.n	800504a <canardSTM32Receive+0x86>
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	400065b0 	.word	0x400065b0
 800505c:	08007b4c 	.word	0x08007b4c
 8005060:	20000bc0 	.word	0x20000bc0

08005064 <canardSTM32GetStats>:
    return 0;
}


CanardSTM32Stats canardSTM32GetStats(void)
{
 8005064:	b510      	push	{r4, lr}
 8005066:	0004      	movs	r4, r0
    return g_stats;
 8005068:	2210      	movs	r2, #16
 800506a:	4902      	ldr	r1, [pc, #8]	; (8005074 <canardSTM32GetStats+0x10>)
 800506c:	f002 fa0c 	bl	8007488 <memcpy>
}
 8005070:	0020      	movs	r0, r4
 8005072:	bd10      	pop	{r4, pc}
 8005074:	20000bc0 	.word	0x20000bc0

08005078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005078:	b530      	push	{r4, r5, lr}
 800507a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	2214      	movs	r2, #20
 800507e:	2100      	movs	r1, #0
 8005080:	a803      	add	r0, sp, #12
 8005082:	f002 fa0a 	bl	800749a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <MX_GPIO_Init+0x6c>)
 8005088:	6959      	ldr	r1, [r3, #20]
 800508a:	2080      	movs	r0, #128	; 0x80
 800508c:	03c0      	lsls	r0, r0, #15
 800508e:	4301      	orrs	r1, r0
 8005090:	6159      	str	r1, [r3, #20]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	4002      	ands	r2, r0
 8005096:	9201      	str	r2, [sp, #4]
 8005098:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	0289      	lsls	r1, r1, #10
 80050a0:	430a      	orrs	r2, r1
 80050a2:	615a      	str	r2, [r3, #20]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	400b      	ands	r3, r1
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80050ac:	2590      	movs	r5, #144	; 0x90
 80050ae:	05ed      	lsls	r5, r5, #23
 80050b0:	2200      	movs	r2, #0
 80050b2:	2161      	movs	r1, #97	; 0x61
 80050b4:	0028      	movs	r0, r5
 80050b6:	f000 fda4 	bl	8005c02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 80050ba:	2361      	movs	r3, #97	; 0x61
 80050bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050be:	3b60      	subs	r3, #96	; 0x60
 80050c0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2400      	movs	r4, #0
 80050c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c8:	a903      	add	r1, sp, #12
 80050ca:	0028      	movs	r0, r5
 80050cc:	f000 fcd2 	bl	8005a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80050d0:	2382      	movs	r3, #130	; 0x82
 80050d2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050d4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d8:	a903      	add	r1, sp, #12
 80050da:	0028      	movs	r0, r5
 80050dc:	f000 fcca 	bl	8005a74 <HAL_GPIO_Init>

}
 80050e0:	b009      	add	sp, #36	; 0x24
 80050e2:	bd30      	pop	{r4, r5, pc}
 80050e4:	40021000 	.word	0x40021000

080050e8 <MX_TIM17_Init>:
{
 80050e8:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 80050ea:	4807      	ldr	r0, [pc, #28]	; (8005108 <MX_TIM17_Init+0x20>)
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <MX_TIM17_Init+0x24>)
 80050ee:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 47;
 80050f0:	232f      	movs	r3, #47	; 0x2f
 80050f2:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050f4:	2300      	movs	r3, #0
 80050f6:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 99;
 80050f8:	2263      	movs	r2, #99	; 0x63
 80050fa:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050fc:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80050fe:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005100:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005102:	f001 fee5 	bl	8006ed0 <HAL_TIM_Base_Init>
}
 8005106:	bd10      	pop	{r4, pc}
 8005108:	20000c44 	.word	0x20000c44
 800510c:	40014800 	.word	0x40014800

08005110 <MX_TIM3_Init>:
{
 8005110:	b530      	push	{r4, r5, lr}
 8005112:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005114:	2210      	movs	r2, #16
 8005116:	2100      	movs	r1, #0
 8005118:	a802      	add	r0, sp, #8
 800511a:	f002 f9be 	bl	800749a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800511e:	2208      	movs	r2, #8
 8005120:	2100      	movs	r1, #0
 8005122:	4668      	mov	r0, sp
 8005124:	f002 f9b9 	bl	800749a <memset>
  htim3.Instance = TIM3;
 8005128:	4c0e      	ldr	r4, [pc, #56]	; (8005164 <MX_TIM3_Init+0x54>)
 800512a:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <MX_TIM3_Init+0x58>)
 800512c:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 47;
 800512e:	232f      	movs	r3, #47	; 0x2f
 8005130:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005132:	2500      	movs	r5, #0
 8005134:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 65535;
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <MX_TIM3_Init+0x5c>)
 8005138:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800513a:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800513c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800513e:	0020      	movs	r0, r4
 8005140:	f001 fec6 	bl	8006ed0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	015b      	lsls	r3, r3, #5
 8005148:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800514a:	a902      	add	r1, sp, #8
 800514c:	0020      	movs	r0, r4
 800514e:	f001 fef7 	bl	8006f40 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005152:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005154:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005156:	4669      	mov	r1, sp
 8005158:	0020      	movs	r0, r4
 800515a:	f001 ff75 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
}
 800515e:	b007      	add	sp, #28
 8005160:	bd30      	pop	{r4, r5, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	20000c8c 	.word	0x20000c8c
 8005168:	40000400 	.word	0x40000400
 800516c:	0000ffff 	.word	0x0000ffff

08005170 <SystemClock_Config>:
{
 8005170:	b510      	push	{r4, lr}
 8005172:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005174:	2234      	movs	r2, #52	; 0x34
 8005176:	2100      	movs	r1, #0
 8005178:	a80b      	add	r0, sp, #44	; 0x2c
 800517a:	f002 f98e 	bl	800749a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800517e:	2210      	movs	r2, #16
 8005180:	2100      	movs	r1, #0
 8005182:	a807      	add	r0, sp, #28
 8005184:	f002 f989 	bl	800749a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005188:	2218      	movs	r2, #24
 800518a:	2100      	movs	r1, #0
 800518c:	a801      	add	r0, sp, #4
 800518e:	f002 f984 	bl	800749a <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005192:	2402      	movs	r4, #2
 8005194:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005196:	2301      	movs	r3, #1
 8005198:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800519a:	2210      	movs	r2, #16
 800519c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800519e:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0212      	lsls	r2, r2, #8
 80051a4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80051a6:	22a0      	movs	r2, #160	; 0xa0
 80051a8:	0392      	lsls	r2, r2, #14
 80051aa:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80051ac:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051ae:	a80b      	add	r0, sp, #44	; 0x2c
 80051b0:	f001 f8ee 	bl	8006390 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051b4:	2307      	movs	r3, #7
 80051b6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051b8:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051ba:	2400      	movs	r4, #0
 80051bc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051be:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80051c0:	2101      	movs	r1, #1
 80051c2:	a807      	add	r0, sp, #28
 80051c4:	f001 fbd0 	bl	8006968 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80051c8:	2320      	movs	r3, #32
 80051ca:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80051cc:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051ce:	a801      	add	r0, sp, #4
 80051d0:	f001 fc82 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
}
 80051d4:	b018      	add	sp, #96	; 0x60
 80051d6:	bd10      	pop	{r4, pc}

080051d8 <main>:
{
 80051d8:	b510      	push	{r4, lr}
  HAL_Init();
 80051da:	f000 f967 	bl	80054ac <HAL_Init>
  SystemClock_Config();
 80051de:	f7ff ffc7 	bl	8005170 <SystemClock_Config>
  MX_GPIO_Init();
 80051e2:	f7ff ff49 	bl	8005078 <MX_GPIO_Init>
  MX_TIM3_Init();
 80051e6:	f7ff ff93 	bl	8005110 <MX_TIM3_Init>
  MX_TIM17_Init();
 80051ea:	f7ff ff7d 	bl	80050e8 <MX_TIM17_Init>
  setup();
 80051ee:	f7fb ffaf 	bl	8001150 <setup>
    loopBackground();
 80051f2:	f7fc f819 	bl	8001228 <loopBackground>
  while (1)
 80051f6:	e7fc      	b.n	80051f2 <main+0x1a>

080051f8 <MX_I2C1_Init>:
{
 80051f8:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 80051fa:	4c0d      	ldr	r4, [pc, #52]	; (8005230 <MX_I2C1_Init+0x38>)
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <MX_I2C1_Init+0x3c>)
 80051fe:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8005200:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <MX_I2C1_Init+0x40>)
 8005202:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005208:	2201      	movs	r2, #1
 800520a:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800520c:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800520e:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005210:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005212:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005214:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005216:	0020      	movs	r0, r4
 8005218:	f000 fe5a 	bl	8005ed0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800521c:	2100      	movs	r1, #0
 800521e:	0020      	movs	r0, r4
 8005220:	f001 f860 	bl	80062e4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005224:	2100      	movs	r1, #0
 8005226:	0020      	movs	r0, r4
 8005228:	f001 f888 	bl	800633c <HAL_I2CEx_ConfigDigitalFilter>
}
 800522c:	bd10      	pop	{r4, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	20000bf8 	.word	0x20000bf8
 8005234:	40005400 	.word	0x40005400
 8005238:	2000090e 	.word	0x2000090e

0800523c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800523c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_MspInit+0x34>)
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	2201      	movs	r2, #1
 8005244:	4311      	orrs	r1, r2
 8005246:	6199      	str	r1, [r3, #24]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	400a      	ands	r2, r1
 800524c:	9200      	str	r2, [sp, #0]
 800524e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	0549      	lsls	r1, r1, #21
 8005256:	430a      	orrs	r2, r1
 8005258:	61da      	str	r2, [r3, #28]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	400b      	ands	r3, r1
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8005262:	4a04      	ldr	r2, [pc, #16]	; (8005274 <HAL_MspInit+0x38>)
 8005264:	6813      	ldr	r3, [r2, #0]
 8005266:	2110      	movs	r1, #16
 8005268:	430b      	orrs	r3, r1
 800526a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800526c:	b002      	add	sp, #8
 800526e:	4770      	bx	lr
 8005270:	40021000 	.word	0x40021000
 8005274:	40010000 	.word	0x40010000

08005278 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005278:	b510      	push	{r4, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527e:	2214      	movs	r2, #20
 8005280:	2100      	movs	r1, #0
 8005282:	a803      	add	r0, sp, #12
 8005284:	f002 f909 	bl	800749a <memset>
  if(hcan->Instance==CAN)
 8005288:	6822      	ldr	r2, [r4, #0]
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_CAN_MspInit+0x60>)
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8005290:	b008      	add	sp, #32
 8005292:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_CAN_MspInit+0x64>)
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	2080      	movs	r0, #128	; 0x80
 800529a:	0480      	lsls	r0, r0, #18
 800529c:	4301      	orrs	r1, r0
 800529e:	61d9      	str	r1, [r3, #28]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	4002      	ands	r2, r0
 80052a4:	9201      	str	r2, [sp, #4]
 80052a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	0289      	lsls	r1, r1, #10
 80052ae:	430a      	orrs	r2, r1
 80052b0:	615a      	str	r2, [r3, #20]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	400b      	ands	r3, r1
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80052ba:	23c0      	movs	r3, #192	; 0xc0
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c0:	2302      	movs	r3, #2
 80052c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052c4:	3301      	adds	r3, #1
 80052c6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80052c8:	3301      	adds	r3, #1
 80052ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052cc:	2090      	movs	r0, #144	; 0x90
 80052ce:	a903      	add	r1, sp, #12
 80052d0:	05c0      	lsls	r0, r0, #23
 80052d2:	f000 fbcf 	bl	8005a74 <HAL_GPIO_Init>
}
 80052d6:	e7db      	b.n	8005290 <HAL_CAN_MspInit+0x18>
 80052d8:	40006400 	.word	0x40006400
 80052dc:	40021000 	.word	0x40021000

080052e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052e0:	b510      	push	{r4, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e6:	2214      	movs	r2, #20
 80052e8:	2100      	movs	r1, #0
 80052ea:	a803      	add	r0, sp, #12
 80052ec:	f002 f8d5 	bl	800749a <memset>
  if(hi2c->Instance==I2C1)
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_I2C_MspInit+0x5c>)
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80052f8:	b008      	add	sp, #32
 80052fa:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052fc:	4c10      	ldr	r4, [pc, #64]	; (8005340 <HAL_I2C_MspInit+0x60>)
 80052fe:	6962      	ldr	r2, [r4, #20]
 8005300:	2180      	movs	r1, #128	; 0x80
 8005302:	03c9      	lsls	r1, r1, #15
 8005304:	430a      	orrs	r2, r1
 8005306:	6162      	str	r2, [r4, #20]
 8005308:	6963      	ldr	r3, [r4, #20]
 800530a:	400b      	ands	r3, r1
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005310:	2303      	movs	r3, #3
 8005312:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005314:	2212      	movs	r2, #18
 8005316:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005318:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800531a:	3b02      	subs	r3, #2
 800531c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800531e:	a903      	add	r1, sp, #12
 8005320:	4808      	ldr	r0, [pc, #32]	; (8005344 <HAL_I2C_MspInit+0x64>)
 8005322:	f000 fba7 	bl	8005a74 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005326:	69e2      	ldr	r2, [r4, #28]
 8005328:	2180      	movs	r1, #128	; 0x80
 800532a:	0389      	lsls	r1, r1, #14
 800532c:	430a      	orrs	r2, r1
 800532e:	61e2      	str	r2, [r4, #28]
 8005330:	69e3      	ldr	r3, [r4, #28]
 8005332:	400b      	ands	r3, r1
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	9b02      	ldr	r3, [sp, #8]
}
 8005338:	e7de      	b.n	80052f8 <HAL_I2C_MspInit+0x18>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	40005400 	.word	0x40005400
 8005340:	40021000 	.word	0x40021000
 8005344:	48001400 	.word	0x48001400

08005348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005348:	b500      	push	{lr}
 800534a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 800534c:	6803      	ldr	r3, [r0, #0]
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <HAL_TIM_Base_MspInit+0x50>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8005354:	4a11      	ldr	r2, [pc, #68]	; (800539c <HAL_TIM_Base_MspInit+0x54>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00b      	beq.n	8005372 <HAL_TIM_Base_MspInit+0x2a>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800535a:	b003      	add	sp, #12
 800535c:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <HAL_TIM_Base_MspInit+0x58>)
 8005360:	69d1      	ldr	r1, [r2, #28]
 8005362:	2302      	movs	r3, #2
 8005364:	4319      	orrs	r1, r3
 8005366:	61d1      	str	r1, [r2, #28]
 8005368:	69d2      	ldr	r2, [r2, #28]
 800536a:	4013      	ands	r3, r2
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	e7f3      	b.n	800535a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <HAL_TIM_Base_MspInit+0x58>)
 8005374:	6991      	ldr	r1, [r2, #24]
 8005376:	2080      	movs	r0, #128	; 0x80
 8005378:	02c0      	lsls	r0, r0, #11
 800537a:	4301      	orrs	r1, r0
 800537c:	6191      	str	r1, [r2, #24]
 800537e:	6993      	ldr	r3, [r2, #24]
 8005380:	4003      	ands	r3, r0
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 2, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2102      	movs	r1, #2
 800538a:	2016      	movs	r0, #22
 800538c:	f000 f8d4 	bl	8005538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005390:	2016      	movs	r0, #22
 8005392:	f000 f901 	bl	8005598 <HAL_NVIC_EnableIRQ>
}
 8005396:	e7e0      	b.n	800535a <HAL_TIM_Base_MspInit+0x12>
 8005398:	40000400 	.word	0x40000400
 800539c:	40014800 	.word	0x40014800
 80053a0:	40021000 	.word	0x40021000

080053a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80053a4:	4770      	bx	lr

080053a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053a6:	e7fe      	b.n	80053a6 <HardFault_Handler>

080053a8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80053a8:	4770      	bx	lr

080053aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053aa:	4770      	bx	lr

080053ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ae:	f000 f88d 	bl	80054cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053b2:	bd10      	pop	{r4, pc}

080053b4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80053b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80053b6:	4802      	ldr	r0, [pc, #8]	; (80053c0 <TIM17_IRQHandler+0xc>)
 80053b8:	f001 fc92 	bl	8006ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	20000c44 	.word	0x20000c44

080053c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053c6:	4802      	ldr	r0, [pc, #8]	; (80053d0 <USART2_IRQHandler+0xc>)
 80053c8:	f001 fec4 	bl	8007154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	20000cd4 	.word	0x20000cd4

080053d4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80053d4:	4770      	bx	lr
	...

080053d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053d8:	4813      	ldr	r0, [pc, #76]	; (8005428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053da:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80053dc:	4813      	ldr	r0, [pc, #76]	; (800542c <LoopForever+0x6>)
    LDR R1, [R0]
 80053de:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80053e0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80053e2:	4a13      	ldr	r2, [pc, #76]	; (8005430 <LoopForever+0xa>)
    CMP R1, R2
 80053e4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80053e6:	d105      	bne.n	80053f4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80053e8:	4812      	ldr	r0, [pc, #72]	; (8005434 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80053ea:	4913      	ldr	r1, [pc, #76]	; (8005438 <LoopForever+0x12>)
    STR R1, [R0]
 80053ec:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80053ee:	4813      	ldr	r0, [pc, #76]	; (800543c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80053f0:	4913      	ldr	r1, [pc, #76]	; (8005440 <LoopForever+0x1a>)
    STR R1, [R0]
 80053f2:	6001      	str	r1, [r0, #0]

080053f4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053f4:	4813      	ldr	r0, [pc, #76]	; (8005444 <LoopForever+0x1e>)
  ldr r1, =_edata
 80053f6:	4914      	ldr	r1, [pc, #80]	; (8005448 <LoopForever+0x22>)
  ldr r2, =_sidata
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <LoopForever+0x26>)
  movs r3, #0
 80053fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053fc:	e002      	b.n	8005404 <LoopCopyDataInit>

080053fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005402:	3304      	adds	r3, #4

08005404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005408:	d3f9      	bcc.n	80053fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540a:	4a11      	ldr	r2, [pc, #68]	; (8005450 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800540c:	4c11      	ldr	r4, [pc, #68]	; (8005454 <LoopForever+0x2e>)
  movs r3, #0
 800540e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005410:	e001      	b.n	8005416 <LoopFillZerobss>

08005412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005414:	3204      	adds	r2, #4

08005416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005418:	d3fb      	bcc.n	8005412 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800541a:	f7ff ffdb 	bl	80053d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800541e:	f002 f801 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005422:	f7ff fed9 	bl	80051d8 <main>

08005426 <LoopForever>:

LoopForever:
    b LoopForever
 8005426:	e7fe      	b.n	8005426 <LoopForever>
  ldr   r0, =_estack
 8005428:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800542c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8005430:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8005434:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8005438:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800543c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8005440:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8005444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005448:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800544c:	08007ba4 	.word	0x08007ba4
  ldr r2, =_sbss
 8005450:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8005454:	20000d80 	.word	0x20000d80

08005458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005458:	e7fe      	b.n	8005458 <ADC1_IRQHandler>
	...

0800545c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800545c:	b510      	push	{r4, lr}
 800545e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_InitTick+0x44>)
 8005462:	7819      	ldrb	r1, [r3, #0]
 8005464:	20fa      	movs	r0, #250	; 0xfa
 8005466:	0080      	lsls	r0, r0, #2
 8005468:	f7fa fe70 	bl	800014c <__udivsi3>
 800546c:	0001      	movs	r1, r0
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <HAL_InitTick+0x48>)
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	f7fa fe6b 	bl	800014c <__udivsi3>
 8005476:	f000 f89b 	bl	80055b0 <HAL_SYSTICK_Config>
 800547a:	2800      	cmp	r0, #0
 800547c:	d10d      	bne.n	800549a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800547e:	2c03      	cmp	r4, #3
 8005480:	d901      	bls.n	8005486 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8005482:	2001      	movs	r0, #1
 8005484:	e00a      	b.n	800549c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005486:	3001      	adds	r0, #1
 8005488:	2200      	movs	r2, #0
 800548a:	0021      	movs	r1, r4
 800548c:	4240      	negs	r0, r0
 800548e:	f000 f853 	bl	8005538 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_InitTick+0x4c>)
 8005494:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8005496:	2000      	movs	r0, #0
 8005498:	e000      	b.n	800549c <HAL_InitTick+0x40>
    return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
}
 800549c:	bd10      	pop	{r4, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000238 	.word	0x20000238
 80054a4:	20000234 	.word	0x20000234
 80054a8:	2000023c 	.word	0x2000023c

080054ac <HAL_Init>:
{
 80054ac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054ae:	4a06      	ldr	r2, [pc, #24]	; (80054c8 <HAL_Init+0x1c>)
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	2110      	movs	r1, #16
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80054b8:	2000      	movs	r0, #0
 80054ba:	f7ff ffcf 	bl	800545c <HAL_InitTick>
  HAL_MspInit();
 80054be:	f7ff febd 	bl	800523c <HAL_MspInit>
}
 80054c2:	2000      	movs	r0, #0
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	40022000 	.word	0x40022000

080054cc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80054cc:	4a03      	ldr	r2, [pc, #12]	; (80054dc <HAL_IncTick+0x10>)
 80054ce:	6811      	ldr	r1, [r2, #0]
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_IncTick+0x14>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	185b      	adds	r3, r3, r1
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	4770      	bx	lr
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20000d58 	.word	0x20000d58
 80054e0:	20000238 	.word	0x20000238

080054e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80054e4:	4b01      	ldr	r3, [pc, #4]	; (80054ec <HAL_GetTick+0x8>)
 80054e6:	6818      	ldr	r0, [r3, #0]
}
 80054e8:	4770      	bx	lr
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	20000d58 	.word	0x20000d58

080054f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80054f4:	f7ff fff6 	bl	80054e4 <HAL_GetTick>
 80054f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054fa:	1c63      	adds	r3, r4, #1
 80054fc:	d002      	beq.n	8005504 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <HAL_Delay+0x20>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005504:	f7ff ffee 	bl	80054e4 <HAL_GetTick>
 8005508:	1b40      	subs	r0, r0, r5
 800550a:	42a0      	cmp	r0, r4
 800550c:	d3fa      	bcc.n	8005504 <HAL_Delay+0x14>
  {
  }
}
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	20000238 	.word	0x20000238

08005514 <HAL_GetUIDw0>:
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8005514:	4b01      	ldr	r3, [pc, #4]	; (800551c <HAL_GetUIDw0+0x8>)
 8005516:	6818      	ldr	r0, [r3, #0]
}
 8005518:	4770      	bx	lr
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	1ffff7ac 	.word	0x1ffff7ac

08005520 <HAL_GetUIDw1>:
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005520:	4b01      	ldr	r3, [pc, #4]	; (8005528 <HAL_GetUIDw1+0x8>)
 8005522:	6818      	ldr	r0, [r3, #0]
}
 8005524:	4770      	bx	lr
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	1ffff7b0 	.word	0x1ffff7b0

0800552c <HAL_GetUIDw2>:
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800552c:	4b01      	ldr	r3, [pc, #4]	; (8005534 <HAL_GetUIDw2+0x8>)
 800552e:	6818      	ldr	r0, [r3, #0]
}
 8005530:	4770      	bx	lr
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	1ffff7b4 	.word	0x1ffff7b4

08005538 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005538:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800553a:	2800      	cmp	r0, #0
 800553c:	db11      	blt.n	8005562 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800553e:	0883      	lsrs	r3, r0, #2
 8005540:	4e13      	ldr	r6, [pc, #76]	; (8005590 <HAL_NVIC_SetPriority+0x58>)
 8005542:	33c0      	adds	r3, #192	; 0xc0
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	599d      	ldr	r5, [r3, r6]
 8005548:	2403      	movs	r4, #3
 800554a:	4020      	ands	r0, r4
 800554c:	00c0      	lsls	r0, r0, #3
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	0014      	movs	r4, r2
 8005552:	4084      	lsls	r4, r0
 8005554:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005556:	0189      	lsls	r1, r1, #6
 8005558:	400a      	ands	r2, r1
 800555a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800555c:	432a      	orrs	r2, r5
 800555e:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8005560:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005562:	230f      	movs	r3, #15
 8005564:	4003      	ands	r3, r0
 8005566:	3b08      	subs	r3, #8
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	3306      	adds	r3, #6
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <HAL_NVIC_SetPriority+0x5c>)
 8005570:	4694      	mov	ip, r2
 8005572:	4463      	add	r3, ip
 8005574:	685c      	ldr	r4, [r3, #4]
 8005576:	2203      	movs	r2, #3
 8005578:	4010      	ands	r0, r2
 800557a:	00c0      	lsls	r0, r0, #3
 800557c:	32fc      	adds	r2, #252	; 0xfc
 800557e:	0015      	movs	r5, r2
 8005580:	4085      	lsls	r5, r0
 8005582:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005584:	0189      	lsls	r1, r1, #6
 8005586:	400a      	ands	r2, r1
 8005588:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800558a:	4322      	orrs	r2, r4
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	e7e7      	b.n	8005560 <HAL_NVIC_SetPriority+0x28>
 8005590:	e000e100 	.word	0xe000e100
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005598:	2800      	cmp	r0, #0
 800559a:	db05      	blt.n	80055a8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559c:	231f      	movs	r3, #31
 800559e:	4018      	ands	r0, r3
 80055a0:	3b1e      	subs	r3, #30
 80055a2:	4083      	lsls	r3, r0
 80055a4:	4a01      	ldr	r2, [pc, #4]	; (80055ac <HAL_NVIC_EnableIRQ+0x14>)
 80055a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80055a8:	4770      	bx	lr
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	e000e100 	.word	0xe000e100

080055b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055b0:	3801      	subs	r0, #1
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	045b      	lsls	r3, r3, #17
 80055b6:	4298      	cmp	r0, r3
 80055b8:	d20f      	bcs.n	80055da <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ba:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <HAL_SYSTICK_Config+0x30>)
 80055bc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055be:	4809      	ldr	r0, [pc, #36]	; (80055e4 <HAL_SYSTICK_Config+0x34>)
 80055c0:	6a03      	ldr	r3, [r0, #32]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	21c0      	movs	r1, #192	; 0xc0
 80055c8:	0609      	lsls	r1, r1, #24
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055ce:	2300      	movs	r3, #0
 80055d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055d2:	3307      	adds	r3, #7
 80055d4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055d6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80055d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80055da:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80055dc:	e7fc      	b.n	80055d8 <HAL_SYSTICK_Config+0x28>
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	e000e010 	.word	0xe000e010
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055e8:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ea:	2321      	movs	r3, #33	; 0x21
 80055ec:	5cc3      	ldrb	r3, [r0, r3]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d006      	beq.n	8005600 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f2:	2304      	movs	r3, #4
 80055f4:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f6:	331c      	adds	r3, #28
 80055f8:	2200      	movs	r2, #0
 80055fa:	54c2      	strb	r2, [r0, r3]
    
    return HAL_ERROR;
 80055fc:	2001      	movs	r0, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 80055fe:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005600:	6802      	ldr	r2, [r0, #0]
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	210e      	movs	r1, #14
 8005606:	438b      	bics	r3, r1
 8005608:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800560a:	6801      	ldr	r1, [r0, #0]
 800560c:	680a      	ldr	r2, [r1, #0]
 800560e:	2301      	movs	r3, #1
 8005610:	439a      	bics	r2, r3
 8005612:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005614:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005616:	0019      	movs	r1, r3
 8005618:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800561a:	40a1      	lsls	r1, r4
 800561c:	6051      	str	r1, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 800561e:	2221      	movs	r2, #33	; 0x21
 8005620:	5483      	strb	r3, [r0, r2]
  __HAL_UNLOCK(hdma);
 8005622:	331f      	adds	r3, #31
 8005624:	2200      	movs	r2, #0
 8005626:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8005628:	2000      	movs	r0, #0
 800562a:	e7e8      	b.n	80055fe <HAL_DMA_Abort+0x16>

0800562c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800562c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800562e:	2321      	movs	r3, #33	; 0x21
 8005630:	5cc3      	ldrb	r3, [r0, r3]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d003      	beq.n	800563e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005636:	2304      	movs	r3, #4
 8005638:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800563a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800563c:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800563e:	6802      	ldr	r2, [r0, #0]
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	210e      	movs	r1, #14
 8005644:	438b      	bics	r3, r1
 8005646:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005648:	6801      	ldr	r1, [r0, #0]
 800564a:	680a      	ldr	r2, [r1, #0]
 800564c:	2301      	movs	r3, #1
 800564e:	439a      	bics	r2, r3
 8005650:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005652:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005654:	0019      	movs	r1, r3
 8005656:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005658:	40a1      	lsls	r1, r4
 800565a:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800565c:	2221      	movs	r2, #33	; 0x21
 800565e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8005660:	331f      	adds	r3, #31
 8005662:	2200      	movs	r2, #0
 8005664:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8005666:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800566c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2000      	movs	r0, #0
 8005670:	e7e4      	b.n	800563c <HAL_DMA_Abort_IT+0x10>
 8005672:	2000      	movs	r0, #0
 8005674:	e7e2      	b.n	800563c <HAL_DMA_Abort_IT+0x10>
	...

08005678 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005678:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <FLASH_SetErrorCode+0x38>)
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	2110      	movs	r1, #16
 800567e:	000b      	movs	r3, r1
 8005680:	4013      	ands	r3, r2
 8005682:	4211      	tst	r1, r2
 8005684:	d005      	beq.n	8005692 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005686:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <FLASH_SetErrorCode+0x3c>)
 8005688:	69d3      	ldr	r3, [r2, #28]
 800568a:	390e      	subs	r1, #14
 800568c:	430b      	orrs	r3, r1
 800568e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8005690:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005692:	4a07      	ldr	r2, [pc, #28]	; (80056b0 <FLASH_SetErrorCode+0x38>)
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	0752      	lsls	r2, r2, #29
 8005698:	d506      	bpl.n	80056a8 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800569a:	4906      	ldr	r1, [pc, #24]	; (80056b4 <FLASH_SetErrorCode+0x3c>)
 800569c:	69ca      	ldr	r2, [r1, #28]
 800569e:	2001      	movs	r0, #1
 80056a0:	4302      	orrs	r2, r0
 80056a2:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80056a4:	2204      	movs	r2, #4
 80056a6:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80056a8:	4a01      	ldr	r2, [pc, #4]	; (80056b0 <FLASH_SetErrorCode+0x38>)
 80056aa:	60d3      	str	r3, [r2, #12]
}  
 80056ac:	4770      	bx	lr
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	40022000 	.word	0x40022000
 80056b4:	20000d60 	.word	0x20000d60

080056b8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_FLASH_Unlock+0x24>)
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	d509      	bpl.n	80056d4 <HAL_FLASH_Unlock+0x1c>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_FLASH_Unlock+0x24>)
 80056c2:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <HAL_FLASH_Unlock+0x28>)
 80056c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056c6:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <HAL_FLASH_Unlock+0x2c>)
 80056c8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	d403      	bmi.n	80056d8 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80056d0:	2000      	movs	r0, #0
 80056d2:	e000      	b.n	80056d6 <HAL_FLASH_Unlock+0x1e>
 80056d4:	2000      	movs	r0, #0
}
 80056d6:	4770      	bx	lr
      status = HAL_ERROR;
 80056d8:	2001      	movs	r0, #1
 80056da:	e7fc      	b.n	80056d6 <HAL_FLASH_Unlock+0x1e>
 80056dc:	40022000 	.word	0x40022000
 80056e0:	45670123 	.word	0x45670123
 80056e4:	cdef89ab 	.word	0xcdef89ab

080056e8 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <HAL_FLASH_OB_Unlock+0x1c>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	059b      	lsls	r3, r3, #22
 80056ee:	d406      	bmi.n	80056fe <HAL_FLASH_OB_Unlock+0x16>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <HAL_FLASH_OB_Unlock+0x1c>)
 80056f2:	4a05      	ldr	r2, [pc, #20]	; (8005708 <HAL_FLASH_OB_Unlock+0x20>)
 80056f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80056f6:	4a05      	ldr	r2, [pc, #20]	; (800570c <HAL_FLASH_OB_Unlock+0x24>)
 80056f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 80056fa:	2000      	movs	r0, #0
}
 80056fc:	4770      	bx	lr
    return HAL_ERROR;
 80056fe:	2001      	movs	r0, #1
 8005700:	e7fc      	b.n	80056fc <HAL_FLASH_OB_Unlock+0x14>
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	40022000 	.word	0x40022000
 8005708:	45670123 	.word	0x45670123
 800570c:	cdef89ab 	.word	0xcdef89ab

08005710 <FLASH_WaitForLastOperation>:
{
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005714:	f7ff fee6 	bl	80054e4 <HAL_GetTick>
 8005718:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <FLASH_WaitForLastOperation+0x54>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	07db      	lsls	r3, r3, #31
 8005720:	d50a      	bpl.n	8005738 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8005722:	1c63      	adds	r3, r4, #1
 8005724:	d0f9      	beq.n	800571a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005726:	2c00      	cmp	r4, #0
 8005728:	d004      	beq.n	8005734 <FLASH_WaitForLastOperation+0x24>
 800572a:	f7ff fedb 	bl	80054e4 <HAL_GetTick>
 800572e:	1b40      	subs	r0, r0, r5
 8005730:	42a0      	cmp	r0, r4
 8005732:	d9f2      	bls.n	800571a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8005734:	2003      	movs	r0, #3
 8005736:	e00f      	b.n	8005758 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <FLASH_WaitForLastOperation+0x54>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	069b      	lsls	r3, r3, #26
 800573e:	d502      	bpl.n	8005746 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <FLASH_WaitForLastOperation+0x54>)
 8005742:	2220      	movs	r2, #32
 8005744:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <FLASH_WaitForLastOperation+0x54>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	06db      	lsls	r3, r3, #27
 800574c:	d405      	bmi.n	800575a <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <FLASH_WaitForLastOperation+0x54>)
 8005750:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005752:	075b      	lsls	r3, r3, #29
 8005754:	d401      	bmi.n	800575a <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 8005756:	2000      	movs	r0, #0
}
 8005758:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800575a:	f7ff ff8d 	bl	8005678 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800575e:	2001      	movs	r0, #1
 8005760:	e7fa      	b.n	8005758 <FLASH_WaitForLastOperation+0x48>
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	40022000 	.word	0x40022000

08005768 <HAL_FLASH_OB_Launch>:
{
 8005768:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800576a:	4a05      	ldr	r2, [pc, #20]	; (8005780 <HAL_FLASH_OB_Launch+0x18>)
 800576c:	6911      	ldr	r1, [r2, #16]
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	019b      	lsls	r3, r3, #6
 8005772:	430b      	orrs	r3, r1
 8005774:	6113      	str	r3, [r2, #16]
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 8005776:	4803      	ldr	r0, [pc, #12]	; (8005784 <HAL_FLASH_OB_Launch+0x1c>)
 8005778:	f7ff ffca 	bl	8005710 <FLASH_WaitForLastOperation>
}
 800577c:	bd10      	pop	{r4, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	40022000 	.word	0x40022000
 8005784:	0000c350 	.word	0x0000c350

08005788 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8005788:	4b01      	ldr	r3, [pc, #4]	; (8005790 <FLASH_OB_GetWRP+0x8>)
 800578a:	6a18      	ldr	r0, [r3, #32]
}
 800578c:	4770      	bx	lr
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	40022000 	.word	0x40022000

08005794 <FLASH_OB_GetRDP>:
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t tmp_reg;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <FLASH_OB_GetRDP+0x1c>)
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	2206      	movs	r2, #6

  if (tmp_reg == 0U)
 800579a:	421a      	tst	r2, r3
 800579c:	d003      	beq.n	80057a6 <FLASH_OB_GetRDP+0x12>
  {
    return OB_RDP_LEVEL_0;
  }
  else if ((tmp_reg & FLASH_OBR_RDPRT2) == FLASH_OBR_RDPRT2)
 800579e:	075b      	lsls	r3, r3, #29
 80057a0:	d503      	bpl.n	80057aa <FLASH_OB_GetRDP+0x16>
  {
    return OB_RDP_LEVEL_2;
 80057a2:	20cc      	movs	r0, #204	; 0xcc
 80057a4:	e000      	b.n	80057a8 <FLASH_OB_GetRDP+0x14>
    return OB_RDP_LEVEL_0;
 80057a6:	20aa      	movs	r0, #170	; 0xaa
  }
  else 
  {
    return OB_RDP_LEVEL_1;
  }
}
 80057a8:	4770      	bx	lr
    return OB_RDP_LEVEL_1;
 80057aa:	20bb      	movs	r0, #187	; 0xbb
 80057ac:	e7fc      	b.n	80057a8 <FLASH_OB_GetRDP+0x14>
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40022000 	.word	0x40022000

080057b4 <FLASH_OB_GetUser>:
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <FLASH_OB_GetUser+0xc>)
 80057b6:	69d8      	ldr	r0, [r3, #28]
 80057b8:	0a00      	lsrs	r0, r0, #8
 80057ba:	b2c0      	uxtb	r0, r0
}
 80057bc:	4770      	bx	lr
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	40022000 	.word	0x40022000

080057c4 <FLASH_OB_RDP_LevelConfig>:
{
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057c8:	4813      	ldr	r0, [pc, #76]	; (8005818 <FLASH_OB_RDP_LevelConfig+0x54>)
 80057ca:	f7ff ffa1 	bl	8005710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d000      	beq.n	80057d4 <FLASH_OB_RDP_LevelConfig+0x10>
}
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <FLASH_OB_RDP_LevelConfig+0x58>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80057da:	4d11      	ldr	r5, [pc, #68]	; (8005820 <FLASH_OB_RDP_LevelConfig+0x5c>)
 80057dc:	692b      	ldr	r3, [r5, #16]
 80057de:	2620      	movs	r6, #32
 80057e0:	4333      	orrs	r3, r6
 80057e2:	612b      	str	r3, [r5, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80057e4:	692b      	ldr	r3, [r5, #16]
 80057e6:	3240      	adds	r2, #64	; 0x40
 80057e8:	4313      	orrs	r3, r2
 80057ea:	612b      	str	r3, [r5, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057ec:	480a      	ldr	r0, [pc, #40]	; (8005818 <FLASH_OB_RDP_LevelConfig+0x54>)
 80057ee:	f7ff ff8f 	bl	8005710 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80057f2:	692b      	ldr	r3, [r5, #16]
 80057f4:	43b3      	bics	r3, r6
 80057f6:	612b      	str	r3, [r5, #16]
    if(status == HAL_OK)
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d1ea      	bne.n	80057d2 <FLASH_OB_RDP_LevelConfig+0xe>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80057fc:	692b      	ldr	r3, [r5, #16]
 80057fe:	3e10      	subs	r6, #16
 8005800:	4333      	orrs	r3, r6
 8005802:	612b      	str	r3, [r5, #16]
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8005804:	b2a4      	uxth	r4, r4
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <FLASH_OB_RDP_LevelConfig+0x60>)
 8005808:	801c      	strh	r4, [r3, #0]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 800580a:	4803      	ldr	r0, [pc, #12]	; (8005818 <FLASH_OB_RDP_LevelConfig+0x54>)
 800580c:	f7ff ff80 	bl	8005710 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005810:	692b      	ldr	r3, [r5, #16]
 8005812:	43b3      	bics	r3, r6
 8005814:	612b      	str	r3, [r5, #16]
 8005816:	e7dc      	b.n	80057d2 <FLASH_OB_RDP_LevelConfig+0xe>
 8005818:	0000c350 	.word	0x0000c350
 800581c:	20000d60 	.word	0x20000d60
 8005820:	40022000 	.word	0x40022000
 8005824:	1ffff800 	.word	0x1ffff800

08005828 <FLASH_OB_UserConfig>:
{
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800582c:	480b      	ldr	r0, [pc, #44]	; (800585c <FLASH_OB_UserConfig+0x34>)
 800582e:	f7ff ff6f 	bl	8005710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005832:	2800      	cmp	r0, #0
 8005834:	d000      	beq.n	8005838 <FLASH_OB_UserConfig+0x10>
}
 8005836:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <FLASH_OB_UserConfig+0x38>)
 800583a:	2200      	movs	r2, #0
 800583c:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800583e:	4d09      	ldr	r5, [pc, #36]	; (8005864 <FLASH_OB_UserConfig+0x3c>)
 8005840:	692b      	ldr	r3, [r5, #16]
 8005842:	2610      	movs	r6, #16
 8005844:	4333      	orrs	r3, r6
 8005846:	612b      	str	r3, [r5, #16]
    OB->USER = UserConfig;
 8005848:	b2a4      	uxth	r4, r4
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <FLASH_OB_UserConfig+0x40>)
 800584c:	805c      	strh	r4, [r3, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800584e:	4803      	ldr	r0, [pc, #12]	; (800585c <FLASH_OB_UserConfig+0x34>)
 8005850:	f7ff ff5e 	bl	8005710 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005854:	692b      	ldr	r3, [r5, #16]
 8005856:	43b3      	bics	r3, r6
 8005858:	612b      	str	r3, [r5, #16]
 800585a:	e7ec      	b.n	8005836 <FLASH_OB_UserConfig+0xe>
 800585c:	0000c350 	.word	0x0000c350
 8005860:	20000d60 	.word	0x20000d60
 8005864:	40022000 	.word	0x40022000
 8005868:	1ffff800 	.word	0x1ffff800

0800586c <FLASH_OB_ProgramData>:
{
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	0004      	movs	r4, r0
 8005870:	000d      	movs	r5, r1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005872:	480b      	ldr	r0, [pc, #44]	; (80058a0 <FLASH_OB_ProgramData+0x34>)
 8005874:	f7ff ff4c 	bl	8005710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005878:	2800      	cmp	r0, #0
 800587a:	d000      	beq.n	800587e <FLASH_OB_ProgramData+0x12>
}
 800587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <FLASH_OB_ProgramData+0x38>)
 8005880:	2200      	movs	r2, #0
 8005882:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8005884:	4e08      	ldr	r6, [pc, #32]	; (80058a8 <FLASH_OB_ProgramData+0x3c>)
 8005886:	6933      	ldr	r3, [r6, #16]
 8005888:	2710      	movs	r7, #16
 800588a:	433b      	orrs	r3, r7
 800588c:	6133      	str	r3, [r6, #16]
    *(__IO uint16_t*)Address = Data;
 800588e:	b2ad      	uxth	r5, r5
 8005890:	8025      	strh	r5, [r4, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005892:	4803      	ldr	r0, [pc, #12]	; (80058a0 <FLASH_OB_ProgramData+0x34>)
 8005894:	f7ff ff3c 	bl	8005710 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005898:	6933      	ldr	r3, [r6, #16]
 800589a:	43bb      	bics	r3, r7
 800589c:	6133      	str	r3, [r6, #16]
 800589e:	e7ed      	b.n	800587c <FLASH_OB_ProgramData+0x10>
 80058a0:	0000c350 	.word	0x0000c350
 80058a4:	20000d60 	.word	0x20000d60
 80058a8:	40022000 	.word	0x40022000

080058ac <HAL_FLASHEx_OBErase>:
{
 80058ac:	b570      	push	{r4, r5, r6, lr}
  rdptmp = FLASH_OB_GetRDP();
 80058ae:	f7ff ff71 	bl	8005794 <FLASH_OB_GetRDP>
 80058b2:	b2c5      	uxtb	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058b4:	480e      	ldr	r0, [pc, #56]	; (80058f0 <HAL_FLASHEx_OBErase+0x44>)
 80058b6:	f7ff ff2b 	bl	8005710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d000      	beq.n	80058c0 <HAL_FLASHEx_OBErase+0x14>
}
 80058be:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058c0:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <HAL_FLASHEx_OBErase+0x48>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80058c6:	4c0c      	ldr	r4, [pc, #48]	; (80058f8 <HAL_FLASHEx_OBErase+0x4c>)
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	2620      	movs	r6, #32
 80058cc:	4333      	orrs	r3, r6
 80058ce:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	3240      	adds	r2, #64	; 0x40
 80058d4:	4313      	orrs	r3, r2
 80058d6:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058d8:	4805      	ldr	r0, [pc, #20]	; (80058f0 <HAL_FLASHEx_OBErase+0x44>)
 80058da:	f7ff ff19 	bl	8005710 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	43b3      	bics	r3, r6
 80058e2:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d1ea      	bne.n	80058be <HAL_FLASHEx_OBErase+0x12>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 80058e8:	0028      	movs	r0, r5
 80058ea:	f7ff ff6b 	bl	80057c4 <FLASH_OB_RDP_LevelConfig>
 80058ee:	e7e6      	b.n	80058be <HAL_FLASHEx_OBErase+0x12>
 80058f0:	0000c350 	.word	0x0000c350
 80058f4:	20000d60 	.word	0x20000d60
 80058f8:	40022000 	.word	0x40022000

080058fc <FLASH_OB_EnableWRP>:
{
 80058fc:	b510      	push	{r4, lr}
 80058fe:	0004      	movs	r4, r0
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8005900:	f7ff ff42 	bl	8005788 <FLASH_OB_GetWRP>
 8005904:	43a0      	bics	r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8005906:	24ff      	movs	r4, #255	; 0xff
 8005908:	4004      	ands	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800590a:	4811      	ldr	r0, [pc, #68]	; (8005950 <FLASH_OB_EnableWRP+0x54>)
 800590c:	f7ff ff00 	bl	8005710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005910:	2800      	cmp	r0, #0
 8005912:	d000      	beq.n	8005916 <FLASH_OB_EnableWRP+0x1a>
}
 8005914:	bd10      	pop	{r4, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005916:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <FLASH_OB_EnableWRP+0x58>)
 8005918:	2200      	movs	r2, #0
 800591a:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 800591c:	f7ff ffc6 	bl	80058ac <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8005920:	2800      	cmp	r0, #0
 8005922:	d1f7      	bne.n	8005914 <FLASH_OB_EnableWRP+0x18>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005924:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <FLASH_OB_EnableWRP+0x5c>)
 8005926:	6913      	ldr	r3, [r2, #16]
 8005928:	2110      	movs	r1, #16
 800592a:	430b      	orrs	r3, r1
 800592c:	6113      	str	r3, [r2, #16]
      if(WRP0_Data != 0xFFU)
 800592e:	2cff      	cmp	r4, #255	; 0xff
 8005930:	d105      	bne.n	800593e <FLASH_OB_EnableWRP+0x42>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <FLASH_OB_EnableWRP+0x5c>)
 8005934:	6913      	ldr	r3, [r2, #16]
 8005936:	2110      	movs	r1, #16
 8005938:	438b      	bics	r3, r1
 800593a:	6113      	str	r3, [r2, #16]
 800593c:	e7ea      	b.n	8005914 <FLASH_OB_EnableWRP+0x18>
        OB->WRP0 &= WRP0_Data;
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <FLASH_OB_EnableWRP+0x60>)
 8005940:	8918      	ldrh	r0, [r3, #8]
 8005942:	4020      	ands	r0, r4
 8005944:	8118      	strh	r0, [r3, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005946:	4802      	ldr	r0, [pc, #8]	; (8005950 <FLASH_OB_EnableWRP+0x54>)
 8005948:	f7ff fee2 	bl	8005710 <FLASH_WaitForLastOperation>
 800594c:	e7f1      	b.n	8005932 <FLASH_OB_EnableWRP+0x36>
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	0000c350 	.word	0x0000c350
 8005954:	20000d60 	.word	0x20000d60
 8005958:	40022000 	.word	0x40022000
 800595c:	1ffff800 	.word	0x1ffff800

08005960 <FLASH_OB_DisableWRP>:
{
 8005960:	b510      	push	{r4, lr}
 8005962:	0004      	movs	r4, r0
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8005964:	f7ff ff10 	bl	8005788 <FLASH_OB_GetWRP>
 8005968:	4320      	orrs	r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 800596a:	24ff      	movs	r4, #255	; 0xff
 800596c:	4004      	ands	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800596e:	4811      	ldr	r0, [pc, #68]	; (80059b4 <FLASH_OB_DisableWRP+0x54>)
 8005970:	f7ff fece 	bl	8005710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005974:	2800      	cmp	r0, #0
 8005976:	d000      	beq.n	800597a <FLASH_OB_DisableWRP+0x1a>
}
 8005978:	bd10      	pop	{r4, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <FLASH_OB_DisableWRP+0x58>)
 800597c:	2200      	movs	r2, #0
 800597e:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8005980:	f7ff ff94 	bl	80058ac <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8005984:	2800      	cmp	r0, #0
 8005986:	d1f7      	bne.n	8005978 <FLASH_OB_DisableWRP+0x18>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005988:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <FLASH_OB_DisableWRP+0x5c>)
 800598a:	6913      	ldr	r3, [r2, #16]
 800598c:	2110      	movs	r1, #16
 800598e:	430b      	orrs	r3, r1
 8005990:	6113      	str	r3, [r2, #16]
      if(WRP0_Data != 0xFFU)
 8005992:	2cff      	cmp	r4, #255	; 0xff
 8005994:	d105      	bne.n	80059a2 <FLASH_OB_DisableWRP+0x42>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005996:	4a09      	ldr	r2, [pc, #36]	; (80059bc <FLASH_OB_DisableWRP+0x5c>)
 8005998:	6913      	ldr	r3, [r2, #16]
 800599a:	2110      	movs	r1, #16
 800599c:	438b      	bics	r3, r1
 800599e:	6113      	str	r3, [r2, #16]
 80059a0:	e7ea      	b.n	8005978 <FLASH_OB_DisableWRP+0x18>
        OB->WRP0 &= WRP0_Data;
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <FLASH_OB_DisableWRP+0x60>)
 80059a4:	8918      	ldrh	r0, [r3, #8]
 80059a6:	4020      	ands	r0, r4
 80059a8:	8118      	strh	r0, [r3, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059aa:	4802      	ldr	r0, [pc, #8]	; (80059b4 <FLASH_OB_DisableWRP+0x54>)
 80059ac:	f7ff feb0 	bl	8005710 <FLASH_WaitForLastOperation>
 80059b0:	e7f1      	b.n	8005996 <FLASH_OB_DisableWRP+0x36>
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	0000c350 	.word	0x0000c350
 80059b8:	20000d60 	.word	0x20000d60
 80059bc:	40022000 	.word	0x40022000
 80059c0:	1ffff800 	.word	0x1ffff800

080059c4 <HAL_FLASHEx_OBProgram>:
{
 80059c4:	b510      	push	{r4, lr}
 80059c6:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80059c8:	4b22      	ldr	r3, [pc, #136]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 80059ca:	7e1b      	ldrb	r3, [r3, #24]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d03f      	beq.n	8005a50 <HAL_FLASHEx_OBProgram+0x8c>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 80059d4:	7613      	strb	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80059d6:	6802      	ldr	r2, [r0, #0]
 80059d8:	4213      	tst	r3, r2
 80059da:	d00f      	beq.n	80059fc <HAL_FLASHEx_OBProgram+0x38>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80059dc:	6843      	ldr	r3, [r0, #4]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d008      	beq.n	80059f4 <HAL_FLASHEx_OBProgram+0x30>
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80059e2:	6880      	ldr	r0, [r0, #8]
 80059e4:	f7ff ffbc 	bl	8005960 <FLASH_OB_DisableWRP>
    if (status != HAL_OK)
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d008      	beq.n	80059fe <HAL_FLASHEx_OBProgram+0x3a>
      __HAL_UNLOCK(&pFlash);
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	761a      	strb	r2, [r3, #24]
      return status;
 80059f2:	e010      	b.n	8005a16 <HAL_FLASHEx_OBProgram+0x52>
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 80059f4:	6880      	ldr	r0, [r0, #8]
 80059f6:	f7ff ff81 	bl	80058fc <FLASH_OB_EnableWRP>
 80059fa:	e7f5      	b.n	80059e8 <HAL_FLASHEx_OBProgram+0x24>
  HAL_StatusTypeDef status = HAL_ERROR;
 80059fc:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	079b      	lsls	r3, r3, #30
 8005a02:	d409      	bmi.n	8005a18 <HAL_FLASHEx_OBProgram+0x54>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	075b      	lsls	r3, r3, #29
 8005a08:	d40f      	bmi.n	8005a2a <HAL_FLASHEx_OBProgram+0x66>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	071b      	lsls	r3, r3, #28
 8005a0e:	d415      	bmi.n	8005a3c <HAL_FLASHEx_OBProgram+0x78>
  __HAL_UNLOCK(&pFlash);
 8005a10:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	761a      	strb	r2, [r3, #24]
}
 8005a16:	bd10      	pop	{r4, pc}
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8005a18:	7b20      	ldrb	r0, [r4, #12]
 8005a1a:	f7ff fed3 	bl	80057c4 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_FLASHEx_OBProgram+0x40>
      __HAL_UNLOCK(&pFlash);
 8005a22:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	761a      	strb	r2, [r3, #24]
      return status;
 8005a28:	e7f5      	b.n	8005a16 <HAL_FLASHEx_OBProgram+0x52>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8005a2a:	7b60      	ldrb	r0, [r4, #13]
 8005a2c:	f7ff fefc 	bl	8005828 <FLASH_OB_UserConfig>
    if (status != HAL_OK)
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0ea      	beq.n	8005a0a <HAL_FLASHEx_OBProgram+0x46>
      __HAL_UNLOCK(&pFlash);
 8005a34:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	761a      	strb	r2, [r3, #24]
      return status;
 8005a3a:	e7ec      	b.n	8005a16 <HAL_FLASHEx_OBProgram+0x52>
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8005a3c:	7d21      	ldrb	r1, [r4, #20]
 8005a3e:	6920      	ldr	r0, [r4, #16]
 8005a40:	f7ff ff14 	bl	800586c <FLASH_OB_ProgramData>
    if (status != HAL_OK)
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d0e3      	beq.n	8005a10 <HAL_FLASHEx_OBProgram+0x4c>
      __HAL_UNLOCK(&pFlash);
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <HAL_FLASHEx_OBProgram+0x90>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	761a      	strb	r2, [r3, #24]
      return status;
 8005a4e:	e7e2      	b.n	8005a16 <HAL_FLASHEx_OBProgram+0x52>
  __HAL_LOCK(&pFlash);
 8005a50:	2002      	movs	r0, #2
 8005a52:	e7e0      	b.n	8005a16 <HAL_FLASHEx_OBProgram+0x52>
 8005a54:	20000d60 	.word	0x20000d60

08005a58 <HAL_FLASHEx_OBGetConfig>:
{
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	0004      	movs	r4, r0
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8005a5c:	2307      	movs	r3, #7
 8005a5e:	6003      	str	r3, [r0, #0]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8005a60:	f7ff fe92 	bl	8005788 <FLASH_OB_GetWRP>
 8005a64:	60a0      	str	r0, [r4, #8]
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8005a66:	f7ff fe95 	bl	8005794 <FLASH_OB_GetRDP>
 8005a6a:	7320      	strb	r0, [r4, #12]
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8005a6c:	f7ff fea2 	bl	80057b4 <FLASH_OB_GetUser>
 8005a70:	7360      	strb	r0, [r4, #13]
}
 8005a72:	bd10      	pop	{r4, pc}

08005a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a76:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8005a78:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a7a:	e057      	b.n	8005b2c <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a7c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005a7e:	005f      	lsls	r7, r3, #1
 8005a80:	2603      	movs	r6, #3
 8005a82:	40be      	lsls	r6, r7
 8005a84:	43b4      	bics	r4, r6
 8005a86:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a88:	68cc      	ldr	r4, [r1, #12]
 8005a8a:	40bc      	lsls	r4, r7
 8005a8c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8005a8e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a90:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a92:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a94:	684a      	ldr	r2, [r1, #4]
 8005a96:	0916      	lsrs	r6, r2, #4
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4032      	ands	r2, r6
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8005aa0:	6042      	str	r2, [r0, #4]
 8005aa2:	e053      	b.n	8005b4c <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005aa4:	08dc      	lsrs	r4, r3, #3
 8005aa6:	3408      	adds	r4, #8
 8005aa8:	00a4      	lsls	r4, r4, #2
 8005aaa:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005aac:	3205      	adds	r2, #5
 8005aae:	401a      	ands	r2, r3
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	270f      	movs	r7, #15
 8005ab4:	4097      	lsls	r7, r2
 8005ab6:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ab8:	690f      	ldr	r7, [r1, #16]
 8005aba:	4097      	lsls	r7, r2
 8005abc:	003a      	movs	r2, r7
 8005abe:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8005ac0:	5022      	str	r2, [r4, r0]
 8005ac2:	e057      	b.n	8005b74 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ac4:	2602      	movs	r6, #2
 8005ac6:	e000      	b.n	8005aca <HAL_GPIO_Init+0x56>
 8005ac8:	2600      	movs	r6, #0
 8005aca:	40a6      	lsls	r6, r4
 8005acc:	0034      	movs	r4, r6
 8005ace:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ad0:	3202      	adds	r2, #2
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	4e42      	ldr	r6, [pc, #264]	; (8005be0 <HAL_GPIO_Init+0x16c>)
 8005ad6:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ad8:	4a42      	ldr	r2, [pc, #264]	; (8005be4 <HAL_GPIO_Init+0x170>)
 8005ada:	6814      	ldr	r4, [r2, #0]
        temp &= ~(iocurrent);
 8005adc:	43ea      	mvns	r2, r5
 8005ade:	0026      	movs	r6, r4
 8005ae0:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ae2:	684f      	ldr	r7, [r1, #4]
 8005ae4:	03ff      	lsls	r7, r7, #15
 8005ae6:	d501      	bpl.n	8005aec <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8005ae8:	432c      	orrs	r4, r5
 8005aea:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 8005aec:	4c3d      	ldr	r4, [pc, #244]	; (8005be4 <HAL_GPIO_Init+0x170>)
 8005aee:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8005af0:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8005af2:	0026      	movs	r6, r4
 8005af4:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005af6:	684f      	ldr	r7, [r1, #4]
 8005af8:	03bf      	lsls	r7, r7, #14
 8005afa:	d501      	bpl.n	8005b00 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8005afc:	432c      	orrs	r4, r5
 8005afe:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8005b00:	4c38      	ldr	r4, [pc, #224]	; (8005be4 <HAL_GPIO_Init+0x170>)
 8005b02:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b04:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8005b06:	0026      	movs	r6, r4
 8005b08:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b0a:	684f      	ldr	r7, [r1, #4]
 8005b0c:	02ff      	lsls	r7, r7, #11
 8005b0e:	d501      	bpl.n	8005b14 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8005b10:	432c      	orrs	r4, r5
 8005b12:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8005b14:	4c33      	ldr	r4, [pc, #204]	; (8005be4 <HAL_GPIO_Init+0x170>)
 8005b16:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8005b18:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 8005b1a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b1c:	684e      	ldr	r6, [r1, #4]
 8005b1e:	02b6      	lsls	r6, r6, #10
 8005b20:	d501      	bpl.n	8005b26 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8005b22:	002a      	movs	r2, r5
 8005b24:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8005b26:	4c2f      	ldr	r4, [pc, #188]	; (8005be4 <HAL_GPIO_Init+0x170>)
 8005b28:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 8005b2a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b2c:	680c      	ldr	r4, [r1, #0]
 8005b2e:	0022      	movs	r2, r4
 8005b30:	40da      	lsrs	r2, r3
 8005b32:	d052      	beq.n	8005bda <HAL_GPIO_Init+0x166>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b34:	2201      	movs	r2, #1
 8005b36:	409a      	lsls	r2, r3
 8005b38:	0025      	movs	r5, r4
 8005b3a:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8005b3c:	4214      	tst	r4, r2
 8005b3e:	d0f4      	beq.n	8005b2a <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b40:	2403      	movs	r4, #3
 8005b42:	684e      	ldr	r6, [r1, #4]
 8005b44:	4034      	ands	r4, r6
 8005b46:	3c01      	subs	r4, #1
 8005b48:	2c01      	cmp	r4, #1
 8005b4a:	d997      	bls.n	8005a7c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	684c      	ldr	r4, [r1, #4]
 8005b50:	4022      	ands	r2, r4
 8005b52:	2a03      	cmp	r2, #3
 8005b54:	d009      	beq.n	8005b6a <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8005b56:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005b58:	005e      	lsls	r6, r3, #1
 8005b5a:	2403      	movs	r4, #3
 8005b5c:	40b4      	lsls	r4, r6
 8005b5e:	43a2      	bics	r2, r4
 8005b60:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005b62:	688a      	ldr	r2, [r1, #8]
 8005b64:	40b2      	lsls	r2, r6
 8005b66:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005b68:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	684c      	ldr	r4, [r1, #4]
 8005b6e:	4022      	ands	r2, r4
 8005b70:	2a02      	cmp	r2, #2
 8005b72:	d097      	beq.n	8005aa4 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8005b74:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005b76:	005e      	lsls	r6, r3, #1
 8005b78:	2203      	movs	r2, #3
 8005b7a:	0017      	movs	r7, r2
 8005b7c:	40b7      	lsls	r7, r6
 8005b7e:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b80:	684f      	ldr	r7, [r1, #4]
 8005b82:	403a      	ands	r2, r7
 8005b84:	40b2      	lsls	r2, r6
 8005b86:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005b88:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b8a:	22c0      	movs	r2, #192	; 0xc0
 8005b8c:	0292      	lsls	r2, r2, #10
 8005b8e:	684c      	ldr	r4, [r1, #4]
 8005b90:	4214      	tst	r4, r2
 8005b92:	d0ca      	beq.n	8005b2a <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b94:	4c14      	ldr	r4, [pc, #80]	; (8005be8 <HAL_GPIO_Init+0x174>)
 8005b96:	69a6      	ldr	r6, [r4, #24]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4316      	orrs	r6, r2
 8005b9c:	61a6      	str	r6, [r4, #24]
 8005b9e:	69a4      	ldr	r4, [r4, #24]
 8005ba0:	4022      	ands	r2, r4
 8005ba2:	9201      	str	r2, [sp, #4]
 8005ba4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005ba6:	089a      	lsrs	r2, r3, #2
 8005ba8:	1c94      	adds	r4, r2, #2
 8005baa:	00a4      	lsls	r4, r4, #2
 8005bac:	4e0c      	ldr	r6, [pc, #48]	; (8005be0 <HAL_GPIO_Init+0x16c>)
 8005bae:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005bb0:	2403      	movs	r4, #3
 8005bb2:	401c      	ands	r4, r3
 8005bb4:	00a4      	lsls	r4, r4, #2
 8005bb6:	260f      	movs	r6, #15
 8005bb8:	40a6      	lsls	r6, r4
 8005bba:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005bbc:	2690      	movs	r6, #144	; 0x90
 8005bbe:	05f6      	lsls	r6, r6, #23
 8005bc0:	42b0      	cmp	r0, r6
 8005bc2:	d081      	beq.n	8005ac8 <HAL_GPIO_Init+0x54>
 8005bc4:	4e09      	ldr	r6, [pc, #36]	; (8005bec <HAL_GPIO_Init+0x178>)
 8005bc6:	42b0      	cmp	r0, r6
 8005bc8:	d005      	beq.n	8005bd6 <HAL_GPIO_Init+0x162>
 8005bca:	4e09      	ldr	r6, [pc, #36]	; (8005bf0 <HAL_GPIO_Init+0x17c>)
 8005bcc:	42b0      	cmp	r0, r6
 8005bce:	d100      	bne.n	8005bd2 <HAL_GPIO_Init+0x15e>
 8005bd0:	e778      	b.n	8005ac4 <HAL_GPIO_Init+0x50>
 8005bd2:	2605      	movs	r6, #5
 8005bd4:	e779      	b.n	8005aca <HAL_GPIO_Init+0x56>
 8005bd6:	2601      	movs	r6, #1
 8005bd8:	e777      	b.n	8005aca <HAL_GPIO_Init+0x56>
  } 
}
 8005bda:	b003      	add	sp, #12
 8005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40010400 	.word	0x40010400
 8005be8:	40021000 	.word	0x40021000
 8005bec:	48000400 	.word	0x48000400
 8005bf0:	48000800 	.word	0x48000800

08005bf4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bf4:	6903      	ldr	r3, [r0, #16]
 8005bf6:	420b      	tst	r3, r1
 8005bf8:	d001      	beq.n	8005bfe <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8005bfa:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8005bfc:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e7fc      	b.n	8005bfc <HAL_GPIO_ReadPin+0x8>

08005c02 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c06:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c08:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c0a:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005c0c:	e7fc      	b.n	8005c08 <HAL_GPIO_WritePin+0x6>

08005c0e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c0e:	6803      	ldr	r3, [r0, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	0792      	lsls	r2, r2, #30
 8005c14:	d501      	bpl.n	8005c1a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c16:	2200      	movs	r2, #0
 8005c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c1a:	6803      	ldr	r3, [r0, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	07d2      	lsls	r2, r2, #31
 8005c20:	d403      	bmi.n	8005c2a <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	2101      	movs	r1, #1
 8005c26:	430a      	orrs	r2, r1
 8005c28:	619a      	str	r2, [r3, #24]
  }
}
 8005c2a:	4770      	bx	lr

08005c2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c2c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005c2e:	6804      	ldr	r4, [r0, #0]
 8005c30:	6860      	ldr	r0, [r4, #4]
 8005c32:	9d04      	ldr	r5, [sp, #16]
 8005c34:	0d6d      	lsrs	r5, r5, #21
 8005c36:	2680      	movs	r6, #128	; 0x80
 8005c38:	00f6      	lsls	r6, r6, #3
 8005c3a:	402e      	ands	r6, r5
 8005c3c:	4d06      	ldr	r5, [pc, #24]	; (8005c58 <I2C_TransferConfig+0x2c>)
 8005c3e:	4335      	orrs	r5, r6
 8005c40:	43a8      	bics	r0, r5
 8005c42:	0589      	lsls	r1, r1, #22
 8005c44:	0d89      	lsrs	r1, r1, #22
 8005c46:	0412      	lsls	r2, r2, #16
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	4319      	orrs	r1, r3
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	4319      	orrs	r1, r3
 8005c50:	4301      	orrs	r1, r0
 8005c52:	6061      	str	r1, [r4, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	03ff63ff 	.word	0x03ff63ff

08005c5c <I2C_IsAcknowledgeFailed>:
{
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	0005      	movs	r5, r0
 8005c60:	000f      	movs	r7, r1
 8005c62:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c64:	6803      	ldr	r3, [r0, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	06d2      	lsls	r2, r2, #27
 8005c6a:	d53b      	bpl.n	8005ce4 <I2C_IsAcknowledgeFailed+0x88>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	0192      	lsls	r2, r2, #6
 8005c70:	d404      	bmi.n	8005c7c <I2C_IsAcknowledgeFailed+0x20>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c72:	6859      	ldr	r1, [r3, #4]
 8005c74:	2280      	movs	r2, #128	; 0x80
 8005c76:	01d2      	lsls	r2, r2, #7
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	699c      	ldr	r4, [r3, #24]
 8005c80:	06a2      	lsls	r2, r4, #26
 8005c82:	d415      	bmi.n	8005cb0 <I2C_IsAcknowledgeFailed+0x54>
      if (Timeout != HAL_MAX_DELAY)
 8005c84:	1c7b      	adds	r3, r7, #1
 8005c86:	d0f9      	beq.n	8005c7c <I2C_IsAcknowledgeFailed+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c88:	f7ff fc2c 	bl	80054e4 <HAL_GetTick>
 8005c8c:	1b80      	subs	r0, r0, r6
 8005c8e:	42b8      	cmp	r0, r7
 8005c90:	d801      	bhi.n	8005c96 <I2C_IsAcknowledgeFailed+0x3a>
 8005c92:	2f00      	cmp	r7, #0
 8005c94:	d1f2      	bne.n	8005c7c <I2C_IsAcknowledgeFailed+0x20>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005c98:	2220      	movs	r2, #32
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c9e:	2341      	movs	r3, #65	; 0x41
 8005ca0:	54ea      	strb	r2, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	3222      	adds	r2, #34	; 0x22
 8005ca6:	54ab      	strb	r3, [r5, r2]
          __HAL_UNLOCK(hi2c);
 8005ca8:	3a02      	subs	r2, #2
 8005caa:	54ab      	strb	r3, [r5, r2]
          return HAL_ERROR;
 8005cac:	2001      	movs	r0, #1
 8005cae:	e01a      	b.n	8005ce6 <I2C_IsAcknowledgeFailed+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	2420      	movs	r4, #32
 8005cb8:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005cba:	0028      	movs	r0, r5
 8005cbc:	f7ff ffa7 	bl	8005c0e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005cc0:	682a      	ldr	r2, [r5, #0]
 8005cc2:	6853      	ldr	r3, [r2, #4]
 8005cc4:	4908      	ldr	r1, [pc, #32]	; (8005ce8 <I2C_IsAcknowledgeFailed+0x8c>)
 8005cc6:	400b      	ands	r3, r1
 8005cc8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005ccc:	2204      	movs	r2, #4
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005cd2:	2341      	movs	r3, #65	; 0x41
 8005cd4:	54ec      	strb	r4, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	323e      	adds	r2, #62	; 0x3e
 8005cda:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8005cdc:	3a02      	subs	r2, #2
 8005cde:	54ab      	strb	r3, [r5, r2]
    return HAL_ERROR;
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	e000      	b.n	8005ce6 <I2C_IsAcknowledgeFailed+0x8a>
  return HAL_OK;
 8005ce4:	2000      	movs	r0, #0
}
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce8:	fe00e800 	.word	0xfe00e800

08005cec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	0004      	movs	r4, r0
 8005cf0:	000d      	movs	r5, r1
 8005cf2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	079b      	lsls	r3, r3, #30
 8005cfa:	d41c      	bmi.n	8005d36 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfc:	0032      	movs	r2, r6
 8005cfe:	0029      	movs	r1, r5
 8005d00:	0020      	movs	r0, r4
 8005d02:	f7ff ffab 	bl	8005c5c <I2C_IsAcknowledgeFailed>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d117      	bne.n	8005d3a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	1c6b      	adds	r3, r5, #1
 8005d0c:	d0f2      	beq.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0e:	f7ff fbe9 	bl	80054e4 <HAL_GetTick>
 8005d12:	1b80      	subs	r0, r0, r6
 8005d14:	42a8      	cmp	r0, r5
 8005d16:	d801      	bhi.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d1eb      	bne.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d1e:	2220      	movs	r2, #32
 8005d20:	4313      	orrs	r3, r2
 8005d22:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	2341      	movs	r3, #65	; 0x41
 8005d26:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	3222      	adds	r2, #34	; 0x22
 8005d2c:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8005d2e:	3a02      	subs	r2, #2
 8005d30:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8005d32:	2001      	movs	r0, #1
 8005d34:	e000      	b.n	8005d38 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 8005d36:	2000      	movs	r0, #0
}
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7fc      	b.n	8005d38 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

08005d3e <I2C_WaitOnFlagUntilTimeout>:
{
 8005d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d40:	46c6      	mov	lr, r8
 8005d42:	b500      	push	{lr}
 8005d44:	0007      	movs	r7, r0
 8005d46:	000d      	movs	r5, r1
 8005d48:	4690      	mov	r8, r2
 8005d4a:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	699c      	ldr	r4, [r3, #24]
 8005d50:	402c      	ands	r4, r5
 8005d52:	1b64      	subs	r4, r4, r5
 8005d54:	4263      	negs	r3, r4
 8005d56:	415c      	adcs	r4, r3
 8005d58:	4544      	cmp	r4, r8
 8005d5a:	d116      	bne.n	8005d8a <I2C_WaitOnFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 8005d5c:	1c73      	adds	r3, r6, #1
 8005d5e:	d0f5      	beq.n	8005d4c <I2C_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d60:	f7ff fbc0 	bl	80054e4 <HAL_GetTick>
 8005d64:	9b06      	ldr	r3, [sp, #24]
 8005d66:	1ac0      	subs	r0, r0, r3
 8005d68:	42b0      	cmp	r0, r6
 8005d6a:	d801      	bhi.n	8005d70 <I2C_WaitOnFlagUntilTimeout+0x32>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	d1ed      	bne.n	8005d4c <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d72:	2220      	movs	r2, #32
 8005d74:	4313      	orrs	r3, r2
 8005d76:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d78:	2341      	movs	r3, #65	; 0x41
 8005d7a:	54fa      	strb	r2, [r7, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	3222      	adds	r2, #34	; 0x22
 8005d80:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(hi2c);
 8005d82:	3a02      	subs	r2, #2
 8005d84:	54bb      	strb	r3, [r7, r2]
        return HAL_ERROR;
 8005d86:	2001      	movs	r0, #1
 8005d88:	e000      	b.n	8005d8c <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005d8a:	2000      	movs	r0, #0
}
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	46b8      	mov	r8, r7
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005d94 <I2C_RequestMemoryWrite>:
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	0004      	movs	r4, r0
 8005d9a:	0015      	movs	r5, r2
 8005d9c:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	b2f2      	uxtb	r2, r6
 8005da2:	4819      	ldr	r0, [pc, #100]	; (8005e08 <I2C_RequestMemoryWrite+0x74>)
 8005da4:	9000      	str	r0, [sp, #0]
 8005da6:	045b      	lsls	r3, r3, #17
 8005da8:	0020      	movs	r0, r4
 8005daa:	f7ff ff3f 	bl	8005c2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	9906      	ldr	r1, [sp, #24]
 8005db2:	0020      	movs	r0, r4
 8005db4:	f7ff ff9a 	bl	8005cec <I2C_WaitOnTXISFlagUntilTimeout>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d11e      	bne.n	8005dfa <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dbc:	2e01      	cmp	r6, #1
 8005dbe:	d10e      	bne.n	8005dde <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	b2ed      	uxtb	r5, r5
 8005dc4:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	9b07      	ldr	r3, [sp, #28]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	0020      	movs	r0, r4
 8005dd2:	f7ff ffb4 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d113      	bne.n	8005e02 <I2C_RequestMemoryWrite+0x6e>
}
 8005dda:	b002      	add	sp, #8
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	0a2a      	lsrs	r2, r5, #8
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de4:	9a07      	ldr	r2, [sp, #28]
 8005de6:	9906      	ldr	r1, [sp, #24]
 8005de8:	0020      	movs	r0, r4
 8005dea:	f7ff ff7f 	bl	8005cec <I2C_WaitOnTXISFlagUntilTimeout>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d105      	bne.n	8005dfe <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	b2ed      	uxtb	r5, r5
 8005df6:	629d      	str	r5, [r3, #40]	; 0x28
 8005df8:	e7e5      	b.n	8005dc6 <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	e7ed      	b.n	8005dda <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005dfe:	2001      	movs	r0, #1
 8005e00:	e7eb      	b.n	8005dda <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005e02:	2001      	movs	r0, #1
 8005e04:	e7e9      	b.n	8005dda <I2C_RequestMemoryWrite+0x46>
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	80002000 	.word	0x80002000

08005e0c <I2C_RequestMemoryRead>:
{
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	0004      	movs	r4, r0
 8005e12:	0015      	movs	r5, r2
 8005e14:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <I2C_RequestMemoryRead+0x70>)
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f7ff ff05 	bl	8005c2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e22:	9a07      	ldr	r2, [sp, #28]
 8005e24:	9906      	ldr	r1, [sp, #24]
 8005e26:	0020      	movs	r0, r4
 8005e28:	f7ff ff60 	bl	8005cec <I2C_WaitOnTXISFlagUntilTimeout>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d11e      	bne.n	8005e6e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e30:	2e01      	cmp	r6, #1
 8005e32:	d10e      	bne.n	8005e52 <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	b2ed      	uxtb	r5, r5
 8005e38:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	2200      	movs	r2, #0
 8005e42:	2140      	movs	r1, #64	; 0x40
 8005e44:	0020      	movs	r0, r4
 8005e46:	f7ff ff7a 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d113      	bne.n	8005e76 <I2C_RequestMemoryRead+0x6a>
}
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	0a2a      	lsrs	r2, r5, #8
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e58:	9a07      	ldr	r2, [sp, #28]
 8005e5a:	9906      	ldr	r1, [sp, #24]
 8005e5c:	0020      	movs	r0, r4
 8005e5e:	f7ff ff45 	bl	8005cec <I2C_WaitOnTXISFlagUntilTimeout>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d105      	bne.n	8005e72 <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	b2ed      	uxtb	r5, r5
 8005e6a:	629d      	str	r5, [r3, #40]	; 0x28
 8005e6c:	e7e5      	b.n	8005e3a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005e6e:	2001      	movs	r0, #1
 8005e70:	e7ed      	b.n	8005e4e <I2C_RequestMemoryRead+0x42>
      return HAL_ERROR;
 8005e72:	2001      	movs	r0, #1
 8005e74:	e7eb      	b.n	8005e4e <I2C_RequestMemoryRead+0x42>
    return HAL_ERROR;
 8005e76:	2001      	movs	r0, #1
 8005e78:	e7e9      	b.n	8005e4e <I2C_RequestMemoryRead+0x42>
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	80002000 	.word	0x80002000

08005e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	0005      	movs	r5, r0
 8005e84:	000c      	movs	r4, r1
 8005e86:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	069b      	lsls	r3, r3, #26
 8005e8e:	d41a      	bmi.n	8005ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e90:	0032      	movs	r2, r6
 8005e92:	0021      	movs	r1, r4
 8005e94:	0028      	movs	r0, r5
 8005e96:	f7ff fee1 	bl	8005c5c <I2C_IsAcknowledgeFailed>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d115      	bne.n	8005eca <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7ff fb21 	bl	80054e4 <HAL_GetTick>
 8005ea2:	1b80      	subs	r0, r0, r6
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d801      	bhi.n	8005eac <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	d1ed      	bne.n	8005e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005eae:	2220      	movs	r2, #32
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	2341      	movs	r3, #65	; 0x41
 8005eb6:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	3222      	adds	r2, #34	; 0x22
 8005ebc:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8005ebe:	3a02      	subs	r2, #2
 8005ec0:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8005ec2:	2001      	movs	r0, #1
}
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e7fc      	b.n	8005ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8005eca:	2001      	movs	r0, #1
 8005ecc:	e7fa      	b.n	8005ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

08005ed0 <HAL_I2C_Init>:
{
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8005ed4:	d059      	beq.n	8005f8a <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ed6:	2341      	movs	r3, #65	; 0x41
 8005ed8:	5cc3      	ldrb	r3, [r0, r3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d043      	beq.n	8005f66 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ede:	2341      	movs	r3, #65	; 0x41
 8005ee0:	2224      	movs	r2, #36	; 0x24
 8005ee2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	2101      	movs	r1, #1
 8005eea:	438b      	bics	r3, r1
 8005eec:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <HAL_I2C_Init+0xc0>)
 8005ef2:	6861      	ldr	r1, [r4, #4]
 8005ef4:	400b      	ands	r3, r1
 8005ef6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	6893      	ldr	r3, [r2, #8]
 8005efc:	4925      	ldr	r1, [pc, #148]	; (8005f94 <HAL_I2C_Init+0xc4>)
 8005efe:	400b      	ands	r3, r1
 8005f00:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d034      	beq.n	8005f72 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	2384      	movs	r3, #132	; 0x84
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68a1      	ldr	r1, [r4, #8]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f14:	68e3      	ldr	r3, [r4, #12]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d032      	beq.n	8005f80 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	6851      	ldr	r1, [r2, #4]
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_I2C_Init+0xc8>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	68d3      	ldr	r3, [r2, #12]
 8005f28:	491a      	ldr	r1, [pc, #104]	; (8005f94 <HAL_I2C_Init+0xc4>)
 8005f2a:	400b      	ands	r3, r1
 8005f2c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	6962      	ldr	r2, [r4, #20]
 8005f32:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f34:	69a2      	ldr	r2, [r4, #24]
 8005f36:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f38:	6821      	ldr	r1, [r4, #0]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	69e3      	ldr	r3, [r4, #28]
 8005f42:	6a21      	ldr	r1, [r4, #32]
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	2241      	movs	r2, #65	; 0x41
 8005f58:	311f      	adds	r1, #31
 8005f5a:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	3201      	adds	r2, #1
 8005f60:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005f62:	2000      	movs	r0, #0
}
 8005f64:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005f66:	3340      	adds	r3, #64	; 0x40
 8005f68:	2200      	movs	r2, #0
 8005f6a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8005f6c:	f7ff f9b8 	bl	80052e0 <HAL_I2C_MspInit>
 8005f70:	e7b5      	b.n	8005ede <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	68a1      	ldr	r1, [r4, #8]
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6093      	str	r3, [r2, #8]
 8005f7e:	e7c9      	b.n	8005f14 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	e7c7      	b.n	8005f1a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	e7ea      	b.n	8005f64 <HAL_I2C_Init+0x94>
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	f0ffffff 	.word	0xf0ffffff
 8005f94:	ffff7fff 	.word	0xffff7fff
 8005f98:	02008000 	.word	0x02008000

08005f9c <HAL_I2C_Mem_Write>:
{
 8005f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	0004      	movs	r4, r0
 8005fa2:	9103      	str	r1, [sp, #12]
 8005fa4:	9204      	str	r2, [sp, #16]
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	ab0c      	add	r3, sp, #48	; 0x30
 8005faa:	cb20      	ldmia	r3!, {r5}
 8005fac:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fae:	2341      	movs	r3, #65	; 0x41
 8005fb0:	5cc3      	ldrb	r3, [r0, r3]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d000      	beq.n	8005fb8 <HAL_I2C_Mem_Write+0x1c>
 8005fb6:	e0b3      	b.n	8006120 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	d018      	beq.n	8005fee <HAL_I2C_Mem_Write+0x52>
 8005fbc:	2f00      	cmp	r7, #0
 8005fbe:	d016      	beq.n	8005fee <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	5cc3      	ldrb	r3, [r0, r3]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d100      	bne.n	8005fca <HAL_I2C_Mem_Write+0x2e>
 8005fc8:	e0ad      	b.n	8006126 <HAL_I2C_Mem_Write+0x18a>
 8005fca:	2340      	movs	r3, #64	; 0x40
 8005fcc:	2201      	movs	r2, #1
 8005fce:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8005fd0:	f7ff fa88 	bl	80054e4 <HAL_GetTick>
 8005fd4:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	9000      	str	r0, [sp, #0]
 8005fda:	2319      	movs	r3, #25
 8005fdc:	2201      	movs	r2, #1
 8005fde:	0209      	lsls	r1, r1, #8
 8005fe0:	0020      	movs	r0, r4
 8005fe2:	f7ff feac 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d006      	beq.n	8005ff8 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8005fea:	2001      	movs	r0, #1
 8005fec:	e099      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e094      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ff8:	2341      	movs	r3, #65	; 0x41
 8005ffa:	2221      	movs	r2, #33	; 0x21
 8005ffc:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ffe:	3301      	adds	r3, #1
 8006000:	321f      	adds	r2, #31
 8006002:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006004:	2300      	movs	r3, #0
 8006006:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006008:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800600a:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800600c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800600e:	9601      	str	r6, [sp, #4]
 8006010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9b05      	ldr	r3, [sp, #20]
 8006016:	9a04      	ldr	r2, [sp, #16]
 8006018:	9903      	ldr	r1, [sp, #12]
 800601a:	0020      	movs	r0, r4
 800601c:	f7ff feba 	bl	8005d94 <I2C_RequestMemoryWrite>
 8006020:	2800      	cmp	r0, #0
 8006022:	d10f      	bne.n	8006044 <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006024:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	2bff      	cmp	r3, #255	; 0xff
 800602a:	d910      	bls.n	800604e <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800602c:	23ff      	movs	r3, #255	; 0xff
 800602e:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006030:	3b7f      	subs	r3, #127	; 0x7f
 8006032:	2200      	movs	r2, #0
 8006034:	9200      	str	r2, [sp, #0]
 8006036:	045b      	lsls	r3, r3, #17
 8006038:	32ff      	adds	r2, #255	; 0xff
 800603a:	9903      	ldr	r1, [sp, #12]
 800603c:	0020      	movs	r0, r4
 800603e:	f7ff fdf5 	bl	8005c2c <I2C_TransferConfig>
 8006042:	e021      	b.n	8006088 <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 8006044:	2340      	movs	r3, #64	; 0x40
 8006046:	2200      	movs	r2, #0
 8006048:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800604a:	2001      	movs	r0, #1
 800604c:	e069      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 800604e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006050:	b292      	uxth	r2, r2
 8006052:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	2100      	movs	r1, #0
 800605a:	9100      	str	r1, [sp, #0]
 800605c:	049b      	lsls	r3, r3, #18
 800605e:	9903      	ldr	r1, [sp, #12]
 8006060:	0020      	movs	r0, r4
 8006062:	f7ff fde3 	bl	8005c2c <I2C_TransferConfig>
 8006066:	e00f      	b.n	8006088 <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8006068:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800606a:	b292      	uxth	r2, r2
 800606c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	2100      	movs	r1, #0
 8006074:	9100      	str	r1, [sp, #0]
 8006076:	049b      	lsls	r3, r3, #18
 8006078:	9903      	ldr	r1, [sp, #12]
 800607a:	0020      	movs	r0, r4
 800607c:	f7ff fdd6 	bl	8005c2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006080:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d034      	beq.n	80060f2 <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006088:	0032      	movs	r2, r6
 800608a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800608c:	0020      	movs	r0, r4
 800608e:	f7ff fe2d 	bl	8005cec <I2C_WaitOnTXISFlagUntilTimeout>
 8006092:	2800      	cmp	r0, #0
 8006094:	d149      	bne.n	800612a <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800609e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a0:	3301      	adds	r3, #1
 80060a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80060a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80060ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80060b6:	b292      	uxth	r2, r2
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	d0e1      	beq.n	8006080 <HAL_I2C_Mem_Write+0xe4>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1df      	bne.n	8006080 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060c0:	9600      	str	r6, [sp, #0]
 80060c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	0020      	movs	r0, r4
 80060ca:	f7ff fe38 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d12d      	bne.n	800612e <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2bff      	cmp	r3, #255	; 0xff
 80060d8:	d9c6      	bls.n	8006068 <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060da:	23ff      	movs	r3, #255	; 0xff
 80060dc:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060de:	3b7f      	subs	r3, #127	; 0x7f
 80060e0:	2200      	movs	r2, #0
 80060e2:	9200      	str	r2, [sp, #0]
 80060e4:	045b      	lsls	r3, r3, #17
 80060e6:	32ff      	adds	r2, #255	; 0xff
 80060e8:	9903      	ldr	r1, [sp, #12]
 80060ea:	0020      	movs	r0, r4
 80060ec:	f7ff fd9e 	bl	8005c2c <I2C_TransferConfig>
 80060f0:	e7c6      	b.n	8006080 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f2:	0032      	movs	r2, r6
 80060f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80060f6:	0020      	movs	r0, r4
 80060f8:	f7ff fec2 	bl	8005e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d118      	bne.n	8006132 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	2220      	movs	r2, #32
 8006104:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	684b      	ldr	r3, [r1, #4]
 800610a:	4d0b      	ldr	r5, [pc, #44]	; (8006138 <HAL_I2C_Mem_Write+0x19c>)
 800610c:	402b      	ands	r3, r5
 800610e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006110:	2341      	movs	r3, #65	; 0x41
 8006112:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006114:	2300      	movs	r3, #0
 8006116:	3222      	adds	r2, #34	; 0x22
 8006118:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800611a:	3a02      	subs	r2, #2
 800611c:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 800611e:	e000      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 8006120:	2002      	movs	r0, #2
}
 8006122:	b007      	add	sp, #28
 8006124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8006126:	2002      	movs	r0, #2
 8006128:	e7fb      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 800612a:	2001      	movs	r0, #1
 800612c:	e7f9      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 800612e:	2001      	movs	r0, #1
 8006130:	e7f7      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 8006132:	2001      	movs	r0, #1
 8006134:	e7f5      	b.n	8006122 <HAL_I2C_Mem_Write+0x186>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	fe00e800 	.word	0xfe00e800

0800613c <HAL_I2C_Mem_Read>:
{
 800613c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613e:	b087      	sub	sp, #28
 8006140:	0004      	movs	r4, r0
 8006142:	9103      	str	r1, [sp, #12]
 8006144:	9204      	str	r2, [sp, #16]
 8006146:	9305      	str	r3, [sp, #20]
 8006148:	ab0c      	add	r3, sp, #48	; 0x30
 800614a:	cb20      	ldmia	r3!, {r5}
 800614c:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800614e:	2341      	movs	r3, #65	; 0x41
 8006150:	5cc3      	ldrb	r3, [r0, r3]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d000      	beq.n	8006158 <HAL_I2C_Mem_Read+0x1c>
 8006156:	e0b5      	b.n	80062c4 <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 8006158:	2d00      	cmp	r5, #0
 800615a:	d018      	beq.n	800618e <HAL_I2C_Mem_Read+0x52>
 800615c:	2f00      	cmp	r7, #0
 800615e:	d016      	beq.n	800618e <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	5cc3      	ldrb	r3, [r0, r3]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d100      	bne.n	800616a <HAL_I2C_Mem_Read+0x2e>
 8006168:	e0af      	b.n	80062ca <HAL_I2C_Mem_Read+0x18e>
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	2201      	movs	r2, #1
 800616e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8006170:	f7ff f9b8 	bl	80054e4 <HAL_GetTick>
 8006174:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006176:	2180      	movs	r1, #128	; 0x80
 8006178:	9000      	str	r0, [sp, #0]
 800617a:	2319      	movs	r3, #25
 800617c:	2201      	movs	r2, #1
 800617e:	0209      	lsls	r1, r1, #8
 8006180:	0020      	movs	r0, r4
 8006182:	f7ff fddc 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 8006186:	2800      	cmp	r0, #0
 8006188:	d006      	beq.n	8006198 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 800618a:	2001      	movs	r0, #1
 800618c:	e09b      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800618e:	2380      	movs	r3, #128	; 0x80
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8006194:	2001      	movs	r0, #1
 8006196:	e096      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006198:	2341      	movs	r3, #65	; 0x41
 800619a:	2222      	movs	r2, #34	; 0x22
 800619c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800619e:	3301      	adds	r3, #1
 80061a0:	321e      	adds	r2, #30
 80061a2:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80061a8:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80061aa:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061ac:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061ae:	9601      	str	r6, [sp, #4]
 80061b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	9b05      	ldr	r3, [sp, #20]
 80061b6:	9a04      	ldr	r2, [sp, #16]
 80061b8:	9903      	ldr	r1, [sp, #12]
 80061ba:	0020      	movs	r0, r4
 80061bc:	f7ff fe26 	bl	8005e0c <I2C_RequestMemoryRead>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d10f      	bne.n	80061e4 <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2bff      	cmp	r3, #255	; 0xff
 80061ca:	d910      	bls.n	80061ee <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061cc:	23ff      	movs	r3, #255	; 0xff
 80061ce:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061d0:	3b7f      	subs	r3, #127	; 0x7f
 80061d2:	4a42      	ldr	r2, [pc, #264]	; (80062dc <HAL_I2C_Mem_Read+0x1a0>)
 80061d4:	9200      	str	r2, [sp, #0]
 80061d6:	045b      	lsls	r3, r3, #17
 80061d8:	22ff      	movs	r2, #255	; 0xff
 80061da:	9903      	ldr	r1, [sp, #12]
 80061dc:	0020      	movs	r0, r4
 80061de:	f7ff fd25 	bl	8005c2c <I2C_TransferConfig>
 80061e2:	e021      	b.n	8006228 <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 80061e4:	2340      	movs	r3, #64	; 0x40
 80061e6:	2200      	movs	r2, #0
 80061e8:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80061ea:	2001      	movs	r0, #1
 80061ec:	e06b      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 80061ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80061f0:	b292      	uxth	r2, r2
 80061f2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	4938      	ldr	r1, [pc, #224]	; (80062dc <HAL_I2C_Mem_Read+0x1a0>)
 80061fa:	9100      	str	r1, [sp, #0]
 80061fc:	049b      	lsls	r3, r3, #18
 80061fe:	9903      	ldr	r1, [sp, #12]
 8006200:	0020      	movs	r0, r4
 8006202:	f7ff fd13 	bl	8005c2c <I2C_TransferConfig>
 8006206:	e00f      	b.n	8006228 <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8006208:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800620a:	b292      	uxth	r2, r2
 800620c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	2100      	movs	r1, #0
 8006214:	9100      	str	r1, [sp, #0]
 8006216:	049b      	lsls	r3, r3, #18
 8006218:	9903      	ldr	r1, [sp, #12]
 800621a:	0020      	movs	r0, r4
 800621c:	f7ff fd06 	bl	8005c2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d036      	beq.n	8006296 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006228:	9600      	str	r6, [sp, #0]
 800622a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800622c:	2200      	movs	r2, #0
 800622e:	2104      	movs	r1, #4
 8006230:	0020      	movs	r0, r4
 8006232:	f7ff fd84 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 8006236:	2800      	cmp	r0, #0
 8006238:	d149      	bne.n	80062ce <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006240:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8006242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006244:	3301      	adds	r3, #1
 8006246:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006248:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800624a:	3b01      	subs	r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006250:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006252:	3a01      	subs	r2, #1
 8006254:	b292      	uxth	r2, r2
 8006256:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006258:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800625a:	b292      	uxth	r2, r2
 800625c:	2a00      	cmp	r2, #0
 800625e:	d0df      	beq.n	8006220 <HAL_I2C_Mem_Read+0xe4>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1dd      	bne.n	8006220 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006264:	9600      	str	r6, [sp, #0]
 8006266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006268:	2200      	movs	r2, #0
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	0020      	movs	r0, r4
 800626e:	f7ff fd66 	bl	8005d3e <I2C_WaitOnFlagUntilTimeout>
 8006272:	2800      	cmp	r0, #0
 8006274:	d12d      	bne.n	80062d2 <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006276:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2bff      	cmp	r3, #255	; 0xff
 800627c:	d9c4      	bls.n	8006208 <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800627e:	23ff      	movs	r3, #255	; 0xff
 8006280:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006282:	3b7f      	subs	r3, #127	; 0x7f
 8006284:	2200      	movs	r2, #0
 8006286:	9200      	str	r2, [sp, #0]
 8006288:	045b      	lsls	r3, r3, #17
 800628a:	32ff      	adds	r2, #255	; 0xff
 800628c:	9903      	ldr	r1, [sp, #12]
 800628e:	0020      	movs	r0, r4
 8006290:	f7ff fccc 	bl	8005c2c <I2C_TransferConfig>
 8006294:	e7c4      	b.n	8006220 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006296:	0032      	movs	r2, r6
 8006298:	990e      	ldr	r1, [sp, #56]	; 0x38
 800629a:	0020      	movs	r0, r4
 800629c:	f7ff fdf0 	bl	8005e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d118      	bne.n	80062d6 <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	2220      	movs	r2, #32
 80062a8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	684b      	ldr	r3, [r1, #4]
 80062ae:	4d0c      	ldr	r5, [pc, #48]	; (80062e0 <HAL_I2C_Mem_Read+0x1a4>)
 80062b0:	402b      	ands	r3, r5
 80062b2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062b4:	2341      	movs	r3, #65	; 0x41
 80062b6:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	3222      	adds	r2, #34	; 0x22
 80062bc:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80062be:	3a02      	subs	r2, #2
 80062c0:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80062c2:	e000      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 80062c4:	2002      	movs	r0, #2
}
 80062c6:	b007      	add	sp, #28
 80062c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80062ca:	2002      	movs	r0, #2
 80062cc:	e7fb      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 80062ce:	2001      	movs	r0, #1
 80062d0:	e7f9      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 80062d2:	2001      	movs	r0, #1
 80062d4:	e7f7      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 80062d6:	2001      	movs	r0, #1
 80062d8:	e7f5      	b.n	80062c6 <HAL_I2C_Mem_Read+0x18a>
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	80002400 	.word	0x80002400
 80062e0:	fe00e800 	.word	0xfe00e800

080062e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e6:	2341      	movs	r3, #65	; 0x41
 80062e8:	5cc3      	ldrb	r3, [r0, r3]
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d120      	bne.n	8006330 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ee:	3320      	adds	r3, #32
 80062f0:	5cc3      	ldrb	r3, [r0, r3]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d01e      	beq.n	8006334 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80062f6:	2440      	movs	r4, #64	; 0x40
 80062f8:	2201      	movs	r2, #1
 80062fa:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062fc:	2541      	movs	r5, #65	; 0x41
 80062fe:	2324      	movs	r3, #36	; 0x24
 8006300:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006302:	6806      	ldr	r6, [r0, #0]
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	4393      	bics	r3, r2
 8006308:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800630a:	6806      	ldr	r6, [r0, #0]
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	4f0a      	ldr	r7, [pc, #40]	; (8006338 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8006310:	403b      	ands	r3, r7
 8006312:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006314:	6806      	ldr	r6, [r0, #0]
 8006316:	6833      	ldr	r3, [r6, #0]
 8006318:	4319      	orrs	r1, r3
 800631a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800631c:	6801      	ldr	r1, [r0, #0]
 800631e:	680b      	ldr	r3, [r1, #0]
 8006320:	4313      	orrs	r3, r2
 8006322:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006324:	2320      	movs	r3, #32
 8006326:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006328:	2300      	movs	r3, #0
 800632a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800632c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800632e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006330:	2002      	movs	r0, #2
 8006332:	e7fc      	b.n	800632e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8006334:	2002      	movs	r0, #2
 8006336:	e7fa      	b.n	800632e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8006338:	ffffefff 	.word	0xffffefff

0800633c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800633e:	2341      	movs	r3, #65	; 0x41
 8006340:	5cc3      	ldrb	r3, [r0, r3]
 8006342:	2b20      	cmp	r3, #32
 8006344:	d11e      	bne.n	8006384 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006346:	3320      	adds	r3, #32
 8006348:	5cc3      	ldrb	r3, [r0, r3]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d01c      	beq.n	8006388 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800634e:	2440      	movs	r4, #64	; 0x40
 8006350:	2201      	movs	r2, #1
 8006352:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006354:	2541      	movs	r5, #65	; 0x41
 8006356:	2324      	movs	r3, #36	; 0x24
 8006358:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800635a:	6806      	ldr	r6, [r0, #0]
 800635c:	6833      	ldr	r3, [r6, #0]
 800635e:	4393      	bics	r3, r2
 8006360:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006362:	6806      	ldr	r6, [r0, #0]
 8006364:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006366:	4f09      	ldr	r7, [pc, #36]	; (800638c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8006368:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800636a:	0209      	lsls	r1, r1, #8
 800636c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800636e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006370:	6801      	ldr	r1, [r0, #0]
 8006372:	680b      	ldr	r3, [r1, #0]
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006378:	2320      	movs	r3, #32
 800637a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800637c:	2300      	movs	r3, #0
 800637e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8006380:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006384:	2002      	movs	r0, #2
 8006386:	e7fc      	b.n	8006382 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8006388:	2002      	movs	r0, #2
 800638a:	e7fa      	b.n	8006382 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800638c:	fffff0ff 	.word	0xfffff0ff

08006390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006396:	d100      	bne.n	800639a <HAL_RCC_OscConfig+0xa>
 8006398:	e27f      	b.n	800689a <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800639a:	6803      	ldr	r3, [r0, #0]
 800639c:	07db      	lsls	r3, r3, #31
 800639e:	d52b      	bpl.n	80063f8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80063a0:	4bb3      	ldr	r3, [pc, #716]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	230c      	movs	r3, #12
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d01d      	beq.n	80063e8 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063ac:	4bb0      	ldr	r3, [pc, #704]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	230c      	movs	r3, #12
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d00e      	beq.n	80063d6 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d041      	beq.n	8006442 <HAL_RCC_OscConfig+0xb2>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d156      	bne.n	8006470 <HAL_RCC_OscConfig+0xe0>
 80063c2:	4bab      	ldr	r3, [pc, #684]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	49ab      	ldr	r1, [pc, #684]	; (8006674 <HAL_RCC_OscConfig+0x2e4>)
 80063c8:	400a      	ands	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	49aa      	ldr	r1, [pc, #680]	; (8006678 <HAL_RCC_OscConfig+0x2e8>)
 80063d0:	400a      	ands	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e03b      	b.n	800644e <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063d6:	4ba6      	ldr	r3, [pc, #664]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	22c0      	movs	r2, #192	; 0xc0
 80063dc:	0252      	lsls	r2, r2, #9
 80063de:	4013      	ands	r3, r2
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	0252      	lsls	r2, r2, #9
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d1e7      	bne.n	80063b8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e8:	4ba1      	ldr	r3, [pc, #644]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	039b      	lsls	r3, r3, #14
 80063ee:	d503      	bpl.n	80063f8 <HAL_RCC_OscConfig+0x68>
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d100      	bne.n	80063f8 <HAL_RCC_OscConfig+0x68>
 80063f6:	e253      	b.n	80068a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	079b      	lsls	r3, r3, #30
 80063fc:	d577      	bpl.n	80064ee <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80063fe:	4b9c      	ldr	r3, [pc, #624]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	220c      	movs	r2, #12
 8006404:	421a      	tst	r2, r3
 8006406:	d062      	beq.n	80064ce <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006408:	4b99      	ldr	r3, [pc, #612]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	230c      	movs	r3, #12
 800640e:	4013      	ands	r3, r2
 8006410:	2b08      	cmp	r3, #8
 8006412:	d053      	beq.n	80064bc <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006414:	68e3      	ldr	r3, [r4, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d100      	bne.n	800641c <HAL_RCC_OscConfig+0x8c>
 800641a:	e08a      	b.n	8006532 <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800641c:	4a94      	ldr	r2, [pc, #592]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	430b      	orrs	r3, r1
 8006424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006426:	f7ff f85d 	bl	80054e4 <HAL_GetTick>
 800642a:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642c:	4b90      	ldr	r3, [pc, #576]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	079b      	lsls	r3, r3, #30
 8006432:	d475      	bmi.n	8006520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006434:	f7ff f856 	bl	80054e4 <HAL_GetTick>
 8006438:	1b40      	subs	r0, r0, r5
 800643a:	2802      	cmp	r0, #2
 800643c:	d9f6      	bls.n	800642c <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 800643e:	2003      	movs	r0, #3
 8006440:	e22c      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006442:	4a8b      	ldr	r2, [pc, #556]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006444:	6811      	ldr	r1, [r2, #0]
 8006446:	2380      	movs	r3, #128	; 0x80
 8006448:	025b      	lsls	r3, r3, #9
 800644a:	430b      	orrs	r3, r1
 800644c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800644e:	6863      	ldr	r3, [r4, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d025      	beq.n	80064a0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8006454:	f7ff f846 	bl	80054e4 <HAL_GetTick>
 8006458:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	4b85      	ldr	r3, [pc, #532]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	039b      	lsls	r3, r3, #14
 8006460:	d4ca      	bmi.n	80063f8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006462:	f7ff f83f 	bl	80054e4 <HAL_GetTick>
 8006466:	1b40      	subs	r0, r0, r5
 8006468:	2864      	cmp	r0, #100	; 0x64
 800646a:	d9f6      	bls.n	800645a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800646c:	2003      	movs	r0, #3
 800646e:	e215      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006470:	2b05      	cmp	r3, #5
 8006472:	d009      	beq.n	8006488 <HAL_RCC_OscConfig+0xf8>
 8006474:	4b7e      	ldr	r3, [pc, #504]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	497e      	ldr	r1, [pc, #504]	; (8006674 <HAL_RCC_OscConfig+0x2e4>)
 800647a:	400a      	ands	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	497d      	ldr	r1, [pc, #500]	; (8006678 <HAL_RCC_OscConfig+0x2e8>)
 8006482:	400a      	ands	r2, r1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e7e2      	b.n	800644e <HAL_RCC_OscConfig+0xbe>
 8006488:	4b79      	ldr	r3, [pc, #484]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800648a:	6819      	ldr	r1, [r3, #0]
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	02d2      	lsls	r2, r2, #11
 8006490:	430a      	orrs	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	0252      	lsls	r2, r2, #9
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e7d6      	b.n	800644e <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 80064a0:	f7ff f820 	bl	80054e4 <HAL_GetTick>
 80064a4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a6:	4b72      	ldr	r3, [pc, #456]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	039b      	lsls	r3, r3, #14
 80064ac:	d5a4      	bpl.n	80063f8 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064ae:	f7ff f819 	bl	80054e4 <HAL_GetTick>
 80064b2:	1b40      	subs	r0, r0, r5
 80064b4:	2864      	cmp	r0, #100	; 0x64
 80064b6:	d9f6      	bls.n	80064a6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80064b8:	2003      	movs	r0, #3
 80064ba:	e1ef      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80064bc:	4b6c      	ldr	r3, [pc, #432]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	22c0      	movs	r2, #192	; 0xc0
 80064c2:	0252      	lsls	r2, r2, #9
 80064c4:	4013      	ands	r3, r2
 80064c6:	2280      	movs	r2, #128	; 0x80
 80064c8:	0212      	lsls	r2, r2, #8
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d1a2      	bne.n	8006414 <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ce:	4b68      	ldr	r3, [pc, #416]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	079b      	lsls	r3, r3, #30
 80064d4:	d503      	bpl.n	80064de <HAL_RCC_OscConfig+0x14e>
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d000      	beq.n	80064de <HAL_RCC_OscConfig+0x14e>
 80064dc:	e1e2      	b.n	80068a4 <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	4964      	ldr	r1, [pc, #400]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80064e0:	680b      	ldr	r3, [r1, #0]
 80064e2:	22f8      	movs	r2, #248	; 0xf8
 80064e4:	4393      	bics	r3, r2
 80064e6:	6922      	ldr	r2, [r4, #16]
 80064e8:	00d2      	lsls	r2, r2, #3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	071b      	lsls	r3, r3, #28
 80064f2:	d544      	bpl.n	800657e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f4:	69e3      	ldr	r3, [r4, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d02e      	beq.n	8006558 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064fa:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80064fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80064fe:	2101      	movs	r1, #1
 8006500:	430b      	orrs	r3, r1
 8006502:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006504:	f7fe ffee 	bl	80054e4 <HAL_GetTick>
 8006508:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650a:	4b59      	ldr	r3, [pc, #356]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	079b      	lsls	r3, r3, #30
 8006510:	d435      	bmi.n	800657e <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006512:	f7fe ffe7 	bl	80054e4 <HAL_GetTick>
 8006516:	1b40      	subs	r0, r0, r5
 8006518:	2802      	cmp	r0, #2
 800651a:	d9f6      	bls.n	800650a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800651c:	2003      	movs	r0, #3
 800651e:	e1bd      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006520:	4953      	ldr	r1, [pc, #332]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006522:	680b      	ldr	r3, [r1, #0]
 8006524:	22f8      	movs	r2, #248	; 0xf8
 8006526:	4393      	bics	r3, r2
 8006528:	6922      	ldr	r2, [r4, #16]
 800652a:	00d2      	lsls	r2, r2, #3
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]
 8006530:	e7dd      	b.n	80064ee <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8006532:	4a4f      	ldr	r2, [pc, #316]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006534:	6813      	ldr	r3, [r2, #0]
 8006536:	2101      	movs	r1, #1
 8006538:	438b      	bics	r3, r1
 800653a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800653c:	f7fe ffd2 	bl	80054e4 <HAL_GetTick>
 8006540:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006542:	4b4b      	ldr	r3, [pc, #300]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	079b      	lsls	r3, r3, #30
 8006548:	d5d1      	bpl.n	80064ee <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800654a:	f7fe ffcb 	bl	80054e4 <HAL_GetTick>
 800654e:	1b40      	subs	r0, r0, r5
 8006550:	2802      	cmp	r0, #2
 8006552:	d9f6      	bls.n	8006542 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8006554:	2003      	movs	r0, #3
 8006556:	e1a1      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006558:	4a45      	ldr	r2, [pc, #276]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800655a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800655c:	2101      	movs	r1, #1
 800655e:	438b      	bics	r3, r1
 8006560:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006562:	f7fe ffbf 	bl	80054e4 <HAL_GetTick>
 8006566:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006568:	4b41      	ldr	r3, [pc, #260]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	079b      	lsls	r3, r3, #30
 800656e:	d506      	bpl.n	800657e <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006570:	f7fe ffb8 	bl	80054e4 <HAL_GetTick>
 8006574:	1b40      	subs	r0, r0, r5
 8006576:	2802      	cmp	r0, #2
 8006578:	d9f6      	bls.n	8006568 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 800657a:	2003      	movs	r0, #3
 800657c:	e18e      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	075b      	lsls	r3, r3, #29
 8006582:	d400      	bmi.n	8006586 <HAL_RCC_OscConfig+0x1f6>
 8006584:	e080      	b.n	8006688 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006586:	4b3a      	ldr	r3, [pc, #232]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	d41d      	bmi.n	80065ca <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800658e:	4a38      	ldr	r2, [pc, #224]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006590:	69d1      	ldr	r1, [r2, #28]
 8006592:	2080      	movs	r0, #128	; 0x80
 8006594:	0540      	lsls	r0, r0, #21
 8006596:	4301      	orrs	r1, r0
 8006598:	61d1      	str	r1, [r2, #28]
 800659a:	69d3      	ldr	r3, [r2, #28]
 800659c:	4003      	ands	r3, r0
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80065a2:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a4:	4b35      	ldr	r3, [pc, #212]	; (800667c <HAL_RCC_OscConfig+0x2ec>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	05db      	lsls	r3, r3, #23
 80065aa:	d510      	bpl.n	80065ce <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ac:	68a3      	ldr	r3, [r4, #8]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d021      	beq.n	80065f6 <HAL_RCC_OscConfig+0x266>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d136      	bne.n	8006624 <HAL_RCC_OscConfig+0x294>
 80065b6:	4b2e      	ldr	r3, [pc, #184]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	2101      	movs	r1, #1
 80065bc:	438a      	bics	r2, r1
 80065be:	621a      	str	r2, [r3, #32]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	3103      	adds	r1, #3
 80065c4:	438a      	bics	r2, r1
 80065c6:	621a      	str	r2, [r3, #32]
 80065c8:	e01a      	b.n	8006600 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 80065ca:	2500      	movs	r5, #0
 80065cc:	e7ea      	b.n	80065a4 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ce:	4a2b      	ldr	r2, [pc, #172]	; (800667c <HAL_RCC_OscConfig+0x2ec>)
 80065d0:	6811      	ldr	r1, [r2, #0]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	430b      	orrs	r3, r1
 80065d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80065da:	f7fe ff83 	bl	80054e4 <HAL_GetTick>
 80065de:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e0:	4b26      	ldr	r3, [pc, #152]	; (800667c <HAL_RCC_OscConfig+0x2ec>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	05db      	lsls	r3, r3, #23
 80065e6:	d4e1      	bmi.n	80065ac <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e8:	f7fe ff7c 	bl	80054e4 <HAL_GetTick>
 80065ec:	1b80      	subs	r0, r0, r6
 80065ee:	2864      	cmp	r0, #100	; 0x64
 80065f0:	d9f6      	bls.n	80065e0 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80065f2:	2003      	movs	r0, #3
 80065f4:	e152      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 80065f8:	6a13      	ldr	r3, [r2, #32]
 80065fa:	2101      	movs	r1, #1
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006600:	68a3      	ldr	r3, [r4, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d024      	beq.n	8006650 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006606:	f7fe ff6d 	bl	80054e4 <HAL_GetTick>
 800660a:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660c:	4b18      	ldr	r3, [pc, #96]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	079b      	lsls	r3, r3, #30
 8006612:	d437      	bmi.n	8006684 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006614:	f7fe ff66 	bl	80054e4 <HAL_GetTick>
 8006618:	1b80      	subs	r0, r0, r6
 800661a:	4b19      	ldr	r3, [pc, #100]	; (8006680 <HAL_RCC_OscConfig+0x2f0>)
 800661c:	4298      	cmp	r0, r3
 800661e:	d9f5      	bls.n	800660c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8006620:	2003      	movs	r0, #3
 8006622:	e13b      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006624:	2b05      	cmp	r3, #5
 8006626:	d009      	beq.n	800663c <HAL_RCC_OscConfig+0x2ac>
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800662a:	6a1a      	ldr	r2, [r3, #32]
 800662c:	2101      	movs	r1, #1
 800662e:	438a      	bics	r2, r1
 8006630:	621a      	str	r2, [r3, #32]
 8006632:	6a1a      	ldr	r2, [r3, #32]
 8006634:	3103      	adds	r1, #3
 8006636:	438a      	bics	r2, r1
 8006638:	621a      	str	r2, [r3, #32]
 800663a:	e7e1      	b.n	8006600 <HAL_RCC_OscConfig+0x270>
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 800663e:	6a1a      	ldr	r2, [r3, #32]
 8006640:	2104      	movs	r1, #4
 8006642:	430a      	orrs	r2, r1
 8006644:	621a      	str	r2, [r3, #32]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	3903      	subs	r1, #3
 800664a:	430a      	orrs	r2, r1
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	e7d7      	b.n	8006600 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006650:	f7fe ff48 	bl	80054e4 <HAL_GetTick>
 8006654:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_OscConfig+0x2e0>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	079b      	lsls	r3, r3, #30
 800665c:	d512      	bpl.n	8006684 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665e:	f7fe ff41 	bl	80054e4 <HAL_GetTick>
 8006662:	1b80      	subs	r0, r0, r6
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <HAL_RCC_OscConfig+0x2f0>)
 8006666:	4298      	cmp	r0, r3
 8006668:	d9f5      	bls.n	8006656 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
 800666c:	e116      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	40021000 	.word	0x40021000
 8006674:	fffeffff 	.word	0xfffeffff
 8006678:	fffbffff 	.word	0xfffbffff
 800667c:	40007000 	.word	0x40007000
 8006680:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006684:	2d01      	cmp	r5, #1
 8006686:	d039      	beq.n	80066fc <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	06db      	lsls	r3, r3, #27
 800668c:	d510      	bpl.n	80066b0 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800668e:	6963      	ldr	r3, [r4, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d039      	beq.n	8006708 <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006694:	3305      	adds	r3, #5
 8006696:	d157      	bne.n	8006748 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006698:	4a89      	ldr	r2, [pc, #548]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 800669a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800669c:	2104      	movs	r1, #4
 800669e:	438b      	bics	r3, r1
 80066a0:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80066a4:	31f4      	adds	r1, #244	; 0xf4
 80066a6:	438b      	bics	r3, r1
 80066a8:	69a1      	ldr	r1, [r4, #24]
 80066aa:	00c9      	lsls	r1, r1, #3
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	069b      	lsls	r3, r3, #26
 80066b4:	d56e      	bpl.n	8006794 <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066b6:	4b82      	ldr	r3, [pc, #520]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	230c      	movs	r3, #12
 80066bc:	4013      	ands	r3, r2
 80066be:	2b0c      	cmp	r3, #12
 80066c0:	d060      	beq.n	8006784 <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80066c2:	4b7f      	ldr	r3, [pc, #508]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	230c      	movs	r3, #12
 80066c8:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d053      	beq.n	8006776 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066ce:	6a23      	ldr	r3, [r4, #32]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d07e      	beq.n	80067d2 <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80066d4:	4a7a      	ldr	r2, [pc, #488]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80066d6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	025b      	lsls	r3, r3, #9
 80066dc:	430b      	orrs	r3, r1
 80066de:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e0:	f7fe ff00 	bl	80054e4 <HAL_GetTick>
 80066e4:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80066e6:	4b76      	ldr	r3, [pc, #472]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	03db      	lsls	r3, r3, #15
 80066ec:	d452      	bmi.n	8006794 <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ee:	f7fe fef9 	bl	80054e4 <HAL_GetTick>
 80066f2:	1b40      	subs	r0, r0, r5
 80066f4:	2802      	cmp	r0, #2
 80066f6:	d9f6      	bls.n	80066e6 <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 80066f8:	2003      	movs	r0, #3
 80066fa:	e0cf      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fc:	4a70      	ldr	r2, [pc, #448]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80066fe:	69d3      	ldr	r3, [r2, #28]
 8006700:	4970      	ldr	r1, [pc, #448]	; (80068c4 <HAL_RCC_OscConfig+0x534>)
 8006702:	400b      	ands	r3, r1
 8006704:	61d3      	str	r3, [r2, #28]
 8006706:	e7bf      	b.n	8006688 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8006708:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 800670a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800670c:	2104      	movs	r1, #4
 800670e:	430a      	orrs	r2, r1
 8006710:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8006712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006714:	3903      	subs	r1, #3
 8006716:	430a      	orrs	r2, r1
 8006718:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800671a:	f7fe fee3 	bl	80054e4 <HAL_GetTick>
 800671e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006720:	4b67      	ldr	r3, [pc, #412]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	079b      	lsls	r3, r3, #30
 8006726:	d406      	bmi.n	8006736 <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006728:	f7fe fedc 	bl	80054e4 <HAL_GetTick>
 800672c:	1b40      	subs	r0, r0, r5
 800672e:	2802      	cmp	r0, #2
 8006730:	d9f6      	bls.n	8006720 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8006732:	2003      	movs	r0, #3
 8006734:	e0b2      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006736:	4962      	ldr	r1, [pc, #392]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006738:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800673a:	22f8      	movs	r2, #248	; 0xf8
 800673c:	4393      	bics	r3, r2
 800673e:	69a2      	ldr	r2, [r4, #24]
 8006740:	00d2      	lsls	r2, r2, #3
 8006742:	4313      	orrs	r3, r2
 8006744:	634b      	str	r3, [r1, #52]	; 0x34
 8006746:	e7b3      	b.n	80066b0 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 8006748:	4b5d      	ldr	r3, [pc, #372]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 800674a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674c:	2104      	movs	r1, #4
 800674e:	430a      	orrs	r2, r1
 8006750:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8006752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006754:	3903      	subs	r1, #3
 8006756:	438a      	bics	r2, r1
 8006758:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800675a:	f7fe fec3 	bl	80054e4 <HAL_GetTick>
 800675e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006760:	4b57      	ldr	r3, [pc, #348]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	079b      	lsls	r3, r3, #30
 8006766:	d5a3      	bpl.n	80066b0 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006768:	f7fe febc 	bl	80054e4 <HAL_GetTick>
 800676c:	1b40      	subs	r0, r0, r5
 800676e:	2802      	cmp	r0, #2
 8006770:	d9f6      	bls.n	8006760 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 8006772:	2003      	movs	r0, #3
 8006774:	e092      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006776:	4b52      	ldr	r3, [pc, #328]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	22c0      	movs	r2, #192	; 0xc0
 800677c:	0252      	lsls	r2, r2, #9
 800677e:	4013      	ands	r3, r2
 8006780:	4293      	cmp	r3, r2
 8006782:	d1a4      	bne.n	80066ce <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006784:	4b4e      	ldr	r3, [pc, #312]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006788:	03db      	lsls	r3, r3, #15
 800678a:	d503      	bpl.n	8006794 <HAL_RCC_OscConfig+0x404>
 800678c:	6a23      	ldr	r3, [r4, #32]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d000      	beq.n	8006794 <HAL_RCC_OscConfig+0x404>
 8006792:	e089      	b.n	80068a8 <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d100      	bne.n	800679c <HAL_RCC_OscConfig+0x40c>
 800679a:	e087      	b.n	80068ac <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800679c:	4a48      	ldr	r2, [pc, #288]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 800679e:	6851      	ldr	r1, [r2, #4]
 80067a0:	220c      	movs	r2, #12
 80067a2:	400a      	ands	r2, r1
 80067a4:	2a08      	cmp	r2, #8
 80067a6:	d060      	beq.n	800686a <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d025      	beq.n	80067f8 <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ac:	4a44      	ldr	r2, [pc, #272]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	4945      	ldr	r1, [pc, #276]	; (80068c8 <HAL_RCC_OscConfig+0x538>)
 80067b2:	400b      	ands	r3, r1
 80067b4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b6:	f7fe fe95 	bl	80054e4 <HAL_GetTick>
 80067ba:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067bc:	4b40      	ldr	r3, [pc, #256]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	d550      	bpl.n	8006866 <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c4:	f7fe fe8e 	bl	80054e4 <HAL_GetTick>
 80067c8:	1b00      	subs	r0, r0, r4
 80067ca:	2802      	cmp	r0, #2
 80067cc:	d9f6      	bls.n	80067bc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80067ce:	2003      	movs	r0, #3
 80067d0:	e064      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 80067d2:	4a3b      	ldr	r2, [pc, #236]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80067d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80067d6:	493d      	ldr	r1, [pc, #244]	; (80068cc <HAL_RCC_OscConfig+0x53c>)
 80067d8:	400b      	ands	r3, r1
 80067da:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80067dc:	f7fe fe82 	bl	80054e4 <HAL_GetTick>
 80067e0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067e2:	4b37      	ldr	r3, [pc, #220]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	03db      	lsls	r3, r3, #15
 80067e8:	d5d4      	bpl.n	8006794 <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ea:	f7fe fe7b 	bl	80054e4 <HAL_GetTick>
 80067ee:	1b40      	subs	r0, r0, r5
 80067f0:	2802      	cmp	r0, #2
 80067f2:	d9f6      	bls.n	80067e2 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 80067f4:	2003      	movs	r0, #3
 80067f6:	e051      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 80067f8:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	4932      	ldr	r1, [pc, #200]	; (80068c8 <HAL_RCC_OscConfig+0x538>)
 80067fe:	400b      	ands	r3, r1
 8006800:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006802:	f7fe fe6f 	bl	80054e4 <HAL_GetTick>
 8006806:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006808:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	d506      	bpl.n	800681e <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006810:	f7fe fe68 	bl	80054e4 <HAL_GetTick>
 8006814:	1b40      	subs	r0, r0, r5
 8006816:	2802      	cmp	r0, #2
 8006818:	d9f6      	bls.n	8006808 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 800681a:	2003      	movs	r0, #3
 800681c:	e03e      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800681e:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	210f      	movs	r1, #15
 8006824:	438a      	bics	r2, r1
 8006826:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006828:	430a      	orrs	r2, r1
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4928      	ldr	r1, [pc, #160]	; (80068d0 <HAL_RCC_OscConfig+0x540>)
 8006830:	400a      	ands	r2, r1
 8006832:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006834:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006836:	4301      	orrs	r1, r0
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800683c:	6819      	ldr	r1, [r3, #0]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	0452      	lsls	r2, r2, #17
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006846:	f7fe fe4d 	bl	80054e4 <HAL_GetTick>
 800684a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800684c:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	019b      	lsls	r3, r3, #6
 8006852:	d406      	bmi.n	8006862 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006854:	f7fe fe46 	bl	80054e4 <HAL_GetTick>
 8006858:	1b00      	subs	r0, r0, r4
 800685a:	2802      	cmp	r0, #2
 800685c:	d9f6      	bls.n	800684c <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 800685e:	2003      	movs	r0, #3
 8006860:	e01c      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 8006862:	2000      	movs	r0, #0
 8006864:	e01a      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
 8006866:	2000      	movs	r0, #0
 8006868:	e018      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686a:	2b01      	cmp	r3, #1
 800686c:	d020      	beq.n	80068b0 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_RCC_OscConfig+0x530>)
 8006870:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8006872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	23c0      	movs	r3, #192	; 0xc0
 8006876:	025b      	lsls	r3, r3, #9
 8006878:	4013      	ands	r3, r2
 800687a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800687c:	4283      	cmp	r3, r0
 800687e:	d119      	bne.n	80068b4 <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006880:	230f      	movs	r3, #15
 8006882:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006884:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006886:	428b      	cmp	r3, r1
 8006888:	d116      	bne.n	80068b8 <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800688a:	23f0      	movs	r3, #240	; 0xf0
 800688c:	039b      	lsls	r3, r3, #14
 800688e:	401a      	ands	r2, r3
 8006890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d112      	bne.n	80068bc <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 8006896:	2000      	movs	r0, #0
 8006898:	e000      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 800689a:	2001      	movs	r0, #1
}
 800689c:	b002      	add	sp, #8
 800689e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
 80068a2:	e7fb      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80068a4:	2001      	movs	r0, #1
 80068a6:	e7f9      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80068a8:	2001      	movs	r0, #1
 80068aa:	e7f7      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 80068ac:	2000      	movs	r0, #0
 80068ae:	e7f5      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80068b0:	2001      	movs	r0, #1
 80068b2:	e7f3      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 80068b4:	2001      	movs	r0, #1
 80068b6:	e7f1      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
 80068b8:	2001      	movs	r0, #1
 80068ba:	e7ef      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
 80068bc:	2001      	movs	r0, #1
 80068be:	e7ed      	b.n	800689c <HAL_RCC_OscConfig+0x50c>
 80068c0:	40021000 	.word	0x40021000
 80068c4:	efffffff 	.word	0xefffffff
 80068c8:	feffffff 	.word	0xfeffffff
 80068cc:	fffeffff 	.word	0xfffeffff
 80068d0:	ffc27fff 	.word	0xffc27fff

080068d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d4:	b510      	push	{r4, lr}
 80068d6:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80068d8:	aa04      	add	r2, sp, #16
 80068da:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <HAL_RCC_GetSysClockFreq+0x80>)
 80068dc:	cb13      	ldmia	r3!, {r0, r1, r4}
 80068de:	c213      	stmia	r2!, {r0, r1, r4}
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80068e4:	466a      	mov	r2, sp
 80068e6:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <HAL_RCC_GetSysClockFreq+0x84>)
 80068e8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80068ea:	c213      	stmia	r2!, {r0, r1, r4}
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <HAL_RCC_GetSysClockFreq+0x88>)
 80068f2:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068f4:	230c      	movs	r3, #12
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d004      	beq.n	8006906 <HAL_RCC_GetSysClockFreq+0x32>
 80068fc:	2b0c      	cmp	r3, #12
 80068fe:	d126      	bne.n	800694e <HAL_RCC_GetSysClockFreq+0x7a>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006900:	4817      	ldr	r0, [pc, #92]	; (8006960 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006902:	b008      	add	sp, #32
 8006904:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006906:	0c91      	lsrs	r1, r2, #18
 8006908:	230f      	movs	r3, #15
 800690a:	4019      	ands	r1, r3
 800690c:	a804      	add	r0, sp, #16
 800690e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006910:	4912      	ldr	r1, [pc, #72]	; (800695c <HAL_RCC_GetSysClockFreq+0x88>)
 8006912:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006914:	400b      	ands	r3, r1
 8006916:	4669      	mov	r1, sp
 8006918:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800691a:	23c0      	movs	r3, #192	; 0xc0
 800691c:	025b      	lsls	r3, r3, #9
 800691e:	401a      	ands	r2, r3
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	025b      	lsls	r3, r3, #9
 8006924:	429a      	cmp	r2, r3
 8006926:	d008      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006928:	23c0      	movs	r3, #192	; 0xc0
 800692a:	025b      	lsls	r3, r3, #9
 800692c:	429a      	cmp	r2, r3
 800692e:	d009      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x70>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006930:	480c      	ldr	r0, [pc, #48]	; (8006964 <HAL_RCC_GetSysClockFreq+0x90>)
 8006932:	f7f9 fc0b 	bl	800014c <__udivsi3>
 8006936:	4360      	muls	r0, r4
 8006938:	e7e3      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800693a:	480a      	ldr	r0, [pc, #40]	; (8006964 <HAL_RCC_GetSysClockFreq+0x90>)
 800693c:	f7f9 fc06 	bl	800014c <__udivsi3>
 8006940:	4360      	muls	r0, r4
 8006942:	e7de      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006944:	4806      	ldr	r0, [pc, #24]	; (8006960 <HAL_RCC_GetSysClockFreq+0x8c>)
 8006946:	f7f9 fc01 	bl	800014c <__udivsi3>
 800694a:	4360      	muls	r0, r4
 800694c:	e7d9      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x2e>
  switch (tmpreg & RCC_CFGR_SWS)
 800694e:	4805      	ldr	r0, [pc, #20]	; (8006964 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8006950:	e7d7      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x2e>
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	08007b6c 	.word	0x08007b6c
 8006958:	08007b80 	.word	0x08007b80
 800695c:	40021000 	.word	0x40021000
 8006960:	02dc6c00 	.word	0x02dc6c00
 8006964:	007a1200 	.word	0x007a1200

08006968 <HAL_RCC_ClockConfig>:
{
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	0004      	movs	r4, r0
 800696c:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800696e:	2800      	cmp	r0, #0
 8006970:	d100      	bne.n	8006974 <HAL_RCC_ClockConfig+0xc>
 8006972:	e086      	b.n	8006a82 <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006974:	4b47      	ldr	r3, [pc, #284]	; (8006a94 <HAL_RCC_ClockConfig+0x12c>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	2301      	movs	r3, #1
 800697a:	4013      	ands	r3, r2
 800697c:	428b      	cmp	r3, r1
 800697e:	d20a      	bcs.n	8006996 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006980:	4944      	ldr	r1, [pc, #272]	; (8006a94 <HAL_RCC_ClockConfig+0x12c>)
 8006982:	680b      	ldr	r3, [r1, #0]
 8006984:	2201      	movs	r2, #1
 8006986:	4393      	bics	r3, r2
 8006988:	432b      	orrs	r3, r5
 800698a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698c:	680b      	ldr	r3, [r1, #0]
 800698e:	401a      	ands	r2, r3
 8006990:	42aa      	cmp	r2, r5
 8006992:	d000      	beq.n	8006996 <HAL_RCC_ClockConfig+0x2e>
 8006994:	e077      	b.n	8006a86 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	079a      	lsls	r2, r3, #30
 800699a:	d50e      	bpl.n	80069ba <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800699c:	075b      	lsls	r3, r3, #29
 800699e:	d505      	bpl.n	80069ac <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069a0:	4a3d      	ldr	r2, [pc, #244]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 80069a2:	6851      	ldr	r1, [r2, #4]
 80069a4:	23e0      	movs	r3, #224	; 0xe0
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ac:	4a3a      	ldr	r2, [pc, #232]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 80069ae:	6853      	ldr	r3, [r2, #4]
 80069b0:	21f0      	movs	r1, #240	; 0xf0
 80069b2:	438b      	bics	r3, r1
 80069b4:	68a1      	ldr	r1, [r4, #8]
 80069b6:	430b      	orrs	r3, r1
 80069b8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	07db      	lsls	r3, r3, #31
 80069be:	d535      	bpl.n	8006a2c <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d009      	beq.n	80069da <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d024      	beq.n	8006a14 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d028      	beq.n	8006a20 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ce:	4a32      	ldr	r2, [pc, #200]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	0792      	lsls	r2, r2, #30
 80069d4:	d405      	bmi.n	80069e2 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 80069d6:	2001      	movs	r0, #1
 80069d8:	e052      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069da:	4a2f      	ldr	r2, [pc, #188]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	0392      	lsls	r2, r2, #14
 80069e0:	d553      	bpl.n	8006a8a <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069e2:	492d      	ldr	r1, [pc, #180]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 80069e4:	684a      	ldr	r2, [r1, #4]
 80069e6:	2003      	movs	r0, #3
 80069e8:	4382      	bics	r2, r0
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80069ee:	f7fe fd79 	bl	80054e4 <HAL_GetTick>
 80069f2:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f4:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	220c      	movs	r2, #12
 80069fa:	401a      	ands	r2, r3
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d013      	beq.n	8006a2c <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a04:	f7fe fd6e 	bl	80054e4 <HAL_GetTick>
 8006a08:	1b80      	subs	r0, r0, r6
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <HAL_RCC_ClockConfig+0x134>)
 8006a0c:	4298      	cmp	r0, r3
 8006a0e:	d9f1      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8006a10:	2003      	movs	r0, #3
 8006a12:	e035      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a14:	4a20      	ldr	r2, [pc, #128]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	0192      	lsls	r2, r2, #6
 8006a1a:	d4e2      	bmi.n	80069e2 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	e02f      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006a20:	4a1d      	ldr	r2, [pc, #116]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 8006a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a24:	03d2      	lsls	r2, r2, #15
 8006a26:	d4dc      	bmi.n	80069e2 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e029      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <HAL_RCC_ClockConfig+0x12c>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	2301      	movs	r3, #1
 8006a32:	4013      	ands	r3, r2
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	d909      	bls.n	8006a4c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a38:	4916      	ldr	r1, [pc, #88]	; (8006a94 <HAL_RCC_ClockConfig+0x12c>)
 8006a3a:	680b      	ldr	r3, [r1, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4393      	bics	r3, r2
 8006a40:	432b      	orrs	r3, r5
 8006a42:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a44:	680b      	ldr	r3, [r1, #0]
 8006a46:	401a      	ands	r2, r3
 8006a48:	42aa      	cmp	r2, r5
 8006a4a:	d120      	bne.n	8006a8e <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	075b      	lsls	r3, r3, #29
 8006a50:	d506      	bpl.n	8006a60 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a52:	4a11      	ldr	r2, [pc, #68]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 8006a54:	6853      	ldr	r3, [r2, #4]
 8006a56:	4912      	ldr	r1, [pc, #72]	; (8006aa0 <HAL_RCC_ClockConfig+0x138>)
 8006a58:	400b      	ands	r3, r1
 8006a5a:	68e1      	ldr	r1, [r4, #12]
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a60:	f7ff ff38 	bl	80068d4 <HAL_RCC_GetSysClockFreq>
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_RCC_ClockConfig+0x130>)
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	0912      	lsrs	r2, r2, #4
 8006a6a:	230f      	movs	r3, #15
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <HAL_RCC_ClockConfig+0x13c>)
 8006a70:	5cd3      	ldrb	r3, [r2, r3]
 8006a72:	40d8      	lsrs	r0, r3
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <HAL_RCC_ClockConfig+0x140>)
 8006a76:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7fe fcef 	bl	800545c <HAL_InitTick>
  return HAL_OK;
 8006a7e:	2000      	movs	r0, #0
}
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7fc      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8006a86:	2001      	movs	r0, #1
 8006a88:	e7fa      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	e7f8      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8006a8e:	2001      	movs	r0, #1
 8006a90:	e7f6      	b.n	8006a80 <HAL_RCC_ClockConfig+0x118>
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	40022000 	.word	0x40022000
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	00001388 	.word	0x00001388
 8006aa0:	fffff8ff 	.word	0xfffff8ff
 8006aa4:	08007b54 	.word	0x08007b54
 8006aa8:	20000234 	.word	0x20000234

08006aac <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <HAL_RCC_GetHCLKFreq+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
}
 8006ab0:	4770      	bx	lr
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	20000234 	.word	0x20000234

08006ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006aba:	f7ff fff7 	bl	8006aac <HAL_RCC_GetHCLKFreq>
 8006abe:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	0a12      	lsrs	r2, r2, #8
 8006ac4:	2307      	movs	r3, #7
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	4a02      	ldr	r2, [pc, #8]	; (8006ad4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006aca:	5cd3      	ldrb	r3, [r2, r3]
 8006acc:	40d8      	lsrs	r0, r3
}    
 8006ace:	bd10      	pop	{r4, pc}
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	08007b64 	.word	0x08007b64

08006ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ade:	6803      	ldr	r3, [r0, #0]
 8006ae0:	03db      	lsls	r3, r3, #15
 8006ae2:	d537      	bpl.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ae4:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	d45d      	bmi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aec:	4a45      	ldr	r2, [pc, #276]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006aee:	69d1      	ldr	r1, [r2, #28]
 8006af0:	2080      	movs	r0, #128	; 0x80
 8006af2:	0540      	lsls	r0, r0, #21
 8006af4:	4301      	orrs	r1, r0
 8006af6:	61d1      	str	r1, [r2, #28]
 8006af8:	69d3      	ldr	r3, [r2, #28]
 8006afa:	4003      	ands	r3, r0
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006b00:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b02:	4b41      	ldr	r3, [pc, #260]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	d550      	bpl.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b0a:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b0c:	6a1a      	ldr	r2, [r3, #32]
 8006b0e:	23c0      	movs	r3, #192	; 0xc0
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	0011      	movs	r1, r2
 8006b14:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b16:	421a      	tst	r2, r3
 8006b18:	d013      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	428b      	cmp	r3, r1
 8006b20:	d00f      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b22:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b24:	6a18      	ldr	r0, [r3, #32]
 8006b26:	4a39      	ldr	r2, [pc, #228]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b28:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b2a:	6a1e      	ldr	r6, [r3, #32]
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	0249      	lsls	r1, r1, #9
 8006b30:	4331      	orrs	r1, r6
 8006b32:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b34:	6a19      	ldr	r1, [r3, #32]
 8006b36:	4e36      	ldr	r6, [pc, #216]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006b38:	4031      	ands	r1, r6
 8006b3a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b3e:	07c3      	lsls	r3, r0, #31
 8006b40:	d448      	bmi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b42:	4a30      	ldr	r2, [pc, #192]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b44:	6a13      	ldr	r3, [r2, #32]
 8006b46:	4931      	ldr	r1, [pc, #196]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b48:	400b      	ands	r3, r1
 8006b4a:	6861      	ldr	r1, [r4, #4]
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b50:	2d01      	cmp	r5, #1
 8006b52:	d04e      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	07db      	lsls	r3, r3, #31
 8006b58:	d506      	bpl.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b5a:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006b5e:	2103      	movs	r1, #3
 8006b60:	438b      	bics	r3, r1
 8006b62:	68a1      	ldr	r1, [r4, #8]
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	069b      	lsls	r3, r3, #26
 8006b6c:	d506      	bpl.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b6e:	4a25      	ldr	r2, [pc, #148]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006b72:	2110      	movs	r1, #16
 8006b74:	438b      	bics	r3, r1
 8006b76:	68e1      	ldr	r1, [r4, #12]
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	039b      	lsls	r3, r3, #14
 8006b80:	d506      	bpl.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b82:	4a20      	ldr	r2, [pc, #128]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	438b      	bics	r3, r1
 8006b8a:	6961      	ldr	r1, [r4, #20]
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	055b      	lsls	r3, r3, #21
 8006b94:	d532      	bpl.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b96:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006b98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006b9a:	2140      	movs	r1, #64	; 0x40
 8006b9c:	438b      	bics	r3, r1
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e02a      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x126>
    FlagStatus       pwrclkchanged = RESET;
 8006ba8:	2500      	movs	r5, #0
 8006baa:	e7aa      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bac:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bae:	6811      	ldr	r1, [r2, #0]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006bb8:	f7fe fc94 	bl	80054e4 <HAL_GetTick>
 8006bbc:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	05db      	lsls	r3, r3, #23
 8006bc4:	d4a1      	bmi.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc6:	f7fe fc8d 	bl	80054e4 <HAL_GetTick>
 8006bca:	1b80      	subs	r0, r0, r6
 8006bcc:	2864      	cmp	r0, #100	; 0x64
 8006bce:	d9f6      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          return HAL_TIMEOUT;
 8006bd0:	2003      	movs	r0, #3
 8006bd2:	e014      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x126>
        tickstart = HAL_GetTick();
 8006bd4:	f7fe fc86 	bl	80054e4 <HAL_GetTick>
 8006bd8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	079b      	lsls	r3, r3, #30
 8006be0:	d4af      	bmi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be2:	f7fe fc7f 	bl	80054e4 <HAL_GetTick>
 8006be6:	1b80      	subs	r0, r0, r6
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bea:	4298      	cmp	r0, r3
 8006bec:	d9f5      	bls.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x102>
            return HAL_TIMEOUT;
 8006bee:	2003      	movs	r0, #3
 8006bf0:	e005      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf2:	69d3      	ldr	r3, [r2, #28]
 8006bf4:	4908      	ldr	r1, [pc, #32]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	61d3      	str	r3, [r2, #28]
 8006bfa:	e7ab      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8006bfc:	2000      	movs	r0, #0
}
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	40021000 	.word	0x40021000
 8006c08:	40007000 	.word	0x40007000
 8006c0c:	fffffcff 	.word	0xfffffcff
 8006c10:	fffeffff 	.word	0xfffeffff
 8006c14:	00001388 	.word	0x00001388
 8006c18:	efffffff 	.word	0xefffffff

08006c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c1c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c1e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c20:	6a04      	ldr	r4, [r0, #32]
 8006c22:	2501      	movs	r5, #1
 8006c24:	43ac      	bics	r4, r5
 8006c26:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c28:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c2a:	35ef      	adds	r5, #239	; 0xef
 8006c2c:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2e:	0112      	lsls	r2, r2, #4
 8006c30:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c32:	240a      	movs	r4, #10
 8006c34:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8006c36:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c38:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006c3a:	6203      	str	r3, [r0, #32]
}
 8006c3c:	bd30      	pop	{r4, r5, pc}
	...

08006c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c40:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c42:	6a03      	ldr	r3, [r0, #32]
 8006c44:	2410      	movs	r4, #16
 8006c46:	43a3      	bics	r3, r4
 8006c48:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006c4c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4e:	4d05      	ldr	r5, [pc, #20]	; (8006c64 <TIM_TI2_ConfigInputStage+0x24>)
 8006c50:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c52:	0312      	lsls	r2, r2, #12
 8006c54:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c56:	24a0      	movs	r4, #160	; 0xa0
 8006c58:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c5a:	0109      	lsls	r1, r1, #4
 8006c5c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c5e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006c60:	6201      	str	r1, [r0, #32]
}
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	ffff0fff 	.word	0xffff0fff

08006c68 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c68:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6a:	2270      	movs	r2, #112	; 0x70
 8006c6c:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	2107      	movs	r1, #7
 8006c72:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c74:	6083      	str	r3, [r0, #8]
}
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006c78:	233d      	movs	r3, #61	; 0x3d
 8006c7a:	5cc3      	ldrb	r3, [r0, r3]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d123      	bne.n	8006cc8 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	333c      	adds	r3, #60	; 0x3c
 8006c82:	2202      	movs	r2, #2
 8006c84:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c86:	6802      	ldr	r2, [r0, #0]
 8006c88:	68d3      	ldr	r3, [r2, #12]
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c90:	6803      	ldr	r3, [r0, #0]
 8006c92:	4a0f      	ldr	r2, [pc, #60]	; (8006cd0 <HAL_TIM_Base_Start_IT+0x58>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00c      	beq.n	8006cb2 <HAL_TIM_Base_Start_IT+0x3a>
 8006c98:	2280      	movs	r2, #128	; 0x80
 8006c9a:	05d2      	lsls	r2, r2, #23
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d008      	beq.n	8006cb2 <HAL_TIM_Base_Start_IT+0x3a>
 8006ca0:	4a0c      	ldr	r2, [pc, #48]	; (8006cd4 <HAL_TIM_Base_Start_IT+0x5c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d005      	beq.n	8006cb2 <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	2101      	movs	r1, #1
 8006caa:	430a      	orrs	r2, r1
 8006cac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e00b      	b.n	8006cca <HAL_TIM_Base_Start_IT+0x52>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb2:	6899      	ldr	r1, [r3, #8]
 8006cb4:	2207      	movs	r2, #7
 8006cb6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb8:	2a06      	cmp	r2, #6
 8006cba:	d007      	beq.n	8006ccc <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e000      	b.n	8006cca <HAL_TIM_Base_Start_IT+0x52>
    return HAL_ERROR;
 8006cc8:	2001      	movs	r0, #1
}
 8006cca:	4770      	bx	lr
  return HAL_OK;
 8006ccc:	2000      	movs	r0, #0
 8006cce:	e7fc      	b.n	8006cca <HAL_TIM_Base_Start_IT+0x52>
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40000400 	.word	0x40000400

08006cd8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006cd8:	4770      	bx	lr

08006cda <HAL_TIM_IC_CaptureCallback>:
}
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006cdc:	4770      	bx	lr

08006cde <HAL_TIM_TriggerCallback>:
}
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIM_IRQHandler>:
{
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ce4:	6803      	ldr	r3, [r0, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	0792      	lsls	r2, r2, #30
 8006cea:	d50f      	bpl.n	8006d0c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	0792      	lsls	r2, r2, #30
 8006cf0:	d50c      	bpl.n	8006d0c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	4252      	negs	r2, r2
 8006cf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cfc:	6803      	ldr	r3, [r0, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	079b      	lsls	r3, r3, #30
 8006d02:	d063      	beq.n	8006dcc <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8006d04:	f7ff ffe9 	bl	8006cda <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	0752      	lsls	r2, r2, #29
 8006d12:	d512      	bpl.n	8006d3a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	0752      	lsls	r2, r2, #29
 8006d18:	d50f      	bpl.n	8006d3a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	4252      	negs	r2, r2
 8006d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d20:	2302      	movs	r3, #2
 8006d22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	23c0      	movs	r3, #192	; 0xc0
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	421a      	tst	r2, r3
 8006d2e:	d053      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d30:	0020      	movs	r0, r4
 8006d32:	f7ff ffd2 	bl	8006cda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	2300      	movs	r3, #0
 8006d38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	0712      	lsls	r2, r2, #28
 8006d40:	d510      	bpl.n	8006d64 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	0712      	lsls	r2, r2, #28
 8006d46:	d50d      	bpl.n	8006d64 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d48:	2209      	movs	r2, #9
 8006d4a:	4252      	negs	r2, r2
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d4e:	2304      	movs	r3, #4
 8006d50:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	079b      	lsls	r3, r3, #30
 8006d58:	d045      	beq.n	8006de6 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5a:	0020      	movs	r0, r4
 8006d5c:	f7ff ffbd 	bl	8006cda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d60:	2300      	movs	r3, #0
 8006d62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	06d2      	lsls	r2, r2, #27
 8006d6a:	d512      	bpl.n	8006d92 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	06d2      	lsls	r2, r2, #27
 8006d70:	d50f      	bpl.n	8006d92 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d72:	2211      	movs	r2, #17
 8006d74:	4252      	negs	r2, r2
 8006d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d78:	2308      	movs	r3, #8
 8006d7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	23c0      	movs	r3, #192	; 0xc0
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	421a      	tst	r2, r3
 8006d86:	d035      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d88:	0020      	movs	r0, r4
 8006d8a:	f7ff ffa6 	bl	8006cda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	07d2      	lsls	r2, r2, #31
 8006d98:	d502      	bpl.n	8006da0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	07d2      	lsls	r2, r2, #31
 8006d9e:	d430      	bmi.n	8006e02 <HAL_TIM_IRQHandler+0x122>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	0612      	lsls	r2, r2, #24
 8006da6:	d502      	bpl.n	8006dae <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	0612      	lsls	r2, r2, #24
 8006dac:	d430      	bmi.n	8006e10 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	0652      	lsls	r2, r2, #25
 8006db4:	d502      	bpl.n	8006dbc <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	0652      	lsls	r2, r2, #25
 8006dba:	d430      	bmi.n	8006e1e <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	0692      	lsls	r2, r2, #26
 8006dc2:	d502      	bpl.n	8006dca <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	0692      	lsls	r2, r2, #26
 8006dc8:	d430      	bmi.n	8006e2c <HAL_TIM_IRQHandler+0x14c>
}
 8006dca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dcc:	f7ff ff84 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	0020      	movs	r0, r4
 8006dd2:	f7ff ff83 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
 8006dd6:	e797      	b.n	8006d08 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd8:	0020      	movs	r0, r4
 8006dda:	f7ff ff7d 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dde:	0020      	movs	r0, r4
 8006de0:	f7ff ff7c 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
 8006de4:	e7a7      	b.n	8006d36 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	0020      	movs	r0, r4
 8006de8:	f7ff ff76 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	0020      	movs	r0, r4
 8006dee:	f7ff ff75 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
 8006df2:	e7b5      	b.n	8006d60 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df4:	0020      	movs	r0, r4
 8006df6:	f7ff ff6f 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfa:	0020      	movs	r0, r4
 8006dfc:	f7ff ff6e 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
 8006e00:	e7c5      	b.n	8006d8e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e02:	2202      	movs	r2, #2
 8006e04:	4252      	negs	r2, r2
 8006e06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e08:	0020      	movs	r0, r4
 8006e0a:	f7fa fa65 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
 8006e0e:	e7c7      	b.n	8006da0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e10:	2281      	movs	r2, #129	; 0x81
 8006e12:	4252      	negs	r2, r2
 8006e14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006e16:	0020      	movs	r0, r4
 8006e18:	f000 f949 	bl	80070ae <HAL_TIMEx_BreakCallback>
 8006e1c:	e7c7      	b.n	8006dae <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e1e:	2241      	movs	r2, #65	; 0x41
 8006e20:	4252      	negs	r2, r2
 8006e22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006e24:	0020      	movs	r0, r4
 8006e26:	f7ff ff5a 	bl	8006cde <HAL_TIM_TriggerCallback>
 8006e2a:	e7c7      	b.n	8006dbc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e2c:	2221      	movs	r2, #33	; 0x21
 8006e2e:	4252      	negs	r2, r2
 8006e30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006e32:	0020      	movs	r0, r4
 8006e34:	f000 f93a 	bl	80070ac <HAL_TIMEx_CommutCallback>
}
 8006e38:	e7c7      	b.n	8006dca <HAL_TIM_IRQHandler+0xea>
	...

08006e3c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006e3c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <TIM_Base_SetConfig+0x7c>)
 8006e40:	4290      	cmp	r0, r2
 8006e42:	d006      	beq.n	8006e52 <TIM_Base_SetConfig+0x16>
 8006e44:	2280      	movs	r2, #128	; 0x80
 8006e46:	05d2      	lsls	r2, r2, #23
 8006e48:	4290      	cmp	r0, r2
 8006e4a:	d002      	beq.n	8006e52 <TIM_Base_SetConfig+0x16>
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <TIM_Base_SetConfig+0x80>)
 8006e4e:	4290      	cmp	r0, r2
 8006e50:	d103      	bne.n	8006e5a <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e52:	2270      	movs	r2, #112	; 0x70
 8006e54:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8006e56:	684a      	ldr	r2, [r1, #4]
 8006e58:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e5a:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <TIM_Base_SetConfig+0x7c>)
 8006e5c:	4290      	cmp	r0, r2
 8006e5e:	d00f      	beq.n	8006e80 <TIM_Base_SetConfig+0x44>
 8006e60:	2280      	movs	r2, #128	; 0x80
 8006e62:	05d2      	lsls	r2, r2, #23
 8006e64:	4290      	cmp	r0, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_Base_SetConfig+0x44>
 8006e68:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <TIM_Base_SetConfig+0x80>)
 8006e6a:	4290      	cmp	r0, r2
 8006e6c:	d008      	beq.n	8006e80 <TIM_Base_SetConfig+0x44>
 8006e6e:	4a14      	ldr	r2, [pc, #80]	; (8006ec0 <TIM_Base_SetConfig+0x84>)
 8006e70:	4290      	cmp	r0, r2
 8006e72:	d005      	beq.n	8006e80 <TIM_Base_SetConfig+0x44>
 8006e74:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <TIM_Base_SetConfig+0x88>)
 8006e76:	4290      	cmp	r0, r2
 8006e78:	d002      	beq.n	8006e80 <TIM_Base_SetConfig+0x44>
 8006e7a:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <TIM_Base_SetConfig+0x8c>)
 8006e7c:	4290      	cmp	r0, r2
 8006e7e:	d103      	bne.n	8006e88 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e80:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <TIM_Base_SetConfig+0x90>)
 8006e82:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e84:	68ca      	ldr	r2, [r1, #12]
 8006e86:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e88:	2280      	movs	r2, #128	; 0x80
 8006e8a:	4393      	bics	r3, r2
 8006e8c:	694a      	ldr	r2, [r1, #20]
 8006e8e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e90:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e92:	688b      	ldr	r3, [r1, #8]
 8006e94:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e96:	680b      	ldr	r3, [r1, #0]
 8006e98:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e9a:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <TIM_Base_SetConfig+0x7c>)
 8006e9c:	4298      	cmp	r0, r3
 8006e9e:	d005      	beq.n	8006eac <TIM_Base_SetConfig+0x70>
 8006ea0:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <TIM_Base_SetConfig+0x88>)
 8006ea2:	4298      	cmp	r0, r3
 8006ea4:	d002      	beq.n	8006eac <TIM_Base_SetConfig+0x70>
 8006ea6:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <TIM_Base_SetConfig+0x8c>)
 8006ea8:	4298      	cmp	r0, r3
 8006eaa:	d101      	bne.n	8006eb0 <TIM_Base_SetConfig+0x74>
    TIMx->RCR = Structure->RepetitionCounter;
 8006eac:	690b      	ldr	r3, [r1, #16]
 8006eae:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	6143      	str	r3, [r0, #20]
}
 8006eb4:	4770      	bx	lr
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40000400 	.word	0x40000400
 8006ec0:	40002000 	.word	0x40002000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800
 8006ecc:	fffffcff 	.word	0xfffffcff

08006ed0 <HAL_TIM_Base_Init>:
{
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8006ed4:	d026      	beq.n	8006f24 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed6:	233d      	movs	r3, #61	; 0x3d
 8006ed8:	5cc3      	ldrb	r3, [r0, r3]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d01c      	beq.n	8006f18 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ede:	253d      	movs	r5, #61	; 0x3d
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee4:	0021      	movs	r1, r4
 8006ee6:	c901      	ldmia	r1!, {r0}
 8006ee8:	f7ff ffa8 	bl	8006e3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eec:	2301      	movs	r3, #1
 8006eee:	2246      	movs	r2, #70	; 0x46
 8006ef0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef2:	3a08      	subs	r2, #8
 8006ef4:	54a3      	strb	r3, [r4, r2]
 8006ef6:	3201      	adds	r2, #1
 8006ef8:	54a3      	strb	r3, [r4, r2]
 8006efa:	3201      	adds	r2, #1
 8006efc:	54a3      	strb	r3, [r4, r2]
 8006efe:	3201      	adds	r2, #1
 8006f00:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	3201      	adds	r2, #1
 8006f04:	54a3      	strb	r3, [r4, r2]
 8006f06:	3201      	adds	r2, #1
 8006f08:	54a3      	strb	r3, [r4, r2]
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	54a3      	strb	r3, [r4, r2]
 8006f0e:	3201      	adds	r2, #1
 8006f10:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8006f12:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006f14:	2000      	movs	r0, #0
}
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f18:	333c      	adds	r3, #60	; 0x3c
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8006f1e:	f7fe fa13 	bl	8005348 <HAL_TIM_Base_MspInit>
 8006f22:	e7dc      	b.n	8006ede <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8006f24:	2001      	movs	r0, #1
 8006f26:	e7f6      	b.n	8006f16 <HAL_TIM_Base_Init+0x46>

08006f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f28:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f2c:	4d03      	ldr	r5, [pc, #12]	; (8006f3c <TIM_ETR_SetConfig+0x14>)
 8006f2e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	4313      	orrs	r3, r2
 8006f34:	430b      	orrs	r3, r1
 8006f36:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f38:	6083      	str	r3, [r0, #8]
}
 8006f3a:	bd30      	pop	{r4, r5, pc}
 8006f3c:	ffff00ff 	.word	0xffff00ff

08006f40 <HAL_TIM_ConfigClockSource>:
{
 8006f40:	b510      	push	{r4, lr}
 8006f42:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8006f44:	233c      	movs	r3, #60	; 0x3c
 8006f46:	5cc3      	ldrb	r3, [r0, r3]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d100      	bne.n	8006f4e <HAL_TIM_ConfigClockSource+0xe>
 8006f4c:	e078      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x100>
 8006f4e:	233c      	movs	r3, #60	; 0x3c
 8006f50:	2201      	movs	r2, #1
 8006f52:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	3301      	adds	r3, #1
 8006f56:	3201      	adds	r2, #1
 8006f58:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8006f5a:	6802      	ldr	r2, [r0, #0]
 8006f5c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f5e:	4839      	ldr	r0, [pc, #228]	; (8007044 <HAL_TIM_ConfigClockSource+0x104>)
 8006f60:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8006f62:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006f64:	680b      	ldr	r3, [r1, #0]
 8006f66:	2b60      	cmp	r3, #96	; 0x60
 8006f68:	d050      	beq.n	800700c <HAL_TIM_ConfigClockSource+0xcc>
 8006f6a:	d82a      	bhi.n	8006fc2 <HAL_TIM_ConfigClockSource+0x82>
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d058      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0xe2>
 8006f70:	d90c      	bls.n	8006f8c <HAL_TIM_ConfigClockSource+0x4c>
 8006f72:	2b50      	cmp	r3, #80	; 0x50
 8006f74:	d123      	bne.n	8006fbe <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f76:	68ca      	ldr	r2, [r1, #12]
 8006f78:	6849      	ldr	r1, [r1, #4]
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	f7ff fe4e 	bl	8006c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f80:	2150      	movs	r1, #80	; 0x50
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	f7ff fe70 	bl	8006c68 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006f88:	2000      	movs	r0, #0
      break;
 8006f8a:	e005      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x6e>
 8006f90:	d909      	bls.n	8006fa6 <HAL_TIM_ConfigClockSource+0x66>
 8006f92:	2b30      	cmp	r3, #48	; 0x30
 8006f94:	d00b      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8006f96:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	233d      	movs	r3, #61	; 0x3d
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	54e2      	strb	r2, [r4, r3]
}
 8006fa4:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x6e>
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d105      	bne.n	8006fba <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fae:	0019      	movs	r1, r3
 8006fb0:	6820      	ldr	r0, [r4, #0]
 8006fb2:	f7ff fe59 	bl	8006c68 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006fb6:	2000      	movs	r0, #0
      break;
 8006fb8:	e7ee      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8006fba:	2001      	movs	r0, #1
 8006fbc:	e7ec      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	e7ea      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	0152      	lsls	r2, r2, #5
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d036      	beq.n	8007038 <HAL_TIM_ConfigClockSource+0xf8>
 8006fca:	2280      	movs	r2, #128	; 0x80
 8006fcc:	0192      	lsls	r2, r2, #6
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d10d      	bne.n	8006fee <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8006fd2:	68cb      	ldr	r3, [r1, #12]
 8006fd4:	684a      	ldr	r2, [r1, #4]
 8006fd6:	6889      	ldr	r1, [r1, #8]
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	f7ff ffa5 	bl	8006f28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	6891      	ldr	r1, [r2, #8]
 8006fe2:	2380      	movs	r3, #128	; 0x80
 8006fe4:	01db      	lsls	r3, r3, #7
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006fea:	2000      	movs	r0, #0
      break;
 8006fec:	e7d4      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006fee:	2b70      	cmp	r3, #112	; 0x70
 8006ff0:	d124      	bne.n	800703c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8006ff2:	68cb      	ldr	r3, [r1, #12]
 8006ff4:	684a      	ldr	r2, [r1, #4]
 8006ff6:	6889      	ldr	r1, [r1, #8]
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	f7ff ff95 	bl	8006f28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007002:	2177      	movs	r1, #119	; 0x77
 8007004:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8007006:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007008:	2000      	movs	r0, #0
      break;
 800700a:	e7c5      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800700c:	68ca      	ldr	r2, [r1, #12]
 800700e:	6849      	ldr	r1, [r1, #4]
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	f7ff fe15 	bl	8006c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007016:	2160      	movs	r1, #96	; 0x60
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	f7ff fe25 	bl	8006c68 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800701e:	2000      	movs	r0, #0
      break;
 8007020:	e7ba      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007022:	68ca      	ldr	r2, [r1, #12]
 8007024:	6849      	ldr	r1, [r1, #4]
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	f7ff fdf8 	bl	8006c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	f7ff fe1a 	bl	8006c68 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007034:	2000      	movs	r0, #0
      break;
 8007036:	e7af      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8007038:	2000      	movs	r0, #0
 800703a:	e7ad      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 800703c:	2001      	movs	r0, #1
 800703e:	e7ab      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8007040:	2002      	movs	r0, #2
 8007042:	e7af      	b.n	8006fa4 <HAL_TIM_ConfigClockSource+0x64>
 8007044:	ffff0088 	.word	0xffff0088

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	233c      	movs	r3, #60	; 0x3c
 800704c:	5cc3      	ldrb	r3, [r0, r3]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d025      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007052:	233c      	movs	r3, #60	; 0x3c
 8007054:	2201      	movs	r2, #1
 8007056:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	3301      	adds	r3, #1
 800705a:	3201      	adds	r2, #1
 800705c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800705e:	6803      	ldr	r3, [r0, #0]
 8007060:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007062:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007064:	2570      	movs	r5, #112	; 0x70
 8007066:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007068:	680d      	ldr	r5, [r1, #0]
 800706a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800706c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706e:	6803      	ldr	r3, [r0, #0]
 8007070:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d006      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007076:	2280      	movs	r2, #128	; 0x80
 8007078:	05d2      	lsls	r2, r2, #23
 800707a:	4293      	cmp	r3, r2
 800707c:	d002      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800707e:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d104      	bne.n	800708e <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007084:	2280      	movs	r2, #128	; 0x80
 8007086:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007088:	684a      	ldr	r2, [r1, #4]
 800708a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800708c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800708e:	233d      	movs	r3, #61	; 0x3d
 8007090:	2201      	movs	r2, #1
 8007092:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8007094:	3b01      	subs	r3, #1
 8007096:	2200      	movs	r2, #0
 8007098:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800709a:	2000      	movs	r0, #0
}
 800709c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800709e:	2002      	movs	r0, #2
 80070a0:	e7fc      	b.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40000400 	.word	0x40000400

080070ac <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070ac:	4770      	bx	lr

080070ae <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070ae:	4770      	bx	lr

080070b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b2:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b6:	2201      	movs	r2, #1
 80070b8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070bc:	6801      	ldr	r1, [r0, #0]
 80070be:	680b      	ldr	r3, [r1, #0]
 80070c0:	4c12      	ldr	r4, [pc, #72]	; (800710c <UART_EndRxTransfer+0x5c>)
 80070c2:	4023      	ands	r3, r4
 80070c4:	600b      	str	r3, [r1, #0]
 80070c6:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ca:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ce:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	6801      	ldr	r1, [r0, #0]
 80070d4:	688b      	ldr	r3, [r1, #8]
 80070d6:	4393      	bics	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
 80070da:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070de:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d005      	beq.n	80070f0 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	2320      	movs	r3, #32
 80070e6:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e8:	2300      	movs	r3, #0
 80070ea:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ec:	6643      	str	r3, [r0, #100]	; 0x64
}
 80070ee:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f8:	6802      	ldr	r2, [r0, #0]
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	3432      	adds	r4, #50	; 0x32
 80070fe:	34ff      	adds	r4, #255	; 0xff
 8007100:	43a3      	bics	r3, r4
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	f381 8810 	msr	PRIMASK, r1
}
 8007108:	e7ec      	b.n	80070e4 <UART_EndRxTransfer+0x34>
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	fffffedf 	.word	0xfffffedf

08007110 <HAL_UART_TxCpltCallback>:
}
 8007110:	4770      	bx	lr

08007112 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007112:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007114:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007118:	2301      	movs	r3, #1
 800711a:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800711e:	6802      	ldr	r2, [r0, #0]
 8007120:	6813      	ldr	r3, [r2, #0]
 8007122:	2440      	movs	r4, #64	; 0x40
 8007124:	43a3      	bics	r3, r4
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800712c:	2320      	movs	r3, #32
 800712e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007134:	f7ff ffec 	bl	8007110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007138:	bd10      	pop	{r4, pc}

0800713a <HAL_UART_ErrorCallback>:
}
 800713a:	4770      	bx	lr

0800713c <UART_DMAAbortOnError>:
{
 800713c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800713e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	225a      	movs	r2, #90	; 0x5a
 8007144:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8007146:	3a08      	subs	r2, #8
 8007148:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 800714a:	f7ff fff6 	bl	800713a <HAL_UART_ErrorCallback>
}
 800714e:	bd10      	pop	{r4, pc}

08007150 <HAL_UARTEx_RxEventCallback>:
}
 8007150:	4770      	bx	lr
	...

08007154 <HAL_UART_IRQHandler>:
{
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007158:	6802      	ldr	r2, [r0, #0]
 800715a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800715c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800715e:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007160:	49aa      	ldr	r1, [pc, #680]	; (800740c <HAL_UART_IRQHandler+0x2b8>)
 8007162:	001e      	movs	r6, r3
 8007164:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8007166:	420b      	tst	r3, r1
 8007168:	d103      	bne.n	8007172 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800716a:	0699      	lsls	r1, r3, #26
 800716c:	d501      	bpl.n	8007172 <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800716e:	0681      	lsls	r1, r0, #26
 8007170:	d41d      	bmi.n	80071ae <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8007172:	2e00      	cmp	r6, #0
 8007174:	d007      	beq.n	8007186 <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007176:	2101      	movs	r1, #1
 8007178:	000e      	movs	r6, r1
 800717a:	402e      	ands	r6, r5
 800717c:	4229      	tst	r1, r5
 800717e:	d11c      	bne.n	80071ba <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007180:	49a3      	ldr	r1, [pc, #652]	; (8007410 <HAL_UART_IRQHandler+0x2bc>)
 8007182:	4208      	tst	r0, r1
 8007184:	d119      	bne.n	80071ba <HAL_UART_IRQHandler+0x66>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007186:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007188:	2901      	cmp	r1, #1
 800718a:	d100      	bne.n	800718e <HAL_UART_IRQHandler+0x3a>
 800718c:	e098      	b.n	80072c0 <HAL_UART_IRQHandler+0x16c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800718e:	02d9      	lsls	r1, r3, #11
 8007190:	d502      	bpl.n	8007198 <HAL_UART_IRQHandler+0x44>
 8007192:	0269      	lsls	r1, r5, #9
 8007194:	d500      	bpl.n	8007198 <HAL_UART_IRQHandler+0x44>
 8007196:	e127      	b.n	80073e8 <HAL_UART_IRQHandler+0x294>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007198:	061a      	lsls	r2, r3, #24
 800719a:	d502      	bpl.n	80071a2 <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800719c:	0602      	lsls	r2, r0, #24
 800719e:	d500      	bpl.n	80071a2 <HAL_UART_IRQHandler+0x4e>
 80071a0:	e129      	b.n	80073f6 <HAL_UART_IRQHandler+0x2a2>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071a2:	065b      	lsls	r3, r3, #25
 80071a4:	d502      	bpl.n	80071ac <HAL_UART_IRQHandler+0x58>
 80071a6:	0643      	lsls	r3, r0, #25
 80071a8:	d500      	bpl.n	80071ac <HAL_UART_IRQHandler+0x58>
 80071aa:	e12b      	b.n	8007404 <HAL_UART_IRQHandler+0x2b0>
}
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80071ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0fb      	beq.n	80071ac <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 80071b4:	0020      	movs	r0, r4
 80071b6:	4798      	blx	r3
      return;
 80071b8:	e7f8      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	d507      	bpl.n	80071ce <HAL_UART_IRQHandler+0x7a>
 80071be:	05c1      	lsls	r1, r0, #23
 80071c0:	d505      	bpl.n	80071ce <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071c2:	2501      	movs	r5, #1
 80071c4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	5862      	ldr	r2, [r4, r1]
 80071ca:	432a      	orrs	r2, r5
 80071cc:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ce:	079a      	lsls	r2, r3, #30
 80071d0:	d509      	bpl.n	80071e6 <HAL_UART_IRQHandler+0x92>
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	d007      	beq.n	80071e6 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	2102      	movs	r1, #2
 80071da:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071dc:	317e      	adds	r1, #126	; 0x7e
 80071de:	5862      	ldr	r2, [r4, r1]
 80071e0:	2504      	movs	r5, #4
 80071e2:	432a      	orrs	r2, r5
 80071e4:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071e6:	075a      	lsls	r2, r3, #29
 80071e8:	d509      	bpl.n	80071fe <HAL_UART_IRQHandler+0xaa>
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	d007      	beq.n	80071fe <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	2104      	movs	r1, #4
 80071f2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071f4:	317c      	adds	r1, #124	; 0x7c
 80071f6:	5862      	ldr	r2, [r4, r1]
 80071f8:	2502      	movs	r5, #2
 80071fa:	432a      	orrs	r2, r5
 80071fc:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071fe:	071a      	lsls	r2, r3, #28
 8007200:	d50a      	bpl.n	8007218 <HAL_UART_IRQHandler+0xc4>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007202:	0682      	lsls	r2, r0, #26
 8007204:	d401      	bmi.n	800720a <HAL_UART_IRQHandler+0xb6>
 8007206:	2e00      	cmp	r6, #0
 8007208:	d006      	beq.n	8007218 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	2508      	movs	r5, #8
 800720e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007210:	2180      	movs	r1, #128	; 0x80
 8007212:	5862      	ldr	r2, [r4, r1]
 8007214:	432a      	orrs	r2, r5
 8007216:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007218:	051a      	lsls	r2, r3, #20
 800721a:	d50a      	bpl.n	8007232 <HAL_UART_IRQHandler+0xde>
 800721c:	0142      	lsls	r2, r0, #5
 800721e:	d508      	bpl.n	8007232 <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	2180      	movs	r1, #128	; 0x80
 8007224:	0109      	lsls	r1, r1, #4
 8007226:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	5862      	ldr	r2, [r4, r1]
 800722c:	2520      	movs	r5, #32
 800722e:	432a      	orrs	r2, r5
 8007230:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	58a2      	ldr	r2, [r4, r2]
 8007236:	2a00      	cmp	r2, #0
 8007238:	d0b8      	beq.n	80071ac <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800723a:	069b      	lsls	r3, r3, #26
 800723c:	d506      	bpl.n	800724c <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800723e:	0683      	lsls	r3, r0, #26
 8007240:	d504      	bpl.n	800724c <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8007242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8007248:	0020      	movs	r0, r4
 800724a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800724c:	2380      	movs	r3, #128	; 0x80
 800724e:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	065b      	lsls	r3, r3, #25
 8007256:	d402      	bmi.n	800725e <HAL_UART_IRQHandler+0x10a>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007258:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800725a:	4213      	tst	r3, r2
 800725c:	d029      	beq.n	80072b2 <HAL_UART_IRQHandler+0x15e>
        UART_EndRxTransfer(huart);
 800725e:	0020      	movs	r0, r4
 8007260:	f7ff ff26 	bl	80070b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	065b      	lsls	r3, r3, #25
 800726a:	d51e      	bpl.n	80072aa <HAL_UART_IRQHandler+0x156>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800726c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007270:	2301      	movs	r3, #1
 8007272:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007276:	6822      	ldr	r2, [r4, #0]
 8007278:	6893      	ldr	r3, [r2, #8]
 800727a:	2040      	movs	r0, #64	; 0x40
 800727c:	4383      	bics	r3, r0
 800727e:	6093      	str	r3, [r2, #8]
 8007280:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8007284:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_UART_IRQHandler+0x14e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800728a:	4a62      	ldr	r2, [pc, #392]	; (8007414 <HAL_UART_IRQHandler+0x2c0>)
 800728c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800728e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007290:	f7fe f9cc 	bl	800562c <HAL_DMA_Abort_IT>
 8007294:	2800      	cmp	r0, #0
 8007296:	d100      	bne.n	800729a <HAL_UART_IRQHandler+0x146>
 8007298:	e788      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800729a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800729c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800729e:	4798      	blx	r3
 80072a0:	e784      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 80072a2:	0020      	movs	r0, r4
 80072a4:	f7ff ff49 	bl	800713a <HAL_UART_ErrorCallback>
 80072a8:	e780      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80072aa:	0020      	movs	r0, r4
 80072ac:	f7ff ff45 	bl	800713a <HAL_UART_ErrorCallback>
 80072b0:	e77c      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 80072b2:	0020      	movs	r0, r4
 80072b4:	f7ff ff41 	bl	800713a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	2380      	movs	r3, #128	; 0x80
 80072ba:	2200      	movs	r2, #0
 80072bc:	50e2      	str	r2, [r4, r3]
    return;
 80072be:	e775      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072c0:	06d9      	lsls	r1, r3, #27
 80072c2:	d400      	bmi.n	80072c6 <HAL_UART_IRQHandler+0x172>
 80072c4:	e763      	b.n	800718e <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072c6:	06c1      	lsls	r1, r0, #27
 80072c8:	d400      	bmi.n	80072cc <HAL_UART_IRQHandler+0x178>
 80072ca:	e760      	b.n	800718e <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072cc:	2310      	movs	r3, #16
 80072ce:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	065b      	lsls	r3, r3, #25
 80072d6:	d54f      	bpl.n	8007378 <HAL_UART_IRQHandler+0x224>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d100      	bne.n	80072e6 <HAL_UART_IRQHandler+0x192>
 80072e4:	e762      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072e6:	2158      	movs	r1, #88	; 0x58
 80072e8:	5a61      	ldrh	r1, [r4, r1]
 80072ea:	4299      	cmp	r1, r3
 80072ec:	d800      	bhi.n	80072f0 <HAL_UART_IRQHandler+0x19c>
 80072ee:	e75d      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 80072f0:	215a      	movs	r1, #90	; 0x5a
 80072f2:	5263      	strh	r3, [r4, r1]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072f4:	6993      	ldr	r3, [r2, #24]
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d109      	bne.n	800730e <HAL_UART_IRQHandler+0x1ba>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072fa:	2358      	movs	r3, #88	; 0x58
 80072fc:	5ae1      	ldrh	r1, [r4, r3]
 80072fe:	3302      	adds	r3, #2
 8007300:	5ae3      	ldrh	r3, [r4, r3]
 8007302:	1ac9      	subs	r1, r1, r3
 8007304:	b289      	uxth	r1, r1
 8007306:	0020      	movs	r0, r4
 8007308:	f7ff ff22 	bl	8007150 <HAL_UARTEx_RxEventCallback>
      return;
 800730c:	e74e      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007312:	2301      	movs	r3, #1
 8007314:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007318:	6821      	ldr	r1, [r4, #0]
 800731a:	680a      	ldr	r2, [r1, #0]
 800731c:	4d3e      	ldr	r5, [pc, #248]	; (8007418 <HAL_UART_IRQHandler+0x2c4>)
 800731e:	402a      	ands	r2, r5
 8007320:	600a      	str	r2, [r1, #0]
 8007322:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007326:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	688a      	ldr	r2, [r1, #8]
 8007332:	439a      	bics	r2, r3
 8007334:	608a      	str	r2, [r1, #8]
 8007336:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	6821      	ldr	r1, [r4, #0]
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	3542      	adds	r5, #66	; 0x42
 8007348:	35ff      	adds	r5, #255	; 0xff
 800734a:	43aa      	bics	r2, r5
 800734c:	608a      	str	r2, [r1, #8]
 800734e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8007352:	2220      	movs	r2, #32
 8007354:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	2200      	movs	r2, #0
 8007358:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800735a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	6813      	ldr	r3, [r2, #0]
 8007366:	2010      	movs	r0, #16
 8007368:	4383      	bics	r3, r0
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007370:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007372:	f7fe f939 	bl	80055e8 <HAL_DMA_Abort>
 8007376:	e7c0      	b.n	80072fa <HAL_UART_IRQHandler+0x1a6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007378:	2358      	movs	r3, #88	; 0x58
 800737a:	5ae1      	ldrh	r1, [r4, r3]
 800737c:	3302      	adds	r3, #2
 800737e:	5ae2      	ldrh	r2, [r4, r3]
 8007380:	1a89      	subs	r1, r1, r2
 8007382:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007384:	5ae3      	ldrh	r3, [r4, r3]
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d100      	bne.n	800738e <HAL_UART_IRQHandler+0x23a>
 800738c:	e70e      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
          && (nb_rx_data > 0U))
 800738e:	2900      	cmp	r1, #0
 8007390:	d100      	bne.n	8007394 <HAL_UART_IRQHandler+0x240>
 8007392:	e70b      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007394:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007398:	2301      	movs	r3, #1
 800739a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800739e:	6820      	ldr	r0, [r4, #0]
 80073a0:	6802      	ldr	r2, [r0, #0]
 80073a2:	4e1e      	ldr	r6, [pc, #120]	; (800741c <HAL_UART_IRQHandler+0x2c8>)
 80073a4:	4032      	ands	r2, r6
 80073a6:	6002      	str	r2, [r0, #0]
 80073a8:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	6882      	ldr	r2, [r0, #8]
 80073b8:	439a      	bics	r2, r3
 80073ba:	6082      	str	r2, [r0, #8]
 80073bc:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 80073c0:	2220      	movs	r2, #32
 80073c2:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c4:	2200      	movs	r2, #0
 80073c6:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 80073c8:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ce:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	6813      	ldr	r3, [r2, #0]
 80073d6:	2510      	movs	r5, #16
 80073d8:	43ab      	bics	r3, r5
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073e0:	0020      	movs	r0, r4
 80073e2:	f7ff feb5 	bl	8007150 <HAL_UARTEx_RxEventCallback>
      return;
 80073e6:	e6e1      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073e8:	2380      	movs	r3, #128	; 0x80
 80073ea:	035b      	lsls	r3, r3, #13
 80073ec:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80073ee:	0020      	movs	r0, r4
 80073f0:	f000 f816 	bl	8007420 <HAL_UARTEx_WakeupCallback>
    return;
 80073f4:	e6da      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 80073f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d100      	bne.n	80073fe <HAL_UART_IRQHandler+0x2aa>
 80073fc:	e6d6      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 80073fe:	0020      	movs	r0, r4
 8007400:	4798      	blx	r3
    return;
 8007402:	e6d3      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8007404:	0020      	movs	r0, r4
 8007406:	f7ff fe84 	bl	8007112 <UART_EndTransmit_IT>
    return;
 800740a:	e6cf      	b.n	80071ac <HAL_UART_IRQHandler+0x58>
 800740c:	0000080f 	.word	0x0000080f
 8007410:	04000120 	.word	0x04000120
 8007414:	0800713d 	.word	0x0800713d
 8007418:	fffffeff 	.word	0xfffffeff
 800741c:	fffffedf 	.word	0xfffffedf

08007420 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007420:	4770      	bx	lr
	...

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	2600      	movs	r6, #0
 8007428:	4d0c      	ldr	r5, [pc, #48]	; (800745c <__libc_init_array+0x38>)
 800742a:	4c0d      	ldr	r4, [pc, #52]	; (8007460 <__libc_init_array+0x3c>)
 800742c:	1b64      	subs	r4, r4, r5
 800742e:	10a4      	asrs	r4, r4, #2
 8007430:	42a6      	cmp	r6, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	2600      	movs	r6, #0
 8007436:	f000 f839 	bl	80074ac <_init>
 800743a:	4d0a      	ldr	r5, [pc, #40]	; (8007464 <__libc_init_array+0x40>)
 800743c:	4c0a      	ldr	r4, [pc, #40]	; (8007468 <__libc_init_array+0x44>)
 800743e:	1b64      	subs	r4, r4, r5
 8007440:	10a4      	asrs	r4, r4, #2
 8007442:	42a6      	cmp	r6, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	00b3      	lsls	r3, r6, #2
 800744a:	58eb      	ldr	r3, [r5, r3]
 800744c:	4798      	blx	r3
 800744e:	3601      	adds	r6, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	00b3      	lsls	r3, r6, #2
 8007454:	58eb      	ldr	r3, [r5, r3]
 8007456:	4798      	blx	r3
 8007458:	3601      	adds	r6, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	08007b9c 	.word	0x08007b9c
 8007460:	08007b9c 	.word	0x08007b9c
 8007464:	08007b9c 	.word	0x08007b9c
 8007468:	08007ba0 	.word	0x08007ba0

0800746c <memcmp>:
 800746c:	b530      	push	{r4, r5, lr}
 800746e:	2400      	movs	r4, #0
 8007470:	3901      	subs	r1, #1
 8007472:	42a2      	cmp	r2, r4
 8007474:	d101      	bne.n	800747a <memcmp+0xe>
 8007476:	2000      	movs	r0, #0
 8007478:	e005      	b.n	8007486 <memcmp+0x1a>
 800747a:	5d03      	ldrb	r3, [r0, r4]
 800747c:	3401      	adds	r4, #1
 800747e:	5d0d      	ldrb	r5, [r1, r4]
 8007480:	42ab      	cmp	r3, r5
 8007482:	d0f6      	beq.n	8007472 <memcmp+0x6>
 8007484:	1b58      	subs	r0, r3, r5
 8007486:	bd30      	pop	{r4, r5, pc}

08007488 <memcpy>:
 8007488:	2300      	movs	r3, #0
 800748a:	b510      	push	{r4, lr}
 800748c:	429a      	cmp	r2, r3
 800748e:	d100      	bne.n	8007492 <memcpy+0xa>
 8007490:	bd10      	pop	{r4, pc}
 8007492:	5ccc      	ldrb	r4, [r1, r3]
 8007494:	54c4      	strb	r4, [r0, r3]
 8007496:	3301      	adds	r3, #1
 8007498:	e7f8      	b.n	800748c <memcpy+0x4>

0800749a <memset>:
 800749a:	0003      	movs	r3, r0
 800749c:	1882      	adds	r2, r0, r2
 800749e:	4293      	cmp	r3, r2
 80074a0:	d100      	bne.n	80074a4 <memset+0xa>
 80074a2:	4770      	bx	lr
 80074a4:	7019      	strb	r1, [r3, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	e7f9      	b.n	800749e <memset+0x4>
	...

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
