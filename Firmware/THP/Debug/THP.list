
THP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe0  08006fe0  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08006fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000120  08007108  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  08007108  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbcf  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040bf  00000000  00000000  0003dd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001982d  00000000  00000000  00041dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0005b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001868  00000000  00000000  0005ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c490  00000000  00000000  0005e278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205d9  00000000  00000000  0007a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a5f  00000000  00000000  0009ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133740  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039a4  00000000  00000000  00133790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000120 	.word	0x20000120
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a60 	.word	0x08006a60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000124 	.word	0x20000124
 8000104:	08006a60 	.word	0x08006a60

08000108 <setjmp>:
 8000108:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800010a:	4641      	mov	r1, r8
 800010c:	464a      	mov	r2, r9
 800010e:	4653      	mov	r3, sl
 8000110:	465c      	mov	r4, fp
 8000112:	466d      	mov	r5, sp
 8000114:	4676      	mov	r6, lr
 8000116:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
 8000118:	3828      	subs	r0, #40	; 0x28
 800011a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800011c:	2000      	movs	r0, #0
 800011e:	4770      	bx	lr

08000120 <longjmp>:
 8000120:	3010      	adds	r0, #16
 8000122:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
 8000124:	4690      	mov	r8, r2
 8000126:	4699      	mov	r9, r3
 8000128:	46a2      	mov	sl, r4
 800012a:	46ab      	mov	fp, r5
 800012c:	46b5      	mov	sp, r6
 800012e:	c808      	ldmia	r0!, {r3}
 8000130:	3828      	subs	r0, #40	; 0x28
 8000132:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8000134:	0008      	movs	r0, r1
 8000136:	d100      	bne.n	800013a <longjmp+0x1a>
 8000138:	2001      	movs	r0, #1
 800013a:	4718      	bx	r3

0800013c <strlen>:
 800013c:	2300      	movs	r3, #0
 800013e:	5cc2      	ldrb	r2, [r0, r3]
 8000140:	3301      	adds	r3, #1
 8000142:	2a00      	cmp	r2, #0
 8000144:	d1fb      	bne.n	800013e <strlen+0x2>
 8000146:	1e58      	subs	r0, r3, #1
 8000148:	4770      	bx	lr
	...

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_ldivmod>:
 8000438:	2b00      	cmp	r3, #0
 800043a:	d115      	bne.n	8000468 <__aeabi_ldivmod+0x30>
 800043c:	2a00      	cmp	r2, #0
 800043e:	d113      	bne.n	8000468 <__aeabi_ldivmod+0x30>
 8000440:	2900      	cmp	r1, #0
 8000442:	db06      	blt.n	8000452 <__aeabi_ldivmod+0x1a>
 8000444:	dc01      	bgt.n	800044a <__aeabi_ldivmod+0x12>
 8000446:	2800      	cmp	r0, #0
 8000448:	d006      	beq.n	8000458 <__aeabi_ldivmod+0x20>
 800044a:	2000      	movs	r0, #0
 800044c:	43c0      	mvns	r0, r0
 800044e:	0841      	lsrs	r1, r0, #1
 8000450:	e002      	b.n	8000458 <__aeabi_ldivmod+0x20>
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0609      	lsls	r1, r1, #24
 8000456:	2000      	movs	r0, #0
 8000458:	b407      	push	{r0, r1, r2}
 800045a:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_ldivmod+0x2c>)
 800045c:	a101      	add	r1, pc, #4	; (adr r1, 8000464 <__aeabi_ldivmod+0x2c>)
 800045e:	1840      	adds	r0, r0, r1
 8000460:	9002      	str	r0, [sp, #8]
 8000462:	bd03      	pop	{r0, r1, pc}
 8000464:	ffffffd1 	.word	0xffffffd1
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f920 	bl	80006b4 <__gnu_ldivmod_helper>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_uldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d10f      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000488:	2900      	cmp	r1, #0
 800048a:	d100      	bne.n	800048e <__aeabi_uldivmod+0xe>
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <__aeabi_uldivmod+0x16>
 8000490:	2100      	movs	r1, #0
 8000492:	43c9      	mvns	r1, r1
 8000494:	0008      	movs	r0, r1
 8000496:	b407      	push	{r0, r1, r2}
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <__aeabi_uldivmod+0x24>)
 800049a:	a102      	add	r1, pc, #8	; (adr r1, 80004a4 <__aeabi_uldivmod+0x24>)
 800049c:	1840      	adds	r0, r0, r1
 800049e:	9002      	str	r0, [sp, #8]
 80004a0:	bd03      	pop	{r0, r1, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	ffffff91 	.word	0xffffff91
 80004a8:	b403      	push	{r0, r1}
 80004aa:	4668      	mov	r0, sp
 80004ac:	b501      	push	{r0, lr}
 80004ae:	9802      	ldr	r0, [sp, #8]
 80004b0:	f000 f834 	bl	800051c <__udivmoddi4>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	469e      	mov	lr, r3
 80004b8:	b002      	add	sp, #8
 80004ba:	bc0c      	pop	{r2, r3}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_lmul>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	46ce      	mov	lr, r9
 80004c4:	4647      	mov	r7, r8
 80004c6:	b580      	push	{r7, lr}
 80004c8:	0007      	movs	r7, r0
 80004ca:	4699      	mov	r9, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	469c      	mov	ip, r3
 80004d0:	0413      	lsls	r3, r2, #16
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	001d      	movs	r5, r3
 80004d6:	000e      	movs	r6, r1
 80004d8:	4661      	mov	r1, ip
 80004da:	0400      	lsls	r0, r0, #16
 80004dc:	0c14      	lsrs	r4, r2, #16
 80004de:	0c00      	lsrs	r0, r0, #16
 80004e0:	4345      	muls	r5, r0
 80004e2:	434b      	muls	r3, r1
 80004e4:	4360      	muls	r0, r4
 80004e6:	4361      	muls	r1, r4
 80004e8:	18c0      	adds	r0, r0, r3
 80004ea:	0c2c      	lsrs	r4, r5, #16
 80004ec:	1820      	adds	r0, r4, r0
 80004ee:	468c      	mov	ip, r1
 80004f0:	4283      	cmp	r3, r0
 80004f2:	d903      	bls.n	80004fc <__aeabi_lmul+0x3c>
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	025b      	lsls	r3, r3, #9
 80004f8:	4698      	mov	r8, r3
 80004fa:	44c4      	add	ip, r8
 80004fc:	4649      	mov	r1, r9
 80004fe:	4379      	muls	r1, r7
 8000500:	4372      	muls	r2, r6
 8000502:	0c03      	lsrs	r3, r0, #16
 8000504:	4463      	add	r3, ip
 8000506:	042d      	lsls	r5, r5, #16
 8000508:	0c2d      	lsrs	r5, r5, #16
 800050a:	18c9      	adds	r1, r1, r3
 800050c:	0400      	lsls	r0, r0, #16
 800050e:	1940      	adds	r0, r0, r5
 8000510:	1889      	adds	r1, r1, r2
 8000512:	bcc0      	pop	{r6, r7}
 8000514:	46b9      	mov	r9, r7
 8000516:	46b0      	mov	r8, r6
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__udivmoddi4>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	4657      	mov	r7, sl
 8000520:	464e      	mov	r6, r9
 8000522:	4645      	mov	r5, r8
 8000524:	46de      	mov	lr, fp
 8000526:	b5e0      	push	{r5, r6, r7, lr}
 8000528:	0004      	movs	r4, r0
 800052a:	000d      	movs	r5, r1
 800052c:	4692      	mov	sl, r2
 800052e:	4699      	mov	r9, r3
 8000530:	b083      	sub	sp, #12
 8000532:	428b      	cmp	r3, r1
 8000534:	d830      	bhi.n	8000598 <__udivmoddi4+0x7c>
 8000536:	d02d      	beq.n	8000594 <__udivmoddi4+0x78>
 8000538:	4649      	mov	r1, r9
 800053a:	4650      	mov	r0, sl
 800053c:	f000 fa9e 	bl	8000a7c <__clzdi2>
 8000540:	0029      	movs	r1, r5
 8000542:	0006      	movs	r6, r0
 8000544:	0020      	movs	r0, r4
 8000546:	f000 fa99 	bl	8000a7c <__clzdi2>
 800054a:	1a33      	subs	r3, r6, r0
 800054c:	4698      	mov	r8, r3
 800054e:	3b20      	subs	r3, #32
 8000550:	469b      	mov	fp, r3
 8000552:	d433      	bmi.n	80005bc <__udivmoddi4+0xa0>
 8000554:	465a      	mov	r2, fp
 8000556:	4653      	mov	r3, sl
 8000558:	4093      	lsls	r3, r2
 800055a:	4642      	mov	r2, r8
 800055c:	001f      	movs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d83a      	bhi.n	80005de <__udivmoddi4+0xc2>
 8000568:	42af      	cmp	r7, r5
 800056a:	d100      	bne.n	800056e <__udivmoddi4+0x52>
 800056c:	e078      	b.n	8000660 <__udivmoddi4+0x144>
 800056e:	465b      	mov	r3, fp
 8000570:	1ba4      	subs	r4, r4, r6
 8000572:	41bd      	sbcs	r5, r7
 8000574:	2b00      	cmp	r3, #0
 8000576:	da00      	bge.n	800057a <__udivmoddi4+0x5e>
 8000578:	e075      	b.n	8000666 <__udivmoddi4+0x14a>
 800057a:	2200      	movs	r2, #0
 800057c:	2300      	movs	r3, #0
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	465a      	mov	r2, fp
 8000586:	4093      	lsls	r3, r2
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	4642      	mov	r2, r8
 800058e:	4093      	lsls	r3, r2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	e028      	b.n	80005e6 <__udivmoddi4+0xca>
 8000594:	4282      	cmp	r2, r0
 8000596:	d9cf      	bls.n	8000538 <__udivmoddi4+0x1c>
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <__udivmoddi4+0x8e>
 80005a6:	601c      	str	r4, [r3, #0]
 80005a8:	605d      	str	r5, [r3, #4]
 80005aa:	9800      	ldr	r0, [sp, #0]
 80005ac:	9901      	ldr	r1, [sp, #4]
 80005ae:	b003      	add	sp, #12
 80005b0:	bcf0      	pop	{r4, r5, r6, r7}
 80005b2:	46bb      	mov	fp, r7
 80005b4:	46b2      	mov	sl, r6
 80005b6:	46a9      	mov	r9, r5
 80005b8:	46a0      	mov	r8, r4
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	4652      	mov	r2, sl
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	4641      	mov	r1, r8
 80005c8:	0013      	movs	r3, r2
 80005ca:	464a      	mov	r2, r9
 80005cc:	408a      	lsls	r2, r1
 80005ce:	0017      	movs	r7, r2
 80005d0:	4642      	mov	r2, r8
 80005d2:	431f      	orrs	r7, r3
 80005d4:	4653      	mov	r3, sl
 80005d6:	4093      	lsls	r3, r2
 80005d8:	001e      	movs	r6, r3
 80005da:	42af      	cmp	r7, r5
 80005dc:	d9c4      	bls.n	8000568 <__udivmoddi4+0x4c>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	4643      	mov	r3, r8
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0d9      	beq.n	80005a0 <__udivmoddi4+0x84>
 80005ec:	07fb      	lsls	r3, r7, #31
 80005ee:	0872      	lsrs	r2, r6, #1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4646      	mov	r6, r8
 80005f4:	087b      	lsrs	r3, r7, #1
 80005f6:	e00e      	b.n	8000616 <__udivmoddi4+0xfa>
 80005f8:	42ab      	cmp	r3, r5
 80005fa:	d101      	bne.n	8000600 <__udivmoddi4+0xe4>
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	d80c      	bhi.n	800061a <__udivmoddi4+0xfe>
 8000600:	1aa4      	subs	r4, r4, r2
 8000602:	419d      	sbcs	r5, r3
 8000604:	2001      	movs	r0, #1
 8000606:	1924      	adds	r4, r4, r4
 8000608:	416d      	adcs	r5, r5
 800060a:	2100      	movs	r1, #0
 800060c:	3e01      	subs	r6, #1
 800060e:	1824      	adds	r4, r4, r0
 8000610:	414d      	adcs	r5, r1
 8000612:	2e00      	cmp	r6, #0
 8000614:	d006      	beq.n	8000624 <__udivmoddi4+0x108>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d9ee      	bls.n	80005f8 <__udivmoddi4+0xdc>
 800061a:	3e01      	subs	r6, #1
 800061c:	1924      	adds	r4, r4, r4
 800061e:	416d      	adcs	r5, r5
 8000620:	2e00      	cmp	r6, #0
 8000622:	d1f8      	bne.n	8000616 <__udivmoddi4+0xfa>
 8000624:	9800      	ldr	r0, [sp, #0]
 8000626:	9901      	ldr	r1, [sp, #4]
 8000628:	465b      	mov	r3, fp
 800062a:	1900      	adds	r0, r0, r4
 800062c:	4169      	adcs	r1, r5
 800062e:	2b00      	cmp	r3, #0
 8000630:	db24      	blt.n	800067c <__udivmoddi4+0x160>
 8000632:	002b      	movs	r3, r5
 8000634:	465a      	mov	r2, fp
 8000636:	4644      	mov	r4, r8
 8000638:	40d3      	lsrs	r3, r2
 800063a:	002a      	movs	r2, r5
 800063c:	40e2      	lsrs	r2, r4
 800063e:	001c      	movs	r4, r3
 8000640:	465b      	mov	r3, fp
 8000642:	0015      	movs	r5, r2
 8000644:	2b00      	cmp	r3, #0
 8000646:	db2a      	blt.n	800069e <__udivmoddi4+0x182>
 8000648:	0026      	movs	r6, r4
 800064a:	409e      	lsls	r6, r3
 800064c:	0033      	movs	r3, r6
 800064e:	0026      	movs	r6, r4
 8000650:	4647      	mov	r7, r8
 8000652:	40be      	lsls	r6, r7
 8000654:	0032      	movs	r2, r6
 8000656:	1a80      	subs	r0, r0, r2
 8000658:	4199      	sbcs	r1, r3
 800065a:	9000      	str	r0, [sp, #0]
 800065c:	9101      	str	r1, [sp, #4]
 800065e:	e79f      	b.n	80005a0 <__udivmoddi4+0x84>
 8000660:	42a3      	cmp	r3, r4
 8000662:	d8bc      	bhi.n	80005de <__udivmoddi4+0xc2>
 8000664:	e783      	b.n	800056e <__udivmoddi4+0x52>
 8000666:	4642      	mov	r2, r8
 8000668:	2320      	movs	r3, #32
 800066a:	2100      	movs	r1, #0
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	9100      	str	r1, [sp, #0]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	40da      	lsrs	r2, r3
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	e786      	b.n	800058a <__udivmoddi4+0x6e>
 800067c:	4642      	mov	r2, r8
 800067e:	2320      	movs	r3, #32
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	002a      	movs	r2, r5
 8000684:	4646      	mov	r6, r8
 8000686:	409a      	lsls	r2, r3
 8000688:	0023      	movs	r3, r4
 800068a:	40f3      	lsrs	r3, r6
 800068c:	4644      	mov	r4, r8
 800068e:	4313      	orrs	r3, r2
 8000690:	002a      	movs	r2, r5
 8000692:	40e2      	lsrs	r2, r4
 8000694:	001c      	movs	r4, r3
 8000696:	465b      	mov	r3, fp
 8000698:	0015      	movs	r5, r2
 800069a:	2b00      	cmp	r3, #0
 800069c:	dad4      	bge.n	8000648 <__udivmoddi4+0x12c>
 800069e:	4642      	mov	r2, r8
 80006a0:	002f      	movs	r7, r5
 80006a2:	2320      	movs	r3, #32
 80006a4:	0026      	movs	r6, r4
 80006a6:	4097      	lsls	r7, r2
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	40de      	lsrs	r6, r3
 80006ac:	003b      	movs	r3, r7
 80006ae:	4333      	orrs	r3, r6
 80006b0:	e7cd      	b.n	800064e <__udivmoddi4+0x132>
 80006b2:	46c0      	nop			; (mov r8, r8)

080006b4 <__gnu_ldivmod_helper>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	46ce      	mov	lr, r9
 80006b8:	4647      	mov	r7, r8
 80006ba:	b580      	push	{r7, lr}
 80006bc:	4691      	mov	r9, r2
 80006be:	4698      	mov	r8, r3
 80006c0:	0004      	movs	r4, r0
 80006c2:	000d      	movs	r5, r1
 80006c4:	f000 f9e6 	bl	8000a94 <__divdi3>
 80006c8:	0007      	movs	r7, r0
 80006ca:	000e      	movs	r6, r1
 80006cc:	0002      	movs	r2, r0
 80006ce:	000b      	movs	r3, r1
 80006d0:	4648      	mov	r0, r9
 80006d2:	4641      	mov	r1, r8
 80006d4:	f7ff fef4 	bl	80004c0 <__aeabi_lmul>
 80006d8:	1a24      	subs	r4, r4, r0
 80006da:	418d      	sbcs	r5, r1
 80006dc:	9b08      	ldr	r3, [sp, #32]
 80006de:	0038      	movs	r0, r7
 80006e0:	0031      	movs	r1, r6
 80006e2:	601c      	str	r4, [r3, #0]
 80006e4:	605d      	str	r5, [r3, #4]
 80006e6:	bcc0      	pop	{r6, r7}
 80006e8:	46b9      	mov	r9, r7
 80006ea:	46b0      	mov	r8, r6
 80006ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <__aeabi_fdiv>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	464f      	mov	r7, r9
 80006f4:	4646      	mov	r6, r8
 80006f6:	46d6      	mov	lr, sl
 80006f8:	0245      	lsls	r5, r0, #9
 80006fa:	b5c0      	push	{r6, r7, lr}
 80006fc:	0047      	lsls	r7, r0, #1
 80006fe:	1c0c      	adds	r4, r1, #0
 8000700:	0a6d      	lsrs	r5, r5, #9
 8000702:	0e3f      	lsrs	r7, r7, #24
 8000704:	0fc6      	lsrs	r6, r0, #31
 8000706:	2f00      	cmp	r7, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fdiv+0x1c>
 800070a:	e070      	b.n	80007ee <__aeabi_fdiv+0xfe>
 800070c:	2fff      	cmp	r7, #255	; 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fdiv+0x22>
 8000710:	e075      	b.n	80007fe <__aeabi_fdiv+0x10e>
 8000712:	00eb      	lsls	r3, r5, #3
 8000714:	2580      	movs	r5, #128	; 0x80
 8000716:	04ed      	lsls	r5, r5, #19
 8000718:	431d      	orrs	r5, r3
 800071a:	2300      	movs	r3, #0
 800071c:	4699      	mov	r9, r3
 800071e:	469a      	mov	sl, r3
 8000720:	3f7f      	subs	r7, #127	; 0x7f
 8000722:	0260      	lsls	r0, r4, #9
 8000724:	0a43      	lsrs	r3, r0, #9
 8000726:	4698      	mov	r8, r3
 8000728:	0063      	lsls	r3, r4, #1
 800072a:	0e1b      	lsrs	r3, r3, #24
 800072c:	0fe4      	lsrs	r4, r4, #31
 800072e:	2b00      	cmp	r3, #0
 8000730:	d04e      	beq.n	80007d0 <__aeabi_fdiv+0xe0>
 8000732:	2bff      	cmp	r3, #255	; 0xff
 8000734:	d046      	beq.n	80007c4 <__aeabi_fdiv+0xd4>
 8000736:	4642      	mov	r2, r8
 8000738:	00d0      	lsls	r0, r2, #3
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	04d2      	lsls	r2, r2, #19
 800073e:	4302      	orrs	r2, r0
 8000740:	4690      	mov	r8, r2
 8000742:	2200      	movs	r2, #0
 8000744:	3b7f      	subs	r3, #127	; 0x7f
 8000746:	0031      	movs	r1, r6
 8000748:	1aff      	subs	r7, r7, r3
 800074a:	464b      	mov	r3, r9
 800074c:	4061      	eors	r1, r4
 800074e:	b2c9      	uxtb	r1, r1
 8000750:	4313      	orrs	r3, r2
 8000752:	2b0f      	cmp	r3, #15
 8000754:	d900      	bls.n	8000758 <__aeabi_fdiv+0x68>
 8000756:	e0b5      	b.n	80008c4 <__aeabi_fdiv+0x1d4>
 8000758:	486e      	ldr	r0, [pc, #440]	; (8000914 <__aeabi_fdiv+0x224>)
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	58c3      	ldr	r3, [r0, r3]
 800075e:	469f      	mov	pc, r3
 8000760:	2300      	movs	r3, #0
 8000762:	4698      	mov	r8, r3
 8000764:	0026      	movs	r6, r4
 8000766:	4645      	mov	r5, r8
 8000768:	4692      	mov	sl, r2
 800076a:	4653      	mov	r3, sl
 800076c:	2b02      	cmp	r3, #2
 800076e:	d100      	bne.n	8000772 <__aeabi_fdiv+0x82>
 8000770:	e089      	b.n	8000886 <__aeabi_fdiv+0x196>
 8000772:	2b03      	cmp	r3, #3
 8000774:	d100      	bne.n	8000778 <__aeabi_fdiv+0x88>
 8000776:	e09e      	b.n	80008b6 <__aeabi_fdiv+0x1c6>
 8000778:	2b01      	cmp	r3, #1
 800077a:	d018      	beq.n	80007ae <__aeabi_fdiv+0xbe>
 800077c:	003b      	movs	r3, r7
 800077e:	337f      	adds	r3, #127	; 0x7f
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd69      	ble.n	8000858 <__aeabi_fdiv+0x168>
 8000784:	076a      	lsls	r2, r5, #29
 8000786:	d004      	beq.n	8000792 <__aeabi_fdiv+0xa2>
 8000788:	220f      	movs	r2, #15
 800078a:	402a      	ands	r2, r5
 800078c:	2a04      	cmp	r2, #4
 800078e:	d000      	beq.n	8000792 <__aeabi_fdiv+0xa2>
 8000790:	3504      	adds	r5, #4
 8000792:	012a      	lsls	r2, r5, #4
 8000794:	d503      	bpl.n	800079e <__aeabi_fdiv+0xae>
 8000796:	4b60      	ldr	r3, [pc, #384]	; (8000918 <__aeabi_fdiv+0x228>)
 8000798:	401d      	ands	r5, r3
 800079a:	003b      	movs	r3, r7
 800079c:	3380      	adds	r3, #128	; 0x80
 800079e:	2bfe      	cmp	r3, #254	; 0xfe
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_fdiv+0xb4>
 80007a2:	e070      	b.n	8000886 <__aeabi_fdiv+0x196>
 80007a4:	01ad      	lsls	r5, r5, #6
 80007a6:	0a6d      	lsrs	r5, r5, #9
 80007a8:	b2d8      	uxtb	r0, r3
 80007aa:	e002      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 80007ac:	000e      	movs	r6, r1
 80007ae:	2000      	movs	r0, #0
 80007b0:	2500      	movs	r5, #0
 80007b2:	05c0      	lsls	r0, r0, #23
 80007b4:	4328      	orrs	r0, r5
 80007b6:	07f6      	lsls	r6, r6, #31
 80007b8:	4330      	orrs	r0, r6
 80007ba:	bce0      	pop	{r5, r6, r7}
 80007bc:	46ba      	mov	sl, r7
 80007be:	46b1      	mov	r9, r6
 80007c0:	46a8      	mov	r8, r5
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c4:	4643      	mov	r3, r8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d13f      	bne.n	800084a <__aeabi_fdiv+0x15a>
 80007ca:	2202      	movs	r2, #2
 80007cc:	3fff      	subs	r7, #255	; 0xff
 80007ce:	e003      	b.n	80007d8 <__aeabi_fdiv+0xe8>
 80007d0:	4643      	mov	r3, r8
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d12d      	bne.n	8000832 <__aeabi_fdiv+0x142>
 80007d6:	2201      	movs	r2, #1
 80007d8:	0031      	movs	r1, r6
 80007da:	464b      	mov	r3, r9
 80007dc:	4061      	eors	r1, r4
 80007de:	b2c9      	uxtb	r1, r1
 80007e0:	4313      	orrs	r3, r2
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	d834      	bhi.n	8000850 <__aeabi_fdiv+0x160>
 80007e6:	484d      	ldr	r0, [pc, #308]	; (800091c <__aeabi_fdiv+0x22c>)
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	58c3      	ldr	r3, [r0, r3]
 80007ec:	469f      	mov	pc, r3
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d113      	bne.n	800081a <__aeabi_fdiv+0x12a>
 80007f2:	2304      	movs	r3, #4
 80007f4:	4699      	mov	r9, r3
 80007f6:	3b03      	subs	r3, #3
 80007f8:	2700      	movs	r7, #0
 80007fa:	469a      	mov	sl, r3
 80007fc:	e791      	b.n	8000722 <__aeabi_fdiv+0x32>
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d105      	bne.n	800080e <__aeabi_fdiv+0x11e>
 8000802:	2308      	movs	r3, #8
 8000804:	4699      	mov	r9, r3
 8000806:	3b06      	subs	r3, #6
 8000808:	27ff      	movs	r7, #255	; 0xff
 800080a:	469a      	mov	sl, r3
 800080c:	e789      	b.n	8000722 <__aeabi_fdiv+0x32>
 800080e:	230c      	movs	r3, #12
 8000810:	4699      	mov	r9, r3
 8000812:	3b09      	subs	r3, #9
 8000814:	27ff      	movs	r7, #255	; 0xff
 8000816:	469a      	mov	sl, r3
 8000818:	e783      	b.n	8000722 <__aeabi_fdiv+0x32>
 800081a:	0028      	movs	r0, r5
 800081c:	f000 f910 	bl	8000a40 <__clzsi2>
 8000820:	2776      	movs	r7, #118	; 0x76
 8000822:	1f43      	subs	r3, r0, #5
 8000824:	409d      	lsls	r5, r3
 8000826:	2300      	movs	r3, #0
 8000828:	427f      	negs	r7, r7
 800082a:	4699      	mov	r9, r3
 800082c:	469a      	mov	sl, r3
 800082e:	1a3f      	subs	r7, r7, r0
 8000830:	e777      	b.n	8000722 <__aeabi_fdiv+0x32>
 8000832:	4640      	mov	r0, r8
 8000834:	f000 f904 	bl	8000a40 <__clzsi2>
 8000838:	4642      	mov	r2, r8
 800083a:	1f43      	subs	r3, r0, #5
 800083c:	409a      	lsls	r2, r3
 800083e:	2376      	movs	r3, #118	; 0x76
 8000840:	425b      	negs	r3, r3
 8000842:	4690      	mov	r8, r2
 8000844:	1a1b      	subs	r3, r3, r0
 8000846:	2200      	movs	r2, #0
 8000848:	e77d      	b.n	8000746 <__aeabi_fdiv+0x56>
 800084a:	23ff      	movs	r3, #255	; 0xff
 800084c:	2203      	movs	r2, #3
 800084e:	e77a      	b.n	8000746 <__aeabi_fdiv+0x56>
 8000850:	000e      	movs	r6, r1
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	2500      	movs	r5, #0
 8000856:	e7ac      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 8000858:	2001      	movs	r0, #1
 800085a:	1ac0      	subs	r0, r0, r3
 800085c:	281b      	cmp	r0, #27
 800085e:	dca6      	bgt.n	80007ae <__aeabi_fdiv+0xbe>
 8000860:	379e      	adds	r7, #158	; 0x9e
 8000862:	002a      	movs	r2, r5
 8000864:	40bd      	lsls	r5, r7
 8000866:	40c2      	lsrs	r2, r0
 8000868:	1e6b      	subs	r3, r5, #1
 800086a:	419d      	sbcs	r5, r3
 800086c:	4315      	orrs	r5, r2
 800086e:	076b      	lsls	r3, r5, #29
 8000870:	d004      	beq.n	800087c <__aeabi_fdiv+0x18c>
 8000872:	230f      	movs	r3, #15
 8000874:	402b      	ands	r3, r5
 8000876:	2b04      	cmp	r3, #4
 8000878:	d000      	beq.n	800087c <__aeabi_fdiv+0x18c>
 800087a:	3504      	adds	r5, #4
 800087c:	016b      	lsls	r3, r5, #5
 800087e:	d544      	bpl.n	800090a <__aeabi_fdiv+0x21a>
 8000880:	2001      	movs	r0, #1
 8000882:	2500      	movs	r5, #0
 8000884:	e795      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 8000886:	20ff      	movs	r0, #255	; 0xff
 8000888:	2500      	movs	r5, #0
 800088a:	e792      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 800088c:	2580      	movs	r5, #128	; 0x80
 800088e:	2600      	movs	r6, #0
 8000890:	20ff      	movs	r0, #255	; 0xff
 8000892:	03ed      	lsls	r5, r5, #15
 8000894:	e78d      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 8000896:	2300      	movs	r3, #0
 8000898:	4698      	mov	r8, r3
 800089a:	2080      	movs	r0, #128	; 0x80
 800089c:	03c0      	lsls	r0, r0, #15
 800089e:	4205      	tst	r5, r0
 80008a0:	d009      	beq.n	80008b6 <__aeabi_fdiv+0x1c6>
 80008a2:	4643      	mov	r3, r8
 80008a4:	4203      	tst	r3, r0
 80008a6:	d106      	bne.n	80008b6 <__aeabi_fdiv+0x1c6>
 80008a8:	4645      	mov	r5, r8
 80008aa:	4305      	orrs	r5, r0
 80008ac:	026d      	lsls	r5, r5, #9
 80008ae:	0026      	movs	r6, r4
 80008b0:	20ff      	movs	r0, #255	; 0xff
 80008b2:	0a6d      	lsrs	r5, r5, #9
 80008b4:	e77d      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	03c0      	lsls	r0, r0, #15
 80008ba:	4305      	orrs	r5, r0
 80008bc:	026d      	lsls	r5, r5, #9
 80008be:	20ff      	movs	r0, #255	; 0xff
 80008c0:	0a6d      	lsrs	r5, r5, #9
 80008c2:	e776      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 80008c4:	4642      	mov	r2, r8
 80008c6:	016b      	lsls	r3, r5, #5
 80008c8:	0150      	lsls	r0, r2, #5
 80008ca:	4283      	cmp	r3, r0
 80008cc:	d219      	bcs.n	8000902 <__aeabi_fdiv+0x212>
 80008ce:	221b      	movs	r2, #27
 80008d0:	2500      	movs	r5, #0
 80008d2:	3f01      	subs	r7, #1
 80008d4:	2601      	movs	r6, #1
 80008d6:	001c      	movs	r4, r3
 80008d8:	006d      	lsls	r5, r5, #1
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2c00      	cmp	r4, #0
 80008de:	db01      	blt.n	80008e4 <__aeabi_fdiv+0x1f4>
 80008e0:	4298      	cmp	r0, r3
 80008e2:	d801      	bhi.n	80008e8 <__aeabi_fdiv+0x1f8>
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	4335      	orrs	r5, r6
 80008e8:	3a01      	subs	r2, #1
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	d1f3      	bne.n	80008d6 <__aeabi_fdiv+0x1e6>
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4193      	sbcs	r3, r2
 80008f2:	431d      	orrs	r5, r3
 80008f4:	003b      	movs	r3, r7
 80008f6:	337f      	adds	r3, #127	; 0x7f
 80008f8:	000e      	movs	r6, r1
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	dd00      	ble.n	8000900 <__aeabi_fdiv+0x210>
 80008fe:	e741      	b.n	8000784 <__aeabi_fdiv+0x94>
 8000900:	e7aa      	b.n	8000858 <__aeabi_fdiv+0x168>
 8000902:	221a      	movs	r2, #26
 8000904:	2501      	movs	r5, #1
 8000906:	1a1b      	subs	r3, r3, r0
 8000908:	e7e4      	b.n	80008d4 <__aeabi_fdiv+0x1e4>
 800090a:	01ad      	lsls	r5, r5, #6
 800090c:	2000      	movs	r0, #0
 800090e:	0a6d      	lsrs	r5, r5, #9
 8000910:	e74f      	b.n	80007b2 <__aeabi_fdiv+0xc2>
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	08006a80 	.word	0x08006a80
 8000918:	f7ffffff 	.word	0xf7ffffff
 800091c:	08006ac0 	.word	0x08006ac0

08000920 <__aeabi_i2f>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	2800      	cmp	r0, #0
 8000924:	d013      	beq.n	800094e <__aeabi_i2f+0x2e>
 8000926:	17c3      	asrs	r3, r0, #31
 8000928:	18c6      	adds	r6, r0, r3
 800092a:	405e      	eors	r6, r3
 800092c:	0fc4      	lsrs	r4, r0, #31
 800092e:	0030      	movs	r0, r6
 8000930:	f000 f886 	bl	8000a40 <__clzsi2>
 8000934:	239e      	movs	r3, #158	; 0x9e
 8000936:	0005      	movs	r5, r0
 8000938:	1a1b      	subs	r3, r3, r0
 800093a:	2b96      	cmp	r3, #150	; 0x96
 800093c:	dc0f      	bgt.n	800095e <__aeabi_i2f+0x3e>
 800093e:	2808      	cmp	r0, #8
 8000940:	dd01      	ble.n	8000946 <__aeabi_i2f+0x26>
 8000942:	3d08      	subs	r5, #8
 8000944:	40ae      	lsls	r6, r5
 8000946:	0276      	lsls	r6, r6, #9
 8000948:	0a76      	lsrs	r6, r6, #9
 800094a:	b2d8      	uxtb	r0, r3
 800094c:	e002      	b.n	8000954 <__aeabi_i2f+0x34>
 800094e:	2400      	movs	r4, #0
 8000950:	2000      	movs	r0, #0
 8000952:	2600      	movs	r6, #0
 8000954:	05c0      	lsls	r0, r0, #23
 8000956:	4330      	orrs	r0, r6
 8000958:	07e4      	lsls	r4, r4, #31
 800095a:	4320      	orrs	r0, r4
 800095c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800095e:	2b99      	cmp	r3, #153	; 0x99
 8000960:	dd0c      	ble.n	800097c <__aeabi_i2f+0x5c>
 8000962:	2205      	movs	r2, #5
 8000964:	0031      	movs	r1, r6
 8000966:	1a12      	subs	r2, r2, r0
 8000968:	40d1      	lsrs	r1, r2
 800096a:	000a      	movs	r2, r1
 800096c:	0001      	movs	r1, r0
 800096e:	0030      	movs	r0, r6
 8000970:	311b      	adds	r1, #27
 8000972:	4088      	lsls	r0, r1
 8000974:	1e41      	subs	r1, r0, #1
 8000976:	4188      	sbcs	r0, r1
 8000978:	4302      	orrs	r2, r0
 800097a:	0016      	movs	r6, r2
 800097c:	2d05      	cmp	r5, #5
 800097e:	dc12      	bgt.n	80009a6 <__aeabi_i2f+0x86>
 8000980:	0031      	movs	r1, r6
 8000982:	4f0d      	ldr	r7, [pc, #52]	; (80009b8 <__aeabi_i2f+0x98>)
 8000984:	4039      	ands	r1, r7
 8000986:	0772      	lsls	r2, r6, #29
 8000988:	d009      	beq.n	800099e <__aeabi_i2f+0x7e>
 800098a:	200f      	movs	r0, #15
 800098c:	4030      	ands	r0, r6
 800098e:	2804      	cmp	r0, #4
 8000990:	d005      	beq.n	800099e <__aeabi_i2f+0x7e>
 8000992:	3104      	adds	r1, #4
 8000994:	014a      	lsls	r2, r1, #5
 8000996:	d502      	bpl.n	800099e <__aeabi_i2f+0x7e>
 8000998:	239f      	movs	r3, #159	; 0x9f
 800099a:	4039      	ands	r1, r7
 800099c:	1b5b      	subs	r3, r3, r5
 800099e:	0189      	lsls	r1, r1, #6
 80009a0:	0a4e      	lsrs	r6, r1, #9
 80009a2:	b2d8      	uxtb	r0, r3
 80009a4:	e7d6      	b.n	8000954 <__aeabi_i2f+0x34>
 80009a6:	1f6a      	subs	r2, r5, #5
 80009a8:	4096      	lsls	r6, r2
 80009aa:	0031      	movs	r1, r6
 80009ac:	4f02      	ldr	r7, [pc, #8]	; (80009b8 <__aeabi_i2f+0x98>)
 80009ae:	4039      	ands	r1, r7
 80009b0:	0772      	lsls	r2, r6, #29
 80009b2:	d0f4      	beq.n	800099e <__aeabi_i2f+0x7e>
 80009b4:	e7e9      	b.n	800098a <__aeabi_i2f+0x6a>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	fbffffff 	.word	0xfbffffff

080009bc <__aeabi_ui2f>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	1e05      	subs	r5, r0, #0
 80009c0:	d00e      	beq.n	80009e0 <__aeabi_ui2f+0x24>
 80009c2:	f000 f83d 	bl	8000a40 <__clzsi2>
 80009c6:	239e      	movs	r3, #158	; 0x9e
 80009c8:	0004      	movs	r4, r0
 80009ca:	1a1b      	subs	r3, r3, r0
 80009cc:	2b96      	cmp	r3, #150	; 0x96
 80009ce:	dc0c      	bgt.n	80009ea <__aeabi_ui2f+0x2e>
 80009d0:	2808      	cmp	r0, #8
 80009d2:	dd01      	ble.n	80009d8 <__aeabi_ui2f+0x1c>
 80009d4:	3c08      	subs	r4, #8
 80009d6:	40a5      	lsls	r5, r4
 80009d8:	026d      	lsls	r5, r5, #9
 80009da:	0a6d      	lsrs	r5, r5, #9
 80009dc:	b2d8      	uxtb	r0, r3
 80009de:	e001      	b.n	80009e4 <__aeabi_ui2f+0x28>
 80009e0:	2000      	movs	r0, #0
 80009e2:	2500      	movs	r5, #0
 80009e4:	05c0      	lsls	r0, r0, #23
 80009e6:	4328      	orrs	r0, r5
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	2b99      	cmp	r3, #153	; 0x99
 80009ec:	dd09      	ble.n	8000a02 <__aeabi_ui2f+0x46>
 80009ee:	0002      	movs	r2, r0
 80009f0:	0029      	movs	r1, r5
 80009f2:	321b      	adds	r2, #27
 80009f4:	4091      	lsls	r1, r2
 80009f6:	1e4a      	subs	r2, r1, #1
 80009f8:	4191      	sbcs	r1, r2
 80009fa:	2205      	movs	r2, #5
 80009fc:	1a12      	subs	r2, r2, r0
 80009fe:	40d5      	lsrs	r5, r2
 8000a00:	430d      	orrs	r5, r1
 8000a02:	2c05      	cmp	r4, #5
 8000a04:	dc12      	bgt.n	8000a2c <__aeabi_ui2f+0x70>
 8000a06:	0029      	movs	r1, r5
 8000a08:	4e0c      	ldr	r6, [pc, #48]	; (8000a3c <__aeabi_ui2f+0x80>)
 8000a0a:	4031      	ands	r1, r6
 8000a0c:	076a      	lsls	r2, r5, #29
 8000a0e:	d009      	beq.n	8000a24 <__aeabi_ui2f+0x68>
 8000a10:	200f      	movs	r0, #15
 8000a12:	4028      	ands	r0, r5
 8000a14:	2804      	cmp	r0, #4
 8000a16:	d005      	beq.n	8000a24 <__aeabi_ui2f+0x68>
 8000a18:	3104      	adds	r1, #4
 8000a1a:	014a      	lsls	r2, r1, #5
 8000a1c:	d502      	bpl.n	8000a24 <__aeabi_ui2f+0x68>
 8000a1e:	239f      	movs	r3, #159	; 0x9f
 8000a20:	4031      	ands	r1, r6
 8000a22:	1b1b      	subs	r3, r3, r4
 8000a24:	0189      	lsls	r1, r1, #6
 8000a26:	0a4d      	lsrs	r5, r1, #9
 8000a28:	b2d8      	uxtb	r0, r3
 8000a2a:	e7db      	b.n	80009e4 <__aeabi_ui2f+0x28>
 8000a2c:	1f62      	subs	r2, r4, #5
 8000a2e:	4095      	lsls	r5, r2
 8000a30:	0029      	movs	r1, r5
 8000a32:	4e02      	ldr	r6, [pc, #8]	; (8000a3c <__aeabi_ui2f+0x80>)
 8000a34:	4031      	ands	r1, r6
 8000a36:	076a      	lsls	r2, r5, #29
 8000a38:	d0f4      	beq.n	8000a24 <__aeabi_ui2f+0x68>
 8000a3a:	e7e9      	b.n	8000a10 <__aeabi_ui2f+0x54>
 8000a3c:	fbffffff 	.word	0xfbffffff

08000a40 <__clzsi2>:
 8000a40:	211c      	movs	r1, #28
 8000a42:	2301      	movs	r3, #1
 8000a44:	041b      	lsls	r3, r3, #16
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0xe>
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	3910      	subs	r1, #16
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	4298      	cmp	r0, r3
 8000a52:	d301      	bcc.n	8000a58 <__clzsi2+0x18>
 8000a54:	0a00      	lsrs	r0, r0, #8
 8000a56:	3908      	subs	r1, #8
 8000a58:	091b      	lsrs	r3, r3, #4
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	d301      	bcc.n	8000a62 <__clzsi2+0x22>
 8000a5e:	0900      	lsrs	r0, r0, #4
 8000a60:	3904      	subs	r1, #4
 8000a62:	a202      	add	r2, pc, #8	; (adr r2, 8000a6c <__clzsi2+0x2c>)
 8000a64:	5c10      	ldrb	r0, [r2, r0]
 8000a66:	1840      	adds	r0, r0, r1
 8000a68:	4770      	bx	lr
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	02020304 	.word	0x02020304
 8000a70:	01010101 	.word	0x01010101
	...

08000a7c <__clzdi2>:
 8000a7c:	b510      	push	{r4, lr}
 8000a7e:	2900      	cmp	r1, #0
 8000a80:	d103      	bne.n	8000a8a <__clzdi2+0xe>
 8000a82:	f7ff ffdd 	bl	8000a40 <__clzsi2>
 8000a86:	3020      	adds	r0, #32
 8000a88:	e002      	b.n	8000a90 <__clzdi2+0x14>
 8000a8a:	0008      	movs	r0, r1
 8000a8c:	f7ff ffd8 	bl	8000a40 <__clzsi2>
 8000a90:	bd10      	pop	{r4, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)

08000a94 <__divdi3>:
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	4657      	mov	r7, sl
 8000a98:	464e      	mov	r6, r9
 8000a9a:	4645      	mov	r5, r8
 8000a9c:	46de      	mov	lr, fp
 8000a9e:	b5e0      	push	{r5, r6, r7, lr}
 8000aa0:	000f      	movs	r7, r1
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	0006      	movs	r6, r0
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	b083      	sub	sp, #12
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	da07      	bge.n	8000ac2 <__divdi3+0x2e>
 8000ab2:	0033      	movs	r3, r6
 8000ab4:	003c      	movs	r4, r7
 8000ab6:	2700      	movs	r7, #0
 8000ab8:	425e      	negs	r6, r3
 8000aba:	41a7      	sbcs	r7, r4
 8000abc:	2301      	movs	r3, #1
 8000abe:	425b      	negs	r3, r3
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	da07      	bge.n	8000ad6 <__divdi3+0x42>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	000c      	movs	r4, r1
 8000acc:	4698      	mov	r8, r3
 8000ace:	0003      	movs	r3, r0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4258      	negs	r0, r3
 8000ad4:	41a1      	sbcs	r1, r4
 8000ad6:	0034      	movs	r4, r6
 8000ad8:	003d      	movs	r5, r7
 8000ada:	4682      	mov	sl, r0
 8000adc:	4689      	mov	r9, r1
 8000ade:	42b9      	cmp	r1, r7
 8000ae0:	d86a      	bhi.n	8000bb8 <__divdi3+0x124>
 8000ae2:	d067      	beq.n	8000bb4 <__divdi3+0x120>
 8000ae4:	4649      	mov	r1, r9
 8000ae6:	4650      	mov	r0, sl
 8000ae8:	f7ff ffc8 	bl	8000a7c <__clzdi2>
 8000aec:	4683      	mov	fp, r0
 8000aee:	0039      	movs	r1, r7
 8000af0:	0030      	movs	r0, r6
 8000af2:	f7ff ffc3 	bl	8000a7c <__clzdi2>
 8000af6:	465b      	mov	r3, fp
 8000af8:	1a1b      	subs	r3, r3, r0
 8000afa:	469c      	mov	ip, r3
 8000afc:	3b20      	subs	r3, #32
 8000afe:	469b      	mov	fp, r3
 8000b00:	d46b      	bmi.n	8000bda <__divdi3+0x146>
 8000b02:	4658      	mov	r0, fp
 8000b04:	4651      	mov	r1, sl
 8000b06:	4081      	lsls	r1, r0
 8000b08:	4660      	mov	r0, ip
 8000b0a:	000b      	movs	r3, r1
 8000b0c:	4651      	mov	r1, sl
 8000b0e:	4081      	lsls	r1, r0
 8000b10:	000a      	movs	r2, r1
 8000b12:	42bb      	cmp	r3, r7
 8000b14:	d900      	bls.n	8000b18 <__divdi3+0x84>
 8000b16:	e072      	b.n	8000bfe <__divdi3+0x16a>
 8000b18:	42bb      	cmp	r3, r7
 8000b1a:	d100      	bne.n	8000b1e <__divdi3+0x8a>
 8000b1c:	e079      	b.n	8000c12 <__divdi3+0x17e>
 8000b1e:	0034      	movs	r4, r6
 8000b20:	003d      	movs	r5, r7
 8000b22:	4659      	mov	r1, fp
 8000b24:	1aa4      	subs	r4, r4, r2
 8000b26:	419d      	sbcs	r5, r3
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	da00      	bge.n	8000b2e <__divdi3+0x9a>
 8000b2c:	e074      	b.n	8000c18 <__divdi3+0x184>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2000      	movs	r0, #0
 8000b32:	2601      	movs	r6, #1
 8000b34:	9000      	str	r0, [sp, #0]
 8000b36:	9101      	str	r1, [sp, #4]
 8000b38:	4659      	mov	r1, fp
 8000b3a:	408e      	lsls	r6, r1
 8000b3c:	9601      	str	r6, [sp, #4]
 8000b3e:	4661      	mov	r1, ip
 8000b40:	2601      	movs	r6, #1
 8000b42:	408e      	lsls	r6, r1
 8000b44:	4661      	mov	r1, ip
 8000b46:	9600      	str	r6, [sp, #0]
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d05f      	beq.n	8000c0c <__divdi3+0x178>
 8000b4c:	07d9      	lsls	r1, r3, #31
 8000b4e:	0856      	lsrs	r6, r2, #1
 8000b50:	430e      	orrs	r6, r1
 8000b52:	085f      	lsrs	r7, r3, #1
 8000b54:	4661      	mov	r1, ip
 8000b56:	2201      	movs	r2, #1
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e00c      	b.n	8000b76 <__divdi3+0xe2>
 8000b5c:	42af      	cmp	r7, r5
 8000b5e:	d101      	bne.n	8000b64 <__divdi3+0xd0>
 8000b60:	42a6      	cmp	r6, r4
 8000b62:	d80a      	bhi.n	8000b7a <__divdi3+0xe6>
 8000b64:	1ba4      	subs	r4, r4, r6
 8000b66:	41bd      	sbcs	r5, r7
 8000b68:	1924      	adds	r4, r4, r4
 8000b6a:	416d      	adcs	r5, r5
 8000b6c:	3901      	subs	r1, #1
 8000b6e:	18a4      	adds	r4, r4, r2
 8000b70:	415d      	adcs	r5, r3
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d006      	beq.n	8000b84 <__divdi3+0xf0>
 8000b76:	42af      	cmp	r7, r5
 8000b78:	d9f0      	bls.n	8000b5c <__divdi3+0xc8>
 8000b7a:	3901      	subs	r1, #1
 8000b7c:	1924      	adds	r4, r4, r4
 8000b7e:	416d      	adcs	r5, r5
 8000b80:	2900      	cmp	r1, #0
 8000b82:	d1f8      	bne.n	8000b76 <__divdi3+0xe2>
 8000b84:	9800      	ldr	r0, [sp, #0]
 8000b86:	9901      	ldr	r1, [sp, #4]
 8000b88:	465b      	mov	r3, fp
 8000b8a:	1900      	adds	r0, r0, r4
 8000b8c:	4169      	adcs	r1, r5
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db4d      	blt.n	8000c2e <__divdi3+0x19a>
 8000b92:	002e      	movs	r6, r5
 8000b94:	002c      	movs	r4, r5
 8000b96:	40de      	lsrs	r6, r3
 8000b98:	4663      	mov	r3, ip
 8000b9a:	40dc      	lsrs	r4, r3
 8000b9c:	465b      	mov	r3, fp
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db55      	blt.n	8000c4e <__divdi3+0x1ba>
 8000ba2:	0034      	movs	r4, r6
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	0023      	movs	r3, r4
 8000ba8:	4664      	mov	r4, ip
 8000baa:	40a6      	lsls	r6, r4
 8000bac:	0032      	movs	r2, r6
 8000bae:	1a80      	subs	r0, r0, r2
 8000bb0:	4199      	sbcs	r1, r3
 8000bb2:	e003      	b.n	8000bbc <__divdi3+0x128>
 8000bb4:	42b0      	cmp	r0, r6
 8000bb6:	d995      	bls.n	8000ae4 <__divdi3+0x50>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <__divdi3+0x138>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	000c      	movs	r4, r1
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4258      	negs	r0, r3
 8000bca:	41a1      	sbcs	r1, r4
 8000bcc:	b003      	add	sp, #12
 8000bce:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd0:	46bb      	mov	fp, r7
 8000bd2:	46b2      	mov	sl, r6
 8000bd4:	46a9      	mov	r9, r5
 8000bd6:	46a0      	mov	r8, r4
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bda:	4662      	mov	r2, ip
 8000bdc:	4648      	mov	r0, r9
 8000bde:	2320      	movs	r3, #32
 8000be0:	4651      	mov	r1, sl
 8000be2:	4090      	lsls	r0, r2
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	40d9      	lsrs	r1, r3
 8000be8:	0003      	movs	r3, r0
 8000bea:	9100      	str	r1, [sp, #0]
 8000bec:	9900      	ldr	r1, [sp, #0]
 8000bee:	4660      	mov	r0, ip
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	4651      	mov	r1, sl
 8000bf4:	4081      	lsls	r1, r0
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	42bb      	cmp	r3, r7
 8000bfa:	d800      	bhi.n	8000bfe <__divdi3+0x16a>
 8000bfc:	e78c      	b.n	8000b18 <__divdi3+0x84>
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	9000      	str	r0, [sp, #0]
 8000c04:	9101      	str	r1, [sp, #4]
 8000c06:	4661      	mov	r1, ip
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	d19f      	bne.n	8000b4c <__divdi3+0xb8>
 8000c0c:	9800      	ldr	r0, [sp, #0]
 8000c0e:	9901      	ldr	r1, [sp, #4]
 8000c10:	e7d4      	b.n	8000bbc <__divdi3+0x128>
 8000c12:	42b1      	cmp	r1, r6
 8000c14:	d8f3      	bhi.n	8000bfe <__divdi3+0x16a>
 8000c16:	e782      	b.n	8000b1e <__divdi3+0x8a>
 8000c18:	4661      	mov	r1, ip
 8000c1a:	2620      	movs	r6, #32
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	1a76      	subs	r6, r6, r1
 8000c20:	2000      	movs	r0, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	40f7      	lsrs	r7, r6
 8000c26:	9000      	str	r0, [sp, #0]
 8000c28:	9101      	str	r1, [sp, #4]
 8000c2a:	9701      	str	r7, [sp, #4]
 8000c2c:	e787      	b.n	8000b3e <__divdi3+0xaa>
 8000c2e:	4662      	mov	r2, ip
 8000c30:	2320      	movs	r3, #32
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	002a      	movs	r2, r5
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0026      	movs	r6, r4
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	40d6      	lsrs	r6, r2
 8000c40:	002c      	movs	r4, r5
 8000c42:	431e      	orrs	r6, r3
 8000c44:	4663      	mov	r3, ip
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	465b      	mov	r3, fp
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	daa9      	bge.n	8000ba2 <__divdi3+0x10e>
 8000c4e:	4662      	mov	r2, ip
 8000c50:	2320      	movs	r3, #32
 8000c52:	0035      	movs	r5, r6
 8000c54:	4094      	lsls	r4, r2
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	40dd      	lsrs	r5, r3
 8000c5a:	0023      	movs	r3, r4
 8000c5c:	432b      	orrs	r3, r5
 8000c5e:	e7a3      	b.n	8000ba8 <__divdi3+0x114>

08000c60 <getBoardName>:
extern TIM_HandleTypeDef htim17;
extern TIM_HandleTypeDef htim16;

char * getBoardName() {
	return "env_sensor";
}
 8000c60:	4800      	ldr	r0, [pc, #0]	; (8000c64 <getBoardName+0x4>)
 8000c62:	4770      	bx	lr
 8000c64:	08006b00 	.word	0x08006b00

08000c68 <getBoardNodeName>:
char * getBoardNodeName() {
	return "com.abstractfoundry.BME280";
}
 8000c68:	4800      	ldr	r0, [pc, #0]	; (8000c6c <getBoardNodeName+0x4>)
 8000c6a:	4770      	bx	lr
 8000c6c:	08006b0c 	.word	0x08006b0c

08000c70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b510      	push	{r4, lr}
	if (htim == &htim17) {
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000c74:	4283      	cmp	r3, r0
 8000c76:	d000      	beq.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0xa>
        loopRawCan();
    }
}
 8000c78:	bd10      	pop	{r4, pc}
        loopRawCan();
 8000c7a:	f002 f947 	bl	8002f0c <loopRawCan>
}
 8000c7e:	e7fb      	b.n	8000c78 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c80:	20000b6c 	.word	0x20000b6c

08000c84 <setupCanHw>:
    HAL_ResumeTick();
    incrementTimestampUsec(1000000);
    hardAssert(HAL_TIM_Base_Start_IT(&htim17) == HAL_OK, "Failed to start can timer on wakeup");
}

void setupCanHw() {
 8000c84:	b510      	push	{r4, lr}
    hcan.Instance = CAN; // NOTE: canard library only works with CAN1
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <setupCanHw+0x10>)
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <setupCanHw+0x14>)
 8000c8a:	6003      	str	r3, [r0, #0]
    HAL_CAN_MspInit(&hcan);
 8000c8c:	f004 f8c2 	bl	8004e14 <HAL_CAN_MspInit>
    // GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; //GPIO_MODE_AF_PP; /* !! This is our difference - use it open drain mode !! */ ;
    // GPIO_InitStruct.Pull = GPIO_NOPULL;
    // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    // GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
    // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000ab0 	.word	0x20000ab0
 8000c98:	40006400 	.word	0x40006400

08000c9c <boardTest>:

uint8_t boardTest() {
 8000c9c:	b510      	push	{r4, lr}
    return testThp();
 8000c9e:	f002 fb7f 	bl	80033a0 <testThp>
}
 8000ca2:	bd10      	pop	{r4, pc}

08000ca4 <setup>:

void setup() {}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <loop>:

bool initialised = 0;
void loop() {
 8000ca8:	b510      	push	{r4, lr}
 8000caa:	b09a      	sub	sp, #104	; 0x68
//    static uint8_t count = 0;
    CEXCEPTION_T e;
    Try {
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <loop+0xbc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <loop+0xc0>)
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <loop+0xc4>)
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	58d1      	ldr	r1, [r2, r3]
 8000cbe:	9101      	str	r1, [sp, #4]
 8000cc0:	a803      	add	r0, sp, #12
 8000cc2:	50d0      	str	r0, [r2, r3]
 8000cc4:	189b      	adds	r3, r3, r2
 8000cc6:	4a2a      	ldr	r2, [pc, #168]	; (8000d70 <loop+0xc8>)
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	f7ff fa1d 	bl	8000108 <setjmp>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d135      	bne.n	8000d3e <loop+0x96>
        if (!initialised) {
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <loop+0xcc>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d11d      	bne.n	8000d16 <loop+0x6e>
            initialiseThp(&hi2c1);
 8000cda:	4827      	ldr	r0, [pc, #156]	; (8000d78 <loop+0xd0>)
 8000cdc:	f002 fb62 	bl	80033a4 <initialiseThp>
            initialiseDebug();
 8000ce0:	f002 fb08 	bl	80032f4 <initialiseDebug>
            setupCanHw();
 8000ce4:	f7ff ffce 	bl	8000c84 <setupCanHw>
            setupCan(false, NULL);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2000      	movs	r0, #0
 8000cec:	f002 f958 	bl	8002fa0 <setupCan>
            softAssert(HAL_TIM_Base_Start_IT(&htim17) == HAL_OK, "Failed to start canTimer");
 8000cf0:	4822      	ldr	r0, [pc, #136]	; (8000d7c <loop+0xd4>)
 8000cf2:	f005 fd17 	bl	8006724 <HAL_TIM_Base_Start_IT>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d109      	bne.n	8000d0e <loop+0x66>
            initialised = 1;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <loop+0xcc>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
            //     count = 0;
            //     sleepFor1Sec();
            // }
        }

    } Catch(e) {}
 8000d00:	9b00      	ldr	r3, [sp, #0]
 8000d02:	00da      	lsls	r2, r3, #3
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <loop+0xc4>)
 8000d06:	189b      	adds	r3, r3, r2
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <loop+0xc8>)
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	e01c      	b.n	8000d48 <loop+0xa0>
            softAssert(HAL_TIM_Base_Start_IT(&htim17) == HAL_OK, "Failed to start canTimer");
 8000d0e:	481c      	ldr	r0, [pc, #112]	; (8000d80 <loop+0xd8>)
 8000d10:	f000 f850 	bl	8000db4 <softAssertTmp>
 8000d14:	e7f1      	b.n	8000cfa <loop+0x52>
            uint32_t ticks = HAL_GetTick();
 8000d16:	f004 f9bd 	bl	8005094 <HAL_GetTick>
 8000d1a:	0004      	movs	r4, r0
            loopDebug(ticks);
 8000d1c:	f002 faf4 	bl	8003308 <loopDebug>
            loopThp(ticks);
 8000d20:	0020      	movs	r0, r4
 8000d22:	f002 fb89 	bl	8003438 <loopThp>
            for (uint8_t i=0; i<10; i++) {
 8000d26:	2400      	movs	r4, #0
 8000d28:	e006      	b.n	8000d38 <loop+0x90>
                HAL_Delay(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f004 f9b8 	bl	80050a0 <HAL_Delay>
                loopUavCan();
 8000d30:	f002 f900 	bl	8002f34 <loopUavCan>
            for (uint8_t i=0; i<10; i++) {
 8000d34:	3401      	adds	r4, #1
 8000d36:	b2e4      	uxtb	r4, r4
 8000d38:	2c09      	cmp	r4, #9
 8000d3a:	d9f6      	bls.n	8000d2a <loop+0x82>
 8000d3c:	e7e0      	b.n	8000d00 <loop+0x58>
    } Catch(e) {}
 8000d3e:	9b00      	ldr	r3, [sp, #0]
 8000d40:	00da      	lsls	r2, r3, #3
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <loop+0xc4>)
 8000d44:	189b      	adds	r3, r3, r2
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <loop+0xc4>)
 8000d4a:	9b00      	ldr	r3, [sp, #0]
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	9901      	ldr	r1, [sp, #4]
 8000d50:	5099      	str	r1, [r3, r2]
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <loop+0xbc>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4904      	ldr	r1, [pc, #16]	; (8000d68 <loop+0xc0>)
 8000d58:	5ccb      	ldrb	r3, [r1, r3]
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	18d2      	adds	r2, r2, r3
 8000d5e:	6853      	ldr	r3, [r2, #4]
}
 8000d60:	b01a      	add	sp, #104	; 0x68
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	20000164 	.word	0x20000164
 8000d68:	20000160 	.word	0x20000160
 8000d6c:	20000140 	.word	0x20000140
 8000d70:	5a5a5a5a 	.word	0x5a5a5a5a
 8000d74:	2000013c 	.word	0x2000013c
 8000d78:	20000ad8 	.word	0x20000ad8
 8000d7c:	20000b6c 	.word	0x20000b6c
 8000d80:	08006b28 	.word	0x08006b28

08000d84 <Throw>:

//------------------------------------------------------------------------------------------
//  Throw
//------------------------------------------------------------------------------------------
void Throw(CEXCEPTION_T ExceptionID)
{
 8000d84:	b510      	push	{r4, lr}
    unsigned int MY_ID = CEXCEPTION_GET_ID;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <Throw+0x24>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <Throw+0x28>)
 8000d8c:	5cd1      	ldrb	r1, [r2, r3]
    CExceptionFrames[MY_ID].Exception = ExceptionID;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <Throw+0x2c>)
 8000d90:	00ca      	lsls	r2, r1, #3
 8000d92:	189c      	adds	r4, r3, r2
 8000d94:	6060      	str	r0, [r4, #4]
    if (CExceptionFrames[MY_ID].pFrame)
 8000d96:	58d3      	ldr	r3, [r2, r3]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <Throw+0x1a>
    {
        longjmp(*CExceptionFrames[MY_ID].pFrame, 1);
    }
    CEXCEPTION_NO_CATCH_HANDLER(ExceptionID);
}
 8000d9c:	bd10      	pop	{r4, pc}
        longjmp(*CExceptionFrames[MY_ID].pFrame, 1);
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <Throw+0x2c>)
 8000da0:	58d0      	ldr	r0, [r2, r3]
 8000da2:	2101      	movs	r1, #1
 8000da4:	f7ff f9bc 	bl	8000120 <longjmp>
 8000da8:	20000164 	.word	0x20000164
 8000dac:	20000160 	.word	0x20000160
 8000db0:	20000140 	.word	0x20000140

08000db4 <softAssertTmp>:

char assertBuffer[ASSERT_BUFFER_SIZE] = {};
uint16_t assertBufferIndex = 0;
uint16_t assertCount = 0;

void softAssertTmp(char * msg) {
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	0006      	movs	r6, r0
	assertCount++;
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <softAssertTmp+0x38>)
 8000dba:	8813      	ldrh	r3, [r2, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	8013      	strh	r3, [r2, #0]
	if (ASSERT_BUFFER_SIZE > 1) {
		uint32_t length = strlen(msg);
 8000dc0:	f7ff f9bc 	bl	800013c <strlen>
		// Change last end of string to new line
		assertBuffer[assertBufferIndex] = '\n';
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <softAssertTmp+0x3c>)
 8000dc6:	881c      	ldrh	r4, [r3, #0]
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <softAssertTmp+0x40>)
 8000dca:	220a      	movs	r2, #10
 8000dcc:	551a      	strb	r2, [r3, r4]
		// Copy message into buffer and add a newline
		length = MIN(length, ASSERT_BUFFER_SIZE - assertBufferIndex -1);
 8000dce:	2531      	movs	r5, #49	; 0x31
 8000dd0:	1b2d      	subs	r5, r5, r4
 8000dd2:	4285      	cmp	r5, r0
 8000dd4:	d900      	bls.n	8000dd8 <softAssertTmp+0x24>
 8000dd6:	0005      	movs	r5, r0
		memcpy(&assertBuffer[assertBufferIndex], msg, length);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <softAssertTmp+0x40>)
 8000dda:	1900      	adds	r0, r0, r4
 8000ddc:	002a      	movs	r2, r5
 8000dde:	0031      	movs	r1, r6
 8000de0:	f005 fe2c 	bl	8006a3c <memcpy>
		assertBufferIndex += length;
 8000de4:	1964      	adds	r4, r4, r5
 8000de6:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <softAssertTmp+0x3c>)
 8000de8:	801c      	strh	r4, [r3, #0]
	}
}
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	2000019c 	.word	0x2000019c
 8000df0:	2000019a 	.word	0x2000019a
 8000df4:	20000168 	.word	0x20000168

08000df8 <hardAssertTmp>:

void hardAssertTmp(char * msg) {
 8000df8:	b510      	push	{r4, lr}
	softAssertTmp(msg);
 8000dfa:	f7ff ffdb 	bl	8000db4 <softAssertTmp>
	Throw(GENERAL_EXCEPTION);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ffc0 	bl	8000d84 <Throw>
}
 8000e04:	bd10      	pop	{r4, pc}

08000e06 <addCommandToPacket>:
    memcpy(&packet->data[packet->size], bytes, numBytes);
    packet->size += numBytes;
    return 0;
}

static int8_t addCommandToPacket(sFieldPacket * packet, uint8_t discriminator, uint32_t parameter) {
 8000e06:	b530      	push	{r4, r5, lr}
    if(packet->size + 5 > packet->maxSize)
 8000e08:	8883      	ldrh	r3, [r0, #4]
 8000e0a:	1d1d      	adds	r5, r3, #4
 8000e0c:	88c4      	ldrh	r4, [r0, #6]
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	da2b      	bge.n	8000e6a <addCommandToPacket+0x64>
        return -1;
    uint8_t * data = &packet->data[packet->size];
 8000e12:	6804      	ldr	r4, [r0, #0]
 8000e14:	46a4      	mov	ip, r4
 8000e16:	4463      	add	r3, ip
    if (parameter  <= 0xFF) {
 8000e18:	2aff      	cmp	r2, #255	; 0xff
 8000e1a:	d808      	bhi.n	8000e2e <addCommandToPacket+0x28>
        data[0] = discriminator | 1;
 8000e1c:	2401      	movs	r4, #1
 8000e1e:	4321      	orrs	r1, r4
 8000e20:	7019      	strb	r1, [r3, #0]
        *(data + 1) = parameter & 0xFF;
 8000e22:	705a      	strb	r2, [r3, #1]
        packet->size += 2;
 8000e24:	8883      	ldrh	r3, [r0, #4]
 8000e26:	3302      	adds	r3, #2
 8000e28:	8083      	strh	r3, [r0, #4]
        *(data + 2) = (parameter >> 8) & 0xFF;
        *(data + 3) = (parameter >> 16) & 0xFF;
        *(data + 4) = (parameter >> 24) & 0xFF;
        packet->size += 5;
    }
    return 0;
 8000e2a:	2000      	movs	r0, #0
}
 8000e2c:	bd30      	pop	{r4, r5, pc}
    } else if (parameter  <= 0xFFFF) {
 8000e2e:	2480      	movs	r4, #128	; 0x80
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	42a2      	cmp	r2, r4
 8000e34:	d20a      	bcs.n	8000e4c <addCommandToPacket+0x46>
        data[0] = discriminator | 2;
 8000e36:	2402      	movs	r4, #2
 8000e38:	4321      	orrs	r1, r4
 8000e3a:	7019      	strb	r1, [r3, #0]
        *(data + 1) = parameter & 0xFF;
 8000e3c:	705a      	strb	r2, [r3, #1]
        *(data + 2) = (parameter >> 8) & 0xFF;
 8000e3e:	0a12      	lsrs	r2, r2, #8
 8000e40:	709a      	strb	r2, [r3, #2]
        packet->size += 3;
 8000e42:	8883      	ldrh	r3, [r0, #4]
 8000e44:	3303      	adds	r3, #3
 8000e46:	8083      	strh	r3, [r0, #4]
    return 0;
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e7ef      	b.n	8000e2c <addCommandToPacket+0x26>
        data[0] = discriminator | 4;
 8000e4c:	2404      	movs	r4, #4
 8000e4e:	4321      	orrs	r1, r4
 8000e50:	7019      	strb	r1, [r3, #0]
        *(data + 1) = parameter & 0xFF;
 8000e52:	705a      	strb	r2, [r3, #1]
        *(data + 2) = (parameter >> 8) & 0xFF;
 8000e54:	0a11      	lsrs	r1, r2, #8
 8000e56:	7099      	strb	r1, [r3, #2]
        *(data + 3) = (parameter >> 16) & 0xFF;
 8000e58:	0c11      	lsrs	r1, r2, #16
 8000e5a:	70d9      	strb	r1, [r3, #3]
        *(data + 4) = (parameter >> 24) & 0xFF;
 8000e5c:	0e12      	lsrs	r2, r2, #24
 8000e5e:	711a      	strb	r2, [r3, #4]
        packet->size += 5;
 8000e60:	8883      	ldrh	r3, [r0, #4]
 8000e62:	3305      	adds	r3, #5
 8000e64:	8083      	strh	r3, [r0, #4]
    return 0;
 8000e66:	2000      	movs	r0, #0
 8000e68:	e7e0      	b.n	8000e2c <addCommandToPacket+0x26>
        return -1;
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	4240      	negs	r0, r0
 8000e6e:	e7dd      	b.n	8000e2c <addCommandToPacket+0x26>

08000e70 <addSkipToPacket>:
    if (addBytesToPacket(packet, fieldData, fieldDataSize) < 0)
        return -1;
    return 0;
}

static int8_t addSkipToPacket(sFieldPacket * packet, uint32_t numToSkip) {
 8000e70:	b510      	push	{r4, lr}
 8000e72:	000a      	movs	r2, r1
    return addCommandToPacket(packet, AF_COMMAND_DISCRIMINATOR_SKIP_FIELDS, numToSkip);
 8000e74:	2110      	movs	r1, #16
 8000e76:	f7ff ffc6 	bl	8000e06 <addCommandToPacket>
}
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <addSendingFieldsToPacket>:

static int8_t addSendingFieldsToPacket(sFieldPacket * packet, uint32_t numFields) {
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	000a      	movs	r2, r1
    return addCommandToPacket(packet, AF_COMMAND_DISCRIMINATOR_SENDING_N_FIELDS, numFields);
 8000e80:	2100      	movs	r1, #0
 8000e82:	f7ff ffc0 	bl	8000e06 <addCommandToPacket>
}
 8000e86:	bd10      	pop	{r4, pc}

08000e88 <readCommand>:
static void readCommand(uint8_t * data, uint8_t dataLength, uint8_t * bytePos, uint8_t * discriminator, uint32_t * parameter) {
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	0015      	movs	r5, r2
    *discriminator = data[*bytePos] & 0xF0;
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	5c82      	ldrb	r2, [r0, r2]
 8000e90:	210f      	movs	r1, #15
 8000e92:	438a      	bics	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
    uint8_t parameterLength = data[*bytePos] & 0x0F;
 8000e96:	782b      	ldrb	r3, [r5, #0]
 8000e98:	5cc2      	ldrb	r2, [r0, r3]
 8000e9a:	240f      	movs	r4, #15
 8000e9c:	4014      	ands	r4, r2
    (*bytePos)++;
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	702b      	strb	r3, [r5, #0]
    uint8_t * ptr = data + *bytePos;
 8000ea4:	18c3      	adds	r3, r0, r3
    switch (parameterLength) {
 8000ea6:	2c02      	cmp	r4, #2
 8000ea8:	d01e      	beq.n	8000ee8 <readCommand+0x60>
 8000eaa:	d807      	bhi.n	8000ebc <readCommand+0x34>
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d014      	beq.n	8000eda <readCommand+0x52>
 8000eb0:	2c01      	cmp	r4, #1
 8000eb2:	d120      	bne.n	8000ef6 <readCommand+0x6e>
            *parameter = ptr[0];
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	9a04      	ldr	r2, [sp, #16]
 8000eb8:	6013      	str	r3, [r2, #0]
            break;
 8000eba:	e011      	b.n	8000ee0 <readCommand+0x58>
    switch (parameterLength) {
 8000ebc:	2c04      	cmp	r4, #4
 8000ebe:	d11a      	bne.n	8000ef6 <readCommand+0x6e>
            *parameter = ptr[0] | ((ptr[1] << 8) & 0xFF00) | ((ptr[2] << 16) & 0xFF0000) | ((ptr[3] << 24) & 0xFF000000);
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	7859      	ldrb	r1, [r3, #1]
 8000ec4:	0209      	lsls	r1, r1, #8
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	7899      	ldrb	r1, [r3, #2]
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	78db      	ldrb	r3, [r3, #3]
 8000ed0:	061b      	lsls	r3, r3, #24
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	9a04      	ldr	r2, [sp, #16]
 8000ed6:	6013      	str	r3, [r2, #0]
            break;
 8000ed8:	e002      	b.n	8000ee0 <readCommand+0x58>
            *parameter = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	9a04      	ldr	r2, [sp, #16]
 8000ede:	6013      	str	r3, [r2, #0]
    (*bytePos) += parameterLength;
 8000ee0:	782b      	ldrb	r3, [r5, #0]
 8000ee2:	18e4      	adds	r4, r4, r3
 8000ee4:	702c      	strb	r4, [r5, #0]
}
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
            *parameter = ptr[0] | ((ptr[1] << 8) & 0xFF00);
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	785b      	ldrb	r3, [r3, #1]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	9a04      	ldr	r2, [sp, #16]
 8000ef2:	6013      	str	r3, [r2, #0]
            break;
 8000ef4:	e7f4      	b.n	8000ee0 <readCommand+0x58>
            hardAssert(0, "Unsupported parameter length");
 8000ef6:	4802      	ldr	r0, [pc, #8]	; (8000f00 <readCommand+0x78>)
 8000ef8:	f7ff ff7e 	bl	8000df8 <hardAssertTmp>
 8000efc:	e7f0      	b.n	8000ee0 <readCommand+0x58>
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	08006b44 	.word	0x08006b44

08000f04 <addBytesToPacket>:
static int8_t addBytesToPacket(sFieldPacket * packet, uint8_t * bytes, uint16_t numBytes) {
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0004      	movs	r4, r0
 8000f08:	0015      	movs	r5, r2
    if(packet->size + numBytes >= packet->maxSize)
 8000f0a:	8880      	ldrh	r0, [r0, #4]
 8000f0c:	1812      	adds	r2, r2, r0
 8000f0e:	88e3      	ldrh	r3, [r4, #6]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	da0a      	bge.n	8000f2a <addBytesToPacket+0x26>
    memcpy(&packet->data[packet->size], bytes, numBytes);
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	469c      	mov	ip, r3
 8000f18:	4460      	add	r0, ip
 8000f1a:	002a      	movs	r2, r5
 8000f1c:	f005 fd8e 	bl	8006a3c <memcpy>
    packet->size += numBytes;
 8000f20:	88a2      	ldrh	r2, [r4, #4]
 8000f22:	18ad      	adds	r5, r5, r2
 8000f24:	80a5      	strh	r5, [r4, #4]
    return 0;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4240      	negs	r0, r0
 8000f2e:	e7fb      	b.n	8000f28 <addBytesToPacket+0x24>

08000f30 <addVariableLengthFieldDataToPacket>:
static int8_t addVariableLengthFieldDataToPacket(sFieldPacket * packet, uint8_t * fieldData, uint8_t fieldDataSize) {
 8000f30:	b530      	push	{r4, r5, lr}
 8000f32:	b083      	sub	sp, #12
 8000f34:	0004      	movs	r4, r0
 8000f36:	000d      	movs	r5, r1
 8000f38:	466b      	mov	r3, sp
 8000f3a:	1dd9      	adds	r1, r3, #7
 8000f3c:	700a      	strb	r2, [r1, #0]
    if (addBytesToPacket(packet, &fieldDataSize, 1) < 0)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f7ff ffe0 	bl	8000f04 <addBytesToPacket>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	db0a      	blt.n	8000f5e <addVariableLengthFieldDataToPacket+0x2e>
    if (addBytesToPacket(packet, fieldData, fieldDataSize) < 0)
 8000f48:	466b      	mov	r3, sp
 8000f4a:	79da      	ldrb	r2, [r3, #7]
 8000f4c:	0029      	movs	r1, r5
 8000f4e:	0020      	movs	r0, r4
 8000f50:	f7ff ffd8 	bl	8000f04 <addBytesToPacket>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	db05      	blt.n	8000f64 <addVariableLengthFieldDataToPacket+0x34>
    return 0;
 8000f58:	2000      	movs	r0, #0
}
 8000f5a:	b003      	add	sp, #12
 8000f5c:	bd30      	pop	{r4, r5, pc}
        return -1;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	4240      	negs	r0, r0
 8000f62:	e7fa      	b.n	8000f5a <addVariableLengthFieldDataToPacket+0x2a>
        return -1;
 8000f64:	2001      	movs	r0, #1
 8000f66:	4240      	negs	r0, r0
 8000f68:	e7f7      	b.n	8000f5a <addVariableLengthFieldDataToPacket+0x2a>
	...

08000f6c <addToMetaDataFieldToPacket>:
            hardAssert(0, "Unsupported discriminator");
        }
    }
}

static uint8_t addToMetaDataFieldToPacket(sFieldPacket * packet, eMetaDataFieldIndex * packetFieldIndex, eMetaDataFieldIndex fieldIndex, uint8_t * value) {
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	b500      	push	{lr}
 8000f72:	0006      	movs	r6, r0
 8000f74:	000f      	movs	r7, r1
 8000f76:	0015      	movs	r5, r2
 8000f78:	4698      	mov	r8, r3
    int8_t res = 0;
    if (fieldIndex > *packetFieldIndex)
 8000f7a:	7809      	ldrb	r1, [r1, #0]
 8000f7c:	4291      	cmp	r1, r2
 8000f7e:	d31a      	bcc.n	8000fb6 <addToMetaDataFieldToPacket+0x4a>
    int8_t res = 0;
 8000f80:	2400      	movs	r4, #0
        res |= addSkipToPacket(packet, fieldIndex - *packetFieldIndex);
    addSendingFieldsToPacket(packet, 1);
 8000f82:	2101      	movs	r1, #1
 8000f84:	0030      	movs	r0, r6
 8000f86:	f7ff ff79 	bl	8000e7c <addSendingFieldsToPacket>
    if (metaFieldSize[fieldIndex] == 0) {
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <addToMetaDataFieldToPacket+0x64>)
 8000f8c:	5d5a      	ldrb	r2, [r3, r5]
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d116      	bne.n	8000fc0 <addToMetaDataFieldToPacket+0x54>
        res |= addVariableLengthFieldDataToPacket(packet, value, strlen((char *) value));
 8000f92:	4640      	mov	r0, r8
 8000f94:	f7ff f8d2 	bl	800013c <strlen>
 8000f98:	b2c2      	uxtb	r2, r0
 8000f9a:	4641      	mov	r1, r8
 8000f9c:	0030      	movs	r0, r6
 8000f9e:	f7ff ffc7 	bl	8000f30 <addVariableLengthFieldDataToPacket>
 8000fa2:	4320      	orrs	r0, r4
 8000fa4:	b240      	sxtb	r0, r0
    } else {
        res |= addBytesToPacket(packet, value, metaFieldSize[fieldIndex]);
    }
    *packetFieldIndex = fieldIndex + 1;
 8000fa6:	3501      	adds	r5, #1
 8000fa8:	703d      	strb	r5, [r7, #0]
    return (res != 0); // Return true if full
 8000faa:	1e43      	subs	r3, r0, #1
 8000fac:	4198      	sbcs	r0, r3
 8000fae:	b2c0      	uxtb	r0, r0
}
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	46b8      	mov	r8, r7
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res |= addSkipToPacket(packet, fieldIndex - *packetFieldIndex);
 8000fb6:	1a51      	subs	r1, r2, r1
 8000fb8:	f7ff ff5a 	bl	8000e70 <addSkipToPacket>
 8000fbc:	0004      	movs	r4, r0
 8000fbe:	e7e0      	b.n	8000f82 <addToMetaDataFieldToPacket+0x16>
        res |= addBytesToPacket(packet, value, metaFieldSize[fieldIndex]);
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	0030      	movs	r0, r6
 8000fc6:	f7ff ff9d 	bl	8000f04 <addBytesToPacket>
 8000fca:	4320      	orrs	r0, r4
 8000fcc:	b240      	sxtb	r0, r0
 8000fce:	e7ea      	b.n	8000fa6 <addToMetaDataFieldToPacket+0x3a>
 8000fd0:	08006ce0 	.word	0x08006ce0

08000fd4 <addComponentFieldTableToGlobalTable>:
void addComponentFieldTableToGlobalTable(sFieldInfoEntry * table, uint32_t tableSize) {
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	46ce      	mov	lr, r9
 8000fd8:	4647      	mov	r7, r8
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	0007      	movs	r7, r0
 8000fde:	4689      	mov	r9, r1
    for (uint8_t i=0; i<numComponents; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <addComponentFieldTableToGlobalTable+0xf4>)
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d907      	bls.n	8000ffa <addComponentFieldTableToGlobalTable+0x26>
        if (componentTables[i] == table)
 8000fea:	009a      	lsls	r2, r3, #2
 8000fec:	4937      	ldr	r1, [pc, #220]	; (80010cc <addComponentFieldTableToGlobalTable+0xf8>)
 8000fee:	5852      	ldr	r2, [r2, r1]
 8000ff0:	42ba      	cmp	r2, r7
 8000ff2:	d063      	beq.n	80010bc <addComponentFieldTableToGlobalTable+0xe8>
    for (uint8_t i=0; i<numComponents; i++) {
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	e7f3      	b.n	8000fe2 <addComponentFieldTableToGlobalTable+0xe>
    if (numComponents >= MAX_COMPONENTS_PER_PROJECT) {
 8000ffa:	2a09      	cmp	r2, #9
 8000ffc:	d802      	bhi.n	8001004 <addComponentFieldTableToGlobalTable+0x30>
    for (field_t k=0; k<tableSize; k++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	4698      	mov	r8, r3
 8001002:	e02e      	b.n	8001062 <addComponentFieldTableToGlobalTable+0x8e>
        softAssert(0, "Exceeded MAX_COMPONENTS_PER_PROJECT");
 8001004:	4832      	ldr	r0, [pc, #200]	; (80010d0 <addComponentFieldTableToGlobalTable+0xfc>)
 8001006:	f7ff fed5 	bl	8000db4 <softAssertTmp>
        return;
 800100a:	e057      	b.n	80010bc <addComponentFieldTableToGlobalTable+0xe8>
                    softAssert(otherField->startFieldIndex + otherField->span <= newField->startFieldIndex, "Fields indicies overlap");
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	18d2      	adds	r2, r2, r3
 8001010:	4291      	cmp	r1, r2
 8001012:	d317      	bcc.n	8001044 <addComponentFieldTableToGlobalTable+0x70>
            for (field_t j=0; j<componentTableSizes[i]; j++) {
 8001014:	3401      	adds	r4, #1
 8001016:	00ab      	lsls	r3, r5, #2
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <addComponentFieldTableToGlobalTable+0x100>)
 800101a:	589b      	ldr	r3, [r3, r2]
 800101c:	42a3      	cmp	r3, r4
 800101e:	d915      	bls.n	800104c <addComponentFieldTableToGlobalTable+0x78>
                sFieldInfoEntry * otherField = &componentTables[i][j];
 8001020:	00ab      	lsls	r3, r5, #2
 8001022:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <addComponentFieldTableToGlobalTable+0xf8>)
 8001024:	589b      	ldr	r3, [r3, r2]
 8001026:	0162      	lsls	r2, r4, #5
 8001028:	189b      	adds	r3, r3, r2
                if (newField->startFieldIndex < otherField->startFieldIndex) {
 800102a:	68b1      	ldr	r1, [r6, #8]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	4291      	cmp	r1, r2
 8001030:	d2ec      	bcs.n	800100c <addComponentFieldTableToGlobalTable+0x38>
                    softAssert(newField->startFieldIndex + newField->span <= otherField->startFieldIndex, "Fields indicies overlap");
 8001032:	68f3      	ldr	r3, [r6, #12]
 8001034:	469c      	mov	ip, r3
 8001036:	4461      	add	r1, ip
 8001038:	428a      	cmp	r2, r1
 800103a:	d2eb      	bcs.n	8001014 <addComponentFieldTableToGlobalTable+0x40>
 800103c:	4826      	ldr	r0, [pc, #152]	; (80010d8 <addComponentFieldTableToGlobalTable+0x104>)
 800103e:	f7ff feb9 	bl	8000db4 <softAssertTmp>
 8001042:	e7e7      	b.n	8001014 <addComponentFieldTableToGlobalTable+0x40>
                    softAssert(otherField->startFieldIndex + otherField->span <= newField->startFieldIndex, "Fields indicies overlap");
 8001044:	4824      	ldr	r0, [pc, #144]	; (80010d8 <addComponentFieldTableToGlobalTable+0x104>)
 8001046:	f7ff feb5 	bl	8000db4 <softAssertTmp>
 800104a:	e7e3      	b.n	8001014 <addComponentFieldTableToGlobalTable+0x40>
        for (uint8_t i=0; i<numComponents; i++) {
 800104c:	3501      	adds	r5, #1
 800104e:	b2ed      	uxtb	r5, r5
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <addComponentFieldTableToGlobalTable+0xf4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	42ab      	cmp	r3, r5
 8001056:	d901      	bls.n	800105c <addComponentFieldTableToGlobalTable+0x88>
            for (field_t j=0; j<componentTableSizes[i]; j++) {
 8001058:	2400      	movs	r4, #0
 800105a:	e7dc      	b.n	8001016 <addComponentFieldTableToGlobalTable+0x42>
    for (field_t k=0; k<tableSize; k++) {
 800105c:	2301      	movs	r3, #1
 800105e:	469c      	mov	ip, r3
 8001060:	44e0      	add	r8, ip
 8001062:	45c8      	cmp	r8, r9
 8001064:	d204      	bcs.n	8001070 <addComponentFieldTableToGlobalTable+0x9c>
        sFieldInfoEntry * newField = &table[k];
 8001066:	4643      	mov	r3, r8
 8001068:	015e      	lsls	r6, r3, #5
 800106a:	19be      	adds	r6, r7, r6
        for (uint8_t i=0; i<numComponents; i++) {
 800106c:	2500      	movs	r5, #0
 800106e:	e7ef      	b.n	8001050 <addComponentFieldTableToGlobalTable+0x7c>
    uint8_t i = 0;
 8001070:	2300      	movs	r3, #0
    for (; i<numComponents; i++) {
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <addComponentFieldTableToGlobalTable+0xf4>)
 8001074:	7815      	ldrb	r5, [r2, #0]
 8001076:	429d      	cmp	r5, r3
 8001078:	d909      	bls.n	800108e <addComponentFieldTableToGlobalTable+0xba>
        if (table[0].startFieldIndex < componentTables[i][0].startFieldIndex) {
 800107a:	009a      	lsls	r2, r3, #2
 800107c:	4913      	ldr	r1, [pc, #76]	; (80010cc <addComponentFieldTableToGlobalTable+0xf8>)
 800107e:	5852      	ldr	r2, [r2, r1]
 8001080:	6892      	ldr	r2, [r2, #8]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	4291      	cmp	r1, r2
 8001086:	d31d      	bcc.n	80010c4 <addComponentFieldTableToGlobalTable+0xf0>
    for (; i<numComponents; i++) {
 8001088:	3301      	adds	r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	e7f1      	b.n	8001072 <addComponentFieldTableToGlobalTable+0x9e>
 800108e:	002a      	movs	r2, r5
 8001090:	e009      	b.n	80010a6 <addComponentFieldTableToGlobalTable+0xd2>
        componentTables[j] = componentTables[j-1];
 8001092:	1e51      	subs	r1, r2, #1
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <addComponentFieldTableToGlobalTable+0xf8>)
 8001096:	008c      	lsls	r4, r1, #2
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	5826      	ldr	r6, [r4, r0]
 800109c:	5016      	str	r6, [r2, r0]
        componentTableSizes[j] = componentTableSizes[j-1];
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <addComponentFieldTableToGlobalTable+0x100>)
 80010a0:	5824      	ldr	r4, [r4, r0]
 80010a2:	5014      	str	r4, [r2, r0]
    for (uint8_t j=numComponents; j>i; j--) {
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d3f3      	bcc.n	8001092 <addComponentFieldTableToGlobalTable+0xbe>
    componentTables[i] = table;
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <addComponentFieldTableToGlobalTable+0xf8>)
 80010ae:	509f      	str	r7, [r3, r2]
    componentTableSizes[i] = tableSize;
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <addComponentFieldTableToGlobalTable+0x100>)
 80010b2:	4649      	mov	r1, r9
 80010b4:	5099      	str	r1, [r3, r2]
    numComponents++;
 80010b6:	3501      	adds	r5, #1
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <addComponentFieldTableToGlobalTable+0xf4>)
 80010ba:	701d      	strb	r5, [r3, #0]
}
 80010bc:	bcc0      	pop	{r6, r7}
 80010be:	46b9      	mov	r9, r7
 80010c0:	46b0      	mov	r8, r6
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c4:	002a      	movs	r2, r5
 80010c6:	e7ee      	b.n	80010a6 <addComponentFieldTableToGlobalTable+0xd2>
 80010c8:	200002f4 	.word	0x200002f4
 80010cc:	200001c8 	.word	0x200001c8
 80010d0:	08006b64 	.word	0x08006b64
 80010d4:	200001a0 	.word	0x200001a0
 80010d8:	08006b88 	.word	0x08006b88

080010dc <getFieldInfo>:
const sFieldInfoEntry * getFieldInfo(field_t fieldIndex) {
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	0004      	movs	r4, r0
    sFieldInfoEntry * table = componentTables[numComponents-1];
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <getFieldInfo+0x78>)
 80010e2:	781f      	ldrb	r7, [r3, #0]
 80010e4:	1e7b      	subs	r3, r7, #1
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <getFieldInfo+0x7c>)
 80010ea:	589d      	ldr	r5, [r3, r2]
    uint32_t tableSize = componentTableSizes[numComponents-1];
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <getFieldInfo+0x80>)
 80010ee:	589e      	ldr	r6, [r3, r2]
    for (uint8_t i=0; i<numComponents; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	e001      	b.n	80010f8 <getFieldInfo+0x1c>
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	429f      	cmp	r7, r3
 80010fa:	d90d      	bls.n	8001118 <getFieldInfo+0x3c>
        if (fieldIndex < componentTables[i][0].startFieldIndex) {
 80010fc:	0019      	movs	r1, r3
 80010fe:	009a      	lsls	r2, r3, #2
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <getFieldInfo+0x7c>)
 8001102:	5812      	ldr	r2, [r2, r0]
 8001104:	6892      	ldr	r2, [r2, #8]
 8001106:	42a2      	cmp	r2, r4
 8001108:	d9f4      	bls.n	80010f4 <getFieldInfo+0x18>
            if (i == 0) {
 800110a:	2b00      	cmp	r3, #0
 800110c:	d020      	beq.n	8001150 <getFieldInfo+0x74>
                table = componentTables[i-1];
 800110e:	3901      	subs	r1, #1
 8001110:	0089      	lsls	r1, r1, #2
 8001112:	580d      	ldr	r5, [r1, r0]
                tableSize = componentTableSizes[i-1];
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <getFieldInfo+0x80>)
 8001116:	58ce      	ldr	r6, [r1, r3]
    softAssert(table, "");
 8001118:	2d00      	cmp	r5, #0
 800111a:	d002      	beq.n	8001122 <getFieldInfo+0x46>
   uint32_t last = tableSize - 1;
 800111c:	1e71      	subs	r1, r6, #1
   uint32_t first = 0;
 800111e:	2600      	movs	r6, #0
   while (first <= last) {
 8001120:	e009      	b.n	8001136 <getFieldInfo+0x5a>
    softAssert(table, "");
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <getFieldInfo+0x84>)
 8001124:	f7ff fe46 	bl	8000db4 <softAssertTmp>
 8001128:	e7f8      	b.n	800111c <getFieldInfo+0x40>
        } else if (fieldIndex < middleEntry->startFieldIndex + middleEntry->span) {
 800112a:	68c6      	ldr	r6, [r0, #12]
 800112c:	46b4      	mov	ip, r6
 800112e:	4462      	add	r2, ip
 8001130:	42a2      	cmp	r2, r4
 8001132:	d80c      	bhi.n	800114e <getFieldInfo+0x72>
           first = middle + 1;
 8001134:	1c5e      	adds	r6, r3, #1
   while (first <= last) {
 8001136:	428e      	cmp	r6, r1
 8001138:	d808      	bhi.n	800114c <getFieldInfo+0x70>
       uint32_t middle = (first+last)/2;
 800113a:	1873      	adds	r3, r6, r1
 800113c:	085b      	lsrs	r3, r3, #1
        const sFieldInfoEntry * middleEntry = &table[middle];
 800113e:	0158      	lsls	r0, r3, #5
 8001140:	1828      	adds	r0, r5, r0
        if (fieldIndex < (middleEntry->startFieldIndex)) {
 8001142:	6882      	ldr	r2, [r0, #8]
 8001144:	42a2      	cmp	r2, r4
 8001146:	d9f0      	bls.n	800112a <getFieldInfo+0x4e>
           last = middle - 1;
 8001148:	1e59      	subs	r1, r3, #1
 800114a:	e7f4      	b.n	8001136 <getFieldInfo+0x5a>
    return NULL;
 800114c:	2000      	movs	r0, #0
}
 800114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return NULL;
 8001150:	2000      	movs	r0, #0
 8001152:	e7fc      	b.n	800114e <getFieldInfo+0x72>
 8001154:	200002f4 	.word	0x200002f4
 8001158:	200001c8 	.word	0x200001c8
 800115c:	200001a0 	.word	0x200001a0
 8001160:	08006fd4 	.word	0x08006fd4

08001164 <addMultiFieldDataToPacket>:
                                        field_t endFieldIndex, uint8_t * data, uint32_t numDataBytes) {
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	46d6      	mov	lr, sl
 8001168:	464f      	mov	r7, r9
 800116a:	4646      	mov	r6, r8
 800116c:	b5c0      	push	{r6, r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	4680      	mov	r8, r0
 8001172:	000c      	movs	r4, r1
 8001174:	0016      	movs	r6, r2
 8001176:	001f      	movs	r7, r3
 8001178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800117a:	4699      	mov	r9, r3
    if (startFieldIndex > (*nextPacketFieldIndex))
 800117c:	6809      	ldr	r1, [r1, #0]
 800117e:	4291      	cmp	r1, r2
 8001180:	d306      	bcc.n	8001190 <addMultiFieldDataToPacket+0x2c>
    *nextPacketFieldIndex = endFieldIndex;
 8001182:	6027      	str	r7, [r4, #0]
    addSendingFieldsToPacket(packet, endFieldIndex + 1 - startFieldIndex);
 8001184:	1bb9      	subs	r1, r7, r6
 8001186:	3101      	adds	r1, #1
 8001188:	4640      	mov	r0, r8
 800118a:	f7ff fe77 	bl	8000e7c <addSendingFieldsToPacket>
    for (field_t fieldIndex=startFieldIndex; fieldIndex<=endFieldIndex;) {
 800118e:	e00f      	b.n	80011b0 <addMultiFieldDataToPacket+0x4c>
        addSkipToPacket(packet, startFieldIndex - *nextPacketFieldIndex );
 8001190:	1a51      	subs	r1, r2, r1
 8001192:	f7ff fe6d 	bl	8000e70 <addSkipToPacket>
 8001196:	e7f4      	b.n	8001182 <addMultiFieldDataToPacket+0x1e>
        hardAssert(fieldInfo != NULL, "Inv field index");
 8001198:	4831      	ldr	r0, [pc, #196]	; (8001260 <addMultiFieldDataToPacket+0xfc>)
 800119a:	f7ff fe2d 	bl	8000df8 <hardAssertTmp>
 800119e:	e00e      	b.n	80011be <addMultiFieldDataToPacket+0x5a>
            softAssert(addBytesToPacket(packet, data, numDataBytes) == 0, "Not enough memory for packet");
 80011a0:	b28a      	uxth	r2, r1
 80011a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011a4:	4640      	mov	r0, r8
 80011a6:	f7ff fead 	bl	8000f04 <addBytesToPacket>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d126      	bne.n	80011fc <addMultiFieldDataToPacket+0x98>
        fieldIndex = tmpEndFieldIndex + 1;
 80011ae:	1c6e      	adds	r6, r5, #1
    for (field_t fieldIndex=startFieldIndex; fieldIndex<=endFieldIndex;) {
 80011b0:	42be      	cmp	r6, r7
 80011b2:	d84e      	bhi.n	8001252 <addMultiFieldDataToPacket+0xee>
        const sFieldInfoEntry * fieldInfo = getFieldInfo(fieldIndex);
 80011b4:	0030      	movs	r0, r6
 80011b6:	f7ff ff91 	bl	80010dc <getFieldInfo>
 80011ba:	1e04      	subs	r4, r0, #0
        hardAssert(fieldInfo != NULL, "Inv field index");
 80011bc:	d0ec      	beq.n	8001198 <addMultiFieldDataToPacket+0x34>
        field_t fieldOffset = fieldIndex - fieldInfo->startFieldIndex;
 80011be:	68a2      	ldr	r2, [r4, #8]
 80011c0:	1ab3      	subs	r3, r6, r2
        field_t tmpEndFieldIndex = MIN((fieldInfo->startFieldIndex + fieldInfo->span - 1), endFieldIndex);
 80011c2:	68e1      	ldr	r1, [r4, #12]
 80011c4:	1855      	adds	r5, r2, r1
 80011c6:	3d01      	subs	r5, #1
 80011c8:	42bd      	cmp	r5, r7
 80011ca:	d900      	bls.n	80011ce <addMultiFieldDataToPacket+0x6a>
 80011cc:	003d      	movs	r5, r7
        if (numDataBytes > 0) {
 80011ce:	4649      	mov	r1, r9
 80011d0:	2900      	cmp	r1, #0
 80011d2:	d1e5      	bne.n	80011a0 <addMultiFieldDataToPacket+0x3c>
        } else if (!fieldInfo->getFieldFn) {
 80011d4:	69e1      	ldr	r1, [r4, #28]
 80011d6:	468a      	mov	sl, r1
 80011d8:	2900      	cmp	r1, #0
 80011da:	d013      	beq.n	8001204 <addMultiFieldDataToPacket+0xa0>
            fieldInfo->getFieldFn(fieldInfo, fieldIndex, fieldIndex, value);
 80011dc:	466b      	mov	r3, sp
 80011de:	0032      	movs	r2, r6
 80011e0:	0031      	movs	r1, r6
 80011e2:	0020      	movs	r0, r4
 80011e4:	47d0      	blx	sl
            softAssert(addBytesToPacket(packet, value, fieldInfo->size) == 0, "Not enough memory for packet");
 80011e6:	7c62      	ldrb	r2, [r4, #17]
 80011e8:	4669      	mov	r1, sp
 80011ea:	4640      	mov	r0, r8
 80011ec:	f7ff fe8a 	bl	8000f04 <addBytesToPacket>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d0dc      	beq.n	80011ae <addMultiFieldDataToPacket+0x4a>
 80011f4:	481b      	ldr	r0, [pc, #108]	; (8001264 <addMultiFieldDataToPacket+0x100>)
 80011f6:	f7ff fddd 	bl	8000db4 <softAssertTmp>
 80011fa:	e7d8      	b.n	80011ae <addMultiFieldDataToPacket+0x4a>
            softAssert(addBytesToPacket(packet, data, numDataBytes) == 0, "Not enough memory for packet");
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <addMultiFieldDataToPacket+0x100>)
 80011fe:	f7ff fdd9 	bl	8000db4 <softAssertTmp>
 8001202:	e7d4      	b.n	80011ae <addMultiFieldDataToPacket+0x4a>
            field_t numFields = tmpEndFieldIndex - fieldInfo->startFieldIndex + 1;
 8001204:	1aae      	subs	r6, r5, r2
 8001206:	3601      	adds	r6, #1
            uint32_t numBytes = numFields * fieldInfo->size;
 8001208:	7c62      	ldrb	r2, [r4, #17]
 800120a:	4356      	muls	r6, r2
            if (fieldInfo->field == NULL) {
 800120c:	6821      	ldr	r1, [r4, #0]
 800120e:	2900      	cmp	r1, #0
 8001210:	d01d      	beq.n	800124e <addMultiFieldDataToPacket+0xea>
                void * fieldPtr = (void *) (((uint8_t *) fieldInfo->field) + (fieldInfo->size * fieldOffset));
 8001212:	4353      	muls	r3, r2
 8001214:	18c9      	adds	r1, r1, r3
                softAssert(addBytesToPacket(packet, fieldPtr, numBytes) == 0, "Not enough memory for packet");
 8001216:	b2b2      	uxth	r2, r6
 8001218:	4640      	mov	r0, r8
 800121a:	f7ff fe73 	bl	8000f04 <addBytesToPacket>
 800121e:	2800      	cmp	r0, #0
 8001220:	d0c5      	beq.n	80011ae <addMultiFieldDataToPacket+0x4a>
 8001222:	4810      	ldr	r0, [pc, #64]	; (8001264 <addMultiFieldDataToPacket+0x100>)
 8001224:	f7ff fdc6 	bl	8000db4 <softAssertTmp>
 8001228:	e7c1      	b.n	80011ae <addMultiFieldDataToPacket+0x4a>
                for (uint16_t i=0; i<numBytes; i++) {
 800122a:	3401      	adds	r4, #1
 800122c:	b2a4      	uxth	r4, r4
 800122e:	42b4      	cmp	r4, r6
 8001230:	d2bd      	bcs.n	80011ae <addMultiFieldDataToPacket+0x4a>
                    uint8_t tmp = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	466a      	mov	r2, sp
 8001236:	7013      	strb	r3, [r2, #0]
                    softAssert(addBytesToPacket(packet, &tmp, numBytes) == 0, "Not enough memory for packet");
 8001238:	b2b2      	uxth	r2, r6
 800123a:	4669      	mov	r1, sp
 800123c:	4640      	mov	r0, r8
 800123e:	f7ff fe61 	bl	8000f04 <addBytesToPacket>
 8001242:	2800      	cmp	r0, #0
 8001244:	d0f1      	beq.n	800122a <addMultiFieldDataToPacket+0xc6>
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <addMultiFieldDataToPacket+0x100>)
 8001248:	f7ff fdb4 	bl	8000db4 <softAssertTmp>
 800124c:	e7ed      	b.n	800122a <addMultiFieldDataToPacket+0xc6>
                for (uint16_t i=0; i<numBytes; i++) {
 800124e:	2400      	movs	r4, #0
 8001250:	e7ed      	b.n	800122e <addMultiFieldDataToPacket+0xca>
}
 8001252:	b002      	add	sp, #8
 8001254:	bce0      	pop	{r5, r6, r7}
 8001256:	46ba      	mov	sl, r7
 8001258:	46b1      	mov	r9, r6
 800125a:	46a8      	mov	r8, r5
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	08006ba0 	.word	0x08006ba0
 8001264:	08006bb0 	.word	0x08006bb0

08001268 <createFieldPacket>:
static sFieldPacket * createFieldPacket(field_t startFieldIndex, field_t endFieldIndex) {
 8001268:	b530      	push	{r4, r5, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	0002      	movs	r2, r0
 800126e:	000b      	movs	r3, r1
    globalPacket.size = 0;
 8001270:	4d06      	ldr	r5, [pc, #24]	; (800128c <createFieldPacket+0x24>)
 8001272:	2400      	movs	r4, #0
 8001274:	80ac      	strh	r4, [r5, #4]
    field_t nextPacketFieldIndex = 0;
 8001276:	9403      	str	r4, [sp, #12]
    addMultiFieldDataToPacket(&globalPacket, &nextPacketFieldIndex, startFieldIndex, endFieldIndex, NULL, 0);
 8001278:	9401      	str	r4, [sp, #4]
 800127a:	9400      	str	r4, [sp, #0]
 800127c:	a903      	add	r1, sp, #12
 800127e:	0028      	movs	r0, r5
 8001280:	f7ff ff70 	bl	8001164 <addMultiFieldDataToPacket>
}
 8001284:	0028      	movs	r0, r5
 8001286:	b005      	add	sp, #20
 8001288:	bd30      	pop	{r4, r5, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	20000000 	.word	0x20000000

08001290 <getNextValidMetaDataFieldInfo>:
const sFieldInfoEntry * getNextValidMetaDataFieldInfo(field_t fieldIndex, field_t metaDataFieldIndex, field_t * validFieldIndex, field_t * validMetaDataFieldIndex) {
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	46c6      	mov	lr, r8
 8001294:	b500      	push	{lr}
 8001296:	0007      	movs	r7, r0
 8001298:	4690      	mov	r8, r2
 800129a:	469c      	mov	ip, r3
    for (uint8_t t=0; t<numComponents; t++) {
 800129c:	2600      	movs	r6, #0
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <getNextValidMetaDataFieldInfo+0x84>)
 80012a0:	7800      	ldrb	r0, [r0, #0]
 80012a2:	42b0      	cmp	r0, r6
 80012a4:	d933      	bls.n	800130e <getNextValidMetaDataFieldInfo+0x7e>
        for (uint32_t f=0; f<componentTableSizes[t]; f++) {
 80012a6:	2500      	movs	r5, #0
 80012a8:	e007      	b.n	80012ba <getNextValidMetaDataFieldInfo+0x2a>
                field_t maxMetaDataField = (extra && extra->numFields > 0) ? extra->fields[extra->numFields-1].index : (NUM_FIELD_INFO_FIELDS-1);
 80012aa:	2403      	movs	r4, #3
 80012ac:	e000      	b.n	80012b0 <getNextValidMetaDataFieldInfo+0x20>
 80012ae:	2403      	movs	r4, #3
                if (fieldIndex < field->startFieldIndex) {
 80012b0:	42bb      	cmp	r3, r7
 80012b2:	d81c      	bhi.n	80012ee <getNextValidMetaDataFieldInfo+0x5e>
                } else if (metaDataFieldIndex > maxMetaDataField) {
 80012b4:	428c      	cmp	r4, r1
 80012b6:	d222      	bcs.n	80012fe <getNextValidMetaDataFieldInfo+0x6e>
        for (uint32_t f=0; f<componentTableSizes[t]; f++) {
 80012b8:	3501      	adds	r5, #1
 80012ba:	00b4      	lsls	r4, r6, #2
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <getNextValidMetaDataFieldInfo+0x88>)
 80012be:	5824      	ldr	r4, [r4, r0]
 80012c0:	42ac      	cmp	r4, r5
 80012c2:	d921      	bls.n	8001308 <getNextValidMetaDataFieldInfo+0x78>
            sFieldInfoEntry * field = &componentTables[t][f];
 80012c4:	00b4      	lsls	r4, r6, #2
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <getNextValidMetaDataFieldInfo+0x8c>)
 80012c8:	5824      	ldr	r4, [r4, r0]
 80012ca:	0168      	lsls	r0, r5, #5
 80012cc:	1820      	adds	r0, r4, r0
            if (fieldIndex < (field->startFieldIndex + field->span)) {
 80012ce:	6883      	ldr	r3, [r0, #8]
 80012d0:	68c2      	ldr	r2, [r0, #12]
 80012d2:	189c      	adds	r4, r3, r2
 80012d4:	42bc      	cmp	r4, r7
 80012d6:	d9ef      	bls.n	80012b8 <getNextValidMetaDataFieldInfo+0x28>
                sExtraMetaDataFields * extra = field->extraMetaData;
 80012d8:	6944      	ldr	r4, [r0, #20]
                field_t maxMetaDataField = (extra && extra->numFields > 0) ? extra->fields[extra->numFields-1].index : (NUM_FIELD_INFO_FIELDS-1);
 80012da:	2c00      	cmp	r4, #0
 80012dc:	d0e5      	beq.n	80012aa <getNextValidMetaDataFieldInfo+0x1a>
 80012de:	7822      	ldrb	r2, [r4, #0]
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d0e4      	beq.n	80012ae <getNextValidMetaDataFieldInfo+0x1e>
 80012e4:	3a01      	subs	r2, #1
 80012e6:	00d2      	lsls	r2, r2, #3
 80012e8:	18a4      	adds	r4, r4, r2
 80012ea:	7924      	ldrb	r4, [r4, #4]
 80012ec:	e7e0      	b.n	80012b0 <getNextValidMetaDataFieldInfo+0x20>
                    *validFieldIndex = field->startFieldIndex;
 80012ee:	4642      	mov	r2, r8
 80012f0:	6013      	str	r3, [r2, #0]
                    *validMetaDataFieldIndex = 0;
 80012f2:	2200      	movs	r2, #0
 80012f4:	4663      	mov	r3, ip
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bc80      	pop	{r7}
 80012fa:	46b8      	mov	r8, r7
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *validFieldIndex = fieldIndex;
 80012fe:	4643      	mov	r3, r8
 8001300:	601f      	str	r7, [r3, #0]
                    *validMetaDataFieldIndex = metaDataFieldIndex;
 8001302:	4663      	mov	r3, ip
 8001304:	6019      	str	r1, [r3, #0]
                    return field;
 8001306:	e7f7      	b.n	80012f8 <getNextValidMetaDataFieldInfo+0x68>
    for (uint8_t t=0; t<numComponents; t++) {
 8001308:	3601      	adds	r6, #1
 800130a:	b2f6      	uxtb	r6, r6
 800130c:	e7c7      	b.n	800129e <getNextValidMetaDataFieldInfo+0xe>
    return NULL;
 800130e:	2000      	movs	r0, #0
 8001310:	e7f2      	b.n	80012f8 <getNextValidMetaDataFieldInfo+0x68>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	200002f4 	.word	0x200002f4
 8001318:	200001a0 	.word	0x200001a0
 800131c:	200001c8 	.word	0x200001c8

08001320 <broadcastFields>:
void broadcastFields(field_t startFieldIndex, field_t endFieldIndex) {
 8001320:	b510      	push	{r4, lr}
    sFieldPacket * packet = createFieldPacket(startFieldIndex, endFieldIndex);
 8001322:	f7ff ffa1 	bl	8001268 <createFieldPacket>
    broadcastFieldsPacket(packet->data, packet->size);
 8001326:	8881      	ldrh	r1, [r0, #4]
 8001328:	6800      	ldr	r0, [r0, #0]
 800132a:	f001 ff29 	bl	8003180 <broadcastFieldsPacket>
}
 800132e:	bd10      	pop	{r4, pc}

08001330 <afProtocolProcessRx>:
void afProtocolProcessRx(uint8_t * data, uint8_t dataLength) {
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	46de      	mov	lr, fp
 8001334:	4657      	mov	r7, sl
 8001336:	464e      	mov	r6, r9
 8001338:	4645      	mov	r5, r8
 800133a:	b5e0      	push	{r5, r6, r7, lr}
 800133c:	b087      	sub	sp, #28
 800133e:	4682      	mov	sl, r0
 8001340:	4688      	mov	r8, r1
    uint8_t bytePos = 0;
 8001342:	2317      	movs	r3, #23
 8001344:	446b      	add	r3, sp
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    field_t fieldIndex = 0;
 800134a:	2400      	movs	r4, #0
    while (bytePos < dataLength) {
 800134c:	e06c      	b.n	8001428 <afProtocolProcessRx+0xf8>
                field_t endFieldIndex = fieldIndex + parameter;
 800134e:	9b04      	ldr	r3, [sp, #16]
 8001350:	191f      	adds	r7, r3, r4
                while (fieldIndex < endFieldIndex) {
 8001352:	e038      	b.n	80013c6 <afProtocolProcessRx+0x96>
                        fieldInfo = getFieldInfo(fieldIndex);
 8001354:	0020      	movs	r0, r4
 8001356:	f7ff fec1 	bl	80010dc <getFieldInfo>
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <afProtocolProcessRx+0x13c>)
 800135c:	6018      	str	r0, [r3, #0]
                        hardAssert(fieldInfo, "Invalid field index");
 800135e:	2800      	cmp	r0, #0
 8001360:	d040      	beq.n	80013e4 <afProtocolProcessRx+0xb4>
                        hardAssert(fieldInfo->size > 0, "setFields - Variable field length not supported");
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <afProtocolProcessRx+0x13c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	7c5b      	ldrb	r3, [r3, #17]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d03f      	beq.n	80013ec <afProtocolProcessRx+0xbc>
                    field_t fieldOffset = fieldIndex - fieldInfo->startFieldIndex;
 800136c:	4b3f      	ldr	r3, [pc, #252]	; (800146c <afProtocolProcessRx+0x13c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689d      	ldr	r5, [r3, #8]
 8001372:	1b62      	subs	r2, r4, r5
 8001374:	4691      	mov	r9, r2
                    field_t numFields = MIN((endFieldIndex - fieldIndex), (fieldInfo->span - fieldOffset));
 8001376:	1b2d      	subs	r5, r5, r4
 8001378:	1b3a      	subs	r2, r7, r4
 800137a:	68d9      	ldr	r1, [r3, #12]
 800137c:	468c      	mov	ip, r1
 800137e:	4465      	add	r5, ip
 8001380:	4295      	cmp	r5, r2
 8001382:	d900      	bls.n	8001386 <afProtocolProcessRx+0x56>
 8001384:	0015      	movs	r5, r2
                    uint32_t numBytes = fieldInfo->size * numFields;
 8001386:	7c5e      	ldrb	r6, [r3, #17]
 8001388:	436e      	muls	r6, r5
                    hardAssert(bytePos + numBytes <= dataLength, "Set fields overflowed!");
 800138a:	2317      	movs	r3, #23
 800138c:	446b      	add	r3, sp
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	199b      	adds	r3, r3, r6
 8001392:	4543      	cmp	r3, r8
 8001394:	d82e      	bhi.n	80013f4 <afProtocolProcessRx+0xc4>
                    if (fieldInfo->setFieldFn) {
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <afProtocolProcessRx+0x13c>)
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	6983      	ldr	r3, [r0, #24]
 800139c:	469b      	mov	fp, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02c      	beq.n	80013fc <afProtocolProcessRx+0xcc>
                        fieldInfo->setFieldFn(fieldInfo, fieldIndex, fieldIndex+numFields, &data[bytePos]);
 80013a2:	2317      	movs	r3, #23
 80013a4:	446b      	add	r3, sp
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4453      	add	r3, sl
 80013aa:	1962      	adds	r2, r4, r5
 80013ac:	0021      	movs	r1, r4
 80013ae:	47d8      	blx	fp
                    if (!DONT_REPLY_TO_SET(fieldInfo->flags)) {
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <afProtocolProcessRx+0x13c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	7c9b      	ldrb	r3, [r3, #18]
 80013b6:	075b      	lsls	r3, r3, #29
 80013b8:	d52d      	bpl.n	8001416 <afProtocolProcessRx+0xe6>
                    bytePos += numBytes;
 80013ba:	2217      	movs	r2, #23
 80013bc:	446a      	add	r2, sp
 80013be:	7813      	ldrb	r3, [r2, #0]
 80013c0:	199e      	adds	r6, r3, r6
 80013c2:	7016      	strb	r6, [r2, #0]
                    fieldIndex += numFields;
 80013c4:	1964      	adds	r4, r4, r5
                while (fieldIndex < endFieldIndex) {
 80013c6:	42bc      	cmp	r4, r7
 80013c8:	d22e      	bcs.n	8001428 <afProtocolProcessRx+0xf8>
                    if ((fieldIndex < fieldInfo->startFieldIndex || fieldIndex >= fieldInfo->startFieldIndex + fieldInfo->span) || (fieldInfo == NULL)) {
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <afProtocolProcessRx+0x13c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	6893      	ldr	r3, [r2, #8]
 80013d0:	42a3      	cmp	r3, r4
 80013d2:	d8bf      	bhi.n	8001354 <afProtocolProcessRx+0x24>
 80013d4:	68d1      	ldr	r1, [r2, #12]
 80013d6:	468c      	mov	ip, r1
 80013d8:	4463      	add	r3, ip
 80013da:	42a3      	cmp	r3, r4
 80013dc:	d9ba      	bls.n	8001354 <afProtocolProcessRx+0x24>
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d1c4      	bne.n	800136c <afProtocolProcessRx+0x3c>
 80013e2:	e7b7      	b.n	8001354 <afProtocolProcessRx+0x24>
                        hardAssert(fieldInfo, "Invalid field index");
 80013e4:	4822      	ldr	r0, [pc, #136]	; (8001470 <afProtocolProcessRx+0x140>)
 80013e6:	f7ff fd07 	bl	8000df8 <hardAssertTmp>
 80013ea:	e7ba      	b.n	8001362 <afProtocolProcessRx+0x32>
                        hardAssert(fieldInfo->size > 0, "setFields - Variable field length not supported");
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <afProtocolProcessRx+0x144>)
 80013ee:	f7ff fd03 	bl	8000df8 <hardAssertTmp>
 80013f2:	e7bb      	b.n	800136c <afProtocolProcessRx+0x3c>
                    hardAssert(bytePos + numBytes <= dataLength, "Set fields overflowed!");
 80013f4:	4820      	ldr	r0, [pc, #128]	; (8001478 <afProtocolProcessRx+0x148>)
 80013f6:	f7ff fcff 	bl	8000df8 <hardAssertTmp>
 80013fa:	e7cc      	b.n	8001396 <afProtocolProcessRx+0x66>
                        void * fieldPtr = (((uint8_t *) fieldInfo->field) + (fieldInfo->size * fieldOffset));
 80013fc:	6803      	ldr	r3, [r0, #0]
 80013fe:	7c40      	ldrb	r0, [r0, #17]
 8001400:	464a      	mov	r2, r9
 8001402:	4342      	muls	r2, r0
 8001404:	1898      	adds	r0, r3, r2
                        memcpy(fieldPtr, &data[bytePos], numBytes);
 8001406:	2317      	movs	r3, #23
 8001408:	446b      	add	r3, sp
 800140a:	7819      	ldrb	r1, [r3, #0]
 800140c:	4451      	add	r1, sl
 800140e:	0032      	movs	r2, r6
 8001410:	f005 fb14 	bl	8006a3c <memcpy>
 8001414:	e7cc      	b.n	80013b0 <afProtocolProcessRx+0x80>
                        broadcastFields(fieldIndex, fieldIndex + numFields - 1);
 8001416:	1961      	adds	r1, r4, r5
 8001418:	3901      	subs	r1, #1
 800141a:	0020      	movs	r0, r4
 800141c:	f7ff ff80 	bl	8001320 <broadcastFields>
 8001420:	e7cb      	b.n	80013ba <afProtocolProcessRx+0x8a>
                hardAssert(0, "Invalid discriminator");
 8001422:	4816      	ldr	r0, [pc, #88]	; (800147c <afProtocolProcessRx+0x14c>)
 8001424:	f7ff fce8 	bl	8000df8 <hardAssertTmp>
    while (bytePos < dataLength) {
 8001428:	2317      	movs	r3, #23
 800142a:	446b      	add	r3, sp
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4543      	cmp	r3, r8
 8001430:	d214      	bcs.n	800145c <afProtocolProcessRx+0x12c>
        readCommand(data, dataLength, &bytePos, &discriminator, &parameter);
 8001432:	250f      	movs	r5, #15
 8001434:	446d      	add	r5, sp
 8001436:	ab04      	add	r3, sp, #16
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	002b      	movs	r3, r5
 800143c:	2217      	movs	r2, #23
 800143e:	446a      	add	r2, sp
 8001440:	4641      	mov	r1, r8
 8001442:	4650      	mov	r0, sl
 8001444:	f7ff fd20 	bl	8000e88 <readCommand>
        switch (discriminator) {
 8001448:	782b      	ldrb	r3, [r5, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <afProtocolProcessRx+0x120>
 800144e:	e77e      	b.n	800134e <afProtocolProcessRx+0x1e>
 8001450:	2b10      	cmp	r3, #16
 8001452:	d1e6      	bne.n	8001422 <afProtocolProcessRx+0xf2>
                fieldIndex += parameter;
 8001454:	9b04      	ldr	r3, [sp, #16]
 8001456:	469c      	mov	ip, r3
 8001458:	4464      	add	r4, ip
                break;
 800145a:	e7e5      	b.n	8001428 <afProtocolProcessRx+0xf8>
}
 800145c:	b007      	add	sp, #28
 800145e:	bcf0      	pop	{r4, r5, r6, r7}
 8001460:	46bb      	mov	fp, r7
 8001462:	46b2      	mov	sl, r6
 8001464:	46a9      	mov	r9, r5
 8001466:	46a0      	mov	r8, r4
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	200001f0 	.word	0x200001f0
 8001470:	08006bd0 	.word	0x08006bd0
 8001474:	08006be4 	.word	0x08006be4
 8001478:	08006c14 	.word	0x08006c14
 800147c:	08006c2c 	.word	0x08006c2c

08001480 <publishFieldsIfBelowBandwidth>:
int8_t publishFieldsIfBelowBandwidth(field_t startFieldIndex, field_t endFieldIndex) {
 8001480:	b510      	push	{r4, lr}
    sFieldPacket * packet = createFieldPacket(startFieldIndex, endFieldIndex);
 8001482:	f7ff fef1 	bl	8001268 <createFieldPacket>
    return publishFieldPacketIfBelowBandwidth(packet->data, packet->size);
 8001486:	8881      	ldrh	r1, [r0, #4]
 8001488:	6800      	ldr	r0, [r0, #0]
 800148a:	f001 feab 	bl	80031e4 <publishFieldPacketIfBelowBandwidth>
}
 800148e:	bd10      	pop	{r4, pc}

08001490 <parseFrameForMetaDataFieldIndex>:
void parseFrameForMetaDataFieldIndex(uint8_t * data, uint8_t dataLength, field_t * fieldIndex, field_t * subFieldIndex) {
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	46ce      	mov	lr, r9
 8001494:	4647      	mov	r7, r8
 8001496:	b580      	push	{r7, lr}
 8001498:	b087      	sub	sp, #28
 800149a:	0007      	movs	r7, r0
 800149c:	000e      	movs	r6, r1
 800149e:	4690      	mov	r8, r2
 80014a0:	4699      	mov	r9, r3
    uint8_t discriminator = 0; // Don't need to be initialised but avoid compiler warnings
 80014a2:	2300      	movs	r3, #0
 80014a4:	2217      	movs	r2, #23
 80014a6:	446a      	add	r2, sp
 80014a8:	7013      	strb	r3, [r2, #0]
    uint32_t parameter = 0; // Don't need to be initialised but avoid compiler warnings
 80014aa:	9304      	str	r3, [sp, #16]
    uint8_t bytePos=0;
 80014ac:	220f      	movs	r2, #15
 80014ae:	446a      	add	r2, sp
 80014b0:	7013      	strb	r3, [r2, #0]
    uint8_t numFieldIndicies = 0;
 80014b2:	2500      	movs	r5, #0
    while ( bytePos < dataLength) {
 80014b4:	e017      	b.n	80014e6 <parseFrameForMetaDataFieldIndex+0x56>
            if (numFieldIndicies == 0) {
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	d107      	bne.n	80014ca <parseFrameForMetaDataFieldIndex+0x3a>
                (*fieldIndex) += parameter;
 80014ba:	4643      	mov	r3, r8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	9a04      	ldr	r2, [sp, #16]
 80014c0:	4694      	mov	ip, r2
 80014c2:	4463      	add	r3, ip
 80014c4:	4642      	mov	r2, r8
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e00d      	b.n	80014e6 <parseFrameForMetaDataFieldIndex+0x56>
            } else if (numFieldIndicies == 1) {
 80014ca:	2d01      	cmp	r5, #1
 80014cc:	d10b      	bne.n	80014e6 <parseFrameForMetaDataFieldIndex+0x56>
                (*subFieldIndex) += parameter;
 80014ce:	464b      	mov	r3, r9
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	9a04      	ldr	r2, [sp, #16]
 80014d4:	4694      	mov	ip, r2
 80014d6:	4463      	add	r3, ip
 80014d8:	464a      	mov	r2, r9
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e003      	b.n	80014e6 <parseFrameForMetaDataFieldIndex+0x56>
            hardAssert(numFieldIndicies < 2, "More levels of meta data requested than expected");
 80014de:	2d01      	cmp	r5, #1
 80014e0:	d81d      	bhi.n	800151e <parseFrameForMetaDataFieldIndex+0x8e>
            numFieldIndicies++;
 80014e2:	3501      	adds	r5, #1
 80014e4:	b2ed      	uxtb	r5, r5
    while ( bytePos < dataLength) {
 80014e6:	230f      	movs	r3, #15
 80014e8:	446b      	add	r3, sp
 80014ea:	7819      	ldrb	r1, [r3, #0]
 80014ec:	42b1      	cmp	r1, r6
 80014ee:	d21e      	bcs.n	800152e <parseFrameForMetaDataFieldIndex+0x9e>
        readCommand(data, dataLength, &bytePos, &discriminator, &parameter);
 80014f0:	2417      	movs	r4, #23
 80014f2:	446c      	add	r4, sp
 80014f4:	ab04      	add	r3, sp, #16
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	0023      	movs	r3, r4
 80014fa:	220f      	movs	r2, #15
 80014fc:	446a      	add	r2, sp
 80014fe:	0031      	movs	r1, r6
 8001500:	0038      	movs	r0, r7
 8001502:	f7ff fcc1 	bl	8000e88 <readCommand>
        if (discriminator == AF_COMMAND_DISCRIMINATOR_SKIP_FIELDS) {
 8001506:	7824      	ldrb	r4, [r4, #0]
 8001508:	2c10      	cmp	r4, #16
 800150a:	d0d4      	beq.n	80014b6 <parseFrameForMetaDataFieldIndex+0x26>
        } else if (discriminator == AF_COMMAND_DISCRIMINATOR_SENDING_N_FIELDS) {
 800150c:	2c00      	cmp	r4, #0
 800150e:	d10a      	bne.n	8001526 <parseFrameForMetaDataFieldIndex+0x96>
            hardAssert(parameter == 1, "");
 8001510:	9b04      	ldr	r3, [sp, #16]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d0e3      	beq.n	80014de <parseFrameForMetaDataFieldIndex+0x4e>
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <parseFrameForMetaDataFieldIndex+0xa8>)
 8001518:	f7ff fc6e 	bl	8000df8 <hardAssertTmp>
 800151c:	e7df      	b.n	80014de <parseFrameForMetaDataFieldIndex+0x4e>
            hardAssert(numFieldIndicies < 2, "More levels of meta data requested than expected");
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <parseFrameForMetaDataFieldIndex+0xac>)
 8001520:	f7ff fc6a 	bl	8000df8 <hardAssertTmp>
 8001524:	e7dd      	b.n	80014e2 <parseFrameForMetaDataFieldIndex+0x52>
            hardAssert(0, "Unsupported discriminator");
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <parseFrameForMetaDataFieldIndex+0xb0>)
 8001528:	f7ff fc66 	bl	8000df8 <hardAssertTmp>
 800152c:	e7db      	b.n	80014e6 <parseFrameForMetaDataFieldIndex+0x56>
}
 800152e:	b007      	add	sp, #28
 8001530:	bcc0      	pop	{r6, r7}
 8001532:	46b9      	mov	r9, r7
 8001534:	46b0      	mov	r8, r6
 8001536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001538:	08006fd4 	.word	0x08006fd4
 800153c:	08006c44 	.word	0x08006c44
 8001540:	08006c78 	.word	0x08006c78

08001544 <createMetaDataPacket>:

void createMetaDataPacket(sFieldPacket * packet, field_t startFieldIndex, field_t startMetaDataFieldIndex) {
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	0006      	movs	r6, r0
 800154a:	0008      	movs	r0, r1
 800154c:	0011      	movs	r1, r2
    packet->size = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	80b3      	strh	r3, [r6, #4]
    field_t fieldIndex;
    field_t metaDataFieldIndex;
    const sFieldInfoEntry * fieldInfo = getNextValidMetaDataFieldInfo(startFieldIndex, startMetaDataFieldIndex, &fieldIndex, &metaDataFieldIndex);
 8001552:	ab02      	add	r3, sp, #8
 8001554:	aa03      	add	r2, sp, #12
 8001556:	f7ff fe9b 	bl	8001290 <getNextValidMetaDataFieldInfo>
 800155a:	1e04      	subs	r4, r0, #0
    if (fieldInfo == NULL) {
 800155c:	d052      	beq.n	8001604 <createMetaDataPacket+0xc0>
    // if (fieldIndex >= 60000) {
    //     softAssert(0, "");
    // }

    // Skip to the field and start sending meta data fields
    if (fieldIndex > 0)
 800155e:	9903      	ldr	r1, [sp, #12]
 8001560:	2900      	cmp	r1, #0
 8001562:	d11c      	bne.n	800159e <createMetaDataPacket+0x5a>
        addSkipToPacket(packet, fieldIndex);
    addSendingFieldsToPacket(packet, 1);
 8001564:	2101      	movs	r1, #1
 8001566:	0030      	movs	r0, r6
 8001568:	f7ff fc88 	bl	8000e7c <addSendingFieldsToPacket>
    
    uint8_t packetFull = 0;
    eMetaDataFieldIndex packetMetaFieldIndex = 0;
 800156c:	466b      	mov	r3, sp
 800156e:	2200      	movs	r2, #0
 8001570:	71da      	strb	r2, [r3, #7]
    if (NAME >= metaDataFieldIndex) {
 8001572:	9b02      	ldr	r3, [sp, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d016      	beq.n	80015a6 <createMetaDataPacket+0x62>
        addSendingFieldsToPacket(packet, 1);
        addVariableLengthFieldDataToPacket(packet, (uint8_t *) fieldInfo->name, strlen(fieldInfo->name));
        packetMetaFieldIndex = 1;
    }
    if (TYPE >= metaDataFieldIndex)
 8001578:	9b02      	ldr	r3, [sp, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d924      	bls.n	80015c8 <createMetaDataPacket+0x84>
    uint8_t packetFull = 0;
 800157e:	2000      	movs	r0, #0
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, TYPE, (uint8_t *) &fieldInfo->type);
    if ((SIZE >= metaDataFieldIndex) && !packetFull)
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d801      	bhi.n	800158a <createMetaDataPacket+0x46>
 8001586:	2800      	cmp	r0, #0
 8001588:	d027      	beq.n	80015da <createMetaDataPacket+0x96>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SIZE, (uint8_t *) &fieldInfo->size);
    if ((SPAN >= metaDataFieldIndex) && !packetFull)
 800158a:	9b02      	ldr	r3, [sp, #8]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d801      	bhi.n	8001594 <createMetaDataPacket+0x50>
 8001590:	2800      	cmp	r0, #0
 8001592:	d02b      	beq.n	80015ec <createMetaDataPacket+0xa8>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SPAN, (uint8_t *) &fieldInfo->span);
    sExtraMetaDataFields * extraMetaData = fieldInfo->extraMetaData;
 8001594:	6965      	ldr	r5, [r4, #20]
    if (extraMetaData) {
 8001596:	2d00      	cmp	r5, #0
 8001598:	d051      	beq.n	800163e <createMetaDataPacket+0xfa>
        for (eMetaDataFieldIndex i=0; i<extraMetaData->numFields; i++) {
 800159a:	2400      	movs	r4, #0
 800159c:	e036      	b.n	800160c <createMetaDataPacket+0xc8>
        addSkipToPacket(packet, fieldIndex);
 800159e:	0030      	movs	r0, r6
 80015a0:	f7ff fc66 	bl	8000e70 <addSkipToPacket>
 80015a4:	e7de      	b.n	8001564 <createMetaDataPacket+0x20>
        addSendingFieldsToPacket(packet, 1);
 80015a6:	2101      	movs	r1, #1
 80015a8:	0030      	movs	r0, r6
 80015aa:	f7ff fc67 	bl	8000e7c <addSendingFieldsToPacket>
        addVariableLengthFieldDataToPacket(packet, (uint8_t *) fieldInfo->name, strlen(fieldInfo->name));
 80015ae:	6865      	ldr	r5, [r4, #4]
 80015b0:	0028      	movs	r0, r5
 80015b2:	f7fe fdc3 	bl	800013c <strlen>
 80015b6:	b2c2      	uxtb	r2, r0
 80015b8:	0029      	movs	r1, r5
 80015ba:	0030      	movs	r0, r6
 80015bc:	f7ff fcb8 	bl	8000f30 <addVariableLengthFieldDataToPacket>
        packetMetaFieldIndex = 1;
 80015c0:	466b      	mov	r3, sp
 80015c2:	2201      	movs	r2, #1
 80015c4:	71da      	strb	r2, [r3, #7]
 80015c6:	e7d7      	b.n	8001578 <createMetaDataPacket+0x34>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, TYPE, (uint8_t *) &fieldInfo->type);
 80015c8:	0023      	movs	r3, r4
 80015ca:	3310      	adds	r3, #16
 80015cc:	2201      	movs	r2, #1
 80015ce:	4669      	mov	r1, sp
 80015d0:	3107      	adds	r1, #7
 80015d2:	0030      	movs	r0, r6
 80015d4:	f7ff fcca 	bl	8000f6c <addToMetaDataFieldToPacket>
 80015d8:	e7d2      	b.n	8001580 <createMetaDataPacket+0x3c>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SIZE, (uint8_t *) &fieldInfo->size);
 80015da:	0023      	movs	r3, r4
 80015dc:	3311      	adds	r3, #17
 80015de:	2202      	movs	r2, #2
 80015e0:	4669      	mov	r1, sp
 80015e2:	3107      	adds	r1, #7
 80015e4:	0030      	movs	r0, r6
 80015e6:	f7ff fcc1 	bl	8000f6c <addToMetaDataFieldToPacket>
 80015ea:	e7ce      	b.n	800158a <createMetaDataPacket+0x46>
        packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, SPAN, (uint8_t *) &fieldInfo->span);
 80015ec:	0023      	movs	r3, r4
 80015ee:	330c      	adds	r3, #12
 80015f0:	2203      	movs	r2, #3
 80015f2:	4669      	mov	r1, sp
 80015f4:	3107      	adds	r1, #7
 80015f6:	0030      	movs	r0, r6
 80015f8:	f7ff fcb8 	bl	8000f6c <addToMetaDataFieldToPacket>
 80015fc:	e7ca      	b.n	8001594 <createMetaDataPacket+0x50>
            if (extraMetaData->fields[i].index < packetMetaFieldIndex) {
                softAssert(0, "Meta data fields need to be in order");
 80015fe:	4814      	ldr	r0, [pc, #80]	; (8001650 <createMetaDataPacket+0x10c>)
 8001600:	f7ff fbd8 	bl	8000db4 <softAssertTmp>
            }
        }
    }
    if (packetFull && packet->size == 0)
        softAssert(0, "Failed to fit any data in packet");
}
 8001604:	b004      	add	sp, #16
 8001606:	bd70      	pop	{r4, r5, r6, pc}
        for (eMetaDataFieldIndex i=0; i<extraMetaData->numFields; i++) {
 8001608:	3401      	adds	r4, #1
 800160a:	b2e4      	uxtb	r4, r4
 800160c:	782b      	ldrb	r3, [r5, #0]
 800160e:	42a3      	cmp	r3, r4
 8001610:	d915      	bls.n	800163e <createMetaDataPacket+0xfa>
            if (extraMetaData->fields[i].index < packetMetaFieldIndex) {
 8001612:	00e3      	lsls	r3, r4, #3
 8001614:	18eb      	adds	r3, r5, r3
 8001616:	791a      	ldrb	r2, [r3, #4]
 8001618:	466b      	mov	r3, sp
 800161a:	3307      	adds	r3, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d3ed      	bcc.n	80015fe <createMetaDataPacket+0xba>
            } else if ((extraMetaData->fields[i].index >= metaDataFieldIndex) && !packetFull) {
 8001622:	9b02      	ldr	r3, [sp, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3ef      	bcc.n	8001608 <createMetaDataPacket+0xc4>
 8001628:	2800      	cmp	r0, #0
 800162a:	d1ed      	bne.n	8001608 <createMetaDataPacket+0xc4>
                packetFull = addToMetaDataFieldToPacket(packet, &packetMetaFieldIndex, extraMetaData->fields[i].index, extraMetaData->fields[i].value);
 800162c:	00e1      	lsls	r1, r4, #3
 800162e:	1869      	adds	r1, r5, r1
 8001630:	688b      	ldr	r3, [r1, #8]
 8001632:	4669      	mov	r1, sp
 8001634:	3107      	adds	r1, #7
 8001636:	0030      	movs	r0, r6
 8001638:	f7ff fc98 	bl	8000f6c <addToMetaDataFieldToPacket>
 800163c:	e7e4      	b.n	8001608 <createMetaDataPacket+0xc4>
    if (packetFull && packet->size == 0)
 800163e:	2800      	cmp	r0, #0
 8001640:	d0e0      	beq.n	8001604 <createMetaDataPacket+0xc0>
 8001642:	88b3      	ldrh	r3, [r6, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1dd      	bne.n	8001604 <createMetaDataPacket+0xc0>
        softAssert(0, "Failed to fit any data in packet");
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <createMetaDataPacket+0x110>)
 800164a:	f7ff fbb3 	bl	8000db4 <softAssertTmp>
 800164e:	e7d9      	b.n	8001604 <createMetaDataPacket+0xc0>
 8001650:	08006c94 	.word	0x08006c94
 8001654:	08006cbc 	.word	0x08006cbc

08001658 <handleMetaDataRequest>:

void handleMetaDataRequest(uint8_t * data, uint8_t dataLength, uint8_t ** responsePacket, uint16_t * responseLength) {
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	0016      	movs	r6, r2
 800165e:	001d      	movs	r5, r3
    field_t startFieldIndex = 0;
 8001660:	2700      	movs	r7, #0
 8001662:	9701      	str	r7, [sp, #4]
    field_t startMetaDataFieldIndex = 0;
 8001664:	9700      	str	r7, [sp, #0]
    parseFrameForMetaDataFieldIndex(data, dataLength, &startFieldIndex, &startMetaDataFieldIndex);
 8001666:	466b      	mov	r3, sp
 8001668:	aa01      	add	r2, sp, #4
 800166a:	f7ff ff11 	bl	8001490 <parseFrameForMetaDataFieldIndex>
//    softAssert(startFieldIndex != 122, "");
	globalPacket.size = 0;
 800166e:	4c06      	ldr	r4, [pc, #24]	; (8001688 <handleMetaDataRequest+0x30>)
 8001670:	80a7      	strh	r7, [r4, #4]
	createMetaDataPacket(&globalPacket, startFieldIndex, startMetaDataFieldIndex);
 8001672:	9a00      	ldr	r2, [sp, #0]
 8001674:	9901      	ldr	r1, [sp, #4]
 8001676:	0020      	movs	r0, r4
 8001678:	f7ff ff64 	bl	8001544 <createMetaDataPacket>
    *responsePacket = globalPacket.data;
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	6033      	str	r3, [r6, #0]
    *responseLength = globalPacket.size;
 8001680:	88a3      	ldrh	r3, [r4, #4]
 8001682:	802b      	strh	r3, [r5, #0]
}
 8001684:	b003      	add	sp, #12
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001688:	20000000 	.word	0x20000000

0800168c <fill_filter_settings>:
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800168c:	2300      	movs	r3, #0
 800168e:	56c3      	ldrsb	r3, [r0, r3]
 8001690:	221c      	movs	r2, #28
 8001692:	4393      	bics	r3, r2
 8001694:	78c9      	ldrb	r1, [r1, #3]
 8001696:	0089      	lsls	r1, r1, #2
 8001698:	400a      	ands	r2, r1
 800169a:	4313      	orrs	r3, r2
 800169c:	7003      	strb	r3, [r0, #0]
}
 800169e:	4770      	bx	lr

080016a0 <fill_standby_settings>:
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80016a0:	2200      	movs	r2, #0
 80016a2:	5682      	ldrsb	r2, [r0, r2]
 80016a4:	231f      	movs	r3, #31
 80016a6:	4013      	ands	r3, r2
 80016a8:	790a      	ldrb	r2, [r1, #4]
 80016aa:	0152      	lsls	r2, r2, #5
 80016ac:	4313      	orrs	r3, r2
 80016ae:	7003      	strb	r3, [r0, #0]
}
 80016b0:	4770      	bx	lr

080016b2 <fill_osr_press_settings>:
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016b2:	2300      	movs	r3, #0
 80016b4:	56c3      	ldrsb	r3, [r0, r3]
 80016b6:	221c      	movs	r2, #28
 80016b8:	4393      	bics	r3, r2
 80016ba:	7809      	ldrb	r1, [r1, #0]
 80016bc:	0089      	lsls	r1, r1, #2
 80016be:	400a      	ands	r2, r1
 80016c0:	4313      	orrs	r3, r2
 80016c2:	7003      	strb	r3, [r0, #0]
}
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_temp_settings>:
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80016c6:	2200      	movs	r2, #0
 80016c8:	5682      	ldrsb	r2, [r0, r2]
 80016ca:	231f      	movs	r3, #31
 80016cc:	4013      	ands	r3, r2
 80016ce:	784a      	ldrb	r2, [r1, #1]
 80016d0:	0152      	lsls	r2, r2, #5
 80016d2:	4313      	orrs	r3, r2
 80016d4:	7003      	strb	r3, [r0, #0]
}
 80016d6:	4770      	bx	lr

080016d8 <parse_device_settings>:
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80016d8:	7802      	ldrb	r2, [r0, #0]
 80016da:	2307      	movs	r3, #7
 80016dc:	401a      	ands	r2, r3
 80016de:	708a      	strb	r2, [r1, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80016e0:	7882      	ldrb	r2, [r0, #2]
 80016e2:	1092      	asrs	r2, r2, #2
 80016e4:	401a      	ands	r2, r3
 80016e6:	700a      	strb	r2, [r1, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80016e8:	7882      	ldrb	r2, [r0, #2]
 80016ea:	0952      	lsrs	r2, r2, #5
 80016ec:	704a      	strb	r2, [r1, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80016ee:	78c2      	ldrb	r2, [r0, #3]
 80016f0:	1092      	asrs	r2, r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	70cb      	strb	r3, [r1, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80016f6:	78c3      	ldrb	r3, [r0, #3]
 80016f8:	095b      	lsrs	r3, r3, #5
 80016fa:	710b      	strb	r3, [r1, #4]
}
 80016fc:	4770      	bx	lr
	...

08001700 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 8001700:	b530      	push	{r4, r5, lr}
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
    int32_t temperature_max = 8500;

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8001702:	6842      	ldr	r2, [r0, #4]
 8001704:	08d3      	lsrs	r3, r2, #3
 8001706:	880d      	ldrh	r5, [r1, #0]
 8001708:	006c      	lsls	r4, r5, #1
 800170a:	1b1b      	subs	r3, r3, r4
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 800170c:	2002      	movs	r0, #2
 800170e:	5e0c      	ldrsh	r4, [r1, r0]
 8001710:	435c      	muls	r4, r3
 8001712:	17e0      	asrs	r0, r4, #31
 8001714:	0540      	lsls	r0, r0, #21
 8001716:	0d43      	lsrs	r3, r0, #21
 8001718:	191b      	adds	r3, r3, r4
 800171a:	12db      	asrs	r3, r3, #11
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 800171c:	0912      	lsrs	r2, r2, #4
 800171e:	1b52      	subs	r2, r2, r5
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8001720:	4352      	muls	r2, r2
 8001722:	17d0      	asrs	r0, r2, #31
 8001724:	0500      	lsls	r0, r0, #20
 8001726:	0d00      	lsrs	r0, r0, #20
 8001728:	1882      	adds	r2, r0, r2
 800172a:	1312      	asrs	r2, r2, #12
 800172c:	2004      	movs	r0, #4
 800172e:	5e0c      	ldrsh	r4, [r1, r0]
 8001730:	4354      	muls	r4, r2
 8001732:	17e0      	asrs	r0, r4, #31
 8001734:	0480      	lsls	r0, r0, #18
 8001736:	0c82      	lsrs	r2, r0, #18
 8001738:	1912      	adds	r2, r2, r4
 800173a:	1392      	asrs	r2, r2, #14
    calib_data->t_fine = var1 + var2;
 800173c:	189b      	adds	r3, r3, r2
 800173e:	624b      	str	r3, [r1, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001740:	009a      	lsls	r2, r3, #2
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	001a      	movs	r2, r3
 8001746:	3280      	adds	r2, #128	; 0x80
 8001748:	17d1      	asrs	r1, r2, #31
 800174a:	20ff      	movs	r0, #255	; 0xff
 800174c:	4008      	ands	r0, r1
 800174e:	1880      	adds	r0, r0, r2
 8001750:	1200      	asrs	r0, r0, #8

    if (temperature < temperature_min)
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <compensate_temperature+0x68>)
 8001754:	4293      	cmp	r3, r2
 8001756:	db03      	blt.n	8001760 <compensate_temperature+0x60>
    {
        temperature = temperature_min;
    }
    else if (temperature > temperature_max)
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <compensate_temperature+0x6c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	dc02      	bgt.n	8001764 <compensate_temperature+0x64>
    {
        temperature = temperature_max;
    }

    return temperature;
}
 800175e:	bd30      	pop	{r4, r5, pc}
        temperature = temperature_min;
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <compensate_temperature+0x70>)
 8001762:	e7fc      	b.n	800175e <compensate_temperature+0x5e>
        temperature = temperature_max;
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <compensate_temperature+0x74>)
    return temperature;
 8001766:	e7fa      	b.n	800175e <compensate_temperature+0x5e>
 8001768:	fff05e81 	.word	0xfff05e81
 800176c:	0021347f 	.word	0x0021347f
 8001770:	fffff060 	.word	0xfffff060
 8001774:	00002134 	.word	0x00002134

08001778 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	46de      	mov	lr, fp
 800177c:	4657      	mov	r7, sl
 800177e:	464e      	mov	r6, r9
 8001780:	4645      	mov	r5, r8
 8001782:	b5e0      	push	{r5, r6, r7, lr}
 8001784:	b085      	sub	sp, #20
 8001786:	4681      	mov	r9, r0
 8001788:	4688      	mov	r8, r1
    int64_t var4;
    uint32_t pressure;
    uint32_t pressure_min = 3000000;
    uint32_t pressure_max = 11000000;

    var1 = ((int64_t)calib_data->t_fine) - 128000;
 800178a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800178c:	17e5      	asrs	r5, r4, #31
 800178e:	4a84      	ldr	r2, [pc, #528]	; (80019a0 <compensate_pressure+0x228>)
 8001790:	2301      	movs	r3, #1
 8001792:	425b      	negs	r3, r3
 8001794:	18a4      	adds	r4, r4, r2
 8001796:	415d      	adcs	r5, r3
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8001798:	0022      	movs	r2, r4
 800179a:	002b      	movs	r3, r5
 800179c:	0020      	movs	r0, r4
 800179e:	0029      	movs	r1, r5
 80017a0:	f7fe fe8e 	bl	80004c0 <__aeabi_lmul>
 80017a4:	4683      	mov	fp, r0
 80017a6:	468a      	mov	sl, r1
 80017a8:	4643      	mov	r3, r8
 80017aa:	2210      	movs	r2, #16
 80017ac:	5e9a      	ldrsh	r2, [r3, r2]
 80017ae:	17d3      	asrs	r3, r2, #31
 80017b0:	f7fe fe86 	bl	80004c0 <__aeabi_lmul>
 80017b4:	0006      	movs	r6, r0
 80017b6:	000f      	movs	r7, r1
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 80017b8:	4643      	mov	r3, r8
 80017ba:	200e      	movs	r0, #14
 80017bc:	5e18      	ldrsh	r0, [r3, r0]
 80017be:	17c1      	asrs	r1, r0, #31
 80017c0:	0022      	movs	r2, r4
 80017c2:	002b      	movs	r3, r5
 80017c4:	f7fe fe7c 	bl	80004c0 <__aeabi_lmul>
 80017c8:	0bc3      	lsrs	r3, r0, #15
 80017ca:	469c      	mov	ip, r3
 80017cc:	044b      	lsls	r3, r1, #17
 80017ce:	4661      	mov	r1, ip
 80017d0:	430b      	orrs	r3, r1
 80017d2:	0442      	lsls	r2, r0, #17
 80017d4:	18b6      	adds	r6, r6, r2
 80017d6:	415f      	adcs	r7, r3
    var2 = var2 + (((int64_t)calib_data->dig_p4) * 34359738368);
 80017d8:	4643      	mov	r3, r8
 80017da:	210c      	movs	r1, #12
 80017dc:	5e59      	ldrsh	r1, [r3, r1]
 80017de:	2200      	movs	r2, #0
 80017e0:	00cb      	lsls	r3, r1, #3
 80017e2:	1992      	adds	r2, r2, r6
 80017e4:	417b      	adcs	r3, r7
 80017e6:	9202      	str	r2, [sp, #8]
 80017e8:	9303      	str	r3, [sp, #12]
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_p3) / 256) + ((var1 * ((int64_t)calib_data->dig_p2) * 4096));
 80017ea:	4643      	mov	r3, r8
 80017ec:	220a      	movs	r2, #10
 80017ee:	5e9a      	ldrsh	r2, [r3, r2]
 80017f0:	17d3      	asrs	r3, r2, #31
 80017f2:	4658      	mov	r0, fp
 80017f4:	4651      	mov	r1, sl
 80017f6:	f7fe fe63 	bl	80004c0 <__aeabi_lmul>
 80017fa:	0006      	movs	r6, r0
 80017fc:	000f      	movs	r7, r1
 80017fe:	17c8      	asrs	r0, r1, #31
 8001800:	21ff      	movs	r1, #255	; 0xff
 8001802:	4008      	ands	r0, r1
 8001804:	0002      	movs	r2, r0
 8001806:	2300      	movs	r3, #0
 8001808:	1992      	adds	r2, r2, r6
 800180a:	417b      	adcs	r3, r7
 800180c:	0619      	lsls	r1, r3, #24
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	0a12      	lsrs	r2, r2, #8
 8001814:	4311      	orrs	r1, r2
 8001816:	000e      	movs	r6, r1
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	121f      	asrs	r7, r3, #8
 800181c:	4643      	mov	r3, r8
 800181e:	2008      	movs	r0, #8
 8001820:	5e18      	ldrsh	r0, [r3, r0]
 8001822:	17c1      	asrs	r1, r0, #31
 8001824:	0022      	movs	r2, r4
 8001826:	002b      	movs	r3, r5
 8001828:	f7fe fe4a 	bl	80004c0 <__aeabi_lmul>
 800182c:	0d04      	lsrs	r4, r0, #20
 800182e:	030b      	lsls	r3, r1, #12
 8001830:	4323      	orrs	r3, r4
 8001832:	0302      	lsls	r2, r0, #12
 8001834:	18b6      	adds	r6, r6, r2
 8001836:	415f      	adcs	r7, r3
    var3 = ((int64_t)1) * 140737488355328;
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_p1) / 8589934592;
 8001838:	2000      	movs	r0, #0
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0209      	lsls	r1, r1, #8
 800183e:	1980      	adds	r0, r0, r6
 8001840:	4179      	adcs	r1, r7
 8001842:	4643      	mov	r3, r8
 8001844:	88da      	ldrh	r2, [r3, #6]
 8001846:	2300      	movs	r3, #0
 8001848:	f7fe fe3a 	bl	80004c0 <__aeabi_lmul>
 800184c:	0004      	movs	r4, r0
 800184e:	000d      	movs	r5, r1
 8001850:	17c9      	asrs	r1, r1, #31
 8001852:	000a      	movs	r2, r1
 8001854:	2001      	movs	r0, #1
 8001856:	4001      	ands	r1, r0
 8001858:	000b      	movs	r3, r1
 800185a:	1912      	adds	r2, r2, r4
 800185c:	416b      	adcs	r3, r5
 800185e:	105d      	asrs	r5, r3, #1
 8001860:	17dc      	asrs	r4, r3, #31

    /* To avoid divide by zero exception */
    if (var1 != 0)
 8001862:	002b      	movs	r3, r5
 8001864:	4323      	orrs	r3, r4
 8001866:	d100      	bne.n	800186a <compensate_pressure+0xf2>
 8001868:	e090      	b.n	800198c <compensate_pressure+0x214>
    {
        var4 = 1048576 - uncomp_data->pressure;
 800186a:	464b      	mov	r3, r9
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	035b      	lsls	r3, r3, #13
 8001872:	1a9b      	subs	r3, r3, r2
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8001874:	0859      	lsrs	r1, r3, #1
 8001876:	07d8      	lsls	r0, r3, #31
 8001878:	9a02      	ldr	r2, [sp, #8]
 800187a:	9b03      	ldr	r3, [sp, #12]
 800187c:	1a80      	subs	r0, r0, r2
 800187e:	4199      	sbcs	r1, r3
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <compensate_pressure+0x22c>)
 8001882:	2300      	movs	r3, #0
 8001884:	f7fe fe1c 	bl	80004c0 <__aeabi_lmul>
 8001888:	002a      	movs	r2, r5
 800188a:	0023      	movs	r3, r4
 800188c:	f7fe fdd4 	bl	8000438 <__aeabi_ldivmod>
 8001890:	0004      	movs	r4, r0
 8001892:	000d      	movs	r5, r1
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001894:	4643      	mov	r3, r8
 8001896:	2016      	movs	r0, #22
 8001898:	5e18      	ldrsh	r0, [r3, r0]
 800189a:	17c1      	asrs	r1, r0, #31
 800189c:	17ee      	asrs	r6, r5, #31
 800189e:	04f6      	lsls	r6, r6, #19
 80018a0:	0cf2      	lsrs	r2, r6, #19
 80018a2:	2300      	movs	r3, #0
 80018a4:	1912      	adds	r2, r2, r4
 80018a6:	416b      	adcs	r3, r5
 80018a8:	04df      	lsls	r7, r3, #19
 80018aa:	0b56      	lsrs	r6, r2, #13
 80018ac:	433e      	orrs	r6, r7
 80018ae:	135f      	asrs	r7, r3, #13
 80018b0:	0032      	movs	r2, r6
 80018b2:	003b      	movs	r3, r7
 80018b4:	f7fe fe04 	bl	80004c0 <__aeabi_lmul>
 80018b8:	0002      	movs	r2, r0
 80018ba:	000b      	movs	r3, r1
 80018bc:	0030      	movs	r0, r6
 80018be:	0039      	movs	r1, r7
 80018c0:	f7fe fdfe 	bl	80004c0 <__aeabi_lmul>
 80018c4:	0006      	movs	r6, r0
 80018c6:	000f      	movs	r7, r1
 80018c8:	17c9      	asrs	r1, r1, #31
 80018ca:	01c9      	lsls	r1, r1, #7
 80018cc:	09ca      	lsrs	r2, r1, #7
 80018ce:	2300      	movs	r3, #0
 80018d0:	18b6      	adds	r6, r6, r2
 80018d2:	415f      	adcs	r7, r3
 80018d4:	01f9      	lsls	r1, r7, #7
 80018d6:	0e72      	lsrs	r2, r6, #25
 80018d8:	4311      	orrs	r1, r2
 80018da:	9100      	str	r1, [sp, #0]
 80018dc:	167b      	asrs	r3, r7, #25
 80018de:	9301      	str	r3, [sp, #4]
        var2 = (((int64_t)calib_data->dig_p8) * var4) / 524288;
 80018e0:	4643      	mov	r3, r8
 80018e2:	2014      	movs	r0, #20
 80018e4:	5e18      	ldrsh	r0, [r3, r0]
 80018e6:	17c1      	asrs	r1, r0, #31
 80018e8:	0022      	movs	r2, r4
 80018ea:	002b      	movs	r3, r5
 80018ec:	f7fe fde8 	bl	80004c0 <__aeabi_lmul>
 80018f0:	0002      	movs	r2, r0
 80018f2:	000b      	movs	r3, r1
 80018f4:	0010      	movs	r0, r2
 80018f6:	0019      	movs	r1, r3
 80018f8:	17db      	asrs	r3, r3, #31
 80018fa:	035b      	lsls	r3, r3, #13
 80018fc:	0b5a      	lsrs	r2, r3, #13
 80018fe:	2300      	movs	r3, #0
 8001900:	1812      	adds	r2, r2, r0
 8001902:	414b      	adcs	r3, r1
 8001904:	0016      	movs	r6, r2
 8001906:	001f      	movs	r7, r3
 8001908:	035b      	lsls	r3, r3, #13
 800190a:	0cf2      	lsrs	r2, r6, #19
 800190c:	4313      	orrs	r3, r2
 800190e:	0018      	movs	r0, r3
 8001910:	14f9      	asrs	r1, r7, #19
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_p7) * 16);
 8001912:	9a00      	ldr	r2, [sp, #0]
 8001914:	9b01      	ldr	r3, [sp, #4]
 8001916:	18a4      	adds	r4, r4, r2
 8001918:	415d      	adcs	r5, r3
 800191a:	1900      	adds	r0, r0, r4
 800191c:	4169      	adcs	r1, r5
 800191e:	17ca      	asrs	r2, r1, #31
 8001920:	23ff      	movs	r3, #255	; 0xff
 8001922:	401a      	ands	r2, r3
 8001924:	0014      	movs	r4, r2
 8001926:	2500      	movs	r5, #0
 8001928:	1900      	adds	r0, r0, r4
 800192a:	4169      	adcs	r1, r5
 800192c:	060a      	lsls	r2, r1, #24
 800192e:	0a03      	lsrs	r3, r0, #8
 8001930:	431a      	orrs	r2, r3
 8001932:	0014      	movs	r4, r2
 8001934:	120d      	asrs	r5, r1, #8
 8001936:	4643      	mov	r3, r8
 8001938:	2212      	movs	r2, #18
 800193a:	5e9b      	ldrsh	r3, [r3, r2]
 800193c:	17de      	asrs	r6, r3, #31
 800193e:	0f1a      	lsrs	r2, r3, #28
 8001940:	0131      	lsls	r1, r6, #4
 8001942:	4311      	orrs	r1, r2
 8001944:	0118      	lsls	r0, r3, #4
 8001946:	1900      	adds	r0, r0, r4
 8001948:	4169      	adcs	r1, r5
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800194a:	0fca      	lsrs	r2, r1, #31
 800194c:	2300      	movs	r3, #0
 800194e:	1812      	adds	r2, r2, r0
 8001950:	414b      	adcs	r3, r1
 8001952:	07d9      	lsls	r1, r3, #31
 8001954:	0850      	lsrs	r0, r2, #1
 8001956:	4308      	orrs	r0, r1
 8001958:	1059      	asrs	r1, r3, #1
 800195a:	2264      	movs	r2, #100	; 0x64
 800195c:	2300      	movs	r3, #0
 800195e:	f7fe fdaf 	bl	80004c0 <__aeabi_lmul>
 8001962:	0004      	movs	r4, r0
 8001964:	000d      	movs	r5, r1
 8001966:	17c8      	asrs	r0, r1, #31
 8001968:	217f      	movs	r1, #127	; 0x7f
 800196a:	4008      	ands	r0, r1
 800196c:	0002      	movs	r2, r0
 800196e:	2300      	movs	r3, #0
 8001970:	1912      	adds	r2, r2, r4
 8001972:	416b      	adcs	r3, r5
 8001974:	0011      	movs	r1, r2
 8001976:	065b      	lsls	r3, r3, #25
 8001978:	09c8      	lsrs	r0, r1, #7
 800197a:	4318      	orrs	r0, r3

        if (pressure < pressure_min)
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <compensate_pressure+0x230>)
 800197e:	4298      	cmp	r0, r3
 8001980:	d90c      	bls.n	800199c <compensate_pressure+0x224>
        {
            pressure = pressure_min;
        }
        else if (pressure > pressure_max)
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <compensate_pressure+0x234>)
 8001984:	4298      	cmp	r0, r3
 8001986:	d902      	bls.n	800198e <compensate_pressure+0x216>
        {
            pressure = pressure_max;
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <compensate_pressure+0x234>)
    else
    {
        pressure = pressure_min;
    }

    return pressure;
 800198a:	e000      	b.n	800198e <compensate_pressure+0x216>
        pressure = pressure_min;
 800198c:	4808      	ldr	r0, [pc, #32]	; (80019b0 <compensate_pressure+0x238>)
}
 800198e:	b005      	add	sp, #20
 8001990:	bcf0      	pop	{r4, r5, r6, r7}
 8001992:	46bb      	mov	fp, r7
 8001994:	46b2      	mov	sl, r6
 8001996:	46a9      	mov	r9, r5
 8001998:	46a0      	mov	r8, r4
 800199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pressure = pressure_min;
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <compensate_pressure+0x238>)
 800199e:	e7f6      	b.n	800198e <compensate_pressure+0x216>
 80019a0:	fffe0c00 	.word	0xfffe0c00
 80019a4:	00000c35 	.word	0x00000c35
 80019a8:	002dc6bf 	.word	0x002dc6bf
 80019ac:	00a7d8c0 	.word	0x00a7d8c0
 80019b0:	002dc6c0 	.word	0x002dc6c0

080019b4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 80019b4:	b570      	push	{r4, r5, r6, lr}
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;

    var1 = calib_data->t_fine - ((int32_t)76800);
 80019b6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <compensate_humidity+0xd4>)
 80019ba:	469c      	mov	ip, r3
 80019bc:	4466      	add	r6, ip
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 80019be:	6885      	ldr	r5, [r0, #8]
 80019c0:	03ad      	lsls	r5, r5, #14
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 80019c2:	221e      	movs	r2, #30
 80019c4:	5e8b      	ldrsh	r3, [r1, r2]
 80019c6:	051b      	lsls	r3, r3, #20
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 80019c8:	2220      	movs	r2, #32
 80019ca:	5e8c      	ldrsh	r4, [r1, r2]
 80019cc:	4374      	muls	r4, r6
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80019ce:	1aea      	subs	r2, r5, r3
 80019d0:	1b12      	subs	r2, r2, r4
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	01db      	lsls	r3, r3, #7
 80019d6:	469c      	mov	ip, r3
 80019d8:	4462      	add	r2, ip
 80019da:	17d4      	asrs	r4, r2, #31
 80019dc:	0464      	lsls	r4, r4, #17
 80019de:	0c64      	lsrs	r4, r4, #17
 80019e0:	18a4      	adds	r4, r4, r2
 80019e2:	13e4      	asrs	r4, r4, #15
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 80019e4:	2322      	movs	r3, #34	; 0x22
 80019e6:	56c8      	ldrsb	r0, [r1, r3]
 80019e8:	4370      	muls	r0, r6
 80019ea:	17c2      	asrs	r2, r0, #31
 80019ec:	0592      	lsls	r2, r2, #22
 80019ee:	0d93      	lsrs	r3, r2, #22
 80019f0:	181b      	adds	r3, r3, r0
 80019f2:	129b      	asrs	r3, r3, #10
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 80019f4:	7f08      	ldrb	r0, [r1, #28]
 80019f6:	4346      	muls	r6, r0
 80019f8:	17f2      	asrs	r2, r6, #31
 80019fa:	0552      	lsls	r2, r2, #21
 80019fc:	0d50      	lsrs	r0, r2, #21
 80019fe:	1980      	adds	r0, r0, r6
 8001a00:	12c0      	asrs	r0, r0, #11
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0212      	lsls	r2, r2, #8
 8001a06:	4694      	mov	ip, r2
 8001a08:	4460      	add	r0, ip
 8001a0a:	4358      	muls	r0, r3
 8001a0c:	17c2      	asrs	r2, r0, #31
 8001a0e:	0592      	lsls	r2, r2, #22
 8001a10:	0d93      	lsrs	r3, r2, #22
 8001a12:	181b      	adds	r3, r3, r0
 8001a14:	129b      	asrs	r3, r3, #10
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0392      	lsls	r2, r2, #14
 8001a1a:	4694      	mov	ip, r2
 8001a1c:	4463      	add	r3, ip
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8001a1e:	201a      	movs	r0, #26
 8001a20:	5e0a      	ldrsh	r2, [r1, r0]
 8001a22:	4353      	muls	r3, r2
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	0192      	lsls	r2, r2, #6
 8001a28:	4694      	mov	ip, r2
 8001a2a:	4463      	add	r3, ip
 8001a2c:	17da      	asrs	r2, r3, #31
 8001a2e:	0492      	lsls	r2, r2, #18
 8001a30:	0c92      	lsrs	r2, r2, #18
 8001a32:	18d3      	adds	r3, r2, r3
 8001a34:	139b      	asrs	r3, r3, #14
    var3 = var5 * var2;
 8001a36:	435c      	muls	r4, r3
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001a38:	17e2      	asrs	r2, r4, #31
 8001a3a:	0452      	lsls	r2, r2, #17
 8001a3c:	0c52      	lsrs	r2, r2, #17
 8001a3e:	1912      	adds	r2, r2, r4
 8001a40:	13d2      	asrs	r2, r2, #15
 8001a42:	4352      	muls	r2, r2
 8001a44:	17d0      	asrs	r0, r2, #31
 8001a46:	237f      	movs	r3, #127	; 0x7f
 8001a48:	4003      	ands	r3, r0
 8001a4a:	189a      	adds	r2, r3, r2
 8001a4c:	11d2      	asrs	r2, r2, #7
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8001a4e:	7e0b      	ldrb	r3, [r1, #24]
 8001a50:	435a      	muls	r2, r3
 8001a52:	17d1      	asrs	r1, r2, #31
 8001a54:	230f      	movs	r3, #15
 8001a56:	400b      	ands	r3, r1
 8001a58:	189a      	adds	r2, r3, r2
 8001a5a:	1112      	asrs	r2, r2, #4
 8001a5c:	1aa4      	subs	r4, r4, r2
    var5 = (var5 < 0 ? 0 : var5);
 8001a5e:	d40e      	bmi.n	8001a7e <compensate_humidity+0xca>
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8001a60:	23c8      	movs	r3, #200	; 0xc8
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	429c      	cmp	r4, r3
 8001a66:	dd00      	ble.n	8001a6a <compensate_humidity+0xb6>
 8001a68:	001c      	movs	r4, r3
    humidity = (uint32_t)(var5 / 4096);
 8001a6a:	17e0      	asrs	r0, r4, #31
 8001a6c:	0500      	lsls	r0, r0, #20
 8001a6e:	0d00      	lsrs	r0, r0, #20
 8001a70:	1900      	adds	r0, r0, r4
 8001a72:	1300      	asrs	r0, r0, #12

    if (humidity > humidity_max)
 8001a74:	23c8      	movs	r3, #200	; 0xc8
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	4298      	cmp	r0, r3
 8001a7a:	d802      	bhi.n	8001a82 <compensate_humidity+0xce>
    {
        humidity = humidity_max;
    }

    return humidity;
}
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
    var5 = (var5 < 0 ? 0 : var5);
 8001a7e:	2400      	movs	r4, #0
 8001a80:	e7ee      	b.n	8001a60 <compensate_humidity+0xac>
        humidity = humidity_max;
 8001a82:	0018      	movs	r0, r3
    return humidity;
 8001a84:	e7fa      	b.n	8001a7c <compensate_humidity+0xc8>
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	fffed400 	.word	0xfffed400

08001a8c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index;

    for (index = 1; index < len; index++)
 8001a8e:	2401      	movs	r4, #1
 8001a90:	e007      	b.n	8001aa2 <interleave_reg_addr+0x16>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001a92:	0065      	lsls	r5, r4, #1
 8001a94:	1e6e      	subs	r6, r5, #1
 8001a96:	5d07      	ldrb	r7, [r0, r4]
 8001a98:	558f      	strb	r7, [r1, r6]
        temp_buff[index * 2] = reg_data[index];
 8001a9a:	5d16      	ldrb	r6, [r2, r4]
 8001a9c:	554e      	strb	r6, [r1, r5]
    for (index = 1; index < len; index++)
 8001a9e:	3401      	adds	r4, #1
 8001aa0:	b2e4      	uxtb	r4, r4
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d3f5      	bcc.n	8001a92 <interleave_reg_addr+0x6>
    }
}
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa8 <parse_temp_press_calib_data>:
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
    struct bme280_calib_data *calib_data = &dev->calib_data;

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001aa8:	7842      	ldrb	r2, [r0, #1]
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	7803      	ldrb	r3, [r0, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	830b      	strh	r3, [r1, #24]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001ab2:	78c2      	ldrb	r2, [r0, #3]
 8001ab4:	0212      	lsls	r2, r2, #8
 8001ab6:	7883      	ldrb	r3, [r0, #2]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	834b      	strh	r3, [r1, #26]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001abc:	7942      	ldrb	r2, [r0, #5]
 8001abe:	0212      	lsls	r2, r2, #8
 8001ac0:	7903      	ldrb	r3, [r0, #4]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	838b      	strh	r3, [r1, #28]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001ac6:	79c2      	ldrb	r2, [r0, #7]
 8001ac8:	0212      	lsls	r2, r2, #8
 8001aca:	7983      	ldrb	r3, [r0, #6]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	83cb      	strh	r3, [r1, #30]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001ad0:	7a42      	ldrb	r2, [r0, #9]
 8001ad2:	0212      	lsls	r2, r2, #8
 8001ad4:	7a03      	ldrb	r3, [r0, #8]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	840b      	strh	r3, [r1, #32]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001ada:	7ac2      	ldrb	r2, [r0, #11]
 8001adc:	0212      	lsls	r2, r2, #8
 8001ade:	7a83      	ldrb	r3, [r0, #10]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	844b      	strh	r3, [r1, #34]	; 0x22
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001ae4:	7b42      	ldrb	r2, [r0, #13]
 8001ae6:	0212      	lsls	r2, r2, #8
 8001ae8:	7b03      	ldrb	r3, [r0, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	848b      	strh	r3, [r1, #36]	; 0x24
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001aee:	7bc2      	ldrb	r2, [r0, #15]
 8001af0:	0212      	lsls	r2, r2, #8
 8001af2:	7b83      	ldrb	r3, [r0, #14]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	84cb      	strh	r3, [r1, #38]	; 0x26
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001af8:	7c42      	ldrb	r2, [r0, #17]
 8001afa:	0212      	lsls	r2, r2, #8
 8001afc:	7c03      	ldrb	r3, [r0, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	850b      	strh	r3, [r1, #40]	; 0x28
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001b02:	7cc2      	ldrb	r2, [r0, #19]
 8001b04:	0212      	lsls	r2, r2, #8
 8001b06:	7c83      	ldrb	r3, [r0, #18]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	854b      	strh	r3, [r1, #42]	; 0x2a
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8001b0c:	7d42      	ldrb	r2, [r0, #21]
 8001b0e:	0212      	lsls	r2, r2, #8
 8001b10:	7d03      	ldrb	r3, [r0, #20]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	858b      	strh	r3, [r1, #44]	; 0x2c
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001b16:	7dc2      	ldrb	r2, [r0, #23]
 8001b18:	0212      	lsls	r2, r2, #8
 8001b1a:	7d83      	ldrb	r3, [r0, #22]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	85cb      	strh	r3, [r1, #46]	; 0x2e
    calib_data->dig_h1 = reg_data[25];
 8001b20:	7e42      	ldrb	r2, [r0, #25]
 8001b22:	2330      	movs	r3, #48	; 0x30
 8001b24:	54ca      	strb	r2, [r1, r3]
}
 8001b26:	4770      	bx	lr

08001b28 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001b28:	b510      	push	{r4, lr}
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001b2a:	7842      	ldrb	r2, [r0, #1]
 8001b2c:	0212      	lsls	r2, r2, #8
 8001b2e:	7803      	ldrb	r3, [r0, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	864b      	strh	r3, [r1, #50]	; 0x32
    calib_data->dig_h3 = reg_data[2];
 8001b34:	7882      	ldrb	r2, [r0, #2]
 8001b36:	2334      	movs	r3, #52	; 0x34
 8001b38:	54ca      	strb	r2, [r1, r3]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	56c3      	ldrsb	r3, [r0, r3]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	b21b      	sxth	r3, r3
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001b44:	7904      	ldrb	r4, [r0, #4]
 8001b46:	220f      	movs	r2, #15
 8001b48:	4022      	ands	r2, r4
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	86cb      	strh	r3, [r1, #54]	; 0x36
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	56c3      	ldrsb	r3, [r0, r3]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	b21b      	sxth	r3, r3
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8001b58:	7902      	ldrb	r2, [r0, #4]
 8001b5a:	0912      	lsrs	r2, r2, #4
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	870b      	strh	r3, [r1, #56]	; 0x38
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8001b60:	2206      	movs	r2, #6
 8001b62:	5682      	ldrsb	r2, [r0, r2]
 8001b64:	233a      	movs	r3, #58	; 0x3a
 8001b66:	54ca      	strb	r2, [r1, r3]
}
 8001b68:	bd10      	pop	{r4, pc}

08001b6a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8001b6a:	0003      	movs	r3, r0
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4018      	ands	r0, r3
 8001b70:	4219      	tst	r1, r3
 8001b72:	d000      	beq.n	8001b76 <are_settings_changed+0xc>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8001b74:	2001      	movs	r0, #1
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
    }

    return settings_changed;
}
 8001b76:	4770      	bx	lr

08001b78 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d00d      	beq.n	8001b98 <null_ptr_check+0x20>
 8001b7c:	68c3      	ldr	r3, [r0, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <null_ptr_check+0x26>
 8001b82:	6903      	ldr	r3, [r0, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <null_ptr_check+0x2c>
 8001b88:	6943      	ldr	r3, [r0, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <null_ptr_check+0x1a>
        rslt = BME280_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8001b8e:	2000      	movs	r0, #0
    }

    return rslt;
}
 8001b90:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
 8001b92:	2001      	movs	r0, #1
 8001b94:	4240      	negs	r0, r0
 8001b96:	e7fb      	b.n	8001b90 <null_ptr_check+0x18>
 8001b98:	2001      	movs	r0, #1
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	e7f8      	b.n	8001b90 <null_ptr_check+0x18>
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	4240      	negs	r0, r0
 8001ba2:	e7f5      	b.n	8001b90 <null_ptr_check+0x18>
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	4240      	negs	r0, r0
 8001ba8:	e7f2      	b.n	8001b90 <null_ptr_check+0x18>

08001baa <bme280_get_regs>:
{
 8001baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bac:	46c6      	mov	lr, r8
 8001bae:	b500      	push	{lr}
 8001bb0:	0005      	movs	r5, r0
 8001bb2:	000f      	movs	r7, r1
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	001c      	movs	r4, r3
    rslt = null_ptr_check(dev);
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff ffdd 	bl	8001b78 <null_ptr_check>
 8001bbe:	1e06      	subs	r6, r0, #0
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8001bc0:	d116      	bne.n	8001bf0 <bme280_get_regs+0x46>
 8001bc2:	2f00      	cmp	r7, #0
 8001bc4:	d017      	beq.n	8001bf6 <bme280_get_regs+0x4c>
        if (dev->intf != BME280_I2C_INTF)
 8001bc6:	7a23      	ldrb	r3, [r4, #8]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d003      	beq.n	8001bd4 <bme280_get_regs+0x2a>
            reg_addr = reg_addr | 0x80;
 8001bcc:	2080      	movs	r0, #128	; 0x80
 8001bce:	4240      	negs	r0, r0
 8001bd0:	4305      	orrs	r5, r0
 8001bd2:	b2ed      	uxtb	r5, r5
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	4642      	mov	r2, r8
 8001bd8:	0039      	movs	r1, r7
 8001bda:	0028      	movs	r0, r5
 8001bdc:	68e5      	ldr	r5, [r4, #12]
 8001bde:	47a8      	blx	r5
 8001be0:	2345      	movs	r3, #69	; 0x45
 8001be2:	54e0      	strb	r0, [r4, r3]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d109      	bne.n	8001bfc <bme280_get_regs+0x52>
}
 8001be8:	0030      	movs	r0, r6
 8001bea:	bc80      	pop	{r7}
 8001bec:	46b8      	mov	r8, r7
 8001bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BME280_E_NULL_PTR;
 8001bf0:	2601      	movs	r6, #1
 8001bf2:	4276      	negs	r6, r6
 8001bf4:	e7f8      	b.n	8001be8 <bme280_get_regs+0x3e>
 8001bf6:	2601      	movs	r6, #1
 8001bf8:	4276      	negs	r6, r6
 8001bfa:	e7f5      	b.n	8001be8 <bme280_get_regs+0x3e>
            rslt = BME280_E_COMM_FAIL;
 8001bfc:	2604      	movs	r6, #4
 8001bfe:	4276      	negs	r6, r6
 8001c00:	e7f2      	b.n	8001be8 <bme280_get_regs+0x3e>

08001c02 <get_calib_data>:
{
 8001c02:	b530      	push	{r4, r5, lr}
 8001c04:	b089      	sub	sp, #36	; 0x24
 8001c06:	0005      	movs	r5, r0
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	2100      	movs	r1, #0
 8001c10:	a802      	add	r0, sp, #8
 8001c12:	f004 ff1c 	bl	8006a4e <memset>
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001c16:	002b      	movs	r3, r5
 8001c18:	221a      	movs	r2, #26
 8001c1a:	a901      	add	r1, sp, #4
 8001c1c:	2088      	movs	r0, #136	; 0x88
 8001c1e:	f7ff ffc4 	bl	8001baa <bme280_get_regs>
 8001c22:	1e04      	subs	r4, r0, #0
    if (rslt == BME280_OK)
 8001c24:	d002      	beq.n	8001c2c <get_calib_data+0x2a>
}
 8001c26:	0020      	movs	r0, r4
 8001c28:	b009      	add	sp, #36	; 0x24
 8001c2a:	bd30      	pop	{r4, r5, pc}
        parse_temp_press_calib_data(calib_data, dev);
 8001c2c:	0029      	movs	r1, r5
 8001c2e:	a801      	add	r0, sp, #4
 8001c30:	f7ff ff3a 	bl	8001aa8 <parse_temp_press_calib_data>
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001c34:	002b      	movs	r3, r5
 8001c36:	2207      	movs	r2, #7
 8001c38:	a901      	add	r1, sp, #4
 8001c3a:	20e1      	movs	r0, #225	; 0xe1
 8001c3c:	f7ff ffb5 	bl	8001baa <bme280_get_regs>
 8001c40:	1e04      	subs	r4, r0, #0
        if (rslt == BME280_OK)
 8001c42:	d1f0      	bne.n	8001c26 <get_calib_data+0x24>
            parse_humidity_calib_data(calib_data, dev);
 8001c44:	0029      	movs	r1, r5
 8001c46:	a801      	add	r0, sp, #4
 8001c48:	f7ff ff6e 	bl	8001b28 <parse_humidity_calib_data>
 8001c4c:	e7eb      	b.n	8001c26 <get_calib_data+0x24>

08001c4e <bme280_set_regs>:
{
 8001c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c50:	46d6      	mov	lr, sl
 8001c52:	464f      	mov	r7, r9
 8001c54:	4646      	mov	r6, r8
 8001c56:	b5c0      	push	{r6, r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	0007      	movs	r7, r0
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	0016      	movs	r6, r2
 8001c60:	4698      	mov	r8, r3
    if (len > 10)
 8001c62:	2a0a      	cmp	r2, #10
 8001c64:	d900      	bls.n	8001c68 <bme280_set_regs+0x1a>
        len = 10;
 8001c66:	260a      	movs	r6, #10
    rslt = null_ptr_check(dev);
 8001c68:	4640      	mov	r0, r8
 8001c6a:	f7ff ff85 	bl	8001b78 <null_ptr_check>
 8001c6e:	4682      	mov	sl, r0
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d137      	bne.n	8001ce4 <bme280_set_regs+0x96>
 8001c74:	2f00      	cmp	r7, #0
 8001c76:	d039      	beq.n	8001cec <bme280_set_regs+0x9e>
 8001c78:	464b      	mov	r3, r9
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03a      	beq.n	8001cf4 <bme280_set_regs+0xa6>
        if (len != 0)
 8001c7e:	2e00      	cmp	r6, #0
 8001c80:	d03c      	beq.n	8001cfc <bme280_set_regs+0xae>
            temp_buff[0] = reg_data[0];
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	ab01      	add	r3, sp, #4
 8001c86:	701a      	strb	r2, [r3, #0]
            if (dev->intf != BME280_I2C_INTF)
 8001c88:	4643      	mov	r3, r8
 8001c8a:	7a1b      	ldrb	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d009      	beq.n	8001ca4 <bme280_set_regs+0x56>
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001c90:	2400      	movs	r4, #0
 8001c92:	e005      	b.n	8001ca0 <bme280_set_regs+0x52>
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001c94:	5d3b      	ldrb	r3, [r7, r4]
 8001c96:	257f      	movs	r5, #127	; 0x7f
 8001c98:	401d      	ands	r5, r3
 8001c9a:	553d      	strb	r5, [r7, r4]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001c9c:	3401      	adds	r4, #1
 8001c9e:	b2e4      	uxtb	r4, r4
 8001ca0:	42a6      	cmp	r6, r4
 8001ca2:	d8f7      	bhi.n	8001c94 <bme280_set_regs+0x46>
            if (len > 1)
 8001ca4:	2e01      	cmp	r6, #1
 8001ca6:	d813      	bhi.n	8001cd0 <bme280_set_regs+0x82>
                temp_len = len;
 8001ca8:	b2b2      	uxth	r2, r6
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001caa:	7838      	ldrb	r0, [r7, #0]
 8001cac:	4643      	mov	r3, r8
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	a901      	add	r1, sp, #4
 8001cb2:	4644      	mov	r4, r8
 8001cb4:	6924      	ldr	r4, [r4, #16]
 8001cb6:	47a0      	blx	r4
 8001cb8:	2345      	movs	r3, #69	; 0x45
 8001cba:	4642      	mov	r2, r8
 8001cbc:	54d0      	strb	r0, [r2, r3]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d120      	bne.n	8001d04 <bme280_set_regs+0xb6>
}
 8001cc2:	4650      	mov	r0, sl
 8001cc4:	b006      	add	sp, #24
 8001cc6:	bce0      	pop	{r5, r6, r7}
 8001cc8:	46ba      	mov	sl, r7
 8001cca:	46b1      	mov	r9, r6
 8001ccc:	46a8      	mov	r8, r5
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001cd0:	0033      	movs	r3, r6
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	a901      	add	r1, sp, #4
 8001cd6:	0038      	movs	r0, r7
 8001cd8:	f7ff fed8 	bl	8001a8c <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8001cdc:	0072      	lsls	r2, r6, #1
 8001cde:	3a01      	subs	r2, #1
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	e7e2      	b.n	8001caa <bme280_set_regs+0x5c>
        rslt = BME280_E_NULL_PTR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	469a      	mov	sl, r3
 8001cea:	e7ea      	b.n	8001cc2 <bme280_set_regs+0x74>
 8001cec:	2301      	movs	r3, #1
 8001cee:	425b      	negs	r3, r3
 8001cf0:	469a      	mov	sl, r3
 8001cf2:	e7e6      	b.n	8001cc2 <bme280_set_regs+0x74>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	425b      	negs	r3, r3
 8001cf8:	469a      	mov	sl, r3
 8001cfa:	e7e2      	b.n	8001cc2 <bme280_set_regs+0x74>
            rslt = BME280_E_INVALID_LEN;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	425b      	negs	r3, r3
 8001d00:	469a      	mov	sl, r3
 8001d02:	e7de      	b.n	8001cc2 <bme280_set_regs+0x74>
                rslt = BME280_E_COMM_FAIL;
 8001d04:	2304      	movs	r3, #4
 8001d06:	425b      	negs	r3, r3
 8001d08:	469a      	mov	sl, r3
 8001d0a:	e7da      	b.n	8001cc2 <bme280_set_regs+0x74>

08001d0c <set_osr_humidity_settings>:
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	0003      	movs	r3, r0
 8001d12:	000c      	movs	r4, r1
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001d14:	466a      	mov	r2, sp
 8001d16:	1d50      	adds	r0, r2, #5
 8001d18:	22f2      	movs	r2, #242	; 0xf2
 8001d1a:	7002      	strb	r2, [r0, #0]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001d1c:	789a      	ldrb	r2, [r3, #2]
 8001d1e:	2307      	movs	r3, #7
 8001d20:	4013      	ands	r3, r2
 8001d22:	466a      	mov	r2, sp
 8001d24:	1dd1      	adds	r1, r2, #7
 8001d26:	700b      	strb	r3, [r1, #0]
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001d28:	0023      	movs	r3, r4
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f7ff ff8f 	bl	8001c4e <bme280_set_regs>
    if (rslt == BME280_OK)
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d001      	beq.n	8001d38 <set_osr_humidity_settings+0x2c>
}
 8001d34:	b002      	add	sp, #8
 8001d36:	bd10      	pop	{r4, pc}
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001d38:	466b      	mov	r3, sp
 8001d3a:	22f4      	movs	r2, #244	; 0xf4
 8001d3c:	715a      	strb	r2, [r3, #5]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001d3e:	0023      	movs	r3, r4
 8001d40:	3af3      	subs	r2, #243	; 0xf3
 8001d42:	4669      	mov	r1, sp
 8001d44:	3106      	adds	r1, #6
 8001d46:	30f4      	adds	r0, #244	; 0xf4
 8001d48:	f7ff ff2f 	bl	8001baa <bme280_get_regs>
        if (rslt == BME280_OK)
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d1f1      	bne.n	8001d34 <set_osr_humidity_settings+0x28>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001d50:	0023      	movs	r3, r4
 8001d52:	2201      	movs	r2, #1
 8001d54:	4669      	mov	r1, sp
 8001d56:	3106      	adds	r1, #6
 8001d58:	4668      	mov	r0, sp
 8001d5a:	3005      	adds	r0, #5
 8001d5c:	f7ff ff77 	bl	8001c4e <bme280_set_regs>
 8001d60:	e7e8      	b.n	8001d34 <set_osr_humidity_settings+0x28>

08001d62 <set_osr_press_temp_settings>:
{
 8001d62:	b570      	push	{r4, r5, r6, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	0006      	movs	r6, r0
 8001d68:	000d      	movs	r5, r1
 8001d6a:	0014      	movs	r4, r2
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001d6c:	466b      	mov	r3, sp
 8001d6e:	22f4      	movs	r2, #244	; 0xf4
 8001d70:	71da      	strb	r2, [r3, #7]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001d72:	0023      	movs	r3, r4
 8001d74:	3af3      	subs	r2, #243	; 0xf3
 8001d76:	4669      	mov	r1, sp
 8001d78:	3106      	adds	r1, #6
 8001d7a:	20f4      	movs	r0, #244	; 0xf4
 8001d7c:	f7ff ff15 	bl	8001baa <bme280_get_regs>
    if (rslt == BME280_OK)
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d10b      	bne.n	8001d9c <set_osr_press_temp_settings+0x3a>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8001d84:	07f3      	lsls	r3, r6, #31
 8001d86:	d40b      	bmi.n	8001da0 <set_osr_press_temp_settings+0x3e>
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8001d88:	07b3      	lsls	r3, r6, #30
 8001d8a:	d40f      	bmi.n	8001dac <set_osr_press_temp_settings+0x4a>
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001d8c:	0023      	movs	r3, r4
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4669      	mov	r1, sp
 8001d92:	3106      	adds	r1, #6
 8001d94:	4668      	mov	r0, sp
 8001d96:	3007      	adds	r0, #7
 8001d98:	f7ff ff59 	bl	8001c4e <bme280_set_regs>
}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
            fill_osr_press_settings(&reg_data, settings);
 8001da0:	0029      	movs	r1, r5
 8001da2:	466b      	mov	r3, sp
 8001da4:	1d98      	adds	r0, r3, #6
 8001da6:	f7ff fc84 	bl	80016b2 <fill_osr_press_settings>
 8001daa:	e7ed      	b.n	8001d88 <set_osr_press_temp_settings+0x26>
            fill_osr_temp_settings(&reg_data, settings);
 8001dac:	0029      	movs	r1, r5
 8001dae:	466b      	mov	r3, sp
 8001db0:	1d98      	adds	r0, r3, #6
 8001db2:	f7ff fc88 	bl	80016c6 <fill_osr_temp_settings>
 8001db6:	e7e9      	b.n	8001d8c <set_osr_press_temp_settings+0x2a>

08001db8 <set_osr_settings>:
{
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	0004      	movs	r4, r0
 8001dbc:	000d      	movs	r5, r1
 8001dbe:	0016      	movs	r6, r2
    if (desired_settings & BME280_OSR_HUM_SEL)
 8001dc0:	0743      	lsls	r3, r0, #29
 8001dc2:	d403      	bmi.n	8001dcc <set_osr_settings+0x14>
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001dc4:	2001      	movs	r0, #1
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001dc6:	07a3      	lsls	r3, r4, #30
 8001dc8:	d105      	bne.n	8001dd6 <set_osr_settings+0x1e>
}
 8001dca:	bd70      	pop	{r4, r5, r6, pc}
        rslt = set_osr_humidity_settings(settings, dev);
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0028      	movs	r0, r5
 8001dd0:	f7ff ff9c 	bl	8001d0c <set_osr_humidity_settings>
 8001dd4:	e7f7      	b.n	8001dc6 <set_osr_settings+0xe>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001dd6:	0032      	movs	r2, r6
 8001dd8:	0029      	movs	r1, r5
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f7ff ffc1 	bl	8001d62 <set_osr_press_temp_settings>
 8001de0:	e7f3      	b.n	8001dca <set_osr_settings+0x12>

08001de2 <set_filter_standby_settings>:
{
 8001de2:	b570      	push	{r4, r5, r6, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	0006      	movs	r6, r0
 8001de8:	000d      	movs	r5, r1
 8001dea:	0014      	movs	r4, r2
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001dec:	466b      	mov	r3, sp
 8001dee:	22f5      	movs	r2, #245	; 0xf5
 8001df0:	71da      	strb	r2, [r3, #7]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001df2:	0023      	movs	r3, r4
 8001df4:	3af4      	subs	r2, #244	; 0xf4
 8001df6:	4669      	mov	r1, sp
 8001df8:	3106      	adds	r1, #6
 8001dfa:	20f5      	movs	r0, #245	; 0xf5
 8001dfc:	f7ff fed5 	bl	8001baa <bme280_get_regs>
    if (rslt == BME280_OK)
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d10b      	bne.n	8001e1c <set_filter_standby_settings+0x3a>
        if (desired_settings & BME280_FILTER_SEL)
 8001e04:	0733      	lsls	r3, r6, #28
 8001e06:	d40b      	bmi.n	8001e20 <set_filter_standby_settings+0x3e>
        if (desired_settings & BME280_STANDBY_SEL)
 8001e08:	06f3      	lsls	r3, r6, #27
 8001e0a:	d40f      	bmi.n	8001e2c <set_filter_standby_settings+0x4a>
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001e0c:	0023      	movs	r3, r4
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4669      	mov	r1, sp
 8001e12:	3106      	adds	r1, #6
 8001e14:	4668      	mov	r0, sp
 8001e16:	3007      	adds	r0, #7
 8001e18:	f7ff ff19 	bl	8001c4e <bme280_set_regs>
}
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
            fill_filter_settings(&reg_data, settings);
 8001e20:	0029      	movs	r1, r5
 8001e22:	466b      	mov	r3, sp
 8001e24:	1d98      	adds	r0, r3, #6
 8001e26:	f7ff fc31 	bl	800168c <fill_filter_settings>
 8001e2a:	e7ed      	b.n	8001e08 <set_filter_standby_settings+0x26>
            fill_standby_settings(&reg_data, settings);
 8001e2c:	0029      	movs	r1, r5
 8001e2e:	466b      	mov	r3, sp
 8001e30:	1d98      	adds	r0, r3, #6
 8001e32:	f7ff fc35 	bl	80016a0 <fill_standby_settings>
 8001e36:	e7e9      	b.n	8001e0c <set_filter_standby_settings+0x2a>

08001e38 <reload_device_settings>:
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	0004      	movs	r4, r0
 8001e3c:	000d      	movs	r5, r1
    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001e3e:	000a      	movs	r2, r1
 8001e40:	0001      	movs	r1, r0
 8001e42:	201f      	movs	r0, #31
 8001e44:	f7ff ffb8 	bl	8001db8 <set_osr_settings>
    if (rslt == BME280_OK)
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d000      	beq.n	8001e4e <reload_device_settings+0x16>
}
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001e4e:	002a      	movs	r2, r5
 8001e50:	0021      	movs	r1, r4
 8001e52:	301f      	adds	r0, #31
 8001e54:	f7ff ffc5 	bl	8001de2 <set_filter_standby_settings>
 8001e58:	e7f8      	b.n	8001e4c <reload_device_settings+0x14>

08001e5a <write_power_mode>:
{
 8001e5a:	b530      	push	{r4, r5, lr}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	0005      	movs	r5, r0
 8001e60:	000c      	movs	r4, r1
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001e62:	466b      	mov	r3, sp
 8001e64:	22f4      	movs	r2, #244	; 0xf4
 8001e66:	71da      	strb	r2, [r3, #7]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001e68:	000b      	movs	r3, r1
 8001e6a:	3af3      	subs	r2, #243	; 0xf3
 8001e6c:	4669      	mov	r1, sp
 8001e6e:	3106      	adds	r1, #6
 8001e70:	20f4      	movs	r0, #244	; 0xf4
 8001e72:	f7ff fe9a 	bl	8001baa <bme280_get_regs>
    if (rslt == BME280_OK)
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d001      	beq.n	8001e7e <write_power_mode+0x24>
}
 8001e7a:	b003      	add	sp, #12
 8001e7c:	bd30      	pop	{r4, r5, pc}
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001e7e:	466b      	mov	r3, sp
 8001e80:	799b      	ldrb	r3, [r3, #6]
 8001e82:	2203      	movs	r2, #3
 8001e84:	4393      	bics	r3, r2
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	3003      	adds	r0, #3
 8001e8a:	4005      	ands	r5, r0
 8001e8c:	431d      	orrs	r5, r3
 8001e8e:	466b      	mov	r3, sp
 8001e90:	719d      	strb	r5, [r3, #6]
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001e92:	0023      	movs	r3, r4
 8001e94:	3a02      	subs	r2, #2
 8001e96:	4669      	mov	r1, sp
 8001e98:	3106      	adds	r1, #6
 8001e9a:	4668      	mov	r0, sp
 8001e9c:	3007      	adds	r0, #7
 8001e9e:	f7ff fed6 	bl	8001c4e <bme280_set_regs>
 8001ea2:	e7ea      	b.n	8001e7a <write_power_mode+0x20>

08001ea4 <bme280_get_sensor_mode>:
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	0004      	movs	r4, r0
 8001ea8:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 8001eaa:	0008      	movs	r0, r1
 8001eac:	f7ff fe64 	bl	8001b78 <null_ptr_check>
    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d10c      	bne.n	8001ece <bme280_get_sensor_mode+0x2a>
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d00d      	beq.n	8001ed4 <bme280_get_sensor_mode+0x30>
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001eb8:	002b      	movs	r3, r5
 8001eba:	2201      	movs	r2, #1
 8001ebc:	0021      	movs	r1, r4
 8001ebe:	30f4      	adds	r0, #244	; 0xf4
 8001ec0:	f7ff fe73 	bl	8001baa <bme280_get_regs>
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001ec4:	7822      	ldrb	r2, [r4, #0]
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	7023      	strb	r3, [r4, #0]
}
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME280_E_NULL_PTR;
 8001ece:	2001      	movs	r0, #1
 8001ed0:	4240      	negs	r0, r0
 8001ed2:	e7fb      	b.n	8001ecc <bme280_get_sensor_mode+0x28>
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	4240      	negs	r0, r0
 8001ed8:	e7f8      	b.n	8001ecc <bme280_get_sensor_mode+0x28>

08001eda <bme280_soft_reset>:
{
 8001eda:	b530      	push	{r4, r5, lr}
 8001edc:	b083      	sub	sp, #12
 8001ede:	0004      	movs	r4, r0
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001ee0:	466b      	mov	r3, sp
 8001ee2:	22e0      	movs	r2, #224	; 0xe0
 8001ee4:	71da      	strb	r2, [r3, #7]
    uint8_t status_reg = 0;
 8001ee6:	466b      	mov	r3, sp
 8001ee8:	2200      	movs	r2, #0
 8001eea:	719a      	strb	r2, [r3, #6]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001eec:	466b      	mov	r3, sp
 8001eee:	32b6      	adds	r2, #182	; 0xb6
 8001ef0:	715a      	strb	r2, [r3, #5]
    rslt = null_ptr_check(dev);
 8001ef2:	f7ff fe41 	bl	8001b78 <null_ptr_check>
    if (rslt == BME280_OK)
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d001      	beq.n	8001efe <bme280_soft_reset+0x24>
}
 8001efa:	b003      	add	sp, #12
 8001efc:	bd30      	pop	{r4, r5, pc}
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001efe:	0023      	movs	r3, r4
 8001f00:	2201      	movs	r2, #1
 8001f02:	4669      	mov	r1, sp
 8001f04:	3105      	adds	r1, #5
 8001f06:	4668      	mov	r0, sp
 8001f08:	3007      	adds	r0, #7
 8001f0a:	f7ff fea0 	bl	8001c4e <bme280_set_regs>
        if (rslt == BME280_OK)
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d1f3      	bne.n	8001efa <bme280_soft_reset+0x20>
    uint8_t try_run = 5;
 8001f12:	2505      	movs	r5, #5
 8001f14:	e000      	b.n	8001f18 <bme280_soft_reset+0x3e>
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001f16:	001d      	movs	r5, r3
                dev->delay_us(2000, dev->intf_ptr);
 8001f18:	20fa      	movs	r0, #250	; 0xfa
 8001f1a:	6861      	ldr	r1, [r4, #4]
 8001f1c:	00c0      	lsls	r0, r0, #3
 8001f1e:	6963      	ldr	r3, [r4, #20]
 8001f20:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8001f22:	0023      	movs	r3, r4
 8001f24:	2201      	movs	r2, #1
 8001f26:	4669      	mov	r1, sp
 8001f28:	3106      	adds	r1, #6
 8001f2a:	20f3      	movs	r0, #243	; 0xf3
 8001f2c:	f7ff fe3d 	bl	8001baa <bme280_get_regs>
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d108      	bne.n	8001f46 <bme280_soft_reset+0x6c>
 8001f34:	1e6b      	subs	r3, r5, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2d00      	cmp	r5, #0
 8001f3a:	d004      	beq.n	8001f46 <bme280_soft_reset+0x6c>
 8001f3c:	466a      	mov	r2, sp
 8001f3e:	3206      	adds	r2, #6
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	07d2      	lsls	r2, r2, #31
 8001f44:	d4e7      	bmi.n	8001f16 <bme280_soft_reset+0x3c>
            if (status_reg & BME280_STATUS_IM_UPDATE)
 8001f46:	466b      	mov	r3, sp
 8001f48:	3306      	adds	r3, #6
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	07db      	lsls	r3, r3, #31
 8001f4e:	d5d4      	bpl.n	8001efa <bme280_soft_reset+0x20>
                rslt = BME280_E_NVM_COPY_FAILED;
 8001f50:	2006      	movs	r0, #6
 8001f52:	4240      	negs	r0, r0
 8001f54:	e7d1      	b.n	8001efa <bme280_soft_reset+0x20>

08001f56 <bme280_init>:
{
 8001f56:	b570      	push	{r4, r5, r6, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	0006      	movs	r6, r0
    uint8_t chip_id = 0;
 8001f5c:	466b      	mov	r3, sp
 8001f5e:	2200      	movs	r2, #0
 8001f60:	71da      	strb	r2, [r3, #7]
    rslt = null_ptr_check(dev);
 8001f62:	f7ff fe09 	bl	8001b78 <null_ptr_check>
 8001f66:	1e04      	subs	r4, r0, #0
    if (rslt == BME280_OK)
 8001f68:	d029      	beq.n	8001fbe <bme280_init+0x68>
}
 8001f6a:	0020      	movs	r0, r4
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
                    rslt = get_calib_data(dev);
 8001f70:	0030      	movs	r0, r6
 8001f72:	f7ff fe46 	bl	8001c02 <get_calib_data>
 8001f76:	0004      	movs	r4, r0
 8001f78:	e01c      	b.n	8001fb4 <bme280_init+0x5e>
            dev->delay_us(1000, dev->intf_ptr);
 8001f7a:	20fa      	movs	r0, #250	; 0xfa
 8001f7c:	6871      	ldr	r1, [r6, #4]
 8001f7e:	0080      	lsls	r0, r0, #2
 8001f80:	6973      	ldr	r3, [r6, #20]
 8001f82:	4798      	blx	r3
            --try_count;
 8001f84:	3d01      	subs	r5, #1
 8001f86:	b2ed      	uxtb	r5, r5
        while (try_count)
 8001f88:	2d00      	cmp	r5, #0
 8001f8a:	d013      	beq.n	8001fb4 <bme280_init+0x5e>
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001f8c:	0033      	movs	r3, r6
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4669      	mov	r1, sp
 8001f92:	3107      	adds	r1, #7
 8001f94:	20d0      	movs	r0, #208	; 0xd0
 8001f96:	f7ff fe08 	bl	8001baa <bme280_get_regs>
 8001f9a:	1e04      	subs	r4, r0, #0
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8001f9c:	d1ed      	bne.n	8001f7a <bme280_init+0x24>
 8001f9e:	466b      	mov	r3, sp
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b60      	cmp	r3, #96	; 0x60
 8001fa6:	d1e8      	bne.n	8001f7a <bme280_init+0x24>
                dev->chip_id = chip_id;
 8001fa8:	7033      	strb	r3, [r6, #0]
                rslt = bme280_soft_reset(dev);
 8001faa:	0030      	movs	r0, r6
 8001fac:	f7ff ff95 	bl	8001eda <bme280_soft_reset>
 8001fb0:	1e04      	subs	r4, r0, #0
                if (rslt == BME280_OK)
 8001fb2:	d0dd      	beq.n	8001f70 <bme280_init+0x1a>
        if (!try_count)
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	d1d8      	bne.n	8001f6a <bme280_init+0x14>
            rslt = BME280_E_DEV_NOT_FOUND;
 8001fb8:	2402      	movs	r4, #2
 8001fba:	4264      	negs	r4, r4
 8001fbc:	e7d5      	b.n	8001f6a <bme280_init+0x14>
    uint8_t try_count = 5;
 8001fbe:	2505      	movs	r5, #5
 8001fc0:	e7e2      	b.n	8001f88 <bme280_init+0x32>

08001fc2 <put_device_to_sleep>:
{
 8001fc2:	b510      	push	{r4, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	0004      	movs	r4, r0
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001fc8:	0003      	movs	r3, r0
 8001fca:	2204      	movs	r2, #4
 8001fcc:	a903      	add	r1, sp, #12
 8001fce:	20f2      	movs	r0, #242	; 0xf2
 8001fd0:	f7ff fdeb 	bl	8001baa <bme280_get_regs>
    if (rslt == BME280_OK)
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d001      	beq.n	8001fdc <put_device_to_sleep+0x1a>
}
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd10      	pop	{r4, pc}
        parse_device_settings(reg_data, &settings);
 8001fdc:	a901      	add	r1, sp, #4
 8001fde:	a803      	add	r0, sp, #12
 8001fe0:	f7ff fb7a 	bl	80016d8 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001fe4:	0020      	movs	r0, r4
 8001fe6:	f7ff ff78 	bl	8001eda <bme280_soft_reset>
        if (rslt == BME280_OK)
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d1f4      	bne.n	8001fd8 <put_device_to_sleep+0x16>
            rslt = reload_device_settings(&settings, dev);
 8001fee:	0021      	movs	r1, r4
 8001ff0:	a801      	add	r0, sp, #4
 8001ff2:	f7ff ff21 	bl	8001e38 <reload_device_settings>
 8001ff6:	e7ef      	b.n	8001fd8 <put_device_to_sleep+0x16>

08001ff8 <bme280_set_sensor_settings>:
{
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	0005      	movs	r5, r0
 8001ffe:	000e      	movs	r6, r1
    rslt = null_ptr_check(dev);
 8002000:	0008      	movs	r0, r1
 8002002:	f7ff fdb9 	bl	8001b78 <null_ptr_check>
 8002006:	1e04      	subs	r4, r0, #0
    if (rslt == BME280_OK)
 8002008:	d002      	beq.n	8002010 <bme280_set_sensor_settings+0x18>
}
 800200a:	0020      	movs	r0, r4
 800200c:	b002      	add	sp, #8
 800200e:	bd70      	pop	{r4, r5, r6, pc}
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8002010:	0031      	movs	r1, r6
 8002012:	466b      	mov	r3, sp
 8002014:	1dd8      	adds	r0, r3, #7
 8002016:	f7ff ff45 	bl	8001ea4 <bme280_get_sensor_mode>
 800201a:	1e04      	subs	r4, r0, #0
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800201c:	d104      	bne.n	8002028 <bme280_set_sensor_settings+0x30>
 800201e:	466b      	mov	r3, sp
 8002020:	3307      	adds	r3, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d117      	bne.n	8002058 <bme280_set_sensor_settings+0x60>
        if (rslt == BME280_OK)
 8002028:	2c00      	cmp	r4, #0
 800202a:	d1ee      	bne.n	800200a <bme280_set_sensor_settings+0x12>
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800202c:	0029      	movs	r1, r5
 800202e:	2007      	movs	r0, #7
 8002030:	f7ff fd9b 	bl	8001b6a <are_settings_changed>
 8002034:	2800      	cmp	r0, #0
 8002036:	d114      	bne.n	8002062 <bme280_set_sensor_settings+0x6a>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8002038:	2c00      	cmp	r4, #0
 800203a:	d1e6      	bne.n	800200a <bme280_set_sensor_settings+0x12>
 800203c:	0029      	movs	r1, r5
 800203e:	2018      	movs	r0, #24
 8002040:	f7ff fd93 	bl	8001b6a <are_settings_changed>
 8002044:	2800      	cmp	r0, #0
 8002046:	d0e0      	beq.n	800200a <bme280_set_sensor_settings+0x12>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002048:	0031      	movs	r1, r6
 800204a:	3140      	adds	r1, #64	; 0x40
 800204c:	0032      	movs	r2, r6
 800204e:	0028      	movs	r0, r5
 8002050:	f7ff fec7 	bl	8001de2 <set_filter_standby_settings>
 8002054:	0004      	movs	r4, r0
 8002056:	e7d8      	b.n	800200a <bme280_set_sensor_settings+0x12>
            rslt = put_device_to_sleep(dev);
 8002058:	0030      	movs	r0, r6
 800205a:	f7ff ffb2 	bl	8001fc2 <put_device_to_sleep>
 800205e:	0004      	movs	r4, r0
 8002060:	e7e2      	b.n	8002028 <bme280_set_sensor_settings+0x30>
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8002062:	0031      	movs	r1, r6
 8002064:	3140      	adds	r1, #64	; 0x40
 8002066:	0032      	movs	r2, r6
 8002068:	0028      	movs	r0, r5
 800206a:	f7ff fea5 	bl	8001db8 <set_osr_settings>
 800206e:	0004      	movs	r4, r0
 8002070:	e7e2      	b.n	8002038 <bme280_set_sensor_settings+0x40>

08002072 <bme280_set_sensor_mode>:
{
 8002072:	b530      	push	{r4, r5, lr}
 8002074:	b083      	sub	sp, #12
 8002076:	0004      	movs	r4, r0
 8002078:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 800207a:	0008      	movs	r0, r1
 800207c:	f7ff fd7c 	bl	8001b78 <null_ptr_check>
    if (rslt == BME280_OK)
 8002080:	2800      	cmp	r0, #0
 8002082:	d001      	beq.n	8002088 <bme280_set_sensor_mode+0x16>
}
 8002084:	b003      	add	sp, #12
 8002086:	bd30      	pop	{r4, r5, pc}
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8002088:	0029      	movs	r1, r5
 800208a:	466b      	mov	r3, sp
 800208c:	1dd8      	adds	r0, r3, #7
 800208e:	f7ff ff09 	bl	8001ea4 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8002092:	2800      	cmp	r0, #0
 8002094:	d104      	bne.n	80020a0 <bme280_set_sensor_mode+0x2e>
 8002096:	466b      	mov	r3, sp
 8002098:	3307      	adds	r3, #7
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <bme280_set_sensor_mode+0x3c>
        if (rslt == BME280_OK)
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d1ef      	bne.n	8002084 <bme280_set_sensor_mode+0x12>
            rslt = write_power_mode(sensor_mode, dev);
 80020a4:	0029      	movs	r1, r5
 80020a6:	0020      	movs	r0, r4
 80020a8:	f7ff fed7 	bl	8001e5a <write_power_mode>
 80020ac:	e7ea      	b.n	8002084 <bme280_set_sensor_mode+0x12>
            rslt = put_device_to_sleep(dev);
 80020ae:	0028      	movs	r0, r5
 80020b0:	f7ff ff87 	bl	8001fc2 <put_device_to_sleep>
 80020b4:	e7f4      	b.n	80020a0 <bme280_set_sensor_mode+0x2e>

080020b6 <bme280_parse_sensor_data>:
{
 80020b6:	b510      	push	{r4, lr}
    data_msb = (uint32_t)reg_data[0] << 12;
 80020b8:	7803      	ldrb	r3, [r0, #0]
 80020ba:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[1] << 4;
 80020bc:	7844      	ldrb	r4, [r0, #1]
 80020be:	0124      	lsls	r4, r4, #4
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80020c0:	7882      	ldrb	r2, [r0, #2]
 80020c2:	0912      	lsrs	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80020c4:	4323      	orrs	r3, r4
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
    data_msb = (uint32_t)reg_data[3] << 12;
 80020ca:	78c3      	ldrb	r3, [r0, #3]
 80020cc:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[4] << 4;
 80020ce:	7904      	ldrb	r4, [r0, #4]
 80020d0:	0124      	lsls	r4, r4, #4
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80020d2:	7942      	ldrb	r2, [r0, #5]
 80020d4:	0912      	lsrs	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80020d6:	4323      	orrs	r3, r4
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
    data_msb = (uint32_t)reg_data[6] << 8;
 80020dc:	7983      	ldrb	r3, [r0, #6]
 80020de:	021b      	lsls	r3, r3, #8
    data_lsb = (uint32_t)reg_data[7];
 80020e0:	79c2      	ldrb	r2, [r0, #7]
    uncomp_data->humidity = data_msb | data_lsb;
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
}
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <bme280_compensate_data>:
{
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	0006      	movs	r6, r0
 80020ec:	000f      	movs	r7, r1
 80020ee:	0014      	movs	r4, r2
 80020f0:	001d      	movs	r5, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80020f2:	2900      	cmp	r1, #0
 80020f4:	d01f      	beq.n	8002136 <bme280_compensate_data+0x4e>
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d020      	beq.n	800213c <bme280_compensate_data+0x54>
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d021      	beq.n	8002142 <bme280_compensate_data+0x5a>
        comp_data->temperature = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	6053      	str	r3, [r2, #4]
        comp_data->pressure = 0;
 8002102:	6013      	str	r3, [r2, #0]
        comp_data->humidity = 0;
 8002104:	6093      	str	r3, [r2, #8]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8002106:	0743      	lsls	r3, r0, #29
 8002108:	d10f      	bne.n	800212a <bme280_compensate_data+0x42>
        if (sensor_comp & BME280_PRESS)
 800210a:	07f3      	lsls	r3, r6, #31
 800210c:	d504      	bpl.n	8002118 <bme280_compensate_data+0x30>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800210e:	0029      	movs	r1, r5
 8002110:	0038      	movs	r0, r7
 8002112:	f7ff fb31 	bl	8001778 <compensate_pressure>
 8002116:	6020      	str	r0, [r4, #0]
        if (sensor_comp & BME280_HUM)
 8002118:	0773      	lsls	r3, r6, #29
 800211a:	d515      	bpl.n	8002148 <bme280_compensate_data+0x60>
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800211c:	0029      	movs	r1, r5
 800211e:	0038      	movs	r0, r7
 8002120:	f7ff fc48 	bl	80019b4 <compensate_humidity>
 8002124:	60a0      	str	r0, [r4, #8]
    int8_t rslt = BME280_OK;
 8002126:	2000      	movs	r0, #0
}
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800212a:	0029      	movs	r1, r5
 800212c:	0038      	movs	r0, r7
 800212e:	f7ff fae7 	bl	8001700 <compensate_temperature>
 8002132:	6060      	str	r0, [r4, #4]
 8002134:	e7e9      	b.n	800210a <bme280_compensate_data+0x22>
        rslt = BME280_E_NULL_PTR;
 8002136:	2001      	movs	r0, #1
 8002138:	4240      	negs	r0, r0
 800213a:	e7f5      	b.n	8002128 <bme280_compensate_data+0x40>
 800213c:	2001      	movs	r0, #1
 800213e:	4240      	negs	r0, r0
 8002140:	e7f2      	b.n	8002128 <bme280_compensate_data+0x40>
 8002142:	2001      	movs	r0, #1
 8002144:	4240      	negs	r0, r0
 8002146:	e7ef      	b.n	8002128 <bme280_compensate_data+0x40>
    int8_t rslt = BME280_OK;
 8002148:	2000      	movs	r0, #0
 800214a:	e7ed      	b.n	8002128 <bme280_compensate_data+0x40>

0800214c <bme280_get_sensor_data>:
{
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	0005      	movs	r5, r0
 8002152:	000e      	movs	r6, r1
 8002154:	0014      	movs	r4, r2
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8002156:	2300      	movs	r3, #0
 8002158:	9304      	str	r3, [sp, #16]
 800215a:	9305      	str	r3, [sp, #20]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800215c:	220c      	movs	r2, #12
 800215e:	2100      	movs	r1, #0
 8002160:	a801      	add	r0, sp, #4
 8002162:	f004 fc74 	bl	8006a4e <memset>
    rslt = null_ptr_check(dev);
 8002166:	0020      	movs	r0, r4
 8002168:	f7ff fd06 	bl	8001b78 <null_ptr_check>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 800216c:	2800      	cmp	r0, #0
 800216e:	d117      	bne.n	80021a0 <bme280_get_sensor_data+0x54>
 8002170:	2e00      	cmp	r6, #0
 8002172:	d018      	beq.n	80021a6 <bme280_get_sensor_data+0x5a>
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8002174:	0023      	movs	r3, r4
 8002176:	2208      	movs	r2, #8
 8002178:	a904      	add	r1, sp, #16
 800217a:	30f7      	adds	r0, #247	; 0xf7
 800217c:	f7ff fd15 	bl	8001baa <bme280_get_regs>
        if (rslt == BME280_OK)
 8002180:	2800      	cmp	r0, #0
 8002182:	d001      	beq.n	8002188 <bme280_get_sensor_data+0x3c>
}
 8002184:	b006      	add	sp, #24
 8002186:	bd70      	pop	{r4, r5, r6, pc}
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8002188:	a901      	add	r1, sp, #4
 800218a:	a804      	add	r0, sp, #16
 800218c:	f7ff ff93 	bl	80020b6 <bme280_parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8002190:	0023      	movs	r3, r4
 8002192:	3318      	adds	r3, #24
 8002194:	0032      	movs	r2, r6
 8002196:	a901      	add	r1, sp, #4
 8002198:	0028      	movs	r0, r5
 800219a:	f7ff ffa5 	bl	80020e8 <bme280_compensate_data>
 800219e:	e7f1      	b.n	8002184 <bme280_get_sensor_data+0x38>
        rslt = BME280_E_NULL_PTR;
 80021a0:	2001      	movs	r0, #1
 80021a2:	4240      	negs	r0, r0
 80021a4:	e7ee      	b.n	8002184 <bme280_get_sensor_data+0x38>
 80021a6:	2001      	movs	r0, #1
 80021a8:	4240      	negs	r0, r0
 80021aa:	e7eb      	b.n	8002184 <bme280_get_sensor_data+0x38>

080021ac <bme280_cal_meas_delay>:
{
 80021ac:	b500      	push	{lr}
 80021ae:	b083      	sub	sp, #12
    uint8_t osr_sett_to_act_osr[] = { 0, 1, 2, 4, 8, 16 };
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <bme280_cal_meas_delay+0x74>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	9200      	str	r2, [sp, #0]
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	466a      	mov	r2, sp
 80021ba:	8093      	strh	r3, [r2, #4]
    if (settings->osr_t <= 5)
 80021bc:	7843      	ldrb	r3, [r0, #1]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d828      	bhi.n	8002214 <bme280_cal_meas_delay+0x68>
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 80021c2:	5cd2      	ldrb	r2, [r2, r3]
    if (settings->osr_p <= 5)
 80021c4:	7803      	ldrb	r3, [r0, #0]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d826      	bhi.n	8002218 <bme280_cal_meas_delay+0x6c>
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 80021ca:	4669      	mov	r1, sp
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
    if (settings->osr_h <= 5)
 80021ce:	7881      	ldrb	r1, [r0, #2]
 80021d0:	2905      	cmp	r1, #5
 80021d2:	d823      	bhi.n	800221c <bme280_cal_meas_delay+0x70>
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 80021d4:	4668      	mov	r0, sp
 80021d6:	5c41      	ldrb	r1, [r0, r1]
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 80021d8:	00d0      	lsls	r0, r2, #3
 80021da:	1880      	adds	r0, r0, r2
 80021dc:	0180      	lsls	r0, r0, #6
 80021de:	1a80      	subs	r0, r0, r2
 80021e0:	0080      	lsls	r0, r0, #2
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <bme280_cal_meas_delay+0x78>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	4460      	add	r0, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 80021e8:	00da      	lsls	r2, r3, #3
 80021ea:	18d2      	adds	r2, r2, r3
 80021ec:	0192      	lsls	r2, r2, #6
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <bme280_cal_meas_delay+0x7c>)
 80021f4:	469c      	mov	ip, r3
 80021f6:	4462      	add	r2, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 80021f8:	1880      	adds	r0, r0, r2
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 80021fa:	00cb      	lsls	r3, r1, #3
 80021fc:	185b      	adds	r3, r3, r1
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	1a5b      	subs	r3, r3, r1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 8002206:	18c0      	adds	r0, r0, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 8002208:	21fa      	movs	r1, #250	; 0xfa
 800220a:	0089      	lsls	r1, r1, #2
 800220c:	f7fe f828 	bl	8000260 <__divsi3>
}
 8002210:	b003      	add	sp, #12
 8002212:	bd00      	pop	{pc}
        temp_osr = 16;
 8002214:	2210      	movs	r2, #16
 8002216:	e7d5      	b.n	80021c4 <bme280_cal_meas_delay+0x18>
        pres_osr = 16;
 8002218:	2310      	movs	r3, #16
 800221a:	e7d8      	b.n	80021ce <bme280_cal_meas_delay+0x22>
        hum_osr = 16;
 800221c:	2110      	movs	r1, #16
 800221e:	e7db      	b.n	80021d8 <bme280_cal_meas_delay+0x2c>
 8002220:	08006a78 	.word	0x08006a78
 8002224:	000004e2 	.word	0x000004e2
 8002228:	0000023f 	.word	0x0000023f

0800222c <readUniqueID>:

bool isNodeAllocated() {
    return canDrv.nodeIdAllocated;
}

static void readUniqueID(uint8_t *out_uid) {
 800222c:	b530      	push	{r4, r5, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	0005      	movs	r5, r0
    softAssert(12 <= UNIQUE_ID_LENGTH_BYTES, "Inv UUID size");
    uint32_t tmp[4] = {HAL_GetUIDw0(), HAL_GetUIDw1(), HAL_GetUIDw2(), 0};
 8002232:	f002 ff47 	bl	80050c4 <HAL_GetUIDw0>
 8002236:	9000      	str	r0, [sp, #0]
 8002238:	f002 ff4a 	bl	80050d0 <HAL_GetUIDw1>
 800223c:	9001      	str	r0, [sp, #4]
 800223e:	f002 ff4d 	bl	80050dc <HAL_GetUIDw2>
 8002242:	9002      	str	r0, [sp, #8]
 8002244:	2300      	movs	r3, #0
 8002246:	9303      	str	r3, [sp, #12]
    for (uint8_t i = 0; i < 4; i++) {
 8002248:	2400      	movs	r4, #0
 800224a:	e007      	b.n	800225c <readUniqueID+0x30>
        memcpy(&out_uid[4 * i], &tmp[i], 4);
 800224c:	00a1      	lsls	r1, r4, #2
 800224e:	1868      	adds	r0, r5, r1
 8002250:	4469      	add	r1, sp
 8002252:	2204      	movs	r2, #4
 8002254:	f004 fbf2 	bl	8006a3c <memcpy>
    for (uint8_t i = 0; i < 4; i++) {
 8002258:	3401      	adds	r4, #1
 800225a:	b2e4      	uxtb	r4, r4
 800225c:	2c03      	cmp	r4, #3
 800225e:	d9f5      	bls.n	800224c <readUniqueID+0x20>
    }
}
 8002260:	b005      	add	sp, #20
 8002262:	bd30      	pop	{r4, r5, pc}

08002264 <record1HzStats>:
    }

    canDrv.nodeMode = UAVCAN_NODE_MODE_OPERATIONAL;
}

static void record1HzStats() {
 8002264:	b500      	push	{lr}
 8002266:	b089      	sub	sp, #36	; 0x24
    softAssert(HAL_FDCAN_GetProtocolStatus(&hfdcan1, &canDrv.stats.protocolStatus) == HAL_OK, "HAL_FDCAN_GetErrorCounters failed");

#else
    static uint32_t lastRxOverflowCount = 0;
    static uint32_t lastRxTidErrorCount = 0;
	if (canardSTM32GetStats().rx_overflow_count != lastRxOverflowCount) {
 8002268:	4668      	mov	r0, sp
 800226a:	f002 fcff 	bl	8004c6c <canardSTM32GetStats>
 800226e:	9901      	ldr	r1, [sp, #4]
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <record1HzStats+0x50>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	9800      	ldr	r0, [sp, #0]
 8002278:	4298      	cmp	r0, r3
 800227a:	d101      	bne.n	8002280 <record1HzStats+0x1c>
 800227c:	4291      	cmp	r1, r2
 800227e:	d00a      	beq.n	8002296 <record1HzStats+0x32>
		// softAssert(0, "RX overflowed");
		canDrv.stats.rxCanOverflowCount++;
 8002280:	490d      	ldr	r1, [pc, #52]	; (80022b8 <record1HzStats+0x54>)
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <record1HzStats+0x58>)
 8002284:	5a8b      	ldrh	r3, [r1, r2]
 8002286:	3301      	adds	r3, #1
 8002288:	528b      	strh	r3, [r1, r2]
		lastRxOverflowCount = canardSTM32GetStats().rx_overflow_count;
 800228a:	a804      	add	r0, sp, #16
 800228c:	f002 fcee 	bl	8004c6c <canardSTM32GetStats>
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <record1HzStats+0x50>)
 8002292:	9a04      	ldr	r2, [sp, #16]
 8002294:	601a      	str	r2, [r3, #0]
	}
    if (canDrv.gCanard.rx_tid_errors != lastRxTidErrorCount) {
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <record1HzStats+0x54>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <record1HzStats+0x5c>)
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	4293      	cmp	r3, r2
 80022a0:	d006      	beq.n	80022b0 <record1HzStats+0x4c>
        // softAssert(0, "RX error");
        canDrv.stats.rxInvalidUavFrameCount++;
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <record1HzStats+0x54>)
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <record1HzStats+0x60>)
 80022a6:	5a42      	ldrh	r2, [r0, r1]
 80022a8:	3201      	adds	r2, #1
 80022aa:	5242      	strh	r2, [r0, r1]
        lastRxTidErrorCount = canDrv.gCanard.rx_tid_errors;
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <record1HzStats+0x5c>)
 80022ae:	6013      	str	r3, [r2, #0]
    }
#endif

}
 80022b0:	b009      	add	sp, #36	; 0x24
 80022b2:	bd00      	pop	{pc}
 80022b4:	20000a18 	.word	0x20000a18
 80022b8:	200002f8 	.word	0x200002f8
 80022bc:	00000706 	.word	0x00000706
 80022c0:	20000a1c 	.word	0x20000a1c
 80022c4:	00000704 	.word	0x00000704

080022c8 <convertTransferToDataPtr>:
static uint8_t * convertTransferToDataPtr(CanardRxTransfer * transfer, uint8_t * length) {
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	b083      	sub	sp, #12
 80022cc:	0006      	movs	r6, r0
 80022ce:	000d      	movs	r5, r1
    if (transfer->payload_len >= 256) {
 80022d0:	8a83      	ldrh	r3, [r0, #20]
 80022d2:	2bff      	cmp	r3, #255	; 0xff
 80022d4:	d802      	bhi.n	80022dc <convertTransferToDataPtr+0x14>
        *length = transfer->payload_len;
 80022d6:	700b      	strb	r3, [r1, #0]
        uint8_t bytesRead = 0;
 80022d8:	2400      	movs	r4, #0
        while (bytesRead < *length) {
 80022da:	e017      	b.n	800230c <convertTransferToDataPtr+0x44>
        softAssert(0, "Exceeded expected packet length");
 80022dc:	4811      	ldr	r0, [pc, #68]	; (8002324 <convertTransferToDataPtr+0x5c>)
 80022de:	f7fe fd69 	bl	8000db4 <softAssertTmp>
        *length = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	702b      	strb	r3, [r5, #0]
        return NULL;
 80022e6:	2000      	movs	r0, #0
 80022e8:	e01a      	b.n	8002320 <convertTransferToDataPtr+0x58>
            canardDecodeScalar(transfer, 8*bytesRead, 8*readLength, false, &canDrv.currentRxPacket[bytesRead]);
 80022ea:	00d9      	lsls	r1, r3, #3
 80022ec:	b2d7      	uxtb	r7, r2
 80022ee:	22b7      	movs	r2, #183	; 0xb7
 80022f0:	00d2      	lsls	r2, r2, #3
 80022f2:	4694      	mov	ip, r2
 80022f4:	4463      	add	r3, ip
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <convertTransferToDataPtr+0x60>)
 80022f8:	189b      	adds	r3, r3, r2
 80022fa:	00fa      	lsls	r2, r7, #3
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2300      	movs	r3, #0
 8002302:	0030      	movs	r0, r6
 8002304:	f001 fe86 	bl	8004014 <canardDecodeScalar>
            bytesRead += readLength;
 8002308:	193c      	adds	r4, r7, r4
 800230a:	b2e4      	uxtb	r4, r4
        while (bytesRead < *length) {
 800230c:	782a      	ldrb	r2, [r5, #0]
 800230e:	42a2      	cmp	r2, r4
 8002310:	d905      	bls.n	800231e <convertTransferToDataPtr+0x56>
            uint16_t readLength = MIN((*length - bytesRead), 8);
 8002312:	0023      	movs	r3, r4
 8002314:	1b12      	subs	r2, r2, r4
 8002316:	2a08      	cmp	r2, #8
 8002318:	dde7      	ble.n	80022ea <convertTransferToDataPtr+0x22>
 800231a:	2208      	movs	r2, #8
 800231c:	e7e5      	b.n	80022ea <convertTransferToDataPtr+0x22>
        return canDrv.currentRxPacket;
 800231e:	4803      	ldr	r0, [pc, #12]	; (800232c <convertTransferToDataPtr+0x64>)
}
 8002320:	b003      	add	sp, #12
 8002322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002324:	08006cf0 	.word	0x08006cf0
 8002328:	200002f8 	.word	0x200002f8
 800232c:	200008b0 	.word	0x200008b0

08002330 <hookCanFrameTransmitted>:
__attribute__((weak)) void hookCanFrameTransmitted(uint64_t timestamp, const CanardCANFrame *frame) {}
 8002330:	4770      	bx	lr

08002332 <hookCanFrameReceived>:
__attribute__((weak)) void hookCanFrameReceived(uint64_t timestamp, const CanardCANFrame *frame) {}
 8002332:	4770      	bx	lr

08002334 <processUavCanFrames>:
static void processUavCanFrames(const uint64_t timestamp) {
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	46de      	mov	lr, fp
 8002338:	4657      	mov	r7, sl
 800233a:	464e      	mov	r6, r9
 800233c:	4645      	mov	r5, r8
 800233e:	b5e0      	push	{r5, r6, r7, lr}
 8002340:	b085      	sub	sp, #20
 8002342:	4681      	mov	r9, r0
 8002344:	4688      	mov	r8, r1
    for (uint8_t iter=0; (iter<MAX_UAVCAN_TX_RX_ITERATIONS) && (txValid || rxValid); iter++) {
 8002346:	2600      	movs	r6, #0
    bool rxValid = 1;
 8002348:	2401      	movs	r4, #1
    bool txValid = 1;
 800234a:	2701      	movs	r7, #1
    for (uint8_t iter=0; (iter<MAX_UAVCAN_TX_RX_ITERATIONS) && (txValid || rxValid); iter++) {
 800234c:	e010      	b.n	8002370 <processUavCanFrames+0x3c>
        txValid = (txFrame != NULL && !BUFFER_FULL(canDrv.txBuffer));
 800234e:	2700      	movs	r7, #0
        if (txValid) {
 8002350:	2f00      	cmp	r7, #0
 8002352:	d129      	bne.n	80023a8 <processUavCanFrames+0x74>
        rxValid = !BUFFER_EMPTY(canDrv.rxBuffer);
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <processUavCanFrames+0x1bc>)
 8002356:	22b6      	movs	r2, #182	; 0xb6
 8002358:	00d2      	lsls	r2, r2, #3
 800235a:	5c9d      	ldrb	r5, [r3, r2]
 800235c:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <processUavCanFrames+0x1c0>)
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	1aec      	subs	r4, r5, r3
 8002362:	1e62      	subs	r2, r4, #1
 8002364:	4194      	sbcs	r4, r2
 8002366:	b2e4      	uxtb	r4, r4
        if (rxValid) {
 8002368:	429d      	cmp	r5, r3
 800236a:	d171      	bne.n	8002450 <processUavCanFrames+0x11c>
    for (uint8_t iter=0; (iter<MAX_UAVCAN_TX_RX_ITERATIONS) && (txValid || rxValid); iter++) {
 800236c:	3601      	adds	r6, #1
 800236e:	b2f6      	uxtb	r6, r6
 8002370:	2e13      	cmp	r6, #19
 8002372:	d900      	bls.n	8002376 <processUavCanFrames+0x42>
 8002374:	e0b5      	b.n	80024e2 <processUavCanFrames+0x1ae>
 8002376:	433c      	orrs	r4, r7
 8002378:	d100      	bne.n	800237c <processUavCanFrames+0x48>
 800237a:	e0b2      	b.n	80024e2 <processUavCanFrames+0x1ae>
        const CanardCANFrame * txFrame = canardPeekTxQueue(&canDrv.gCanard);
 800237c:	485c      	ldr	r0, [pc, #368]	; (80024f0 <processUavCanFrames+0x1bc>)
 800237e:	f001 fdf9 	bl	8003f74 <canardPeekTxQueue>
 8002382:	1e05      	subs	r5, r0, #0
        txValid = (txFrame != NULL && !BUFFER_FULL(canDrv.txBuffer));
 8002384:	d0e3      	beq.n	800234e <processUavCanFrames+0x1a>
 8002386:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <processUavCanFrames+0x1bc>)
 8002388:	22b5      	movs	r2, #181	; 0xb5
 800238a:	00d2      	lsls	r2, r2, #3
 800238c:	5c9c      	ldrb	r4, [r3, r2]
 800238e:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <processUavCanFrames+0x1c4>)
 8002390:	5c98      	ldrb	r0, [r3, r2]
 8002392:	4a5a      	ldr	r2, [pc, #360]	; (80024fc <processUavCanFrames+0x1c8>)
 8002394:	5c9a      	ldrb	r2, [r3, r2]
 8002396:	2101      	movs	r1, #1
 8002398:	f001 f8a0 	bl	80034dc <incrAndWrap>
 800239c:	4284      	cmp	r4, r0
 800239e:	d001      	beq.n	80023a4 <processUavCanFrames+0x70>
 80023a0:	2701      	movs	r7, #1
 80023a2:	e7d5      	b.n	8002350 <processUavCanFrames+0x1c>
 80023a4:	2700      	movs	r7, #0
 80023a6:	e7d3      	b.n	8002350 <processUavCanFrames+0x1c>
            canDrv.stats.txUavCount++;
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <processUavCanFrames+0x1bc>)
 80023aa:	21df      	movs	r1, #223	; 0xdf
 80023ac:	00c9      	lsls	r1, r1, #3
 80023ae:	5a5a      	ldrh	r2, [r3, r1]
 80023b0:	3201      	adds	r2, #1
 80023b2:	525a      	strh	r2, [r3, r1]
            BUFFER_APPEND(canDrv.txBuffer, *txFrame);
 80023b4:	22b5      	movs	r2, #181	; 0xb5
 80023b6:	00d2      	lsls	r2, r2, #3
 80023b8:	5c9c      	ldrb	r4, [r3, r2]
 80023ba:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <processUavCanFrames+0x1c4>)
 80023bc:	5c98      	ldrb	r0, [r3, r2]
 80023be:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <processUavCanFrames+0x1c8>)
 80023c0:	5c9a      	ldrb	r2, [r3, r2]
 80023c2:	2101      	movs	r1, #1
 80023c4:	f001 f88a 	bl	80034dc <incrAndWrap>
 80023c8:	4284      	cmp	r4, r0
 80023ca:	d032      	beq.n	8002432 <processUavCanFrames+0xfe>
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <processUavCanFrames+0x1cc>)
 80023ce:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <processUavCanFrames+0x1bc>)
 80023d0:	58d3      	ldr	r3, [r2, r3]
 80023d2:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <processUavCanFrames+0x1c4>)
 80023d4:	4692      	mov	sl, r2
 80023d6:	4946      	ldr	r1, [pc, #280]	; (80024f0 <processUavCanFrames+0x1bc>)
 80023d8:	5c8a      	ldrb	r2, [r1, r2]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	0029      	movs	r1, r5
 80023e0:	c915      	ldmia	r1!, {r0, r2, r4}
 80023e2:	c315      	stmia	r3!, {r0, r2, r4}
 80023e4:	001a      	movs	r2, r3
 80023e6:	680b      	ldr	r3, [r1, #0]
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4653      	mov	r3, sl
 80023ec:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <processUavCanFrames+0x1bc>)
 80023ee:	5cd0      	ldrb	r0, [r2, r3]
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <processUavCanFrames+0x1c8>)
 80023f2:	469b      	mov	fp, r3
 80023f4:	5cd2      	ldrb	r2, [r2, r3]
 80023f6:	2101      	movs	r1, #1
 80023f8:	f001 f870 	bl	80034dc <incrAndWrap>
 80023fc:	b2c0      	uxtb	r0, r0
 80023fe:	4653      	mov	r3, sl
 8002400:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <processUavCanFrames+0x1bc>)
 8002402:	54d0      	strb	r0, [r2, r3]
            canDrv.txBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.txBuffer), canDrv.txBuffer.maxUsage);
 8002404:	3b01      	subs	r3, #1
 8002406:	5cd1      	ldrb	r1, [r2, r3]
 8002408:	465b      	mov	r3, fp
 800240a:	5cd2      	ldrb	r2, [r2, r3]
 800240c:	f001 f86b 	bl	80034e6 <decrAndWrap>
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <processUavCanFrames+0x1d0>)
 8002412:	4a37      	ldr	r2, [pc, #220]	; (80024f0 <processUavCanFrames+0x1bc>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	4298      	cmp	r0, r3
 8002418:	dc0f      	bgt.n	800243a <processUavCanFrames+0x106>
 800241a:	4c35      	ldr	r4, [pc, #212]	; (80024f0 <processUavCanFrames+0x1bc>)
 800241c:	4a39      	ldr	r2, [pc, #228]	; (8002504 <processUavCanFrames+0x1d0>)
 800241e:	54a3      	strb	r3, [r4, r2]
            hookCanFrameTransmitted(timestamp, txFrame);
 8002420:	002a      	movs	r2, r5
 8002422:	4648      	mov	r0, r9
 8002424:	4641      	mov	r1, r8
 8002426:	f7ff ff83 	bl	8002330 <hookCanFrameTransmitted>
            canardPopTxQueue(&canDrv.gCanard);
 800242a:	0020      	movs	r0, r4
 800242c:	f001 fda7 	bl	8003f7e <canardPopTxQueue>
 8002430:	e790      	b.n	8002354 <processUavCanFrames+0x20>
            BUFFER_APPEND(canDrv.txBuffer, *txFrame);
 8002432:	4835      	ldr	r0, [pc, #212]	; (8002508 <processUavCanFrames+0x1d4>)
 8002434:	f7fe fcbe 	bl	8000db4 <softAssertTmp>
 8002438:	e7c8      	b.n	80023cc <processUavCanFrames+0x98>
            canDrv.txBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.txBuffer), canDrv.txBuffer.maxUsage);
 800243a:	0013      	movs	r3, r2
 800243c:	4652      	mov	r2, sl
 800243e:	5c98      	ldrb	r0, [r3, r2]
 8002440:	3a01      	subs	r2, #1
 8002442:	5c99      	ldrb	r1, [r3, r2]
 8002444:	465a      	mov	r2, fp
 8002446:	5c9a      	ldrb	r2, [r3, r2]
 8002448:	f001 f84d 	bl	80034e6 <decrAndWrap>
 800244c:	b2c3      	uxtb	r3, r0
 800244e:	e7e4      	b.n	800241a <processUavCanFrames+0xe6>
            canDrv.stats.rxUavCount++;
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <processUavCanFrames+0x1bc>)
 8002452:	469a      	mov	sl, r3
 8002454:	4a2d      	ldr	r2, [pc, #180]	; (800250c <processUavCanFrames+0x1d8>)
 8002456:	5a9b      	ldrh	r3, [r3, r2]
 8002458:	3301      	adds	r3, #1
 800245a:	4651      	mov	r1, sl
 800245c:	528b      	strh	r3, [r1, r2]
            CanardCANFrame * rxFrame = BUFFER_PEEK(canDrv.rxBuffer);
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <processUavCanFrames+0x1dc>)
 8002460:	58cb      	ldr	r3, [r1, r3]
 8002462:	012d      	lsls	r5, r5, #4
 8002464:	195d      	adds	r5, r3, r5
            hookCanFrameReceived(timestamp, rxFrame);
 8002466:	002a      	movs	r2, r5
 8002468:	4648      	mov	r0, r9
 800246a:	4641      	mov	r1, r8
 800246c:	f7ff ff61 	bl	8002332 <hookCanFrameReceived>
            volatile int16_t res = canardHandleRxFrame(&canDrv.gCanard, rxFrame, timestamp, USING_SERIAL_LINK);
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	464a      	mov	r2, r9
 8002476:	4643      	mov	r3, r8
 8002478:	0029      	movs	r1, r5
 800247a:	4650      	mov	r0, sl
 800247c:	f001 ff84 	bl	8004388 <canardHandleRxFrame>
 8002480:	230e      	movs	r3, #14
 8002482:	446b      	add	r3, sp
 8002484:	8018      	strh	r0, [r3, #0]
            if (!(res == 0
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b21b      	sxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d010      	beq.n	80024b0 <processUavCanFrames+0x17c>
                || res == -CANARD_ERROR_RX_NOT_WANTED
 800248e:	230e      	movs	r3, #14
 8002490:	446b      	add	r3, sp
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b21b      	sxth	r3, r3
 8002496:	330c      	adds	r3, #12
 8002498:	d00a      	beq.n	80024b0 <processUavCanFrames+0x17c>
                || res == -CANARD_ERROR_RX_WRONG_ADDRESS)) {
 800249a:	230e      	movs	r3, #14
 800249c:	446b      	add	r3, sp
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b21b      	sxth	r3, r3
            if (!(res == 0
 80024a2:	330b      	adds	r3, #11
 80024a4:	d004      	beq.n	80024b0 <processUavCanFrames+0x17c>
                canDrv.stats.rxInvalidUavFrameCount++;
 80024a6:	4912      	ldr	r1, [pc, #72]	; (80024f0 <processUavCanFrames+0x1bc>)
 80024a8:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <processUavCanFrames+0x1e0>)
 80024aa:	5a8b      	ldrh	r3, [r1, r2]
 80024ac:	3301      	adds	r3, #1
 80024ae:	528b      	strh	r3, [r1, r2]
            BUFFER_POP(canDrv.rxBuffer);
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <processUavCanFrames+0x1bc>)
 80024b2:	22b6      	movs	r2, #182	; 0xb6
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	5c9a      	ldrb	r2, [r3, r2]
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <processUavCanFrames+0x1c0>)
 80024ba:	5c5b      	ldrb	r3, [r3, r1]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d00c      	beq.n	80024da <processUavCanFrames+0x1a6>
 80024c0:	4d0b      	ldr	r5, [pc, #44]	; (80024f0 <processUavCanFrames+0x1bc>)
 80024c2:	23b6      	movs	r3, #182	; 0xb6
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	469a      	mov	sl, r3
 80024c8:	5ce8      	ldrb	r0, [r5, r3]
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <processUavCanFrames+0x1e4>)
 80024cc:	5cea      	ldrb	r2, [r5, r3]
 80024ce:	2101      	movs	r1, #1
 80024d0:	f001 f804 	bl	80034dc <incrAndWrap>
 80024d4:	4653      	mov	r3, sl
 80024d6:	54e8      	strb	r0, [r5, r3]
 80024d8:	e748      	b.n	800236c <processUavCanFrames+0x38>
 80024da:	4810      	ldr	r0, [pc, #64]	; (800251c <processUavCanFrames+0x1e8>)
 80024dc:	f7fe fc6a 	bl	8000db4 <softAssertTmp>
 80024e0:	e7ee      	b.n	80024c0 <processUavCanFrames+0x18c>
}
 80024e2:	b005      	add	sp, #20
 80024e4:	bcf0      	pop	{r4, r5, r6, r7}
 80024e6:	46bb      	mov	fp, r7
 80024e8:	46b2      	mov	sl, r6
 80024ea:	46a9      	mov	r9, r5
 80024ec:	46a0      	mov	r8, r4
 80024ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f0:	200002f8 	.word	0x200002f8
 80024f4:	000005b1 	.word	0x000005b1
 80024f8:	000005a9 	.word	0x000005a9
 80024fc:	000005aa 	.word	0x000005aa
 8002500:	000005ac 	.word	0x000005ac
 8002504:	000005ab 	.word	0x000005ab
 8002508:	08006d10 	.word	0x08006d10
 800250c:	000006fa 	.word	0x000006fa
 8002510:	000005b4 	.word	0x000005b4
 8002514:	00000704 	.word	0x00000704
 8002518:	000005b2 	.word	0x000005b2
 800251c:	08006d30 	.word	0x08006d30

08002520 <usleep>:
int usleep(useconds_t usec) {
 8002520:	b510      	push	{r4, lr}
    HAL_Delay((uint32_t) (usec / 1000));
 8002522:	21fa      	movs	r1, #250	; 0xfa
 8002524:	0089      	lsls	r1, r1, #2
 8002526:	f7fd fe11 	bl	800014c <__udivsi3>
 800252a:	f002 fdb9 	bl	80050a0 <HAL_Delay>
}
 800252e:	2000      	movs	r0, #0
 8002530:	bd10      	pop	{r4, pc}
	...

08002534 <getMonotonicTimestampUSec>:
    return canDrv.globalMicroSeconds;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <getMonotonicTimestampUSec+0x10>)
 8002536:	22e3      	movs	r2, #227	; 0xe3
 8002538:	00d2      	lsls	r2, r2, #3
 800253a:	4694      	mov	ip, r2
 800253c:	4463      	add	r3, ip
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
}
 8002542:	4770      	bx	lr
 8002544:	200002f8 	.word	0x200002f8

08002548 <makeNodeStatusMessage>:
static void makeNodeStatusMessage(uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE]) {
 8002548:	b530      	push	{r4, r5, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	0004      	movs	r4, r0
    memset(buffer, 0, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 800254e:	2207      	movs	r2, #7
 8002550:	2100      	movs	r1, #0
 8002552:	f004 fa7c 	bl	8006a4e <memset>
    if (startedAtSec == 0) {
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <makeNodeStatusMessage+0x64>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <makeNodeStatusMessage+0x26>
        startedAtSec = (uint32_t) (getMonotonicTimestampUSec() / 1000000U);
 800255e:	f7ff ffe9 	bl	8002534 <getMonotonicTimestampUSec>
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <makeNodeStatusMessage+0x68>)
 8002564:	2300      	movs	r3, #0
 8002566:	f7fd ff8b 	bl	8000480 <__aeabi_uldivmod>
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <makeNodeStatusMessage+0x64>)
 800256c:	6018      	str	r0, [r3, #0]
    const uint32_t uptimeSec = ((uint32_t) (getMonotonicTimestampUSec() / 1000000U)) - startedAtSec;
 800256e:	f7ff ffe1 	bl	8002534 <getMonotonicTimestampUSec>
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <makeNodeStatusMessage+0x68>)
 8002574:	2300      	movs	r3, #0
 8002576:	f7fd ff83 	bl	8000480 <__aeabi_uldivmod>
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <makeNodeStatusMessage+0x64>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ac0      	subs	r0, r0, r3
 8002580:	9001      	str	r0, [sp, #4]
    canardEncodeScalar(buffer, 0, 32, &uptimeSec);
 8002582:	ab01      	add	r3, sp, #4
 8002584:	2220      	movs	r2, #32
 8002586:	2100      	movs	r1, #0
 8002588:	0020      	movs	r0, r4
 800258a:	f001 fe7b 	bl	8004284 <canardEncodeScalar>
    canardEncodeScalar(buffer, 32, 2, &canDrv.nodeHealth);
 800258e:	4d09      	ldr	r5, [pc, #36]	; (80025b4 <makeNodeStatusMessage+0x6c>)
 8002590:	002b      	movs	r3, r5
 8002592:	2202      	movs	r2, #2
 8002594:	2120      	movs	r1, #32
 8002596:	0020      	movs	r0, r4
 8002598:	f001 fe74 	bl	8004284 <canardEncodeScalar>
    canardEncodeScalar(buffer, 34, 3, &canDrv.nodeMode);
 800259c:	1c6b      	adds	r3, r5, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	2122      	movs	r1, #34	; 0x22
 80025a2:	0020      	movs	r0, r4
 80025a4:	f001 fe6e 	bl	8004284 <canardEncodeScalar>
}
 80025a8:	b003      	add	sp, #12
 80025aa:	bd30      	pop	{r4, r5, pc}
 80025ac:	20000a20 	.word	0x20000a20
 80025b0:	000f4240 	.word	0x000f4240
 80025b4:	200009c8 	.word	0x200009c8

080025b8 <getNodeInfoResponse>:
static void getNodeInfoResponse(uint8_t * buffer, uint32_t * bufferSize, uint32_t maxBufferSize) {
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b083      	sub	sp, #12
 80025bc:	0004      	movs	r4, r0
 80025be:	000f      	movs	r7, r1
 80025c0:	0016      	movs	r6, r2
    makeNodeStatusMessage(buffer);
 80025c2:	f7ff ffc1 	bl	8002548 <makeNodeStatusMessage>
    buffer[7] = APP_VERSION_MAJOR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	71e3      	strb	r3, [r4, #7]
    buffer[8] = APP_VERSION_MINOR;
 80025ca:	7223      	strb	r3, [r4, #8]
    buffer[9] = 1; // Optional field flags, VCS commit is set
 80025cc:	7263      	strb	r3, [r4, #9]
    uint32_t u32 = GIT_HASH;
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <getNodeInfoResponse+0x60>)
 80025d0:	9301      	str	r3, [sp, #4]
    canardEncodeScalar(buffer, 80, 32, &u32);
 80025d2:	ab01      	add	r3, sp, #4
 80025d4:	2220      	movs	r2, #32
 80025d6:	2150      	movs	r1, #80	; 0x50
 80025d8:	0020      	movs	r0, r4
 80025da:	f001 fe53 	bl	8004284 <canardEncodeScalar>
    readUniqueID(&buffer[24]);
 80025de:	0020      	movs	r0, r4
 80025e0:	3018      	adds	r0, #24
 80025e2:	f7ff fe23 	bl	800222c <readUniqueID>
    const size_t nameLen = strlen(getBoardNodeName());
 80025e6:	f7fe fb3f 	bl	8000c68 <getBoardNodeName>
 80025ea:	f7fd fda7 	bl	800013c <strlen>
 80025ee:	0005      	movs	r5, r0
    *bufferSize = 41 + nameLen;
 80025f0:	0003      	movs	r3, r0
 80025f2:	3329      	adds	r3, #41	; 0x29
 80025f4:	603b      	str	r3, [r7, #0]
    softAssert(*bufferSize < maxBufferSize, "Exceeded node info max size");
 80025f6:	42b3      	cmp	r3, r6
 80025f8:	d209      	bcs.n	800260e <getNodeInfoResponse+0x56>
    memcpy(&buffer[41], getBoardNodeName(), nameLen);
 80025fa:	3429      	adds	r4, #41	; 0x29
 80025fc:	f7fe fb34 	bl	8000c68 <getBoardNodeName>
 8002600:	0001      	movs	r1, r0
 8002602:	002a      	movs	r2, r5
 8002604:	0020      	movs	r0, r4
 8002606:	f004 fa19 	bl	8006a3c <memcpy>
}
 800260a:	b003      	add	sp, #12
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(*bufferSize < maxBufferSize, "Exceeded node info max size");
 800260e:	4803      	ldr	r0, [pc, #12]	; (800261c <getNodeInfoResponse+0x64>)
 8002610:	f7fe fbd0 	bl	8000db4 <softAssertTmp>
 8002614:	e7f1      	b.n	80025fa <getNodeInfoResponse+0x42>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	badc0ffe 	.word	0xbadc0ffe
 800261c:	08006d50 	.word	0x08006d50

08002620 <handleNodeAllocationBroadcast>:
static void handleNodeAllocationBroadcast(CanardRxTransfer *transfer, uint8_t * data, uint8_t dataLength) {
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b087      	sub	sp, #28
 8002624:	0005      	movs	r5, r0
 8002626:	000c      	movs	r4, r1
 8002628:	9201      	str	r2, [sp, #4]
    uint64_t tmp = getRandomInt(UAVCAN_NODE_ID_ALLOCATION_RANDOM_TIMEOUT_RANGE_USEC);
 800262a:	4822      	ldr	r0, [pc, #136]	; (80026b4 <handleNodeAllocationBroadcast+0x94>)
 800262c:	f000 ff54 	bl	80034d8 <getRandomInt>
 8002630:	0006      	movs	r6, r0
 8002632:	2700      	movs	r7, #0
    canDrv.sendNextNodeIdAllocationRequestAt = getMonotonicTimestampUSec()
 8002634:	f7ff ff7e 	bl	8002534 <getMonotonicTimestampUSec>
        + (uint64_t) (tmp);
 8002638:	1980      	adds	r0, r0, r6
 800263a:	4179      	adcs	r1, r7
 800263c:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <handleNodeAllocationBroadcast+0x98>)
 800263e:	2300      	movs	r3, #0
 8002640:	1880      	adds	r0, r0, r2
 8002642:	4159      	adcs	r1, r3
    canDrv.sendNextNodeIdAllocationRequestAt = getMonotonicTimestampUSec()
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <handleNodeAllocationBroadcast+0x9c>)
 8002646:	22d7      	movs	r2, #215	; 0xd7
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	4694      	mov	ip, r2
 800264c:	4463      	add	r3, ip
 800264e:	6018      	str	r0, [r3, #0]
 8002650:	6059      	str	r1, [r3, #4]
    if (transfer->source_node_id == CANARD_BROADCAST_NODE_ID) {
 8002652:	7eeb      	ldrb	r3, [r5, #27]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <handleNodeAllocationBroadcast+0x46>
        canDrv.nodeIdAllocationUniqueIdOffset = 0;
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <handleNodeAllocationBroadcast+0x9c>)
 800265a:	23d8      	movs	r3, #216	; 0xd8
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	2100      	movs	r1, #0
 8002660:	54d1      	strb	r1, [r2, r3]
}
 8002662:	b007      	add	sp, #28
 8002664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    readUniqueID(myId);
 8002666:	a802      	add	r0, sp, #8
 8002668:	f7ff fde0 	bl	800222c <readUniqueID>
    uint8_t receivedIdLen = dataLength - 1;
 800266c:	9d01      	ldr	r5, [sp, #4]
 800266e:	3d01      	subs	r5, #1
 8002670:	b2ed      	uxtb	r5, r5
    uint8_t * receivedId = &data[1];
 8002672:	1c60      	adds	r0, r4, #1
    if (memcmp(receivedId, myId, receivedIdLen) != 0) {
 8002674:	002a      	movs	r2, r5
 8002676:	a902      	add	r1, sp, #8
 8002678:	f004 f9d2 	bl	8006a20 <memcmp>
 800267c:	2800      	cmp	r0, #0
 800267e:	d108      	bne.n	8002692 <handleNodeAllocationBroadcast+0x72>
    canDrv.newNodeAllocationInfo = 1;
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <handleNodeAllocationBroadcast+0x9c>)
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <handleNodeAllocationBroadcast+0xa0>)
 8002684:	2101      	movs	r1, #1
 8002686:	54d1      	strb	r1, [r2, r3]
    if (receivedIdLen < UNIQUE_ID_LENGTH_BYTES) {
 8002688:	2d0f      	cmp	r5, #15
 800268a:	d808      	bhi.n	800269e <handleNodeAllocationBroadcast+0x7e>
        canDrv.nodeIdAllocationUniqueIdOffset = receivedIdLen;
 800268c:	3b01      	subs	r3, #1
 800268e:	54d5      	strb	r5, [r2, r3]
 8002690:	e7e7      	b.n	8002662 <handleNodeAllocationBroadcast+0x42>
        canDrv.nodeIdAllocationUniqueIdOffset = 0;
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <handleNodeAllocationBroadcast+0x9c>)
 8002694:	23d8      	movs	r3, #216	; 0xd8
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	2100      	movs	r1, #0
 800269a:	54d1      	strb	r1, [r2, r3]
        return; // No match, return
 800269c:	e7e1      	b.n	8002662 <handleNodeAllocationBroadcast+0x42>
        uint8_t allocated_node_id = data[0] >> 1;
 800269e:	7821      	ldrb	r1, [r4, #0]
 80026a0:	0849      	lsrs	r1, r1, #1
            canardSetLocalNodeID(&canDrv.gCanard, allocated_node_id);
 80026a2:	4c06      	ldr	r4, [pc, #24]	; (80026bc <handleNodeAllocationBroadcast+0x9c>)
 80026a4:	0020      	movs	r0, r4
 80026a6:	f001 fb93 	bl	8003dd0 <canardSetLocalNodeID>
            canDrv.nodeIdAllocated = 1;
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <handleNodeAllocationBroadcast+0xa4>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	54e2      	strb	r2, [r4, r3]
 80026b0:	e7d7      	b.n	8002662 <handleNodeAllocationBroadcast+0x42>
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	00061a80 	.word	0x00061a80
 80026b8:	000927c0 	.word	0x000927c0
 80026bc:	200002f8 	.word	0x200002f8
 80026c0:	000006c1 	.word	0x000006c1
 80026c4:	000006c2 	.word	0x000006c2

080026c8 <getDataTypeSignature>:
uint64_t getDataTypeSignature(bool isBroadcast, uint16_t dataTypeId) {
 80026c8:	b510      	push	{r4, lr}
    if (isBroadcast) {
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d020      	beq.n	8002710 <getDataTypeSignature+0x48>
        switch (dataTypeId) {
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <getDataTypeSignature+0x9c>)
 80026d0:	4299      	cmp	r1, r3
 80026d2:	d034      	beq.n	800273e <getDataTypeSignature+0x76>
 80026d4:	d80d      	bhi.n	80026f2 <getDataTypeSignature+0x2a>
 80026d6:	2903      	cmp	r1, #3
 80026d8:	d034      	beq.n	8002744 <getDataTypeSignature+0x7c>
 80026da:	2356      	movs	r3, #86	; 0x56
 80026dc:	33ff      	adds	r3, #255	; 0xff
 80026de:	4299      	cmp	r1, r3
 80026e0:	d102      	bne.n	80026e8 <getDataTypeSignature+0x20>
                return UAVCAN_NODE_STATUS_DATA_TYPE_SIGNATURE;
 80026e2:	4821      	ldr	r0, [pc, #132]	; (8002768 <getDataTypeSignature+0xa0>)
 80026e4:	4921      	ldr	r1, [pc, #132]	; (800276c <getDataTypeSignature+0xa4>)
 80026e6:	e00c      	b.n	8002702 <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 80026e8:	2901      	cmp	r1, #1
 80026ea:	d10b      	bne.n	8002704 <getDataTypeSignature+0x3c>
 80026ec:	4820      	ldr	r0, [pc, #128]	; (8002770 <getDataTypeSignature+0xa8>)
 80026ee:	4921      	ldr	r1, [pc, #132]	; (8002774 <getDataTypeSignature+0xac>)
 80026f0:	e007      	b.n	8002702 <getDataTypeSignature+0x3a>
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <getDataTypeSignature+0xb0>)
 80026f4:	4299      	cmp	r1, r3
 80026f6:	d028      	beq.n	800274a <getDataTypeSignature+0x82>
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <getDataTypeSignature+0xb4>)
 80026fa:	4299      	cmp	r1, r3
 80026fc:	d102      	bne.n	8002704 <getDataTypeSignature+0x3c>
                return 0;
 80026fe:	2000      	movs	r0, #0
 8002700:	2100      	movs	r1, #0
}
 8002702:	bd10      	pop	{r4, pc}
                softAssert(0, "Unknown dataTypeId");
 8002704:	481e      	ldr	r0, [pc, #120]	; (8002780 <getDataTypeSignature+0xb8>)
 8002706:	f7fe fb55 	bl	8000db4 <softAssertTmp>
                return 0;
 800270a:	2000      	movs	r0, #0
 800270c:	2100      	movs	r1, #0
 800270e:	e7f8      	b.n	8002702 <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 8002710:	29ca      	cmp	r1, #202	; 0xca
 8002712:	d01d      	beq.n	8002750 <getDataTypeSignature+0x88>
 8002714:	d906      	bls.n	8002724 <getDataTypeSignature+0x5c>
 8002716:	29cc      	cmp	r1, #204	; 0xcc
 8002718:	d020      	beq.n	800275c <getDataTypeSignature+0x94>
 800271a:	29d8      	cmp	r1, #216	; 0xd8
 800271c:	d109      	bne.n	8002732 <getDataTypeSignature+0x6a>
                return AF_SET_FIELDS_DATA_TYPE_SIGNATURE;
 800271e:	4819      	ldr	r0, [pc, #100]	; (8002784 <getDataTypeSignature+0xbc>)
 8002720:	4919      	ldr	r1, [pc, #100]	; (8002788 <getDataTypeSignature+0xc0>)
 8002722:	e7ee      	b.n	8002702 <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 8002724:	2901      	cmp	r1, #1
 8002726:	d016      	beq.n	8002756 <getDataTypeSignature+0x8e>
 8002728:	29c8      	cmp	r1, #200	; 0xc8
 800272a:	d102      	bne.n	8002732 <getDataTypeSignature+0x6a>
                return AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_SIGNATURE;
 800272c:	4817      	ldr	r0, [pc, #92]	; (800278c <getDataTypeSignature+0xc4>)
 800272e:	4918      	ldr	r1, [pc, #96]	; (8002790 <getDataTypeSignature+0xc8>)
 8002730:	e7e7      	b.n	8002702 <getDataTypeSignature+0x3a>
                softAssert(0, "Unknown dataTypeId");
 8002732:	4813      	ldr	r0, [pc, #76]	; (8002780 <getDataTypeSignature+0xb8>)
 8002734:	f7fe fb3e 	bl	8000db4 <softAssertTmp>
                return 0;
 8002738:	2000      	movs	r0, #0
 800273a:	2100      	movs	r1, #0
 800273c:	e7e1      	b.n	8002702 <getDataTypeSignature+0x3a>
                return AF_PUBLISHED_FIELDS_DATA_TYPE_SIGNATURE;
 800273e:	4815      	ldr	r0, [pc, #84]	; (8002794 <getDataTypeSignature+0xcc>)
 8002740:	4915      	ldr	r1, [pc, #84]	; (8002798 <getDataTypeSignature+0xd0>)
 8002742:	e7de      	b.n	8002702 <getDataTypeSignature+0x3a>
                return 0;
 8002744:	2000      	movs	r0, #0
 8002746:	2100      	movs	r1, #0
 8002748:	e7db      	b.n	8002702 <getDataTypeSignature+0x3a>
                return 0;
 800274a:	2000      	movs	r0, #0
 800274c:	2100      	movs	r1, #0
 800274e:	e7d8      	b.n	8002702 <getDataTypeSignature+0x3a>
                return AF_GET_PREFERRED_NAME_DATA_TYPE_SIGNATURE;
 8002750:	4812      	ldr	r0, [pc, #72]	; (800279c <getDataTypeSignature+0xd4>)
 8002752:	4913      	ldr	r1, [pc, #76]	; (80027a0 <getDataTypeSignature+0xd8>)
 8002754:	e7d5      	b.n	8002702 <getDataTypeSignature+0x3a>
        switch (dataTypeId) {
 8002756:	4813      	ldr	r0, [pc, #76]	; (80027a4 <getDataTypeSignature+0xdc>)
 8002758:	4913      	ldr	r1, [pc, #76]	; (80027a8 <getDataTypeSignature+0xe0>)
 800275a:	e7d2      	b.n	8002702 <getDataTypeSignature+0x3a>
                return AF_GET_FIELD_META_DATA_DATA_TYPE_SIGNATURE;
 800275c:	4813      	ldr	r0, [pc, #76]	; (80027ac <getDataTypeSignature+0xe4>)
 800275e:	4914      	ldr	r1, [pc, #80]	; (80027b0 <getDataTypeSignature+0xe8>)
 8002760:	e7cf      	b.n	8002702 <getDataTypeSignature+0x3a>
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	00004e20 	.word	0x00004e20
 8002768:	c1a7c6f1 	.word	0xc1a7c6f1
 800276c:	0f0868d0 	.word	0x0f0868d0
 8002770:	20a11d40 	.word	0x20a11d40
 8002774:	0b2a8126 	.word	0x0b2a8126
 8002778:	00005206 	.word	0x00005206
 800277c:	00005207 	.word	0x00005207
 8002780:	08006d6c 	.word	0x08006d6c
 8002784:	ef513a1f 	.word	0xef513a1f
 8002788:	7d07c058 	.word	0x7d07c058
 800278c:	26f25016 	.word	0x26f25016
 8002790:	ba43920c 	.word	0xba43920c
 8002794:	bcd30eb0 	.word	0xbcd30eb0
 8002798:	af951023 	.word	0xaf951023
 800279c:	f779a9dd 	.word	0xf779a9dd
 80027a0:	eb3f9394 	.word	0xeb3f9394
 80027a4:	21c46a9e 	.word	0x21c46a9e
 80027a8:	ee468a81 	.word	0xee468a81
 80027ac:	1e1e0e09 	.word	0x1e1e0e09
 80027b0:	d997180a 	.word	0xd997180a

080027b4 <canLocalOrRemoteRequestOrRespond>:
                                                uint16_t payloadLength) {
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	46ce      	mov	lr, r9
 80027b8:	4647      	mov	r7, r8
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b089      	sub	sp, #36	; 0x24
 80027be:	4689      	mov	r9, r1
 80027c0:	4690      	mov	r8, r2
 80027c2:	001c      	movs	r4, r3
 80027c4:	ab11      	add	r3, sp, #68	; 0x44
 80027c6:	781f      	ldrb	r7, [r3, #0]
 80027c8:	ab12      	add	r3, sp, #72	; 0x48
 80027ca:	781d      	ldrb	r5, [r3, #0]
 80027cc:	ab14      	add	r3, sp, #80	; 0x50
 80027ce:	881e      	ldrh	r6, [r3, #0]
        return canardRequestOrRespond(
 80027d0:	0021      	movs	r1, r4
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7ff ff78 	bl	80026c8 <getDataTypeSignature>
 80027d8:	9607      	str	r6, [sp, #28]
 80027da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80027dc:	9306      	str	r3, [sp, #24]
 80027de:	9505      	str	r5, [sp, #20]
 80027e0:	9704      	str	r7, [sp, #16]
 80027e2:	ab10      	add	r3, sp, #64	; 0x40
 80027e4:	9303      	str	r3, [sp, #12]
 80027e6:	b2e4      	uxtb	r4, r4
 80027e8:	9402      	str	r4, [sp, #8]
 80027ea:	9000      	str	r0, [sp, #0]
 80027ec:	9101      	str	r1, [sp, #4]
 80027ee:	4642      	mov	r2, r8
 80027f0:	4649      	mov	r1, r9
 80027f2:	4804      	ldr	r0, [pc, #16]	; (8002804 <canLocalOrRemoteRequestOrRespond+0x50>)
 80027f4:	f001 fb6a 	bl	8003ecc <canardRequestOrRespond>
}
 80027f8:	b009      	add	sp, #36	; 0x24
 80027fa:	bcc0      	pop	{r6, r7}
 80027fc:	46b9      	mov	r9, r7
 80027fe:	46b0      	mov	r8, r6
 8002800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	200002f8 	.word	0x200002f8

08002808 <canLocalOrRemoteBroadcast>:
                    uint16_t payload_len) {
 8002808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280a:	46c6      	mov	lr, r8
 800280c:	b500      	push	{lr}
 800280e:	b086      	sub	sp, #24
 8002810:	4688      	mov	r8, r1
 8002812:	0014      	movs	r4, r2
 8002814:	001e      	movs	r6, r3
 8002816:	ab0c      	add	r3, sp, #48	; 0x30
 8002818:	781f      	ldrb	r7, [r3, #0]
 800281a:	ab0e      	add	r3, sp, #56	; 0x38
 800281c:	881d      	ldrh	r5, [r3, #0]
        uint64_t signature = getDataTypeSignature(true, dataTypeId);
 800281e:	0011      	movs	r1, r2
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff ff51 	bl	80026c8 <getDataTypeSignature>
 8002826:	0002      	movs	r2, r0
 8002828:	000b      	movs	r3, r1
        result = canardBroadcast(
 800282a:	9504      	str	r5, [sp, #16]
 800282c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800282e:	9103      	str	r1, [sp, #12]
 8002830:	9702      	str	r7, [sp, #8]
 8002832:	9601      	str	r6, [sp, #4]
 8002834:	9400      	str	r4, [sp, #0]
 8002836:	4641      	mov	r1, r8
 8002838:	4807      	ldr	r0, [pc, #28]	; (8002858 <canLocalOrRemoteBroadcast+0x50>)
 800283a:	f001 fae5 	bl	8003e08 <canardBroadcast>
        if (result <= 0) {
 800283e:	2800      	cmp	r0, #0
 8002840:	dd03      	ble.n	800284a <canLocalOrRemoteBroadcast+0x42>
}
 8002842:	b006      	add	sp, #24
 8002844:	bc80      	pop	{r7}
 8002846:	46b8      	mov	r8, r7
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}
            canDrv.stats.droppedTxPacketsOutOfMemory++;
 800284a:	4903      	ldr	r1, [pc, #12]	; (8002858 <canLocalOrRemoteBroadcast+0x50>)
 800284c:	4a03      	ldr	r2, [pc, #12]	; (800285c <canLocalOrRemoteBroadcast+0x54>)
 800284e:	5a8b      	ldrh	r3, [r1, r2]
 8002850:	3301      	adds	r3, #1
 8002852:	528b      	strh	r3, [r1, r2]
 8002854:	e7f5      	b.n	8002842 <canLocalOrRemoteBroadcast+0x3a>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	200002f8 	.word	0x200002f8
 800285c:	000006fe 	.word	0x000006fe

08002860 <getLocalNodeId>:
uint8_t getLocalNodeId() {
 8002860:	b510      	push	{r4, lr}
    return canardGetLocalNodeID(&canDrv.gCanard);
 8002862:	4802      	ldr	r0, [pc, #8]	; (800286c <getLocalNodeId+0xc>)
 8002864:	f001 face 	bl	8003e04 <canardGetLocalNodeID>
}
 8002868:	bd10      	pop	{r4, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	200002f8 	.word	0x200002f8

08002870 <canRespondToRequest>:
static int16_t canRespondToRequest(bool canOverSerial, CanardRxTransfer *requestTransfer, uint8_t dataTypeId, const void* payload, uint16_t payloadLength) {
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	46c6      	mov	lr, r8
 8002874:	b500      	push	{lr}
 8002876:	b088      	sub	sp, #32
 8002878:	4680      	mov	r8, r0
 800287a:	000d      	movs	r5, r1
 800287c:	9207      	str	r2, [sp, #28]
 800287e:	001f      	movs	r7, r3
 8002880:	ab0e      	add	r3, sp, #56	; 0x38
 8002882:	881e      	ldrh	r6, [r3, #0]
    uint8_t destNodeId = requestTransfer->source_node_id; // Reply to source node
 8002884:	7ecc      	ldrb	r4, [r1, #27]
    return canLocalOrRemoteRequestOrRespond(
 8002886:	f7ff ffeb 	bl	8002860 <getLocalNodeId>
 800288a:	0001      	movs	r1, r0
 800288c:	466b      	mov	r3, sp
 800288e:	8b9b      	ldrh	r3, [r3, #28]
 8002890:	9604      	str	r6, [sp, #16]
 8002892:	9703      	str	r7, [sp, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	9202      	str	r2, [sp, #8]
 8002898:	7eaa      	ldrb	r2, [r5, #26]
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	7e6a      	ldrb	r2, [r5, #25]
 800289e:	9200      	str	r2, [sp, #0]
 80028a0:	0022      	movs	r2, r4
 80028a2:	4640      	mov	r0, r8
 80028a4:	f7ff ff86 	bl	80027b4 <canLocalOrRemoteRequestOrRespond>
}
 80028a8:	b008      	add	sp, #32
 80028aa:	bc80      	pop	{r7}
 80028ac:	46b8      	mov	r8, r7
 80028ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b0 <anonymousCanBroadcast>:
                            uint16_t payloadLength) {
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	46ce      	mov	lr, r9
 80028b4:	4647      	mov	r7, r8
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b085      	sub	sp, #20
 80028ba:	4680      	mov	r8, r0
 80028bc:	000c      	movs	r4, r1
 80028be:	4691      	mov	r9, r2
 80028c0:	001f      	movs	r7, r3
 80028c2:	ab0c      	add	r3, sp, #48	; 0x30
 80028c4:	cb20      	ldmia	r3!, {r5}
 80028c6:	881e      	ldrh	r6, [r3, #0]
    softAssert(dataTypeId < 4, "Invalid dataTypeId for anonymous broadcast");
 80028c8:	2903      	cmp	r1, #3
 80028ca:	d811      	bhi.n	80028f0 <anonymousCanBroadcast+0x40>
    softAssert(getLocalNodeId() == 0, "Shouldn't be anon broadcasting when ID allocated");
 80028cc:	f7ff ffc8 	bl	8002860 <getLocalNodeId>
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d111      	bne.n	80028f8 <anonymousCanBroadcast+0x48>
    return canLocalOrRemoteBroadcast(
 80028d4:	9602      	str	r6, [sp, #8]
 80028d6:	9501      	str	r5, [sp, #4]
 80028d8:	9700      	str	r7, [sp, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	0022      	movs	r2, r4
 80028de:	2100      	movs	r1, #0
 80028e0:	4640      	mov	r0, r8
 80028e2:	f7ff ff91 	bl	8002808 <canLocalOrRemoteBroadcast>
}
 80028e6:	b005      	add	sp, #20
 80028e8:	bcc0      	pop	{r6, r7}
 80028ea:	46b9      	mov	r9, r7
 80028ec:	46b0      	mov	r8, r6
 80028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(dataTypeId < 4, "Invalid dataTypeId for anonymous broadcast");
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <anonymousCanBroadcast+0x50>)
 80028f2:	f7fe fa5f 	bl	8000db4 <softAssertTmp>
 80028f6:	e7e9      	b.n	80028cc <anonymousCanBroadcast+0x1c>
    softAssert(getLocalNodeId() == 0, "Shouldn't be anon broadcasting when ID allocated");
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <anonymousCanBroadcast+0x54>)
 80028fa:	f7fe fa5b 	bl	8000db4 <softAssertTmp>
 80028fe:	e7e9      	b.n	80028d4 <anonymousCanBroadcast+0x24>
 8002900:	08006d80 	.word	0x08006d80
 8002904:	08006dac 	.word	0x08006dac

08002908 <sendNodeAllocationFrame>:
static void sendNodeAllocationFrame() {
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	46c6      	mov	lr, r8
 800290c:	b500      	push	{lr}
 800290e:	b088      	sub	sp, #32
    allocationRequest[0] = (uint8_t) (PreferredNodeID << 1U);
 8002910:	ab06      	add	r3, sp, #24
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
    if (canDrv.nodeIdAllocationUniqueIdOffset == 0) {
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <sendNodeAllocationFrame+0xc0>)
 8002918:	23d8      	movs	r3, #216	; 0xd8
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <sendNodeAllocationFrame+0x20>
        allocationRequest[0] |= 1; // First part of unique ID
 8002922:	ab06      	add	r3, sp, #24
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
    readUniqueID(myId);
 8002928:	a802      	add	r0, sp, #8
 800292a:	f7ff fc7f 	bl	800222c <readUniqueID>
    uint8_t uid_size = (uint8_t) (UNIQUE_ID_LENGTH_BYTES - canDrv.nodeIdAllocationUniqueIdOffset);
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <sendNodeAllocationFrame+0xc0>)
 8002930:	23d8      	movs	r3, #216	; 0xd8
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	2410      	movs	r4, #16
 8002938:	1ae4      	subs	r4, r4, r3
 800293a:	b2e4      	uxtb	r4, r4
    if (uid_size > maxLenOfUniqueIDInRequest) {
 800293c:	2c06      	cmp	r4, #6
 800293e:	d900      	bls.n	8002942 <sendNodeAllocationFrame+0x3a>
        uid_size = maxLenOfUniqueIDInRequest;
 8002940:	2406      	movs	r4, #6
    hardAssert(canDrv.nodeIdAllocationUniqueIdOffset < UNIQUE_ID_LENGTH_BYTES, "Inv uid offset");
 8002942:	2b0f      	cmp	r3, #15
 8002944:	d830      	bhi.n	80029a8 <sendNodeAllocationFrame+0xa0>
    hardAssert(uid_size <= maxLenOfUniqueIDInRequest, "Inv uid_size");
 8002946:	2c06      	cmp	r4, #6
 8002948:	d832      	bhi.n	80029b0 <sendNodeAllocationFrame+0xa8>
    hardAssert(uid_size > 0, "Inv uid_size");
 800294a:	2c00      	cmp	r4, #0
 800294c:	d034      	beq.n	80029b8 <sendNodeAllocationFrame+0xb0>
    hardAssert((uid_size + canDrv.nodeIdAllocationUniqueIdOffset) <= UNIQUE_ID_LENGTH_BYTES, "Inv uid_size");
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <sendNodeAllocationFrame+0xc0>)
 8002950:	23d8      	movs	r3, #216	; 0xd8
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	18e3      	adds	r3, r4, r3
 8002958:	2b10      	cmp	r3, #16
 800295a:	dc31      	bgt.n	80029c0 <sendNodeAllocationFrame+0xb8>
    memmove(&allocationRequest[1], &myId[canDrv.nodeIdAllocationUniqueIdOffset], uid_size);
 800295c:	4f1a      	ldr	r7, [pc, #104]	; (80029c8 <sendNodeAllocationFrame+0xc0>)
 800295e:	26d8      	movs	r6, #216	; 0xd8
 8002960:	00f6      	lsls	r6, r6, #3
 8002962:	5db9      	ldrb	r1, [r7, r6]
 8002964:	ab02      	add	r3, sp, #8
 8002966:	469c      	mov	ip, r3
 8002968:	4461      	add	r1, ip
 800296a:	ad06      	add	r5, sp, #24
 800296c:	0022      	movs	r2, r4
 800296e:	2019      	movs	r0, #25
 8002970:	4468      	add	r0, sp
 8002972:	f004 f863 	bl	8006a3c <memcpy>
    anonymousCanBroadcast(false, UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID, &transferId, CANARD_TRANSFER_PRIORITY_LOW, &allocationRequest[0], (uint16_t) (uid_size + 1));
 8002976:	3401      	adds	r4, #1
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <sendNodeAllocationFrame+0xc4>)
 800297a:	4698      	mov	r8, r3
 800297c:	9401      	str	r4, [sp, #4]
 800297e:	9500      	str	r5, [sp, #0]
 8002980:	2318      	movs	r3, #24
 8002982:	4642      	mov	r2, r8
 8002984:	2101      	movs	r1, #1
 8002986:	2000      	movs	r0, #0
 8002988:	f7ff ff92 	bl	80028b0 <anonymousCanBroadcast>
    anonymousCanBroadcast(true,  UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID, &transferId, CANARD_TRANSFER_PRIORITY_LOW, &allocationRequest[0], (uint16_t) (uid_size + 1));
 800298c:	9401      	str	r4, [sp, #4]
 800298e:	9500      	str	r5, [sp, #0]
 8002990:	2318      	movs	r3, #24
 8002992:	4642      	mov	r2, r8
 8002994:	2101      	movs	r1, #1
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff ff8a 	bl	80028b0 <anonymousCanBroadcast>
    canDrv.nodeIdAllocationUniqueIdOffset = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	55bb      	strb	r3, [r7, r6]
}
 80029a0:	b008      	add	sp, #32
 80029a2:	bc80      	pop	{r7}
 80029a4:	46b8      	mov	r8, r7
 80029a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hardAssert(canDrv.nodeIdAllocationUniqueIdOffset < UNIQUE_ID_LENGTH_BYTES, "Inv uid offset");
 80029a8:	4809      	ldr	r0, [pc, #36]	; (80029d0 <sendNodeAllocationFrame+0xc8>)
 80029aa:	f7fe fa25 	bl	8000df8 <hardAssertTmp>
 80029ae:	e7ca      	b.n	8002946 <sendNodeAllocationFrame+0x3e>
    hardAssert(uid_size <= maxLenOfUniqueIDInRequest, "Inv uid_size");
 80029b0:	4808      	ldr	r0, [pc, #32]	; (80029d4 <sendNodeAllocationFrame+0xcc>)
 80029b2:	f7fe fa21 	bl	8000df8 <hardAssertTmp>
 80029b6:	e7c8      	b.n	800294a <sendNodeAllocationFrame+0x42>
    hardAssert(uid_size > 0, "Inv uid_size");
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <sendNodeAllocationFrame+0xcc>)
 80029ba:	f7fe fa1d 	bl	8000df8 <hardAssertTmp>
 80029be:	e7c6      	b.n	800294e <sendNodeAllocationFrame+0x46>
    hardAssert((uid_size + canDrv.nodeIdAllocationUniqueIdOffset) <= UNIQUE_ID_LENGTH_BYTES, "Inv uid_size");
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <sendNodeAllocationFrame+0xcc>)
 80029c2:	f7fe fa19 	bl	8000df8 <hardAssertTmp>
 80029c6:	e7c9      	b.n	800295c <sendNodeAllocationFrame+0x54>
 80029c8:	200002f8 	.word	0x200002f8
 80029cc:	20000a31 	.word	0x20000a31
 80029d0:	08006de0 	.word	0x08006de0
 80029d4:	08006df0 	.word	0x08006df0

080029d8 <loopNodeAllocation>:
static void loopNodeAllocation() {
 80029d8:	b570      	push	{r4, r5, r6, lr}
    if ((getMonotonicTimestampUSec() > timeoutTime) || canDrv.newNodeAllocationInfo) {
 80029da:	f7ff fdab 	bl	8002534 <getMonotonicTimestampUSec>
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <loopNodeAllocation+0x54>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4299      	cmp	r1, r3
 80029e6:	d805      	bhi.n	80029f4 <loopNodeAllocation+0x1c>
 80029e8:	d01d      	beq.n	8002a26 <loopNodeAllocation+0x4e>
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <loopNodeAllocation+0x58>)
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <loopNodeAllocation+0x5c>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <loopNodeAllocation+0x4c>
        canDrv.newNodeAllocationInfo = 0;
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <loopNodeAllocation+0x58>)
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <loopNodeAllocation+0x5c>)
 80029f8:	2100      	movs	r1, #0
 80029fa:	54d1      	strb	r1, [r2, r3]
        timeoutTime = getMonotonicTimestampUSec()
 80029fc:	f7ff fd9a 	bl	8002534 <getMonotonicTimestampUSec>
 8002a00:	0004      	movs	r4, r0
 8002a02:	000d      	movs	r5, r1
            + (uint64_t) (getRandomInt(UAVCAN_NODE_ID_ALLOCATION_RANDOM_TIMEOUT_RANGE_USEC));
 8002a04:	480c      	ldr	r0, [pc, #48]	; (8002a38 <loopNodeAllocation+0x60>)
 8002a06:	f000 fd67 	bl	80034d8 <getRandomInt>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	18a4      	adds	r4, r4, r2
 8002a10:	415d      	adcs	r5, r3
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <loopNodeAllocation+0x64>)
 8002a14:	2300      	movs	r3, #0
 8002a16:	18a4      	adds	r4, r4, r2
 8002a18:	415d      	adcs	r5, r3
        timeoutTime = getMonotonicTimestampUSec()
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <loopNodeAllocation+0x54>)
 8002a1c:	601c      	str	r4, [r3, #0]
 8002a1e:	605d      	str	r5, [r3, #4]
        sendNodeAllocationFrame();
 8002a20:	f7ff ff72 	bl	8002908 <sendNodeAllocationFrame>
}
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
    if ((getMonotonicTimestampUSec() > timeoutTime) || canDrv.newNodeAllocationInfo) {
 8002a26:	4290      	cmp	r0, r2
 8002a28:	d9df      	bls.n	80029ea <loopNodeAllocation+0x12>
 8002a2a:	e7e3      	b.n	80029f4 <loopNodeAllocation+0x1c>
 8002a2c:	20000a28 	.word	0x20000a28
 8002a30:	200002f8 	.word	0x200002f8
 8002a34:	000006c1 	.word	0x000006c1
 8002a38:	00061a80 	.word	0x00061a80
 8002a3c:	000927c0 	.word	0x000927c0

08002a40 <canProcessRxFrame>:
static void canProcessRxFrame(bool canOverSerial, CanardRxTransfer *transfer, uint8_t destNodeId, uint8_t * data, uint8_t dataLength) {
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b09f      	sub	sp, #124	; 0x7c
 8002a44:	9003      	str	r0, [sp, #12]
 8002a46:	000c      	movs	r4, r1
 8002a48:	0015      	movs	r5, r2
 8002a4a:	001e      	movs	r6, r3
 8002a4c:	ab24      	add	r3, sp, #144	; 0x90
 8002a4e:	781f      	ldrb	r7, [r3, #0]
    if (transfer->transfer_type == CanardTransferTypeRequest && destNodeId == getLocalNodeId()) {
 8002a50:	7e0b      	ldrb	r3, [r1, #24]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d005      	beq.n	8002a62 <canProcessRxFrame+0x22>
    } else if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8002a56:	7e23      	ldrb	r3, [r4, #24]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d100      	bne.n	8002a5e <canProcessRxFrame+0x1e>
 8002a5c:	e089      	b.n	8002b72 <canProcessRxFrame+0x132>
}
 8002a5e:	b01f      	add	sp, #124	; 0x7c
 8002a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (transfer->transfer_type == CanardTransferTypeRequest && destNodeId == getLocalNodeId()) {
 8002a62:	f7ff fefd 	bl	8002860 <getLocalNodeId>
 8002a66:	42a8      	cmp	r0, r5
 8002a68:	d1f5      	bne.n	8002a56 <canProcessRxFrame+0x16>
        if (transfer->data_type_id == AF_SET_FIELDS_DATA_TYPE_ID) {
 8002a6a:	8ae3      	ldrh	r3, [r4, #22]
 8002a6c:	2bd8      	cmp	r3, #216	; 0xd8
 8002a6e:	d00e      	beq.n	8002a8e <canProcessRxFrame+0x4e>
        } else if (transfer->data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID) {
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d01a      	beq.n	8002aaa <canProcessRxFrame+0x6a>
        } else if (transfer->data_type_id == AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_ID) {
 8002a74:	2bc8      	cmp	r3, #200	; 0xc8
 8002a76:	d02c      	beq.n	8002ad2 <canProcessRxFrame+0x92>
        } else if (transfer->data_type_id == AF_GET_PREFERRED_NAME_DATA_TYPE_ID) {
 8002a78:	2bca      	cmp	r3, #202	; 0xca
 8002a7a:	d053      	beq.n	8002b24 <canProcessRxFrame+0xe4>
        } else if (transfer->data_type_id == AF_GET_FIELD_META_DATA_DATA_TYPE_ID) {
 8002a7c:	2bcc      	cmp	r3, #204	; 0xcc
 8002a7e:	d05f      	beq.n	8002b40 <canProcessRxFrame+0x100>
            canDrv.stats.failedToRespond++;
 8002a80:	4955      	ldr	r1, [pc, #340]	; (8002bd8 <canProcessRxFrame+0x198>)
 8002a82:	22e2      	movs	r2, #226	; 0xe2
 8002a84:	00d2      	lsls	r2, r2, #3
 8002a86:	5a8b      	ldrh	r3, [r1, r2]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	528b      	strh	r3, [r1, r2]
 8002a8c:	e7e7      	b.n	8002a5e <canProcessRxFrame+0x1e>
            afProtocolProcessRx(data, dataLength);
 8002a8e:	0039      	movs	r1, r7
 8002a90:	0030      	movs	r0, r6
 8002a92:	f7fe fc4d 	bl	8001330 <afProtocolProcessRx>
            result = canRespondToRequest(canOverSerial, transfer, AF_SET_FIELDS_DATA_TYPE_ID, NULL, 0);
 8002a96:	2300      	movs	r3, #0
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	22d8      	movs	r2, #216	; 0xd8
 8002a9c:	0021      	movs	r1, r4
 8002a9e:	9803      	ldr	r0, [sp, #12]
 8002aa0:	f7ff fee6 	bl	8002870 <canRespondToRequest>
        if (result <= 0) {
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	dcda      	bgt.n	8002a5e <canProcessRxFrame+0x1e>
 8002aa8:	e7ea      	b.n	8002a80 <canProcessRxFrame+0x40>
            memset(buffer, 0, NODE_INFO_RESPONSE_MAX_SIZE);
 8002aaa:	2264      	movs	r2, #100	; 0x64
 8002aac:	2100      	movs	r1, #0
 8002aae:	a805      	add	r0, sp, #20
 8002ab0:	f003 ffcd 	bl	8006a4e <memset>
            getNodeInfoResponse(buffer, &totalSize, NODE_INFO_RESPONSE_MAX_SIZE);
 8002ab4:	2264      	movs	r2, #100	; 0x64
 8002ab6:	a904      	add	r1, sp, #16
 8002ab8:	a805      	add	r0, sp, #20
 8002aba:	f7ff fd7d 	bl	80025b8 <getNodeInfoResponse>
            result = canRespondToRequest(canOverSerial, transfer, UAVCAN_GET_NODE_INFO_DATA_TYPE_ID, &buffer[0], (uint16_t) totalSize);
 8002abe:	9b04      	ldr	r3, [sp, #16]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	ab05      	add	r3, sp, #20
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	0021      	movs	r1, r4
 8002aca:	9803      	ldr	r0, [sp, #12]
 8002acc:	f7ff fed0 	bl	8002870 <canRespondToRequest>
 8002ad0:	e7e8      	b.n	8002aa4 <canProcessRxFrame+0x64>
            uint32_t tick = HAL_GetTick();
 8002ad2:	f002 fadf 	bl	8005094 <HAL_GetTick>
 8002ad6:	0007      	movs	r7, r0
            uint8_t seconds = data[0];
 8002ad8:	7833      	ldrb	r3, [r6, #0]
            uint8_t bandwidth = data[1];
 8002ada:	7876      	ldrb	r6, [r6, #1]
            canDrv.subscribeBeginTick = tick;
 8002adc:	493e      	ldr	r1, [pc, #248]	; (8002bd8 <canProcessRxFrame+0x198>)
 8002ade:	22db      	movs	r2, #219	; 0xdb
 8002ae0:	00d2      	lsls	r2, r2, #3
 8002ae2:	188a      	adds	r2, r1, r2
 8002ae4:	6010      	str	r0, [r2, #0]
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	6055      	str	r5, [r2, #4]
            canDrv.subscribeUntilTick = tick + 1000 * (uint32_t) seconds;
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	0090      	lsls	r0, r2, #2
 8002af0:	18c0      	adds	r0, r0, r3
 8002af2:	00c0      	lsls	r0, r0, #3
 8002af4:	19c0      	adds	r0, r0, r7
 8002af6:	23dc      	movs	r3, #220	; 0xdc
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	18cb      	adds	r3, r1, r3
 8002afc:	6018      	str	r0, [r3, #0]
 8002afe:	605d      	str	r5, [r3, #4]
            canDrv.subscribeBandwidthLimit = bandwidth;
 8002b00:	23dd      	movs	r3, #221	; 0xdd
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	54ce      	strb	r6, [r1, r3]
            canDrv.subscribeBytesPublished = 0; // Reset the counter when the subscription is renewed
 8002b06:	3308      	adds	r3, #8
 8002b08:	469c      	mov	ip, r3
 8002b0a:	4461      	add	r1, ip
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2300      	movs	r3, #0
 8002b10:	600a      	str	r2, [r1, #0]
 8002b12:	604b      	str	r3, [r1, #4]
            result = canRespondToRequest(canOverSerial, transfer, AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_ID, NULL, 0);
 8002b14:	9500      	str	r5, [sp, #0]
 8002b16:	2300      	movs	r3, #0
 8002b18:	32c8      	adds	r2, #200	; 0xc8
 8002b1a:	0021      	movs	r1, r4
 8002b1c:	9803      	ldr	r0, [sp, #12]
 8002b1e:	f7ff fea7 	bl	8002870 <canRespondToRequest>
 8002b22:	e7bf      	b.n	8002aa4 <canProcessRxFrame+0x64>
            const char *name = getBoardName(); // TODO: Get (and set) from flash
 8002b24:	f7fe f89c 	bl	8000c60 <getBoardName>
 8002b28:	0005      	movs	r5, r0
            result = canRespondToRequest(canOverSerial, transfer, AF_GET_PREFERRED_NAME_DATA_TYPE_ID, name, strlen(name));
 8002b2a:	f7fd fb07 	bl	800013c <strlen>
 8002b2e:	b280      	uxth	r0, r0
 8002b30:	9000      	str	r0, [sp, #0]
 8002b32:	002b      	movs	r3, r5
 8002b34:	22ca      	movs	r2, #202	; 0xca
 8002b36:	0021      	movs	r1, r4
 8002b38:	9803      	ldr	r0, [sp, #12]
 8002b3a:	f7ff fe99 	bl	8002870 <canRespondToRequest>
 8002b3e:	e7b1      	b.n	8002aa4 <canProcessRxFrame+0x64>
            uint8_t * responsePacket = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	9305      	str	r3, [sp, #20]
            handleMetaDataRequest(data, dataLength, &responsePacket, &responseLength);
 8002b44:	ab04      	add	r3, sp, #16
 8002b46:	aa05      	add	r2, sp, #20
 8002b48:	0039      	movs	r1, r7
 8002b4a:	0030      	movs	r0, r6
 8002b4c:	f7fe fd84 	bl	8001658 <handleMetaDataRequest>
            hardAssert(responsePacket, "");
 8002b50:	9b05      	ldr	r3, [sp, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <canProcessRxFrame+0x12a>
            result = canRespondToRequest(canOverSerial, transfer, AF_GET_FIELD_META_DATA_DATA_TYPE_ID, responsePacket, responseLength);
 8002b56:	ab04      	add	r3, sp, #16
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	9b05      	ldr	r3, [sp, #20]
 8002b5e:	22cc      	movs	r2, #204	; 0xcc
 8002b60:	0021      	movs	r1, r4
 8002b62:	9803      	ldr	r0, [sp, #12]
 8002b64:	f7ff fe84 	bl	8002870 <canRespondToRequest>
 8002b68:	e79c      	b.n	8002aa4 <canProcessRxFrame+0x64>
            hardAssert(responsePacket, "");
 8002b6a:	481c      	ldr	r0, [pc, #112]	; (8002bdc <canProcessRxFrame+0x19c>)
 8002b6c:	f7fe f944 	bl	8000df8 <hardAssertTmp>
 8002b70:	e7f1      	b.n	8002b56 <canProcessRxFrame+0x116>
        if ((getLocalNodeId() == CANARD_BROADCAST_NODE_ID)
 8002b72:	f7ff fe75 	bl	8002860 <getLocalNodeId>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d102      	bne.n	8002b80 <canProcessRxFrame+0x140>
            && (transfer->data_type_id == UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID)) {
 8002b7a:	8ae3      	ldrh	r3, [r4, #22]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00b      	beq.n	8002b98 <canProcessRxFrame+0x158>
        } else if (transfer->data_type_id == AF_TEST_BOARD_DATA_TYPE_ID) {
 8002b80:	8ae3      	ldrh	r3, [r4, #22]
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <canProcessRxFrame+0x1a0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <canProcessRxFrame+0x164>
        } else if (transfer->data_type_id == AF_PROTECT_BOARD_DATA_TYPE_ID) {
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <canProcessRxFrame+0x1a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d000      	beq.n	8002b90 <canProcessRxFrame+0x150>
 8002b8e:	e766      	b.n	8002a5e <canProcessRxFrame+0x1e>
            uint8_t level = data[0];
 8002b90:	7830      	ldrb	r0, [r6, #0]
            setRdp(level);
 8002b92:	f000 fb85 	bl	80032a0 <setRdp>
}
 8002b96:	e762      	b.n	8002a5e <canProcessRxFrame+0x1e>
            handleNodeAllocationBroadcast(transfer, data, dataLength);
 8002b98:	003a      	movs	r2, r7
 8002b9a:	0031      	movs	r1, r6
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f7ff fd3f 	bl	8002620 <handleNodeAllocationBroadcast>
 8002ba2:	e75c      	b.n	8002a5e <canProcessRxFrame+0x1e>
            uint8_t extraId = data[0];
 8002ba4:	7836      	ldrb	r6, [r6, #0]
            uint8_t errorCode = boardTest();
 8002ba6:	f7fe f879 	bl	8000c9c <boardTest>
 8002baa:	0005      	movs	r5, r0
 8002bac:	0004      	movs	r4, r0
            uint32_t rdpLevel = readRdpValue();
 8002bae:	f000 fb69 	bl	8003284 <readRdpValue>
            if (rdpLevel != OB_RDP_LEVEL_2) {
 8002bb2:	28cc      	cmp	r0, #204	; 0xcc
 8002bb4:	d003      	beq.n	8002bbe <canProcessRxFrame+0x17e>
                errorCode |= 0x80;
 8002bb6:	2480      	movs	r4, #128	; 0x80
 8002bb8:	4264      	negs	r4, r4
 8002bba:	432c      	orrs	r4, r5
 8002bbc:	b2e4      	uxtb	r4, r4
            uint8_t packet[2] = {errorCode, extraId};
 8002bbe:	ab05      	add	r3, sp, #20
 8002bc0:	701c      	strb	r4, [r3, #0]
 8002bc2:	705e      	strb	r6, [r3, #1]
            anonymousCanBroadcast(canOverSerial, AF_TEST_BOARD_RESULTS_DATA_TYPE_ID, &transferId, CANARD_TRANSFER_PRIORITY_LOW, packet, 2);
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2318      	movs	r3, #24
 8002bcc:	4a06      	ldr	r2, [pc, #24]	; (8002be8 <canProcessRxFrame+0x1a8>)
 8002bce:	2103      	movs	r1, #3
 8002bd0:	9803      	ldr	r0, [sp, #12]
 8002bd2:	f7ff fe6d 	bl	80028b0 <anonymousCanBroadcast>
 8002bd6:	e742      	b.n	8002a5e <canProcessRxFrame+0x1e>
 8002bd8:	200002f8 	.word	0x200002f8
 8002bdc:	08006fd4 	.word	0x08006fd4
 8002be0:	00005206 	.word	0x00005206
 8002be4:	00005207 	.word	0x00005207
 8002be8:	20000a32 	.word	0x20000a32

08002bec <canBroadcast>:
                    uint16_t payloadLength) {
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	46d6      	mov	lr, sl
 8002bf0:	464f      	mov	r7, r9
 8002bf2:	4646      	mov	r6, r8
 8002bf4:	b5c0      	push	{r6, r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	4680      	mov	r8, r0
 8002bfa:	4689      	mov	r9, r1
 8002bfc:	4692      	mov	sl, r2
 8002bfe:	001d      	movs	r5, r3
 8002c00:	ab0c      	add	r3, sp, #48	; 0x30
 8002c02:	cb40      	ldmia	r3!, {r6}
 8002c04:	881f      	ldrh	r7, [r3, #0]
    uint8_t nodeId = getLocalNodeId();
 8002c06:	f7ff fe2b 	bl	8002860 <getLocalNodeId>
 8002c0a:	1e04      	subs	r4, r0, #0
    softAssert(nodeId, "The node ID needs to be set before canBroadcast");
 8002c0c:	d00e      	beq.n	8002c2c <canBroadcast+0x40>
    return canLocalOrRemoteBroadcast(
 8002c0e:	9702      	str	r7, [sp, #8]
 8002c10:	9601      	str	r6, [sp, #4]
 8002c12:	9500      	str	r5, [sp, #0]
 8002c14:	4653      	mov	r3, sl
 8002c16:	464a      	mov	r2, r9
 8002c18:	0021      	movs	r1, r4
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	f7ff fdf4 	bl	8002808 <canLocalOrRemoteBroadcast>
}
 8002c20:	b004      	add	sp, #16
 8002c22:	bce0      	pop	{r5, r6, r7}
 8002c24:	46ba      	mov	sl, r7
 8002c26:	46b1      	mov	r9, r6
 8002c28:	46a8      	mov	r8, r5
 8002c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    softAssert(nodeId, "The node ID needs to be set before canBroadcast");
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <canBroadcast+0x48>)
 8002c2e:	f7fe f8c1 	bl	8000db4 <softAssertTmp>
 8002c32:	e7ec      	b.n	8002c0e <canBroadcast+0x22>
 8002c34:	08006e00 	.word	0x08006e00

08002c38 <process1HzTasks>:
static void process1HzTasks(uint64_t timestamp_usec) {
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	000b      	movs	r3, r1
    canardCleanupStaleTransfers(&canDrv.gCanard, timestamp_usec);
 8002c40:	4c13      	ldr	r4, [pc, #76]	; (8002c90 <process1HzTasks+0x58>)
 8002c42:	0020      	movs	r0, r4
 8002c44:	f001 f9a4 	bl	8003f90 <canardCleanupStaleTransfers>
    if (canDrv.nodeIdAllocated) {
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <process1HzTasks+0x5c>)
 8002c4a:	5ce3      	ldrb	r3, [r4, r3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <process1HzTasks+0x24>
    canDrv.nodeMode = UAVCAN_NODE_MODE_OPERATIONAL;
 8002c50:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <process1HzTasks+0x58>)
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <process1HzTasks+0x60>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	54d1      	strb	r1, [r2, r3]
}
 8002c58:	b004      	add	sp, #16
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
        makeNodeStatusMessage(buffer);
 8002c5c:	a802      	add	r0, sp, #8
 8002c5e:	f7ff fc73 	bl	8002548 <makeNodeStatusMessage>
        canBroadcast(true,  UAVCAN_NODE_STATUS_DATA_TYPE_ID, &transfer_id, CANARD_TRANSFER_PRIORITY_LOW, buffer, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 8002c62:	4d0e      	ldr	r5, [pc, #56]	; (8002c9c <process1HzTasks+0x64>)
 8002c64:	2456      	movs	r4, #86	; 0x56
 8002c66:	34ff      	adds	r4, #255	; 0xff
 8002c68:	2607      	movs	r6, #7
 8002c6a:	9601      	str	r6, [sp, #4]
 8002c6c:	ab02      	add	r3, sp, #8
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2318      	movs	r3, #24
 8002c72:	002a      	movs	r2, r5
 8002c74:	0021      	movs	r1, r4
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7ff ffb8 	bl	8002bec <canBroadcast>
        canBroadcast(false, UAVCAN_NODE_STATUS_DATA_TYPE_ID, &transfer_id, CANARD_TRANSFER_PRIORITY_LOW, buffer, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 8002c7c:	9601      	str	r6, [sp, #4]
 8002c7e:	ab02      	add	r3, sp, #8
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2318      	movs	r3, #24
 8002c84:	002a      	movs	r2, r5
 8002c86:	0021      	movs	r1, r4
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff ffaf 	bl	8002bec <canBroadcast>
 8002c8e:	e7df      	b.n	8002c50 <process1HzTasks+0x18>
 8002c90:	200002f8 	.word	0x200002f8
 8002c94:	000006c2 	.word	0x000006c2
 8002c98:	000006d1 	.word	0x000006d1
 8002c9c:	20000a33 	.word	0x20000a33

08002ca0 <canShouldAcceptTransfer>:
static bool canShouldAcceptTransfer(CanardTransferType transferType, uint16_t dataTypeId, uint64_t *outDataTypeSignature) {
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	0005      	movs	r5, r0
 8002ca4:	000c      	movs	r4, r1
 8002ca6:	0016      	movs	r6, r2
    *outDataTypeSignature = getDataTypeSignature((transferType == CanardTransferTypeBroadcast), dataTypeId);
 8002ca8:	3802      	subs	r0, #2
 8002caa:	4242      	negs	r2, r0
 8002cac:	4150      	adcs	r0, r2
 8002cae:	b2c0      	uxtb	r0, r0
 8002cb0:	f7ff fd0a 	bl	80026c8 <getDataTypeSignature>
 8002cb4:	6030      	str	r0, [r6, #0]
 8002cb6:	6071      	str	r1, [r6, #4]
    if (transferType == CanardTransferTypeBroadcast) {
 8002cb8:	2d02      	cmp	r5, #2
 8002cba:	d00b      	beq.n	8002cd4 <canShouldAcceptTransfer+0x34>
        if (dataTypeId == AF_SET_FIELDS_DATA_TYPE_ID) {
 8002cbc:	2cd8      	cmp	r4, #216	; 0xd8
 8002cbe:	d01d      	beq.n	8002cfc <canShouldAcceptTransfer+0x5c>
        } else if (dataTypeId == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID) {
 8002cc0:	2c01      	cmp	r4, #1
 8002cc2:	d01d      	beq.n	8002d00 <canShouldAcceptTransfer+0x60>
        } else if (dataTypeId == AF_SUBSCRIBE_DEFAULT_FIELDS_DATA_TYPE_ID) {
 8002cc4:	2cc8      	cmp	r4, #200	; 0xc8
 8002cc6:	d01d      	beq.n	8002d04 <canShouldAcceptTransfer+0x64>
        } else if (dataTypeId == AF_GET_FIELD_META_DATA_DATA_TYPE_ID) {
 8002cc8:	2ccc      	cmp	r4, #204	; 0xcc
 8002cca:	d01d      	beq.n	8002d08 <canShouldAcceptTransfer+0x68>
        } else if (dataTypeId == AF_GET_PREFERRED_NAME_DATA_TYPE_ID) {
 8002ccc:	2cca      	cmp	r4, #202	; 0xca
 8002cce:	d01d      	beq.n	8002d0c <canShouldAcceptTransfer+0x6c>
    return false;
 8002cd0:	2000      	movs	r0, #0
}
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
        if ((getLocalNodeId() == CANARD_BROADCAST_NODE_ID) && (dataTypeId == UAVCAN_NODE_ID_ALLOCATION_DATA_TYPE_ID)) {
 8002cd4:	f7ff fdc4 	bl	8002860 <getLocalNodeId>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d101      	bne.n	8002ce0 <canShouldAcceptTransfer+0x40>
 8002cdc:	2c01      	cmp	r4, #1
 8002cde:	d007      	beq.n	8002cf0 <canShouldAcceptTransfer+0x50>
        if (dataTypeId == AF_TEST_BOARD_DATA_TYPE_ID) {
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <canShouldAcceptTransfer+0x70>)
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d006      	beq.n	8002cf4 <canShouldAcceptTransfer+0x54>
        if (dataTypeId == AF_PROTECT_BOARD_DATA_TYPE_ID) {
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <canShouldAcceptTransfer+0x74>)
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	d005      	beq.n	8002cf8 <canShouldAcceptTransfer+0x58>
    return false;
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7f0      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	e7ee      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e7ec      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	e7ea      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7e8      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002d00:	2001      	movs	r0, #1
 8002d02:	e7e6      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002d04:	2001      	movs	r0, #1
 8002d06:	e7e4      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002d08:	2001      	movs	r0, #1
 8002d0a:	e7e2      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
            return true;
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	e7e0      	b.n	8002cd2 <canShouldAcceptTransfer+0x32>
 8002d10:	00005206 	.word	0x00005206
 8002d14:	00005207 	.word	0x00005207

08002d18 <shouldAcceptTransfer>:
static bool shouldAcceptTransfer(const CanardInstance *ins, uint64_t *outDataTypeSignature, uint16_t dataTypeId, CanardTransferType transferType, uint8_t sourceNodeId) {
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	000c      	movs	r4, r1
 8002d1c:	0011      	movs	r1, r2
 8002d1e:	0018      	movs	r0, r3
    return canShouldAcceptTransfer(transferType, dataTypeId, outDataTypeSignature);
 8002d20:	0022      	movs	r2, r4
 8002d22:	f7ff ffbd 	bl	8002ca0 <canShouldAcceptTransfer>
}
 8002d26:	bd10      	pop	{r4, pc}

08002d28 <canOnTransferReceived>:
void canOnTransferReceived(bool canOverSerial, CanardRxTransfer * transfer, uint8_t destNodeId, const void* payload, uint16_t payloadLength) {
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	9003      	str	r0, [sp, #12]
 8002d2e:	000c      	movs	r4, r1
 8002d30:	0015      	movs	r5, r2
 8002d32:	001f      	movs	r7, r3
 8002d34:	ab0a      	add	r3, sp, #40	; 0x28
 8002d36:	881e      	ldrh	r6, [r3, #0]
    bool isBroadcast = (transfer->transfer_type == CanardTransferTypeBroadcast);
 8002d38:	7e0b      	ldrb	r3, [r1, #24]
    if (isBroadcast || (destNodeId == getLocalNodeId())) {
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <canOnTransferReceived+0x1e>
 8002d3e:	f7ff fd8f 	bl	8002860 <getLocalNodeId>
 8002d42:	42a8      	cmp	r0, r5
 8002d44:	d107      	bne.n	8002d56 <canOnTransferReceived+0x2e>
        canProcessRxFrame(canOverSerial, transfer, destNodeId, (void*) payload, payloadLength);
 8002d46:	b2f3      	uxtb	r3, r6
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	003b      	movs	r3, r7
 8002d4c:	002a      	movs	r2, r5
 8002d4e:	0021      	movs	r1, r4
 8002d50:	9803      	ldr	r0, [sp, #12]
 8002d52:	f7ff fe75 	bl	8002a40 <canProcessRxFrame>
}
 8002d56:	b005      	add	sp, #20
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5a <onTransferReceived>:
static void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer, uint8_t destNodeId) {
 8002d5a:	b530      	push	{r4, r5, lr}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	000c      	movs	r4, r1
 8002d60:	0015      	movs	r5, r2
    uint8_t * data = convertTransferToDataPtr(transfer, &length);
 8002d62:	210f      	movs	r1, #15
 8002d64:	4469      	add	r1, sp
 8002d66:	0020      	movs	r0, r4
 8002d68:	f7ff faae 	bl	80022c8 <convertTransferToDataPtr>
 8002d6c:	1e03      	subs	r3, r0, #0
    if (data == NULL)
 8002d6e:	d008      	beq.n	8002d82 <onTransferReceived+0x28>
    canOnTransferReceived(false, transfer, destNodeId, data, length);
 8002d70:	220f      	movs	r2, #15
 8002d72:	446a      	add	r2, sp
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	9200      	str	r2, [sp, #0]
 8002d78:	002a      	movs	r2, r5
 8002d7a:	0021      	movs	r1, r4
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7ff ffd3 	bl	8002d28 <canOnTransferReceived>
}
 8002d82:	b005      	add	sp, #20
 8002d84:	bd30      	pop	{r4, r5, pc}
	...

08002d88 <bufferRawCanFrames>:
void bufferRawCanFrames(const uint64_t timestamp) {
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8a:	b085      	sub	sp, #20
    for (uint32_t r=10; r--; ) {
 8002d8c:	230a      	movs	r3, #10
 8002d8e:	e040      	b.n	8002e12 <bufferRawCanFrames+0x8a>
                BUFFER_APPEND(canDrv.rxBuffer, rxFrame);
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002d92:	22b6      	movs	r2, #182	; 0xb6
 8002d94:	00d2      	lsls	r2, r2, #3
 8002d96:	5c9c      	ldrb	r4, [r3, r2]
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <bufferRawCanFrames+0x154>)
 8002d9a:	5c98      	ldrb	r0, [r3, r2]
 8002d9c:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <bufferRawCanFrames+0x158>)
 8002d9e:	5c9a      	ldrb	r2, [r3, r2]
 8002da0:	2101      	movs	r1, #1
 8002da2:	f000 fb9b 	bl	80034dc <incrAndWrap>
 8002da6:	4284      	cmp	r4, r0
 8002da8:	d021      	beq.n	8002dee <bufferRawCanFrames+0x66>
 8002daa:	4c4b      	ldr	r4, [pc, #300]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <bufferRawCanFrames+0x15c>)
 8002dae:	58e2      	ldr	r2, [r4, r3]
 8002db0:	4e4a      	ldr	r6, [pc, #296]	; (8002edc <bufferRawCanFrames+0x154>)
 8002db2:	5da3      	ldrb	r3, [r4, r6]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	18d2      	adds	r2, r2, r3
 8002db8:	466b      	mov	r3, sp
 8002dba:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002dbc:	c283      	stmia	r2!, {r0, r1, r7}
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	5da0      	ldrb	r0, [r4, r6]
 8002dc4:	4f46      	ldr	r7, [pc, #280]	; (8002ee0 <bufferRawCanFrames+0x158>)
 8002dc6:	5de2      	ldrb	r2, [r4, r7]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	f000 fb87 	bl	80034dc <incrAndWrap>
 8002dce:	b2c0      	uxtb	r0, r0
 8002dd0:	55a0      	strb	r0, [r4, r6]
                canDrv.rxBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.rxBuffer), canDrv.rxBuffer.maxUsage);
 8002dd2:	23b6      	movs	r3, #182	; 0xb6
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	5ce1      	ldrb	r1, [r4, r3]
 8002dd8:	5de2      	ldrb	r2, [r4, r7]
 8002dda:	f000 fb84 	bl	80034e6 <decrAndWrap>
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <bufferRawCanFrames+0x160>)
 8002de0:	5ce3      	ldrb	r3, [r4, r3]
 8002de2:	4298      	cmp	r0, r3
 8002de4:	dc07      	bgt.n	8002df6 <bufferRawCanFrames+0x6e>
 8002de6:	493c      	ldr	r1, [pc, #240]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002de8:	4a3f      	ldr	r2, [pc, #252]	; (8002ee8 <bufferRawCanFrames+0x160>)
 8002dea:	548b      	strb	r3, [r1, r2]
 8002dec:	e010      	b.n	8002e10 <bufferRawCanFrames+0x88>
                BUFFER_APPEND(canDrv.rxBuffer, rxFrame);
 8002dee:	483f      	ldr	r0, [pc, #252]	; (8002eec <bufferRawCanFrames+0x164>)
 8002df0:	f7fd ffe0 	bl	8000db4 <softAssertTmp>
 8002df4:	e7d9      	b.n	8002daa <bufferRawCanFrames+0x22>
                canDrv.rxBuffer.maxUsage = MAX(BUFFER_LENGTH(canDrv.rxBuffer), canDrv.rxBuffer.maxUsage);
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002df8:	0032      	movs	r2, r6
 8002dfa:	5d98      	ldrb	r0, [r3, r6]
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	5c99      	ldrb	r1, [r3, r2]
 8002e00:	5dda      	ldrb	r2, [r3, r7]
 8002e02:	f000 fb70 	bl	80034e6 <decrAndWrap>
 8002e06:	b2c3      	uxtb	r3, r0
 8002e08:	e7ed      	b.n	8002de6 <bufferRawCanFrames+0x5e>
            softAssert(0, "Inv arg"); // Shouldn't happen
 8002e0a:	4839      	ldr	r0, [pc, #228]	; (8002ef0 <bufferRawCanFrames+0x168>)
 8002e0c:	f7fd ffd2 	bl	8000db4 <softAssertTmp>
    for (uint32_t r=10; r--; ) {
 8002e10:	002b      	movs	r3, r5
 8002e12:	1e5d      	subs	r5, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <bufferRawCanFrames+0xc2>
            const int16_t rxResult = canardSTM32Receive(&rxFrame);
 8002e18:	4668      	mov	r0, sp
 8002e1a:	f001 fed7 	bl	8004bcc <canardSTM32Receive>
        if (rxResult == 0) {
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d013      	beq.n	8002e4a <bufferRawCanFrames+0xc2>
        } else if (rxResult > 0) { // Success
 8002e22:	ddf2      	ble.n	8002e0a <bufferRawCanFrames+0x82>
            if (BUFFER_FULL(canDrv.rxBuffer)) {
 8002e24:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002e26:	22b6      	movs	r2, #182	; 0xb6
 8002e28:	00d2      	lsls	r2, r2, #3
 8002e2a:	5c9c      	ldrb	r4, [r3, r2]
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <bufferRawCanFrames+0x154>)
 8002e2e:	5c98      	ldrb	r0, [r3, r2]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <bufferRawCanFrames+0x158>)
 8002e32:	5c9a      	ldrb	r2, [r3, r2]
 8002e34:	2101      	movs	r1, #1
 8002e36:	f000 fb51 	bl	80034dc <incrAndWrap>
 8002e3a:	4284      	cmp	r4, r0
 8002e3c:	d1a8      	bne.n	8002d90 <bufferRawCanFrames+0x8>
                canDrv.stats.rxCanOverflowCount++;
 8002e3e:	4926      	ldr	r1, [pc, #152]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002e40:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <bufferRawCanFrames+0x16c>)
 8002e42:	5a8b      	ldrh	r3, [r1, r2]
 8002e44:	3301      	adds	r3, #1
 8002e46:	528b      	strh	r3, [r1, r2]
 8002e48:	e7e2      	b.n	8002e10 <bufferRawCanFrames+0x88>
    if (!BUFFER_EMPTY(canDrv.txBuffer)) {
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002e4c:	23b5      	movs	r3, #181	; 0xb5
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	5cd0      	ldrb	r0, [r2, r3]
 8002e52:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <bufferRawCanFrames+0x170>)
 8002e54:	5c52      	ldrb	r2, [r2, r1]
 8002e56:	4290      	cmp	r0, r2
 8002e58:	d101      	bne.n	8002e5e <bufferRawCanFrames+0xd6>
}
 8002e5a:	b005      	add	sp, #20
 8002e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const CanardCANFrame * txFrame = BUFFER_PEEK(canDrv.txBuffer);
 8002e5e:	491e      	ldr	r1, [pc, #120]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <bufferRawCanFrames+0x174>)
 8002e62:	588a      	ldr	r2, [r1, r2]
 8002e64:	0100      	lsls	r0, r0, #4
 8002e66:	1810      	adds	r0, r2, r0
            const int16_t txResult = canardSTM32Transmit(txFrame);
 8002e68:	f001 fe36 	bl	8004ad8 <canardSTM32Transmit>
        if (txResult > 0) { // Success
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	dd16      	ble.n	8002e9e <bufferRawCanFrames+0x116>
            BUFFER_POP(canDrv.txBuffer);
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002e72:	22b5      	movs	r2, #181	; 0xb5
 8002e74:	00d2      	lsls	r2, r2, #3
 8002e76:	5c9a      	ldrb	r2, [r3, r2]
 8002e78:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <bufferRawCanFrames+0x170>)
 8002e7a:	5c5b      	ldrb	r3, [r3, r1]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d00a      	beq.n	8002e96 <bufferRawCanFrames+0x10e>
 8002e80:	4c15      	ldr	r4, [pc, #84]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002e82:	25b5      	movs	r5, #181	; 0xb5
 8002e84:	00ed      	lsls	r5, r5, #3
 8002e86:	5d60      	ldrb	r0, [r4, r5]
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <bufferRawCanFrames+0x178>)
 8002e8a:	5ce2      	ldrb	r2, [r4, r3]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	f000 fb25 	bl	80034dc <incrAndWrap>
 8002e92:	5560      	strb	r0, [r4, r5]
 8002e94:	e7e1      	b.n	8002e5a <bufferRawCanFrames+0xd2>
 8002e96:	481b      	ldr	r0, [pc, #108]	; (8002f04 <bufferRawCanFrames+0x17c>)
 8002e98:	f7fd ff8c 	bl	8000db4 <softAssertTmp>
 8002e9c:	e7f0      	b.n	8002e80 <bufferRawCanFrames+0xf8>
        } else if (txResult < 0) { // Failure
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	dadb      	bge.n	8002e5a <bufferRawCanFrames+0xd2>
            canDrv.stats.txFailedToTransmit++;
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002ea4:	4918      	ldr	r1, [pc, #96]	; (8002f08 <bufferRawCanFrames+0x180>)
 8002ea6:	5a5a      	ldrh	r2, [r3, r1]
 8002ea8:	3201      	adds	r2, #1
 8002eaa:	525a      	strh	r2, [r3, r1]
            BUFFER_POP(canDrv.txBuffer);  // Note: We don't retry on error
 8002eac:	22b5      	movs	r2, #181	; 0xb5
 8002eae:	00d2      	lsls	r2, r2, #3
 8002eb0:	5c9a      	ldrb	r2, [r3, r2]
 8002eb2:	4911      	ldr	r1, [pc, #68]	; (8002ef8 <bufferRawCanFrames+0x170>)
 8002eb4:	5c5b      	ldrb	r3, [r3, r1]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d00a      	beq.n	8002ed0 <bufferRawCanFrames+0x148>
 8002eba:	4c07      	ldr	r4, [pc, #28]	; (8002ed8 <bufferRawCanFrames+0x150>)
 8002ebc:	25b5      	movs	r5, #181	; 0xb5
 8002ebe:	00ed      	lsls	r5, r5, #3
 8002ec0:	5d60      	ldrb	r0, [r4, r5]
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <bufferRawCanFrames+0x178>)
 8002ec4:	5ce2      	ldrb	r2, [r4, r3]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	f000 fb08 	bl	80034dc <incrAndWrap>
 8002ecc:	5560      	strb	r0, [r4, r5]
}
 8002ece:	e7c4      	b.n	8002e5a <bufferRawCanFrames+0xd2>
            BUFFER_POP(canDrv.txBuffer);  // Note: We don't retry on error
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <bufferRawCanFrames+0x17c>)
 8002ed2:	f7fd ff6f 	bl	8000db4 <softAssertTmp>
 8002ed6:	e7f0      	b.n	8002eba <bufferRawCanFrames+0x132>
 8002ed8:	200002f8 	.word	0x200002f8
 8002edc:	000005b1 	.word	0x000005b1
 8002ee0:	000005b2 	.word	0x000005b2
 8002ee4:	000005b4 	.word	0x000005b4
 8002ee8:	000005b3 	.word	0x000005b3
 8002eec:	08006d10 	.word	0x08006d10
 8002ef0:	08006e30 	.word	0x08006e30
 8002ef4:	00000706 	.word	0x00000706
 8002ef8:	000005a9 	.word	0x000005a9
 8002efc:	000005ac 	.word	0x000005ac
 8002f00:	000005aa 	.word	0x000005aa
 8002f04:	08006d30 	.word	0x08006d30
 8002f08:	00000702 	.word	0x00000702

08002f0c <loopRawCan>:

// ================= //


// Takes ~7us to run when no frames - called every 100us
void loopRawCan() {
 8002f0c:	b570      	push	{r4, r5, r6, lr}
    // General timer - as this is called more often than ticks
    canDrv.globalMicroSeconds += 100; // This should be called by a timer every 100us
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <loopRawCan+0x24>)
 8002f10:	22e3      	movs	r2, #227	; 0xe3
 8002f12:	00d2      	lsls	r2, r2, #3
 8002f14:	4694      	mov	ip, r2
 8002f16:	4463      	add	r3, ip
 8002f18:	2064      	movs	r0, #100	; 0x64
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	681c      	ldr	r4, [r3, #0]
 8002f1e:	685d      	ldr	r5, [r3, #4]
 8002f20:	1900      	adds	r0, r0, r4
 8002f22:	4169      	adcs	r1, r5
 8002f24:	6018      	str	r0, [r3, #0]
 8002f26:	6059      	str	r1, [r3, #4]
    bufferRawCanFrames(canDrv.globalMicroSeconds);
 8002f28:	f7ff ff2e 	bl	8002d88 <bufferRawCanFrames>
}
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	200002f8 	.word	0x200002f8

08002f34 <loopUavCan>:

void loopUavCan() {
 8002f34:	b570      	push	{r4, r5, r6, lr}
    const uint64_t timestamp = getMonotonicTimestampUSec();
 8002f36:	f7ff fafd 	bl	8002534 <getMonotonicTimestampUSec>
 8002f3a:	0004      	movs	r4, r0
 8002f3c:	000d      	movs	r5, r1
    // TODO: check that time passed is not too much
    canDrv.stats.maxUavCanLoopDiff = MAX(canDrv.stats.maxUavCanLoopDiff, (getMonotonicTimestampUSec() - timestamp));

    processUavCanFrames(timestamp);
 8002f3e:	f7ff f9f9 	bl	8002334 <processUavCanFrames>

    if (!canDrv.nodeIdAllocated) {
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <loopUavCan+0x60>)
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <loopUavCan+0x64>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <loopUavCan+0x2c>
        loopNodeAllocation();
    }

    // General cleanup
    if (timestamp >= canDrv.next1hzServiceTime) {
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <loopUavCan+0x60>)
 8002f4e:	22d9      	movs	r2, #217	; 0xd9
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	4694      	mov	ip, r2
 8002f54:	4463      	add	r3, ip
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	42ab      	cmp	r3, r5
 8002f5c:	d903      	bls.n	8002f66 <loopUavCan+0x32>
        canDrv.next1hzServiceTime = timestamp + 1000000;
        record1HzStats();
        process1HzTasks(timestamp);
    }
}
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
        loopNodeAllocation();
 8002f60:	f7ff fd3a 	bl	80029d8 <loopNodeAllocation>
 8002f64:	e7f2      	b.n	8002f4c <loopUavCan+0x18>
    if (timestamp >= canDrv.next1hzServiceTime) {
 8002f66:	42ab      	cmp	r3, r5
 8002f68:	d101      	bne.n	8002f6e <loopUavCan+0x3a>
 8002f6a:	42a2      	cmp	r2, r4
 8002f6c:	d8f7      	bhi.n	8002f5e <loopUavCan+0x2a>
        canDrv.next1hzServiceTime = timestamp + 1000000;
 8002f6e:	480b      	ldr	r0, [pc, #44]	; (8002f9c <loopUavCan+0x68>)
 8002f70:	2100      	movs	r1, #0
 8002f72:	1900      	adds	r0, r0, r4
 8002f74:	4169      	adcs	r1, r5
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <loopUavCan+0x60>)
 8002f78:	22d9      	movs	r2, #217	; 0xd9
 8002f7a:	00d2      	lsls	r2, r2, #3
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	4463      	add	r3, ip
 8002f80:	6018      	str	r0, [r3, #0]
 8002f82:	6059      	str	r1, [r3, #4]
        record1HzStats();
 8002f84:	f7ff f96e 	bl	8002264 <record1HzStats>
        process1HzTasks(timestamp);
 8002f88:	0020      	movs	r0, r4
 8002f8a:	0029      	movs	r1, r5
 8002f8c:	f7ff fe54 	bl	8002c38 <process1HzTasks>
}
 8002f90:	e7e5      	b.n	8002f5e <loopUavCan+0x2a>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	200002f8 	.word	0x200002f8
 8002f98:	000006c2 	.word	0x000006c2
 8002f9c:	000f4240 	.word	0x000f4240

08002fa0 <setupCan>:

void setupCan() {
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	46d6      	mov	lr, sl
 8002fa4:	464f      	mov	r7, r9
 8002fa6:	4646      	mov	r6, r8
 8002fa8:	b5c0      	push	{r6, r7, lr}
 8002faa:	b084      	sub	sp, #16
    canDrv.nodeHealth = UAVCAN_NODE_HEALTH_OK;
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <setupCan+0x1ac>)
 8002fae:	22da      	movs	r2, #218	; 0xda
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]
    canDrv.nodeMode = UAVCAN_NODE_MODE_INITIALIZATION;
 8002fb6:	4a66      	ldr	r2, [pc, #408]	; (8003150 <setupCan+0x1b0>)
 8002fb8:	3101      	adds	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]
    canDrv.txBuffer.size = TX_CAN_BUFFER_SIZE;
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <setupCan+0x1b4>)
 8002fbe:	3107      	adds	r1, #7
 8002fc0:	5499      	strb	r1, [r3, r2]
    canDrv.txBuffer.entries = canDrv.txBufferEntries;
 8002fc2:	3a83      	subs	r2, #131	; 0x83
 8002fc4:	3aff      	subs	r2, #255	; 0xff
 8002fc6:	1899      	adds	r1, r3, r2
 8002fc8:	4a63      	ldr	r2, [pc, #396]	; (8003158 <setupCan+0x1b8>)
 8002fca:	5099      	str	r1, [r3, r2]
    canDrv.rxBuffer.size = RX_CAN_BUFFER_SIZE;
 8002fcc:	4a63      	ldr	r2, [pc, #396]	; (800315c <setupCan+0x1bc>)
 8002fce:	2110      	movs	r1, #16
 8002fd0:	5499      	strb	r1, [r3, r2]
    canDrv.rxBuffer.entries = canDrv.rxBufferEntries;
 8002fd2:	3a0b      	subs	r2, #11
 8002fd4:	3aff      	subs	r2, #255	; 0xff
 8002fd6:	1899      	adds	r1, r3, r2
 8002fd8:	4a61      	ldr	r2, [pc, #388]	; (8003160 <setupCan+0x1c0>)
 8002fda:	5099      	str	r1, [r3, r2]
    // TODO: remove ifdefs
    #ifdef H7
        softAssert((HAL_FDCAN_Start(&hfdcan1) == HAL_OK), "CAN start failed");
    #else
        CanardSTM32CANTimings timings;
        int result = canardSTM32ComputeCANTimings(HAL_RCC_GetPCLK1Freq(), 1000000, &timings);
 8002fdc:	f003 faf0 	bl	80065c0 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	0007      	movs	r7, r0
    {
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
    }

    CANARD_ASSERT(out_timings != NULL);  // NOLINT
    memset(out_timings, 0, sizeof(*out_timings));
 8002fe2:	2206      	movs	r2, #6
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	a802      	add	r0, sp, #8
 8002fe8:	f003 fd31 	bl	8006a4e <memset>
     *   BS = 1 + BS1 + BS2                                             -- Number of time quanta per bit
     *   PRESCALER_BS = PRESCALER * BS
     * ==>
     *   PRESCALER_BS = PCLK / BITRATE
     */
    const uint32_t prescaler_bs = peripheral_clock_rate / target_bitrate;
 8002fec:	495d      	ldr	r1, [pc, #372]	; (8003164 <setupCan+0x1c4>)
 8002fee:	0038      	movs	r0, r7
 8002ff0:	f7fd f8ac 	bl	800014c <__udivsi3>
 8002ff4:	0006      	movs	r6, r0

    /*
     * Searching for such prescaler value so that the number of quanta per bit is highest.
     */
    uint8_t bs1_bs2_sum = (uint8_t)(max_quanta_per_bit - 1);    // NOLINT
 8002ff6:	2409      	movs	r4, #9

    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8002ff8:	e001      	b.n	8002ffe <setupCan+0x5e>
    {
        if (bs1_bs2_sum <= 2)
        {
            return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;          // No solution
        }
        bs1_bs2_sum--;
 8002ffa:	3c01      	subs	r4, #1
 8002ffc:	b2e4      	uxtb	r4, r4
    while ((prescaler_bs % (1U + bs1_bs2_sum)) != 0)
 8002ffe:	1c65      	adds	r5, r4, #1
 8003000:	0029      	movs	r1, r5
 8003002:	0030      	movs	r0, r6
 8003004:	f7fd f928 	bl	8000258 <__aeabi_uidivmod>
 8003008:	2900      	cmp	r1, #0
 800300a:	d003      	beq.n	8003014 <setupCan+0x74>
        if (bs1_bs2_sum <= 2)
 800300c:	2c02      	cmp	r4, #2
 800300e:	d8f4      	bhi.n	8002ffa <setupCan+0x5a>
            return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;          // No solution
 8003010:	4b55      	ldr	r3, [pc, #340]	; (8003168 <setupCan+0x1c8>)
 8003012:	e058      	b.n	80030c6 <setupCan+0x126>
    }

    const uint32_t prescaler = prescaler_bs / (1U + bs1_bs2_sum);
 8003014:	0029      	movs	r1, r5
 8003016:	0030      	movs	r0, r6
 8003018:	f7fd f898 	bl	800014c <__udivsi3>
 800301c:	4680      	mov	r8, r0
    if ((prescaler < 1U) || (prescaler > 1024U))
 800301e:	1e42      	subs	r2, r0, #1
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	429a      	cmp	r2, r3
 8003026:	d300      	bcc.n	800302a <setupCan+0x8a>
 8003028:	e086      	b.n	8003138 <setupCan+0x198>
     *
     * Since the optimal solution is so close to the maximum, we prepare two solutions, and then pick the best one:
     *   - With rounding to nearest
     *   - With rounding to zero
     */
    uint8_t bs1 = (uint8_t)(((7 * bs1_bs2_sum - 1) + 4) / 8);       // Trying rounding to nearest first  // NOLINT
 800302a:	00e3      	lsls	r3, r4, #3
 800302c:	1b1b      	subs	r3, r3, r4
 800302e:	4699      	mov	r9, r3
 8003030:	3303      	adds	r3, #3
 8003032:	17da      	asrs	r2, r3, #31
 8003034:	2107      	movs	r1, #7
 8003036:	4011      	ands	r1, r2
 8003038:	18c9      	adds	r1, r1, r3
 800303a:	10cb      	asrs	r3, r1, #3
 800303c:	469a      	mov	sl, r3
 800303e:	b2dd      	uxtb	r5, r3
    uint8_t bs2 = (uint8_t)(bs1_bs2_sum - bs1);  // NOLINT
 8003040:	1b66      	subs	r6, r4, r5
 8003042:	b2f6      	uxtb	r6, r6
    CANARD_ASSERT(bs1_bs2_sum > bs1);
 8003044:	42ac      	cmp	r4, r5
 8003046:	d925      	bls.n	8003094 <setupCan+0xf4>

    {
        const uint16_t sample_point_permill = (uint16_t)(1000U * (1U + bs1) / (1U + bs1 + bs2));  // NOLINT
 8003048:	21ff      	movs	r1, #255	; 0xff
 800304a:	4653      	mov	r3, sl
 800304c:	4019      	ands	r1, r3
 800304e:	1c4b      	adds	r3, r1, #1
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	1ad2      	subs	r2, r2, r3
 8003054:	0090      	lsls	r0, r2, #2
 8003056:	18c0      	adds	r0, r0, r3
 8003058:	00c0      	lsls	r0, r0, #3
 800305a:	1871      	adds	r1, r6, r1
 800305c:	3101      	adds	r1, #1
 800305e:	f7fd f875 	bl	800014c <__udivsi3>
 8003062:	b280      	uxth	r0, r0

        if (sample_point_permill > MaxSamplePointLocationPermill)   // Strictly more!
 8003064:	23e1      	movs	r3, #225	; 0xe1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4298      	cmp	r0, r3
 800306a:	d909      	bls.n	8003080 <setupCan+0xe0>
        {
            bs1 = (uint8_t)((7 * bs1_bs2_sum - 1) / 8);             // Nope, too far; now rounding to zero
 800306c:	464b      	mov	r3, r9
 800306e:	3b01      	subs	r3, #1
 8003070:	17da      	asrs	r2, r3, #31
 8003072:	2507      	movs	r5, #7
 8003074:	4015      	ands	r5, r2
 8003076:	18ed      	adds	r5, r5, r3
 8003078:	10ed      	asrs	r5, r5, #3
 800307a:	b2ed      	uxtb	r5, r5
            bs2 = (uint8_t)(bs1_bs2_sum - bs1);
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	b2e6      	uxtb	r6, r4
        }
    }

    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 8003080:	1e6b      	subs	r3, r5, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d809      	bhi.n	800309c <setupCan+0xfc>
 8003088:	2e00      	cmp	r6, #0
 800308a:	d04c      	beq.n	8003126 <setupCan+0x186>
 800308c:	2e08      	cmp	r6, #8
 800308e:	d94c      	bls.n	800312a <setupCan+0x18a>
 8003090:	2400      	movs	r4, #0
 8003092:	e004      	b.n	800309e <setupCan+0xfe>
    CANARD_ASSERT(bs1_bs2_sum > bs1);
 8003094:	4835      	ldr	r0, [pc, #212]	; (800316c <setupCan+0x1cc>)
 8003096:	f7fd feaf 	bl	8000df8 <hardAssertTmp>
 800309a:	e7d5      	b.n	8003048 <setupCan+0xa8>
    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 800309c:	2400      	movs	r4, #0
     * def sample_point_from_btr(x):
     *     assert 0b0011110010000000111111000000000 & x == 0
     *     ts2,ts1,brp = (x>>20)&7, (x>>16)&15, x&511
     *     return (1+ts1+1)/(1+ts1+1+ts2+1)
     */
    if ((target_bitrate != (peripheral_clock_rate / (prescaler * (1U + bs1 + bs2)))) ||
 800309e:	19a9      	adds	r1, r5, r6
 80030a0:	3101      	adds	r1, #1
 80030a2:	4643      	mov	r3, r8
 80030a4:	4359      	muls	r1, r3
 80030a6:	0038      	movs	r0, r7
 80030a8:	f7fd f850 	bl	800014c <__udivsi3>
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <setupCan+0x1c4>)
 80030ae:	4298      	cmp	r0, r3
 80030b0:	d13d      	bne.n	800312e <setupCan+0x18e>
 80030b2:	2c00      	cmp	r4, #0
 80030b4:	d03b      	beq.n	800312e <setupCan+0x18e>
        // This actually means that the algorithm has a logic error, hence assert(0).
        CANARD_ASSERT(0);  // NOLINT
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
    }

    out_timings->bit_rate_prescaler = (uint16_t) prescaler;
 80030b6:	ab02      	add	r3, sp, #8
 80030b8:	4642      	mov	r2, r8
 80030ba:	801a      	strh	r2, [r3, #0]
    out_timings->max_resynchronization_jump_width = 1;      // One is recommended by UAVCAN, CANOpen, and DeviceNet
 80030bc:	2201      	movs	r2, #1
 80030be:	711a      	strb	r2, [r3, #4]
    out_timings->bit_segment_1 = bs1;
 80030c0:	709d      	strb	r5, [r3, #2]
    out_timings->bit_segment_2 = bs2;
 80030c2:	70de      	strb	r6, [r3, #3]

    return 0;
 80030c4:	2300      	movs	r3, #0
        hardAssert(result == 0, "ComputeCANTimings failed");
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d138      	bne.n	800313c <setupCan+0x19c>
        result = canardSTM32Init(&timings, CanardSTM32IfaceModeNormal);
 80030ca:	2100      	movs	r1, #0
 80030cc:	a802      	add	r0, sp, #8
 80030ce:	f001 fc19 	bl	8004904 <canardSTM32Init>
        hardAssert(result == 0, "canardSTM32Init failed");
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d136      	bne.n	8003144 <setupCan+0x1a4>
    #endif

    canDrv.next1hzServiceTime = 0;
 80030d6:	4c1d      	ldr	r4, [pc, #116]	; (800314c <setupCan+0x1ac>)
 80030d8:	23d9      	movs	r3, #217	; 0xd9
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	18e3      	adds	r3, r4, r3
 80030de:	2000      	movs	r0, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	6018      	str	r0, [r3, #0]
 80030e4:	6059      	str	r1, [r3, #4]
    canardInit(&canDrv.gCanard, // Uninitialized library instance
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0021      	movs	r1, r4
 80030ea:	3128      	adds	r1, #40	; 0x28
 80030ec:	2300      	movs	r3, #0
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <setupCan+0x1d0>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <setupCan+0x1d4>)
 80030f6:	00d2      	lsls	r2, r2, #3
 80030f8:	0020      	movs	r0, r4
 80030fa:	f000 fe43 	bl	8003d84 <canardInit>
        sizeof(canDrv.canardMemoryPool), // Size of the above, in bytes
        onTransferReceived, // Callback, see CanardOnTransferReception
        shouldAcceptTransfer, // Callback, see CanardShouldAcceptTransfer
        NULL);
    
    canDrv.globalMicroSeconds = 1000 * (uint64_t) HAL_GetTick();
 80030fe:	f001 ffc9 	bl	8005094 <HAL_GetTick>
 8003102:	22fa      	movs	r2, #250	; 0xfa
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	2300      	movs	r3, #0
 8003108:	2100      	movs	r1, #0
 800310a:	f7fd f9d9 	bl	80004c0 <__aeabi_lmul>
 800310e:	23e3      	movs	r3, #227	; 0xe3
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	469c      	mov	ip, r3
 8003114:	4464      	add	r4, ip
 8003116:	6020      	str	r0, [r4, #0]
 8003118:	6061      	str	r1, [r4, #4]
}
 800311a:	b004      	add	sp, #16
 800311c:	bce0      	pop	{r5, r6, r7}
 800311e:	46ba      	mov	sl, r7
 8003120:	46b1      	mov	r9, r6
 8003122:	46a8      	mov	r8, r5
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const bool valid = (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2);
 8003126:	2400      	movs	r4, #0
 8003128:	e7b9      	b.n	800309e <setupCan+0xfe>
 800312a:	2401      	movs	r4, #1
 800312c:	e7b7      	b.n	800309e <setupCan+0xfe>
        CANARD_ASSERT(0);  // NOLINT
 800312e:	480f      	ldr	r0, [pc, #60]	; (800316c <setupCan+0x1cc>)
 8003130:	f7fd fe62 	bl	8000df8 <hardAssertTmp>
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <setupCan+0x1c8>)
 8003136:	e7c6      	b.n	80030c6 <setupCan+0x126>
        return -CANARD_STM32_ERROR_UNSUPPORTED_BIT_RATE;              // No solution
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <setupCan+0x1c8>)
 800313a:	e7c4      	b.n	80030c6 <setupCan+0x126>
        hardAssert(result == 0, "ComputeCANTimings failed");
 800313c:	480e      	ldr	r0, [pc, #56]	; (8003178 <setupCan+0x1d8>)
 800313e:	f7fd fe5b 	bl	8000df8 <hardAssertTmp>
 8003142:	e7c2      	b.n	80030ca <setupCan+0x12a>
        hardAssert(result == 0, "canardSTM32Init failed");
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <setupCan+0x1dc>)
 8003146:	f7fd fe57 	bl	8000df8 <hardAssertTmp>
 800314a:	e7c4      	b.n	80030d6 <setupCan+0x136>
 800314c:	200002f8 	.word	0x200002f8
 8003150:	000006d1 	.word	0x000006d1
 8003154:	000005aa 	.word	0x000005aa
 8003158:	000005ac 	.word	0x000005ac
 800315c:	000005b2 	.word	0x000005b2
 8003160:	000005b4 	.word	0x000005b4
 8003164:	000f4240 	.word	0x000f4240
 8003168:	fffffc18 	.word	0xfffffc18
 800316c:	08006fd4 	.word	0x08006fd4
 8003170:	08002d19 	.word	0x08002d19
 8003174:	08002d5b 	.word	0x08002d5b
 8003178:	08006e38 	.word	0x08006e38
 800317c:	08006e54 	.word	0x08006e54

08003180 <broadcastFieldsPacket>:
        packetBytes,
        numBytes
    );
}

void broadcastFieldsPacket(uint8_t packetBytes[], size_t numBytes) {
 8003180:	b530      	push	{r4, r5, lr}
 8003182:	b083      	sub	sp, #12
 8003184:	000c      	movs	r4, r1
    if (!canDrv.nodeIdAllocated)
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <broadcastFieldsPacket+0x50>)
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <broadcastFieldsPacket+0x54>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d019      	beq.n	80031c4 <broadcastFieldsPacket+0x44>
        return;
    if (numBytes >= 256) {
 8003190:	29ff      	cmp	r1, #255	; 0xff
 8003192:	d819      	bhi.n	80031c8 <broadcastFieldsPacket+0x48>
        softAssert(0, "Packet too big");
        return;
    }
    static uint8_t transferId;
    const int16_t broadcast_result = canBroadcast(
 8003194:	b28b      	uxth	r3, r1
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	9000      	str	r0, [sp, #0]
 800319a:	2310      	movs	r3, #16
 800319c:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <broadcastFieldsPacket+0x58>)
 800319e:	490f      	ldr	r1, [pc, #60]	; (80031dc <broadcastFieldsPacket+0x5c>)
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7ff fd23 	bl	8002bec <canBroadcast>
        &transferId,
        CANARD_TRANSFER_PRIORITY_MEDIUM,
        (const void*) packetBytes,
        numBytes
    );
    if (broadcast_result >= 1) {
 80031a6:	2800      	cmp	r0, #0
 80031a8:	dd0c      	ble.n	80031c4 <broadcastFieldsPacket+0x44>
        canDrv.subscribeBytesPublished += numBytes;
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <broadcastFieldsPacket+0x50>)
 80031ac:	22de      	movs	r2, #222	; 0xde
 80031ae:	00d2      	lsls	r2, r2, #3
 80031b0:	4694      	mov	ip, r2
 80031b2:	4463      	add	r3, ip
 80031b4:	0020      	movs	r0, r4
 80031b6:	2100      	movs	r1, #0
 80031b8:	681c      	ldr	r4, [r3, #0]
 80031ba:	685d      	ldr	r5, [r3, #4]
 80031bc:	1900      	adds	r0, r0, r4
 80031be:	4169      	adcs	r1, r5
 80031c0:	6018      	str	r0, [r3, #0]
 80031c2:	6059      	str	r1, [r3, #4]
    }
}
 80031c4:	b003      	add	sp, #12
 80031c6:	bd30      	pop	{r4, r5, pc}
        softAssert(0, "Packet too big");
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <broadcastFieldsPacket+0x60>)
 80031ca:	f7fd fdf3 	bl	8000db4 <softAssertTmp>
        return;
 80031ce:	e7f9      	b.n	80031c4 <broadcastFieldsPacket+0x44>
 80031d0:	200002f8 	.word	0x200002f8
 80031d4:	000006c2 	.word	0x000006c2
 80031d8:	20000a30 	.word	0x20000a30
 80031dc:	00004e20 	.word	0x00004e20
 80031e0:	08006e6c 	.word	0x08006e6c

080031e4 <publishFieldPacketIfBelowBandwidth>:

int8_t publishFieldPacketIfBelowBandwidth(uint8_t packetBytes[], size_t numBytes) {
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	46ce      	mov	lr, r9
 80031e8:	4647      	mov	r7, r8
 80031ea:	b580      	push	{r7, lr}
 80031ec:	4680      	mov	r8, r0
 80031ee:	4689      	mov	r9, r1
    uint32_t tick = HAL_GetTick();
 80031f0:	f001 ff50 	bl	8005094 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
    uint32_t bandwidth = canDrv.subscribeBytesPublished / (tick - canDrv.subscribeBeginTick); // TODO: try and avoid divides
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <publishFieldPacketIfBelowBandwidth+0x9c>)
 80031f8:	21de      	movs	r1, #222	; 0xde
 80031fa:	00c9      	lsls	r1, r1, #3
 80031fc:	1859      	adds	r1, r3, r1
 80031fe:	6808      	ldr	r0, [r1, #0]
 8003200:	6849      	ldr	r1, [r1, #4]
 8003202:	0016      	movs	r6, r2
 8003204:	2700      	movs	r7, #0
 8003206:	22db      	movs	r2, #219	; 0xdb
 8003208:	00d2      	lsls	r2, r2, #3
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	685d      	ldr	r5, [r3, #4]
 8003212:	0032      	movs	r2, r6
 8003214:	003b      	movs	r3, r7
 8003216:	1b12      	subs	r2, r2, r4
 8003218:	41ab      	sbcs	r3, r5
 800321a:	f7fd f931 	bl	8000480 <__aeabi_uldivmod>
    if (tick >= canDrv.subscribeBeginTick && tick <= canDrv.subscribeUntilTick) {
 800321e:	2d00      	cmp	r5, #0
 8003220:	d11c      	bne.n	800325c <publishFieldPacketIfBelowBandwidth+0x78>
 8003222:	42bd      	cmp	r5, r7
 8003224:	d018      	beq.n	8003258 <publishFieldPacketIfBelowBandwidth+0x74>
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <publishFieldPacketIfBelowBandwidth+0x9c>)
 8003228:	22dc      	movs	r2, #220	; 0xdc
 800322a:	00d2      	lsls	r2, r2, #3
 800322c:	4694      	mov	ip, r2
 800322e:	4463      	add	r3, ip
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	429f      	cmp	r7, r3
 8003236:	d816      	bhi.n	8003266 <publishFieldPacketIfBelowBandwidth+0x82>
 8003238:	d013      	beq.n	8003262 <publishFieldPacketIfBelowBandwidth+0x7e>
        if (bandwidth < (uint32_t) canDrv.subscribeBandwidthLimit) {
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <publishFieldPacketIfBelowBandwidth+0x9c>)
 800323c:	23dd      	movs	r3, #221	; 0xdd
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	5cd3      	ldrb	r3, [r2, r3]
 8003242:	4283      	cmp	r3, r0
 8003244:	d912      	bls.n	800326c <publishFieldPacketIfBelowBandwidth+0x88>
            broadcastFieldsPacket(packetBytes, numBytes);
 8003246:	4649      	mov	r1, r9
 8003248:	4640      	mov	r0, r8
 800324a:	f7ff ff99 	bl	8003180 <broadcastFieldsPacket>
            return 0;
 800324e:	2000      	movs	r0, #0
    } else {
        // Not subscribed
        // canDrv.stats.not++;
        return -1;
    }
}
 8003250:	bcc0      	pop	{r6, r7}
 8003252:	46b9      	mov	r9, r7
 8003254:	46b0      	mov	r8, r6
 8003256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tick >= canDrv.subscribeBeginTick && tick <= canDrv.subscribeUntilTick) {
 8003258:	42b4      	cmp	r4, r6
 800325a:	d9e4      	bls.n	8003226 <publishFieldPacketIfBelowBandwidth+0x42>
        return -1;
 800325c:	2001      	movs	r0, #1
 800325e:	4240      	negs	r0, r0
 8003260:	e7f6      	b.n	8003250 <publishFieldPacketIfBelowBandwidth+0x6c>
    if (tick >= canDrv.subscribeBeginTick && tick <= canDrv.subscribeUntilTick) {
 8003262:	4296      	cmp	r6, r2
 8003264:	d9e9      	bls.n	800323a <publishFieldPacketIfBelowBandwidth+0x56>
        return -1;
 8003266:	2001      	movs	r0, #1
 8003268:	4240      	negs	r0, r0
 800326a:	e7f1      	b.n	8003250 <publishFieldPacketIfBelowBandwidth+0x6c>
            canDrv.stats.droppedTxPacketsOverBandwidth++;
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <publishFieldPacketIfBelowBandwidth+0x9c>)
 800326e:	22e0      	movs	r2, #224	; 0xe0
 8003270:	00d2      	lsls	r2, r2, #3
 8003272:	5a8b      	ldrh	r3, [r1, r2]
 8003274:	3301      	adds	r3, #1
 8003276:	528b      	strh	r3, [r1, r2]
            return -1;
 8003278:	2001      	movs	r0, #1
 800327a:	4240      	negs	r0, r0
 800327c:	e7e8      	b.n	8003250 <publishFieldPacketIfBelowBandwidth+0x6c>
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	200002f8 	.word	0x200002f8

08003284 <readRdpValue>:

#define DEBUG_FIELD_OFFSET 60000 // Just needs to be sufficiently high not to conflict with other fields

uint32_t rdpLevel = 0;

uint32_t readRdpValue() {
 8003284:	b500      	push	{lr}
 8003286:	b087      	sub	sp, #28
    FLASH_OBProgramInitTypeDef pOBInit;
    HAL_FLASHEx_OBGetConfig(&pOBInit);
 8003288:	4668      	mov	r0, sp
 800328a:	f002 f975 	bl	8005578 <HAL_FLASHEx_OBGetConfig>
    rdpLevel = pOBInit.RDPLevel;
 800328e:	466b      	mov	r3, sp
 8003290:	7b18      	ldrb	r0, [r3, #12]
 8003292:	4b02      	ldr	r3, [pc, #8]	; (800329c <readRdpValue+0x18>)
 8003294:	6018      	str	r0, [r3, #0]
    return rdpLevel;
}
 8003296:	b007      	add	sp, #28
 8003298:	bd00      	pop	{pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	20000a38 	.word	0x20000a38

080032a0 <setRdp>:

void setRdp(uint8_t value) {
 80032a0:	b510      	push	{r4, lr}
 80032a2:	b086      	sub	sp, #24
        uint8_t rdpRegVal;
    #endif
    #ifdef H7
        uint32_t rdpRegVal;
    #endif
    if (value == 0) {
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d007      	beq.n	80032b8 <setRdp+0x18>
        rdpRegVal = OB_RDP_LEVEL_0;
    } else if (value == 1) {
 80032a8:	2801      	cmp	r0, #1
 80032aa:	d018      	beq.n	80032de <setRdp+0x3e>
        rdpRegVal = OB_RDP_LEVEL_1;
    } else if (value == 2) {
 80032ac:	2802      	cmp	r0, #2
 80032ae:	d014      	beq.n	80032da <setRdp+0x3a>
#ifndef PRODUCTION
    return;
#endif
        rdpRegVal = OB_RDP_LEVEL_2;
    } else {
        hardAssert(0, "Invalid RDP");
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <setRdp+0x44>)
 80032b2:	f7fd fda1 	bl	8000df8 <hardAssertTmp>
        return;
 80032b6:	e010      	b.n	80032da <setRdp+0x3a>
        rdpRegVal = OB_RDP_LEVEL_0;
 80032b8:	24aa      	movs	r4, #170	; 0xaa
    }
    FLASH_OBProgramInitTypeDef pOBInit;
    HAL_FLASHEx_OBGetConfig(&pOBInit);
 80032ba:	4668      	mov	r0, sp
 80032bc:	f002 f95c 	bl	8005578 <HAL_FLASHEx_OBGetConfig>
    HAL_FLASH_Unlock();
 80032c0:	f001 ff8a 	bl	80051d8 <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80032c4:	f001 ffa0 	bl	8005208 <HAL_FLASH_OB_Unlock>
    pOBInit.OptionType = OPTIONBYTE_RDP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	9300      	str	r3, [sp, #0]
    pOBInit.RDPLevel = rdpRegVal;
 80032cc:	466b      	mov	r3, sp
 80032ce:	731c      	strb	r4, [r3, #12]
    HAL_FLASHEx_OBProgram(&pOBInit);
 80032d0:	4668      	mov	r0, sp
 80032d2:	f002 f907 	bl	80054e4 <HAL_FLASHEx_OBProgram>
    HAL_FLASH_OB_Launch();
 80032d6:	f001 ffd7 	bl	8005288 <HAL_FLASH_OB_Launch>
}
 80032da:	b006      	add	sp, #24
 80032dc:	bd10      	pop	{r4, pc}
        rdpRegVal = OB_RDP_LEVEL_1;
 80032de:	24bb      	movs	r4, #187	; 0xbb
 80032e0:	e7eb      	b.n	80032ba <setRdp+0x1a>
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	08006e7c 	.word	0x08006e7c

080032e8 <setRdpField>:

static void setRdpField(const sFieldInfoEntry * fieldInfo, field_t startFieldIndex, field_t endFieldIndex, uint8_t * data) {
 80032e8:	b510      	push	{r4, lr}
    setRdp(*data);
 80032ea:	7818      	ldrb	r0, [r3, #0]
 80032ec:	f7ff ffd8 	bl	80032a0 <setRdp>
}
 80032f0:	bd10      	pop	{r4, pc}
	...

080032f4 <initialiseDebug>:
    { &assertCount,        "assert_count",   DEBUG_FIELD_OFFSET+1,                   1,  AF_FIELD_TYPE_UINT,      2, 0, &debugFieldMetaData, NULL, NULL },
    { &assertBuffer[0],    "asserts",        DEBUG_FIELD_OFFSET+2,  ASSERT_BUFFER_SIZE,  AF_FIELD_TYPE_UTF8_CHAR, 1, 0, &debugFieldMetaData, NULL, NULL },
};
const uint32_t debugFieldTableSize = sizeof(debugFieldTable)/sizeof(sFieldInfoEntry);

void initialiseDebug() {
 80032f4:	b510      	push	{r4, lr}
    addComponentFieldTableToGlobalTable(debugFieldTable, debugFieldTableSize);
 80032f6:	2103      	movs	r1, #3
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <initialiseDebug+0x10>)
 80032fa:	f7fd fe6b 	bl	8000fd4 <addComponentFieldTableToGlobalTable>
    readRdpValue();
 80032fe:	f7ff ffc1 	bl	8003284 <readRdpValue>
}
 8003302:	bd10      	pop	{r4, pc}
 8003304:	20000014 	.word	0x20000014

08003308 <loopDebug>:

void loopDebug(uint32_t ticks) {
 8003308:	b510      	push	{r4, lr}
    static uint32_t next = 0;
    if (ticks > next) {
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <loopDebug+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4283      	cmp	r3, r0
 8003310:	d300      	bcc.n	8003314 <loopDebug+0xc>
        next = ticks + 5000;
        readRdpValue();
        broadcastFields(DEBUG_FIELD_OFFSET, DEBUG_FIELD_OFFSET + 1);
    }
}
 8003312:	bd10      	pop	{r4, pc}
        next = ticks + 5000;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <loopDebug+0x28>)
 8003316:	469c      	mov	ip, r3
 8003318:	4460      	add	r0, ip
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <loopDebug+0x24>)
 800331c:	6018      	str	r0, [r3, #0]
        readRdpValue();
 800331e:	f7ff ffb1 	bl	8003284 <readRdpValue>
        broadcastFields(DEBUG_FIELD_OFFSET, DEBUG_FIELD_OFFSET + 1);
 8003322:	4904      	ldr	r1, [pc, #16]	; (8003334 <loopDebug+0x2c>)
 8003324:	4804      	ldr	r0, [pc, #16]	; (8003338 <loopDebug+0x30>)
 8003326:	f7fd fffb 	bl	8001320 <broadcastFields>
}
 800332a:	e7f2      	b.n	8003312 <loopDebug+0xa>
 800332c:	20000a34 	.word	0x20000a34
 8003330:	00001388 	.word	0x00001388
 8003334:	0000ea61 	.word	0x0000ea61
 8003338:	0000ea60 	.word	0x0000ea60

0800333c <delay_us>:
const uint32_t thpFieldTableSize = sizeof(thpFieldTable)/sizeof(thpFieldTable[0]);


// ======================== //

void delay_us(uint32_t period, void *intf_ptr) {
 800333c:	b510      	push	{r4, lr}
    HAL_Delay(period/1000);
 800333e:	21fa      	movs	r1, #250	; 0xfa
 8003340:	0089      	lsls	r1, r1, #2
 8003342:	f7fc ff03 	bl	800014c <__udivsi3>
 8003346:	f001 feab 	bl	80050a0 <HAL_Delay>
}
 800334a:	bd10      	pop	{r4, pc}

0800334c <user_i2c_read>:

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 800334c:	b510      	push	{r4, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	0013      	movs	r3, r2
    // Return 0 for Success, non-zero for failure
    int8_t rslt = !(HAL_I2C_Mem_Read(thpDrv.i2c, BME280_I2C_ADDR_PRIM << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, 10) == HAL_OK);
 8003352:	0002      	movs	r2, r0
 8003354:	4807      	ldr	r0, [pc, #28]	; (8003374 <user_i2c_read+0x28>)
 8003356:	6800      	ldr	r0, [r0, #0]
 8003358:	240a      	movs	r4, #10
 800335a:	9402      	str	r4, [sp, #8]
 800335c:	b29b      	uxth	r3, r3
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	9100      	str	r1, [sp, #0]
 8003362:	2301      	movs	r3, #1
 8003364:	21ec      	movs	r1, #236	; 0xec
 8003366:	f002 fc6d 	bl	8005c44 <HAL_I2C_Mem_Read>
 800336a:	1e43      	subs	r3, r0, #1
 800336c:	4198      	sbcs	r0, r3
    return rslt;
}
 800336e:	b004      	add	sp, #16
 8003370:	bd10      	pop	{r4, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	20000a40 	.word	0x20000a40

08003378 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8003378:	b500      	push	{lr}
 800337a:	b085      	sub	sp, #20
    // Return 0 for Success, non-zero for failure
    int8_t rslt = !(HAL_I2C_Mem_Write(thpDrv.i2c, BME280_I2C_ADDR_PRIM << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *) reg_data, 1, 10) == HAL_OK);
 800337c:	0002      	movs	r2, r0
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <user_i2c_write+0x24>)
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	230a      	movs	r3, #10
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	3b09      	subs	r3, #9
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	9100      	str	r1, [sp, #0]
 800338c:	21ec      	movs	r1, #236	; 0xec
 800338e:	f002 fb89 	bl	8005aa4 <HAL_I2C_Mem_Write>
 8003392:	1e43      	subs	r3, r0, #1
 8003394:	4198      	sbcs	r0, r3
    return rslt;
}
 8003396:	b005      	add	sp, #20
 8003398:	bd00      	pop	{pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	20000a40 	.word	0x20000a40

080033a0 <testThp>:

uint8_t testThp() {
    // If the board initialises then the I2C must be working
    return false;
}
 80033a0:	2000      	movs	r0, #0
 80033a2:	4770      	bx	lr

080033a4 <initialiseThp>:

void initialiseThp(I2C_HandleTypeDef * i2c) {
 80033a4:	b510      	push	{r4, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	0004      	movs	r4, r0
    addComponentFieldTableToGlobalTable(thpFieldTable, thpFieldTableSize);
 80033aa:	2103      	movs	r1, #3
 80033ac:	481b      	ldr	r0, [pc, #108]	; (800341c <initialiseThp+0x78>)
 80033ae:	f7fd fe11 	bl	8000fd4 <addComponentFieldTableToGlobalTable>

    uint8_t dev_addr = BME280_I2C_ADDR_PRIM;
 80033b2:	466b      	mov	r3, sp
 80033b4:	1dda      	adds	r2, r3, #7
 80033b6:	2376      	movs	r3, #118	; 0x76
 80033b8:	7013      	strb	r3, [r2, #0]
    struct bme280_dev * dev = &thpDrv.dev;
    thpDrv.i2c = i2c;
 80033ba:	4819      	ldr	r0, [pc, #100]	; (8003420 <initialiseThp+0x7c>)
 80033bc:	6004      	str	r4, [r0, #0]
    dev->intf_ptr = &dev_addr;
 80033be:	60c2      	str	r2, [r0, #12]
    dev->intf = BME280_I2C_INTF;
 80033c0:	2201      	movs	r2, #1
 80033c2:	7402      	strb	r2, [r0, #16]
    dev->read = user_i2c_read;
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <initialiseThp+0x80>)
 80033c6:	6142      	str	r2, [r0, #20]
    dev->write = user_i2c_write;
 80033c8:	4a17      	ldr	r2, [pc, #92]	; (8003428 <initialiseThp+0x84>)
 80033ca:	6182      	str	r2, [r0, #24]
    dev->delay_us = delay_us;
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <initialiseThp+0x88>)
 80033ce:	61c2      	str	r2, [r0, #28]

    int8_t rslt = bme280_init(dev); // 0 is success, >0 is warning, <0 is failure
 80033d0:	3008      	adds	r0, #8
 80033d2:	f7fe fdc0 	bl	8001f56 <bme280_init>
    hardAssert(rslt == 0, "bme280_init warning or failure");
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d118      	bne.n	800340c <initialiseThp+0x68>

    // Oversampling - more -> better accuracy but higher current -> higher temperature
    // Go for lowest power
    dev->settings.osr_h = BME280_OVERSAMPLING_1X;
 80033da:	4911      	ldr	r1, [pc, #68]	; (8003420 <initialiseThp+0x7c>)
 80033dc:	2301      	movs	r3, #1
 80033de:	224a      	movs	r2, #74	; 0x4a
 80033e0:	548b      	strb	r3, [r1, r2]
    dev->settings.osr_p = BME280_OVERSAMPLING_1X;
 80033e2:	3a02      	subs	r2, #2
 80033e4:	548b      	strb	r3, [r1, r2]
    dev->settings.osr_t = BME280_OVERSAMPLING_1X;
 80033e6:	3201      	adds	r2, #1
 80033e8:	548b      	strb	r3, [r1, r2]
    dev->settings.filter = BME280_FILTER_COEFF_OFF;
 80033ea:	334a      	adds	r3, #74	; 0x4a
 80033ec:	2200      	movs	r2, #0
 80033ee:	54ca      	strb	r2, [r1, r3]
    uint8_t settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;
    rslt = bme280_set_sensor_settings(settings_sel, dev);
 80033f0:	3108      	adds	r1, #8
 80033f2:	200f      	movs	r0, #15
 80033f4:	f7fe fe00 	bl	8001ff8 <bme280_set_sensor_settings>
    hardAssert(rslt == 0, "bme280_set_sensor_settings warning or failure");
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d10b      	bne.n	8003414 <initialiseThp+0x70>

    // Calculate the minimum delay required between consecutive measurement based upon the sensor enabled
    // and the oversampling configuration.
    thpDrv.sampleDelayms = bme280_cal_meas_delay(&dev->settings);
 80033fc:	4c08      	ldr	r4, [pc, #32]	; (8003420 <initialiseThp+0x7c>)
 80033fe:	0020      	movs	r0, r4
 8003400:	3048      	adds	r0, #72	; 0x48
 8003402:	f7fe fed3 	bl	80021ac <bme280_cal_meas_delay>
 8003406:	6060      	str	r0, [r4, #4]
}
 8003408:	b002      	add	sp, #8
 800340a:	bd10      	pop	{r4, pc}
    hardAssert(rslt == 0, "bme280_init warning or failure");
 800340c:	4808      	ldr	r0, [pc, #32]	; (8003430 <initialiseThp+0x8c>)
 800340e:	f7fd fcf3 	bl	8000df8 <hardAssertTmp>
 8003412:	e7e2      	b.n	80033da <initialiseThp+0x36>
    hardAssert(rslt == 0, "bme280_set_sensor_settings warning or failure");
 8003414:	4807      	ldr	r0, [pc, #28]	; (8003434 <initialiseThp+0x90>)
 8003416:	f7fd fcef 	bl	8000df8 <hardAssertTmp>
 800341a:	e7ef      	b.n	80033fc <initialiseThp+0x58>
 800341c:	200000b4 	.word	0x200000b4
 8003420:	20000a40 	.word	0x20000a40
 8003424:	0800334d 	.word	0x0800334d
 8003428:	08003379 	.word	0x08003379
 800342c:	0800333d 	.word	0x0800333d
 8003430:	08006eac 	.word	0x08006eac
 8003434:	08006ecc 	.word	0x08006ecc

08003438 <loopThp>:

void loopThp(uint32_t ticks) {
 8003438:	b510      	push	{r4, lr}
 800343a:	b086      	sub	sp, #24
   static uint32_t lastTick = 0;
//    uint32_t startTick = HAL_GetTick();
    // loopAsserts(startTick	);

   if (ticks - lastTick > 100) {
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <loopThp+0x88>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1ac3      	subs	r3, r0, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d801      	bhi.n	800344a <loopThp+0x12>
        // // Calculate the minimum delay required between consecutive measurement based upon the sensor enabled
        // // and the oversampling configuration.
        // thpDrv.sampleDelayms = bme280_cal_meas_delay(&dev->settings);
   }

}
 8003446:	b006      	add	sp, #24
 8003448:	bd10      	pop	{r4, pc}
       lastTick = ticks;
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <loopThp+0x88>)
 800344c:	6018      	str	r0, [r3, #0]
        rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 800344e:	491d      	ldr	r1, [pc, #116]	; (80034c4 <loopThp+0x8c>)
 8003450:	3108      	adds	r1, #8
 8003452:	2001      	movs	r0, #1
 8003454:	f7fe fe0d 	bl	8002072 <bme280_set_sensor_mode>
        softAssert(rslt == 0, "bme280_set_sensor_mode warning or failure");
 8003458:	2800      	cmp	r0, #0
 800345a:	d128      	bne.n	80034ae <loopThp+0x76>
        HAL_Delay(thpDrv.sampleDelayms);
 800345c:	4c19      	ldr	r4, [pc, #100]	; (80034c4 <loopThp+0x8c>)
 800345e:	6860      	ldr	r0, [r4, #4]
 8003460:	f001 fe1e 	bl	80050a0 <HAL_Delay>
        rslt = bme280_get_sensor_data(BME280_ALL, &data2, &thpDrv.dev);
 8003464:	0022      	movs	r2, r4
 8003466:	3208      	adds	r2, #8
 8003468:	a903      	add	r1, sp, #12
 800346a:	2007      	movs	r0, #7
 800346c:	f7fe fe6e 	bl	800214c <bme280_get_sensor_data>
        softAssert(rslt == 0, "bme280_get_sensor_data warning or failure");
 8003470:	2800      	cmp	r0, #0
 8003472:	d120      	bne.n	80034b6 <loopThp+0x7e>
        thpDrv.temperature = (float) data2.temperature / 100;
 8003474:	9b04      	ldr	r3, [sp, #16]
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f7fd fa51 	bl	8000920 <__aeabi_i2f>
 800347e:	4912      	ldr	r1, [pc, #72]	; (80034c8 <loopThp+0x90>)
 8003480:	f7fd f936 	bl	80006f0 <__aeabi_fdiv>
 8003484:	4c0f      	ldr	r4, [pc, #60]	; (80034c4 <loopThp+0x8c>)
 8003486:	6520      	str	r0, [r4, #80]	; 0x50
        thpDrv.humidity    = (float) data2.humidity    / 1000;
 8003488:	9805      	ldr	r0, [sp, #20]
 800348a:	f7fd fa97 	bl	80009bc <__aeabi_ui2f>
 800348e:	490f      	ldr	r1, [pc, #60]	; (80034cc <loopThp+0x94>)
 8003490:	f7fd f92e 	bl	80006f0 <__aeabi_fdiv>
 8003494:	65a0      	str	r0, [r4, #88]	; 0x58
        thpDrv.pressure    = (float) data2.pressure    / 100;
 8003496:	9803      	ldr	r0, [sp, #12]
 8003498:	f7fd fa90 	bl	80009bc <__aeabi_ui2f>
 800349c:	490a      	ldr	r1, [pc, #40]	; (80034c8 <loopThp+0x90>)
 800349e:	f7fd f927 	bl	80006f0 <__aeabi_fdiv>
 80034a2:	6560      	str	r0, [r4, #84]	; 0x54
        publishFieldsIfBelowBandwidth(0, 2);
 80034a4:	2102      	movs	r1, #2
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd ffea 	bl	8001480 <publishFieldsIfBelowBandwidth>
}
 80034ac:	e7cb      	b.n	8003446 <loopThp+0xe>
        softAssert(rslt == 0, "bme280_set_sensor_mode warning or failure");
 80034ae:	4808      	ldr	r0, [pc, #32]	; (80034d0 <loopThp+0x98>)
 80034b0:	f7fd fc80 	bl	8000db4 <softAssertTmp>
 80034b4:	e7d2      	b.n	800345c <loopThp+0x24>
        softAssert(rslt == 0, "bme280_get_sensor_data warning or failure");
 80034b6:	4807      	ldr	r0, [pc, #28]	; (80034d4 <loopThp+0x9c>)
 80034b8:	f7fd fc7c 	bl	8000db4 <softAssertTmp>
 80034bc:	e7da      	b.n	8003474 <loopThp+0x3c>
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	20000a3c 	.word	0x20000a3c
 80034c4:	20000a40 	.word	0x20000a40
 80034c8:	42c80000 	.word	0x42c80000
 80034cc:	447a0000 	.word	0x447a0000
 80034d0:	08006efc 	.word	0x08006efc
 80034d4:	08006f28 	.word	0x08006f28

080034d8 <getRandomInt>:
    //     srand((uint32_t) time(NULL));
    // }
    // // Plus RAND_MAX/2 so that it rounds (rather than always rounding down)
    // // RAND_MAX +1 is optimisation - it should mean the divide becomes a bit shift
    // return (((rand() * max) + (RAND_MAX/2)) / ((uint32_t) RAND_MAX + 1));
}
 80034d8:	2001      	movs	r0, #1
 80034da:	4770      	bx	lr

080034dc <incrAndWrap>:
// append only touches the end pointer
// pop only touches the start pointer
// The buffer is empty if start == end

unsigned incrAndWrap(unsigned val, unsigned inc, unsigned max) {
    unsigned newVal = val + inc;
 80034dc:	1840      	adds	r0, r0, r1
    return ((newVal >= max) ? (newVal - max) : (newVal));
 80034de:	4290      	cmp	r0, r2
 80034e0:	d300      	bcc.n	80034e4 <incrAndWrap+0x8>
 80034e2:	1a80      	subs	r0, r0, r2
}
 80034e4:	4770      	bx	lr

080034e6 <decrAndWrap>:
int decrAndWrap(unsigned val, unsigned decr, unsigned max) {
    int newVal = val - decr;
 80034e6:	1a41      	subs	r1, r0, r1
 80034e8:	1e08      	subs	r0, r1, #0
    return ((newVal < 0) ? (newVal + max) : newVal);
 80034ea:	db00      	blt.n	80034ee <decrAndWrap+0x8>
}
 80034ec:	4770      	bx	lr
    return ((newVal < 0) ? (newVal + max) : newVal);
 80034ee:	1888      	adds	r0, r1, r2
 80034f0:	e7fc      	b.n	80034ec <decrAndWrap+0x6>

080034f2 <computeTransferIDForwardDistance>:
/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
    int16_t d = (int16_t)(a - b);
 80034f2:	1a40      	subs	r0, r0, r1
 80034f4:	b283      	uxth	r3, r0
    if (d < 0)
 80034f6:	2800      	cmp	r0, #0
 80034f8:	db00      	blt.n	80034fc <computeTransferIDForwardDistance+0xa>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
    }
    return d;
}
 80034fa:	4770      	bx	lr
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 80034fc:	3320      	adds	r3, #32
 80034fe:	b218      	sxth	r0, r3
 8003500:	e7fb      	b.n	80034fa <computeTransferIDForwardDistance+0x8>

08003502 <isPriorityHigher>:

/**
 * Returns true if priority of self is higher than other.
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t self, uint32_t other)
{
 8003502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003504:	0003      	movs	r3, r0
    const uint32_t self_clean_id = self & CANARD_CAN_EXT_ID_MASK;
 8003506:	00c5      	lsls	r5, r0, #3
 8003508:	08ed      	lsrs	r5, r5, #3
    const uint32_t other_clean_id = other & CANARD_CAN_EXT_ID_MASK;
 800350a:	00ca      	lsls	r2, r1, #3
 800350c:	08d2      	lsrs	r2, r2, #3

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool self_ext = (self & CANARD_CAN_FRAME_EFF) != 0;
 800350e:	0fc4      	lsrs	r4, r0, #31
    const bool other_ext = (other & CANARD_CAN_FRAME_EFF) != 0;
 8003510:	000e      	movs	r6, r1
 8003512:	0fc8      	lsrs	r0, r1, #31
    if (self_ext != other_ext)
 8003514:	4284      	cmp	r4, r0
 8003516:	d00d      	beq.n	8003534 <isPriorityHigher+0x32>
    {
        const uint32_t self_arb11 = self_ext ? (self_clean_id >> 18U) : self_clean_id;
 8003518:	2b00      	cmp	r3, #0
 800351a:	db07      	blt.n	800352c <isPriorityHigher+0x2a>
        const uint32_t other_arb11 = other_ext ? (other_clean_id >> 18U) : other_clean_id;
 800351c:	2e00      	cmp	r6, #0
 800351e:	db07      	blt.n	8003530 <isPriorityHigher+0x2e>
        if (self_arb11 != other_arb11)
 8003520:	4295      	cmp	r5, r2
 8003522:	d002      	beq.n	800352a <isPriorityHigher+0x28>
        {
            return self_arb11 < other_arb11;
 8003524:	4295      	cmp	r5, r2
 8003526:	4192      	sbcs	r2, r2
 8003528:	4250      	negs	r0, r2

    /*
     * Plain ID arbitration - greater value loses.
     */
    return self_clean_id < other_clean_id;
}
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t self_arb11 = self_ext ? (self_clean_id >> 18U) : self_clean_id;
 800352c:	0cad      	lsrs	r5, r5, #18
 800352e:	e7f5      	b.n	800351c <isPriorityHigher+0x1a>
        const uint32_t other_arb11 = other_ext ? (other_clean_id >> 18U) : other_clean_id;
 8003530:	0c92      	lsrs	r2, r2, #18
 8003532:	e7f5      	b.n	8003520 <isPriorityHigher+0x1e>
    const bool self_rtr = (self & CANARD_CAN_FRAME_RTR) != 0;
 8003534:	2080      	movs	r0, #128	; 0x80
 8003536:	05c0      	lsls	r0, r0, #23
 8003538:	4003      	ands	r3, r0
 800353a:	1e5c      	subs	r4, r3, #1
 800353c:	41a3      	sbcs	r3, r4
 800353e:	b2db      	uxtb	r3, r3
    const bool other_rtr = (other & CANARD_CAN_FRAME_RTR) != 0;
 8003540:	4001      	ands	r1, r0
 8003542:	1e48      	subs	r0, r1, #1
 8003544:	4181      	sbcs	r1, r0
 8003546:	b2c8      	uxtb	r0, r1
    if (self_clean_id == other_clean_id && self_rtr != other_rtr)
 8003548:	4295      	cmp	r5, r2
 800354a:	d003      	beq.n	8003554 <isPriorityHigher+0x52>
    return self_clean_id < other_clean_id;
 800354c:	4295      	cmp	r5, r2
 800354e:	4192      	sbcs	r2, r2
 8003550:	4250      	negs	r0, r2
 8003552:	e7ea      	b.n	800352a <isPriorityHigher+0x28>
    if (self_clean_id == other_clean_id && self_rtr != other_rtr)
 8003554:	4283      	cmp	r3, r0
 8003556:	d1e8      	bne.n	800352a <isPriorityHigher+0x28>
 8003558:	e7f8      	b.n	800354c <isPriorityHigher+0x4a>

0800355a <extractTransferType>:
 * returns transfer type from id
 */
CANARD_INTERNAL CanardTransferType extractTransferType(uint32_t id)
{
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
    if (!is_service)
 800355a:	0603      	lsls	r3, r0, #24
 800355c:	d503      	bpl.n	8003566 <extractTransferType+0xc>
    {
        return CanardTransferTypeBroadcast;
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 800355e:	0403      	lsls	r3, r0, #16
 8003560:	d503      	bpl.n	800356a <extractTransferType+0x10>
    {
        return CanardTransferTypeRequest;
 8003562:	2001      	movs	r0, #1
    }
    else
    {
        return CanardTransferTypeResponse;
    }
}
 8003564:	4770      	bx	lr
        return CanardTransferTypeBroadcast;
 8003566:	2002      	movs	r0, #2
 8003568:	e7fc      	b.n	8003564 <extractTransferType+0xa>
        return CanardTransferTypeResponse;
 800356a:	2000      	movs	r0, #0
 800356c:	e7fa      	b.n	8003564 <extractTransferType+0xa>

0800356e <extractDataType>:
{
 800356e:	b510      	push	{r4, lr}
 8003570:	0004      	movs	r4, r0
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8003572:	f7ff fff2 	bl	800355a <extractTransferType>
 8003576:	2802      	cmp	r0, #2
 8003578:	d002      	beq.n	8003580 <extractDataType+0x12>
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 800357a:	0c24      	lsrs	r4, r4, #16
 800357c:	b2e0      	uxtb	r0, r4
}
 800357e:	bd10      	pop	{r4, pc}
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8003580:	0a20      	lsrs	r0, r4, #8
 8003582:	b280      	uxth	r0, r0
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8003584:	0663      	lsls	r3, r4, #25
 8003586:	d1fa      	bne.n	800357e <extractDataType+0x10>
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8003588:	2303      	movs	r3, #3
 800358a:	4018      	ands	r0, r3
        return dtid;
 800358c:	e7f7      	b.n	800357e <extractDataType+0x10>

0800358e <findRxState>:
/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardRxState* state, uint32_t transfer_descriptor)
{
    while (state != NULL)
 800358e:	e000      	b.n	8003592 <findRxState+0x4>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
        {
            return state;
        }
        state = state->next;
 8003590:	6800      	ldr	r0, [r0, #0]
    while (state != NULL)
 8003592:	2800      	cmp	r0, #0
 8003594:	d002      	beq.n	800359c <findRxState+0xe>
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8003596:	6903      	ldr	r3, [r0, #16]
 8003598:	428b      	cmp	r3, r1
 800359a:	d1f9      	bne.n	8003590 <findRxState+0x2>
    }
    return NULL;
}
 800359c:	4770      	bx	lr

0800359e <isBigEndian>:
        uint8_t b[2];
    } u;
    u.a = 1;
    return u.b[1] == 1;                             // Some don't...
#endif
}
 800359e:	2000      	movs	r0, #0
 80035a0:	4770      	bx	lr
	...

080035a4 <crcAddByte>:
/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80035a4:	0209      	lsls	r1, r1, #8
 80035a6:	4048      	eors	r0, r1
    for (uint8_t j = 0; j < 8; j++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	e003      	b.n	80035b4 <crcAddByte+0x10>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 80035ac:	0040      	lsls	r0, r0, #1
 80035ae:	b280      	uxth	r0, r0
    for (uint8_t j = 0; j < 8; j++)
 80035b0:	3301      	adds	r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	d807      	bhi.n	80035c8 <crcAddByte+0x24>
        if (crc_val & 0x8000U)
 80035b8:	b202      	sxth	r2, r0
 80035ba:	2a00      	cmp	r2, #0
 80035bc:	daf6      	bge.n	80035ac <crcAddByte+0x8>
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 80035be:	0040      	lsls	r0, r0, #1
 80035c0:	b281      	uxth	r1, r0
 80035c2:	4802      	ldr	r0, [pc, #8]	; (80035cc <crcAddByte+0x28>)
 80035c4:	4048      	eors	r0, r1
 80035c6:	e7f3      	b.n	80035b0 <crcAddByte+0xc>
        }
    }
    return crc_val;
}
 80035c8:	4770      	bx	lr
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	00001021 	.word	0x00001021

080035d0 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	0016      	movs	r6, r2
 80035d4:	001d      	movs	r5, r3
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80035d6:	2400      	movs	r4, #0
 80035d8:	e00b      	b.n	80035f2 <crcAddSignature+0x22>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80035da:	2320      	movs	r3, #32
 80035dc:	1b1b      	subs	r3, r3, r4
 80035de:	002a      	movs	r2, r5
 80035e0:	409a      	lsls	r2, r3
 80035e2:	0031      	movs	r1, r6
 80035e4:	40e1      	lsrs	r1, r4
 80035e6:	4311      	orrs	r1, r2
 80035e8:	b2c9      	uxtb	r1, r1
 80035ea:	f7ff ffdb 	bl	80035a4 <crcAddByte>
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80035ee:	3408      	adds	r4, #8
 80035f0:	b2a4      	uxth	r4, r4
 80035f2:	2c3f      	cmp	r4, #63	; 0x3f
 80035f4:	d806      	bhi.n	8003604 <crcAddSignature+0x34>
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80035f6:	2320      	movs	r3, #32
 80035f8:	425b      	negs	r3, r3
 80035fa:	18e3      	adds	r3, r4, r3
 80035fc:	d4ed      	bmi.n	80035da <crcAddSignature+0xa>
 80035fe:	0029      	movs	r1, r5
 8003600:	40d9      	lsrs	r1, r3
 8003602:	e7f1      	b.n	80035e8 <crcAddSignature+0x18>
    }
    return crc_val;
}
 8003604:	bd70      	pop	{r4, r5, r6, pc}

08003606 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8003606:	b570      	push	{r4, r5, r6, lr}
    while (len--)
 8003608:	e005      	b.n	8003616 <crcAdd+0x10>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 800360a:	1c4d      	adds	r5, r1, #1
 800360c:	7809      	ldrb	r1, [r1, #0]
 800360e:	f7ff ffc9 	bl	80035a4 <crcAddByte>
    while (len--)
 8003612:	0022      	movs	r2, r4
        crc_val = crcAddByte(crc_val, *bytes++);
 8003614:	0029      	movs	r1, r5
    while (len--)
 8003616:	1e54      	subs	r4, r2, #1
 8003618:	2a00      	cmp	r2, #0
 800361a:	d1f6      	bne.n	800360a <crcAdd+0x4>
    }
    return crc_val;
}
 800361c:	bd70      	pop	{r4, r5, r6, pc}

0800361e <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       CanardPoolAllocatorBlock* buf,
                                       uint16_t buf_len)
{
 800361e:	b530      	push	{r4, r5, lr}
    size_t current_index = 0;
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8003620:	0005      	movs	r5, r0
    size_t current_index = 0;
 8003622:	2400      	movs	r4, #0
    while (current_index < buf_len)
 8003624:	e004      	b.n	8003630 <initPoolAllocator+0x12>
    {
        *current_block = &buf[current_index];
 8003626:	0163      	lsls	r3, r4, #5
 8003628:	18cb      	adds	r3, r1, r3
 800362a:	602b      	str	r3, [r5, #0]
        current_block = &((*current_block)->next);
 800362c:	001d      	movs	r5, r3
        current_index++;
 800362e:	3401      	adds	r4, #1
    while (current_index < buf_len)
 8003630:	42a2      	cmp	r2, r4
 8003632:	d8f8      	bhi.n	8003626 <initPoolAllocator+0x8>
    }
    *current_block = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	602b      	str	r3, [r5, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8003638:	8082      	strh	r2, [r0, #4]
    allocator->statistics.current_usage_blocks = 0;
 800363a:	80c3      	strh	r3, [r0, #6]
    allocator->statistics.peak_usage_blocks = 0;
 800363c:	8103      	strh	r3, [r0, #8]
}
 800363e:	bd30      	pop	{r4, r5, pc}

08003640 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8003640:	0003      	movs	r3, r0
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8003642:	6800      	ldr	r0, [r0, #0]
 8003644:	2800      	cmp	r0, #0
 8003646:	d009      	beq.n	800365c <allocateBlock+0x1c>
        return NULL;
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
    allocator->free_list = allocator->free_list->next;
 8003648:	6802      	ldr	r2, [r0, #0]
 800364a:	601a      	str	r2, [r3, #0]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 800364c:	88da      	ldrh	r2, [r3, #6]
 800364e:	3201      	adds	r2, #1
 8003650:	b292      	uxth	r2, r2
 8003652:	80da      	strh	r2, [r3, #6]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8003654:	8919      	ldrh	r1, [r3, #8]
 8003656:	428a      	cmp	r2, r1
 8003658:	d900      	bls.n	800365c <allocateBlock+0x1c>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 800365a:	811a      	strh	r2, [r3, #8]
    }

    return result;
}
 800365c:	4770      	bx	lr

0800365e <createBufferBlock>:
{
 800365e:	b510      	push	{r4, lr}
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8003660:	f7ff ffee 	bl	8003640 <allocateBlock>
    if (block == NULL)
 8003664:	2800      	cmp	r0, #0
 8003666:	d001      	beq.n	800366c <createBufferBlock+0xe>
    block->next = NULL;
 8003668:	2300      	movs	r3, #0
 800366a:	6003      	str	r3, [r0, #0]
}
 800366c:	bd10      	pop	{r4, pc}

0800366e <bufferBlockPushBytes>:
{
 800366e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003670:	46de      	mov	lr, fp
 8003672:	464f      	mov	r7, r9
 8003674:	4646      	mov	r6, r8
 8003676:	b5c0      	push	{r6, r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	4683      	mov	fp, r0
 800367c:	000e      	movs	r6, r1
 800367e:	0017      	movs	r7, r2
 8003680:	9300      	str	r3, [sp, #0]
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8003682:	8acb      	ldrh	r3, [r1, #22]
 8003684:	059b      	lsls	r3, r3, #22
 8003686:	0d9b      	lsrs	r3, r3, #22
 8003688:	2b06      	cmp	r3, #6
 800368a:	d02d      	beq.n	80036e8 <bufferBlockPushBytes+0x7a>
        for (uint16_t i = (uint16_t)state->payload_len;
 800368c:	0018      	movs	r0, r3
    uint16_t data_index = 0;
 800368e:	2400      	movs	r4, #0
        for (uint16_t i = (uint16_t)state->payload_len;
 8003690:	2b05      	cmp	r3, #5
 8003692:	d80b      	bhi.n	80036ac <bufferBlockPushBytes+0x3e>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8003694:	466a      	mov	r2, sp
 8003696:	8812      	ldrh	r2, [r2, #0]
 8003698:	42a2      	cmp	r2, r4
 800369a:	d907      	bls.n	80036ac <bufferBlockPushBytes+0x3e>
            state->buffer_head[i] = data[data_index];
 800369c:	5d39      	ldrb	r1, [r7, r4]
 800369e:	18f2      	adds	r2, r6, r3
 80036a0:	7691      	strb	r1, [r2, #26]
             i++, data_index++)
 80036a2:	3301      	adds	r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3401      	adds	r4, #1
 80036a8:	b2a4      	uxth	r4, r4
 80036aa:	e7f1      	b.n	8003690 <bufferBlockPushBytes+0x22>
        if (data_index >= data_len)
 80036ac:	466b      	mov	r3, sp
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d90f      	bls.n	80036d4 <bufferBlockPushBytes+0x66>
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 80036b4:	8af3      	ldrh	r3, [r6, #22]
 80036b6:	059b      	lsls	r3, r3, #22
 80036b8:	0d9b      	lsrs	r3, r3, #22
 80036ba:	4698      	mov	r8, r3
 80036bc:	1f98      	subs	r0, r3, #6
 80036be:	211c      	movs	r1, #28
 80036c0:	f7fc fdca 	bl	8000258 <__aeabi_uidivmod>
    uint16_t index_at_nth_block =
 80036c4:	b28b      	uxth	r3, r1
 80036c6:	9301      	str	r3, [sp, #4]
    if (state->buffer_blocks == NULL)
 80036c8:	6875      	ldr	r5, [r6, #4]
 80036ca:	2d00      	cmp	r5, #0
 80036cc:	d00e      	beq.n	80036ec <bufferBlockPushBytes+0x7e>
        uint16_t nth_block = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	4699      	mov	r9, r3
 80036d2:	e019      	b.n	8003708 <bufferBlockPushBytes+0x9a>
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80036d4:	181b      	adds	r3, r3, r0
            state->payload_len =
 80036d6:	059b      	lsls	r3, r3, #22
 80036d8:	0d9b      	lsrs	r3, r3, #22
 80036da:	8af2      	ldrh	r2, [r6, #22]
 80036dc:	0a92      	lsrs	r2, r2, #10
 80036de:	0292      	lsls	r2, r2, #10
 80036e0:	4313      	orrs	r3, r2
 80036e2:	82f3      	strh	r3, [r6, #22]
            return 1;
 80036e4:	2001      	movs	r0, #1
 80036e6:	e050      	b.n	800378a <bufferBlockPushBytes+0x11c>
    uint16_t data_index = 0;
 80036e8:	2400      	movs	r4, #0
 80036ea:	e7e3      	b.n	80036b4 <bufferBlockPushBytes+0x46>
        state->buffer_blocks = createBufferBlock(allocator);
 80036ec:	4658      	mov	r0, fp
 80036ee:	f7ff ffb6 	bl	800365e <createBufferBlock>
 80036f2:	1e05      	subs	r5, r0, #0
 80036f4:	6070      	str	r0, [r6, #4]
        if (state->buffer_blocks == NULL)
 80036f6:	d04e      	beq.n	8003796 <bufferBlockPushBytes+0x128>
        index_at_nth_block = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	e02a      	b.n	8003754 <bufferBlockPushBytes+0xe6>
            nth_block++;
 80036fe:	464a      	mov	r2, r9
 8003700:	3201      	adds	r2, #1
 8003702:	b292      	uxth	r2, r2
 8003704:	4691      	mov	r9, r2
            block = block->next;
 8003706:	001d      	movs	r5, r3
        while (block->next != NULL)
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f7      	bne.n	80036fe <bufferBlockPushBytes+0x90>
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 800370e:	9800      	ldr	r0, [sp, #0]
 8003710:	4440      	add	r0, r8
 8003712:	3806      	subs	r0, #6
 8003714:	211c      	movs	r1, #28
 8003716:	f7fc fd19 	bl	800014c <__udivsi3>
 800371a:	b283      	uxth	r3, r0
        const uint16_t num_buffer_blocks =
 800371c:	3301      	adds	r3, #1
 800371e:	b29b      	uxth	r3, r3
        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8003720:	4599      	cmp	r9, r3
 8003722:	d217      	bcs.n	8003754 <bufferBlockPushBytes+0xe6>
 8003724:	9b01      	ldr	r3, [sp, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d114      	bne.n	8003754 <bufferBlockPushBytes+0xe6>
            block->next = createBufferBlock(allocator);
 800372a:	4658      	mov	r0, fp
 800372c:	f7ff ff97 	bl	800365e <createBufferBlock>
 8003730:	6028      	str	r0, [r5, #0]
            if (block->next == NULL)
 8003732:	2800      	cmp	r0, #0
 8003734:	d032      	beq.n	800379c <bufferBlockPushBytes+0x12e>
            block = block->next;
 8003736:	0005      	movs	r5, r0
 8003738:	e00c      	b.n	8003754 <bufferBlockPushBytes+0xe6>
            block->data[i] = data[data_index];
 800373a:	5d39      	ldrb	r1, [r7, r4]
 800373c:	18ea      	adds	r2, r5, r3
 800373e:	7111      	strb	r1, [r2, #4]
             i++, data_index++)
 8003740:	3301      	adds	r3, #1
 8003742:	b29b      	uxth	r3, r3
 8003744:	3401      	adds	r4, #1
 8003746:	b2a4      	uxth	r4, r4
        for (uint16_t i = index_at_nth_block;
 8003748:	2b1b      	cmp	r3, #27
 800374a:	d801      	bhi.n	8003750 <bufferBlockPushBytes+0xe2>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800374c:	42a0      	cmp	r0, r4
 800374e:	d8f4      	bhi.n	800373a <bufferBlockPushBytes+0xcc>
        if (data_index < data_len)
 8003750:	42a0      	cmp	r0, r4
 8003752:	d805      	bhi.n	8003760 <bufferBlockPushBytes+0xf2>
    while (data_index < data_len)
 8003754:	466b      	mov	r3, sp
 8003756:	8818      	ldrh	r0, [r3, #0]
 8003758:	42a0      	cmp	r0, r4
 800375a:	d90b      	bls.n	8003774 <bufferBlockPushBytes+0x106>
        for (uint16_t i = index_at_nth_block;
 800375c:	9b01      	ldr	r3, [sp, #4]
 800375e:	e7f3      	b.n	8003748 <bufferBlockPushBytes+0xda>
            block->next = createBufferBlock(allocator);
 8003760:	4658      	mov	r0, fp
 8003762:	f7ff ff7c 	bl	800365e <createBufferBlock>
 8003766:	6028      	str	r0, [r5, #0]
            if (block->next == NULL)
 8003768:	2800      	cmp	r0, #0
 800376a:	d01a      	beq.n	80037a2 <bufferBlockPushBytes+0x134>
            block = block->next;
 800376c:	0005      	movs	r5, r0
            index_at_nth_block = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	e7ef      	b.n	8003754 <bufferBlockPushBytes+0xe6>
    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8003774:	8af2      	ldrh	r2, [r6, #22]
 8003776:	0593      	lsls	r3, r2, #22
 8003778:	0d9b      	lsrs	r3, r3, #22
 800377a:	18c3      	adds	r3, r0, r3
 800377c:	059b      	lsls	r3, r3, #22
 800377e:	0d9b      	lsrs	r3, r3, #22
 8003780:	0a92      	lsrs	r2, r2, #10
 8003782:	0292      	lsls	r2, r2, #10
 8003784:	4313      	orrs	r3, r2
 8003786:	82f3      	strh	r3, [r6, #22]
    return 1;
 8003788:	2001      	movs	r0, #1
}
 800378a:	b002      	add	sp, #8
 800378c:	bce0      	pop	{r5, r6, r7}
 800378e:	46bb      	mov	fp, r7
 8003790:	46b1      	mov	r9, r6
 8003792:	46a8      	mov	r8, r5
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003796:	2003      	movs	r0, #3
 8003798:	4240      	negs	r0, r0
 800379a:	e7f6      	b.n	800378a <bufferBlockPushBytes+0x11c>
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800379c:	2003      	movs	r0, #3
 800379e:	4240      	negs	r0, r0
 80037a0:	e7f3      	b.n	800378a <bufferBlockPushBytes+0x11c>
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80037a2:	2003      	movs	r0, #3
 80037a4:	4240      	negs	r0, r0
 80037a6:	e7f0      	b.n	800378a <bufferBlockPushBytes+0x11c>

080037a8 <pushTxQueue>:
{
 80037a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037aa:	b083      	sub	sp, #12
 80037ac:	0007      	movs	r7, r0
 80037ae:	000e      	movs	r6, r1
    CANARD_ASSERT(ins != NULL);
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d015      	beq.n	80037e0 <pushTxQueue+0x38>
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 80037b4:	7c33      	ldrb	r3, [r6, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <pushTxQueue+0x40>
    if (ins->tx_queue == NULL)
 80037ba:	69fd      	ldr	r5, [r7, #28]
 80037bc:	2d00      	cmp	r5, #0
 80037be:	d017      	beq.n	80037f0 <pushTxQueue+0x48>
    CanardTxQueueItem* previous = ins->tx_queue;
 80037c0:	9501      	str	r5, [sp, #4]
    CanardTxQueueItem* queue = ins->tx_queue;
 80037c2:	002c      	movs	r4, r5
    while (queue != NULL)
 80037c4:	2c00      	cmp	r4, #0
 80037c6:	d01f      	beq.n	8003808 <pushTxQueue+0x60>
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 80037c8:	6871      	ldr	r1, [r6, #4]
 80037ca:	6860      	ldr	r0, [r4, #4]
 80037cc:	f7ff fe99 	bl	8003502 <isPriorityHigher>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d10f      	bne.n	80037f4 <pushTxQueue+0x4c>
            if (queue->next == NULL)
 80037d4:	6823      	ldr	r3, [r4, #0]
                previous = queue;
 80037d6:	9401      	str	r4, [sp, #4]
            if (queue->next == NULL)
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d014      	beq.n	8003806 <pushTxQueue+0x5e>
                queue = queue->next;
 80037dc:	001c      	movs	r4, r3
 80037de:	e7f1      	b.n	80037c4 <pushTxQueue+0x1c>
    CANARD_ASSERT(ins != NULL);
 80037e0:	480a      	ldr	r0, [pc, #40]	; (800380c <pushTxQueue+0x64>)
 80037e2:	f7fd fb09 	bl	8000df8 <hardAssertTmp>
 80037e6:	e7e5      	b.n	80037b4 <pushTxQueue+0xc>
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 80037e8:	4808      	ldr	r0, [pc, #32]	; (800380c <pushTxQueue+0x64>)
 80037ea:	f7fd fb05 	bl	8000df8 <hardAssertTmp>
 80037ee:	e7e4      	b.n	80037ba <pushTxQueue+0x12>
        ins->tx_queue = item;
 80037f0:	61fe      	str	r6, [r7, #28]
        return;
 80037f2:	e009      	b.n	8003808 <pushTxQueue+0x60>
            if (queue == ins->tx_queue)
 80037f4:	42a5      	cmp	r5, r4
 80037f6:	d003      	beq.n	8003800 <pushTxQueue+0x58>
                previous->next = item;
 80037f8:	9b01      	ldr	r3, [sp, #4]
 80037fa:	601e      	str	r6, [r3, #0]
                item->next = queue;
 80037fc:	6034      	str	r4, [r6, #0]
            return;
 80037fe:	e003      	b.n	8003808 <pushTxQueue+0x60>
                item->next = queue;
 8003800:	6034      	str	r4, [r6, #0]
                ins->tx_queue = item;
 8003802:	61fe      	str	r6, [r7, #28]
 8003804:	e000      	b.n	8003808 <pushTxQueue+0x60>
                queue->next = item;
 8003806:	6026      	str	r6, [r4, #0]
}
 8003808:	b003      	add	sp, #12
 800380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800380c:	08006fd4 	.word	0x08006fd4

08003810 <incrementTransferID>:
{
 8003810:	b510      	push	{r4, lr}
 8003812:	1e04      	subs	r4, r0, #0
    CANARD_ASSERT(transfer_id != NULL);
 8003814:	d008      	beq.n	8003828 <incrementTransferID+0x18>
    (*transfer_id)++;
 8003816:	7823      	ldrb	r3, [r4, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	7023      	strb	r3, [r4, #0]
    if (*transfer_id >= 32)
 800381e:	2b1f      	cmp	r3, #31
 8003820:	d901      	bls.n	8003826 <incrementTransferID+0x16>
        *transfer_id = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	7023      	strb	r3, [r4, #0]
}
 8003826:	bd10      	pop	{r4, pc}
    CANARD_ASSERT(transfer_id != NULL);
 8003828:	4801      	ldr	r0, [pc, #4]	; (8003830 <incrementTransferID+0x20>)
 800382a:	f7fd fae5 	bl	8000df8 <hardAssertTmp>
 800382e:	e7f2      	b.n	8003816 <incrementTransferID+0x6>
 8003830:	08006fd4 	.word	0x08006fd4

08003834 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8003834:	b510      	push	{r4, lr}
 8003836:	0004      	movs	r4, r0
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;

    block->next = allocator->free_list;
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	600b      	str	r3, [r1, #0]
    allocator->free_list = block;
 800383c:	6001      	str	r1, [r0, #0]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 800383e:	88c3      	ldrh	r3, [r0, #6]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <freeBlock+0x18>
    allocator->statistics.current_usage_blocks--;
 8003844:	88e3      	ldrh	r3, [r4, #6]
 8003846:	3b01      	subs	r3, #1
 8003848:	80e3      	strh	r3, [r4, #6]
}
 800384a:	bd10      	pop	{r4, pc}
    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 800384c:	4801      	ldr	r0, [pc, #4]	; (8003854 <freeBlock+0x20>)
 800384e:	f7fd fad3 	bl	8000df8 <hardAssertTmp>
 8003852:	e7f7      	b.n	8003844 <freeBlock+0x10>
 8003854:	08006fd4 	.word	0x08006fd4

08003858 <releaseStatePayload>:
{
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	0006      	movs	r6, r0
 800385c:	000c      	movs	r4, r1
    while (rxstate->buffer_blocks != NULL)
 800385e:	e005      	b.n	800386c <releaseStatePayload+0x14>
        CanardBufferBlock* const temp = rxstate->buffer_blocks->next;
 8003860:	680d      	ldr	r5, [r1, #0]
        freeBlock(&ins->allocator, rxstate->buffer_blocks);
 8003862:	0030      	movs	r0, r6
 8003864:	300c      	adds	r0, #12
 8003866:	f7ff ffe5 	bl	8003834 <freeBlock>
        rxstate->buffer_blocks = temp;
 800386a:	6065      	str	r5, [r4, #4]
    while (rxstate->buffer_blocks != NULL)
 800386c:	6861      	ldr	r1, [r4, #4]
 800386e:	2900      	cmp	r1, #0
 8003870:	d1f6      	bne.n	8003860 <releaseStatePayload+0x8>
    rxstate->payload_len = 0;
 8003872:	8ae3      	ldrh	r3, [r4, #22]
 8003874:	0a9b      	lsrs	r3, r3, #10
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	82e3      	strh	r3, [r4, #22]
}
 800387a:	2000      	movs	r0, #0
 800387c:	2100      	movs	r1, #0
 800387e:	bd70      	pop	{r4, r5, r6, pc}

08003880 <prepareForNextTransfer>:
{
 8003880:	b510      	push	{r4, lr}
 8003882:	0004      	movs	r4, r0
    CANARD_ASSERT(state->buffer_blocks == NULL);
 8003884:	6843      	ldr	r3, [r0, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <prepareForNextTransfer+0x10>
 800388a:	480b      	ldr	r0, [pc, #44]	; (80038b8 <prepareForNextTransfer+0x38>)
 800388c:	f7fd fab4 	bl	8000df8 <hardAssertTmp>
    state->transfer_id++;
 8003890:	7de3      	ldrb	r3, [r4, #23]
 8003892:	0659      	lsls	r1, r3, #25
 8003894:	0ec9      	lsrs	r1, r1, #27
 8003896:	3101      	adds	r1, #1
 8003898:	221f      	movs	r2, #31
 800389a:	400a      	ands	r2, r1
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	217c      	movs	r1, #124	; 0x7c
 80038a0:	438b      	bics	r3, r1
 80038a2:	4313      	orrs	r3, r2
 80038a4:	75e3      	strb	r3, [r4, #23]
    state->payload_len = 0;
 80038a6:	8ae3      	ldrh	r3, [r4, #22]
 80038a8:	0a9b      	lsrs	r3, r3, #10
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	82e3      	strh	r3, [r4, #22]
    state->next_toggle = 0;
 80038ae:	7de2      	ldrb	r2, [r4, #23]
 80038b0:	237f      	movs	r3, #127	; 0x7f
 80038b2:	4013      	ands	r3, r2
 80038b4:	75e3      	strb	r3, [r4, #23]
}
 80038b6:	bd10      	pop	{r4, pc}
 80038b8:	08006fd4 	.word	0x08006fd4

080038bc <copyBitArray>:
{
 80038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038be:	46de      	mov	lr, fp
 80038c0:	4657      	mov	r7, sl
 80038c2:	464e      	mov	r6, r9
 80038c4:	4645      	mov	r5, r8
 80038c6:	b5e0      	push	{r5, r6, r7, lr}
 80038c8:	b083      	sub	sp, #12
 80038ca:	4683      	mov	fp, r0
 80038cc:	000d      	movs	r5, r1
 80038ce:	0014      	movs	r4, r2
 80038d0:	001e      	movs	r6, r3
    CANARD_ASSERT(src_len > 0U);
 80038d2:	2a00      	cmp	r2, #0
 80038d4:	d00b      	beq.n	80038ee <copyBitArray+0x32>
    src += src_offset / 8U;
 80038d6:	08eb      	lsrs	r3, r5, #3
 80038d8:	469c      	mov	ip, r3
    dst += dst_offset / 8U;
 80038da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	18f6      	adds	r6, r6, r3
    src_offset %= 8U;
 80038e0:	2307      	movs	r3, #7
 80038e2:	0028      	movs	r0, r5
 80038e4:	4018      	ands	r0, r3
    dst_offset %= 8U;
 80038e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038e8:	401d      	ands	r5, r3
    const size_t last_bit = src_offset + src_len;
 80038ea:	1824      	adds	r4, r4, r0
    while (last_bit - src_offset)
 80038ec:	e01e      	b.n	800392c <copyBitArray+0x70>
    CANARD_ASSERT(src_len > 0U);
 80038ee:	481c      	ldr	r0, [pc, #112]	; (8003960 <copyBitArray+0xa4>)
 80038f0:	f7fd fa82 	bl	8000df8 <hardAssertTmp>
 80038f4:	e7ef      	b.n	80038d6 <copyBitArray+0x1a>
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80038f6:	23ff      	movs	r3, #255	; 0xff
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	40cb      	lsrs	r3, r1
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	401a      	ands	r2, r3
 8003900:	413a      	asrs	r2, r7
 8003902:	9201      	str	r2, [sp, #4]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8003904:	08c3      	lsrs	r3, r0, #3
 8003906:	46da      	mov	sl, fp
 8003908:	44e2      	add	sl, ip
 800390a:	4652      	mov	r2, sl
 800390c:	5cd3      	ldrb	r3, [r2, r3]
 800390e:	464a      	mov	r2, r9
 8003910:	4093      	lsls	r3, r2
 8003912:	40fb      	lsrs	r3, r7
 8003914:	b2db      	uxtb	r3, r3
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8003916:	08ef      	lsrs	r7, r5, #3
 8003918:	5df2      	ldrb	r2, [r6, r7]
 800391a:	4690      	mov	r8, r2
 800391c:	4053      	eors	r3, r2
 800391e:	9a01      	ldr	r2, [sp, #4]
 8003920:	401a      	ands	r2, r3
 8003922:	4643      	mov	r3, r8
 8003924:	405a      	eors	r2, r3
        dst[dst_offset / 8U] =
 8003926:	55f2      	strb	r2, [r6, r7]
        src_offset += copy_bits;
 8003928:	1840      	adds	r0, r0, r1
        dst_offset += copy_bits;
 800392a:	186d      	adds	r5, r5, r1
    while (last_bit - src_offset)
 800392c:	42a0      	cmp	r0, r4
 800392e:	d010      	beq.n	8003952 <copyBitArray+0x96>
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8003930:	2707      	movs	r7, #7
 8003932:	0003      	movs	r3, r0
 8003934:	403b      	ands	r3, r7
 8003936:	4699      	mov	r9, r3
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8003938:	402f      	ands	r7, r5
        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 800393a:	1c19      	adds	r1, r3, #0
 800393c:	42bb      	cmp	r3, r7
 800393e:	d200      	bcs.n	8003942 <copyBitArray+0x86>
 8003940:	1c39      	adds	r1, r7, #0
 8003942:	b2c9      	uxtb	r1, r1
        const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
 8003944:	1a23      	subs	r3, r4, r0
 8003946:	2208      	movs	r2, #8
 8003948:	1a51      	subs	r1, r2, r1
 800394a:	4299      	cmp	r1, r3
 800394c:	d9d3      	bls.n	80038f6 <copyBitArray+0x3a>
 800394e:	0019      	movs	r1, r3
 8003950:	e7d1      	b.n	80038f6 <copyBitArray+0x3a>
}
 8003952:	b003      	add	sp, #12
 8003954:	bcf0      	pop	{r4, r5, r6, r7}
 8003956:	46bb      	mov	fp, r7
 8003958:	46b2      	mov	sl, r6
 800395a:	46a9      	mov	r9, r5
 800395c:	46a0      	mov	r8, r4
 800395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003960:	08006fd4 	.word	0x08006fd4

08003964 <descatterTransferPayload>:
{
 8003964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003966:	46de      	mov	lr, fp
 8003968:	4657      	mov	r7, sl
 800396a:	464e      	mov	r6, r9
 800396c:	4645      	mov	r5, r8
 800396e:	b5e0      	push	{r5, r6, r7, lr}
 8003970:	b087      	sub	sp, #28
 8003972:	4683      	mov	fp, r0
 8003974:	000d      	movs	r5, r1
 8003976:	9203      	str	r2, [sp, #12]
 8003978:	9304      	str	r3, [sp, #16]
    CANARD_ASSERT(transfer != 0);
 800397a:	2800      	cmp	r0, #0
 800397c:	d041      	beq.n	8003a02 <descatterTransferPayload+0x9e>
    if (bit_offset >= transfer->payload_len * 8)
 800397e:	465b      	mov	r3, fp
 8003980:	8a9b      	ldrh	r3, [r3, #20]
 8003982:	00da      	lsls	r2, r3, #3
 8003984:	42aa      	cmp	r2, r5
 8003986:	d800      	bhi.n	800398a <descatterTransferPayload+0x26>
 8003988:	e0e5      	b.n	8003b56 <descatterTransferPayload+0x1f2>
    if (bit_offset + bit_length > transfer->payload_len * 8)
 800398a:	9903      	ldr	r1, [sp, #12]
 800398c:	1949      	adds	r1, r1, r5
 800398e:	428a      	cmp	r2, r1
 8003990:	d204      	bcs.n	800399c <descatterTransferPayload+0x38>
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	b2eb      	uxtb	r3, r5
 8003996:	1ad2      	subs	r2, r2, r3
 8003998:	b2d3      	uxtb	r3, r2
 800399a:	9303      	str	r3, [sp, #12]
    CANARD_ASSERT(bit_length > 0);
 800399c:	9b03      	ldr	r3, [sp, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d033      	beq.n	8003a0a <descatterTransferPayload+0xa6>
    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80039a2:	465b      	mov	r3, fp
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d033      	beq.n	8003a12 <descatterTransferPayload+0xae>
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80039aa:	2d2f      	cmp	r5, #47	; 0x2f
 80039ac:	d842      	bhi.n	8003a34 <descatterTransferPayload+0xd0>
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80039ae:	2330      	movs	r3, #48	; 0x30
 80039b0:	1b5b      	subs	r3, r3, r5
 80039b2:	9a03      	ldr	r2, [sp, #12]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d33a      	bcc.n	8003a2e <descatterTransferPayload+0xca>
 80039b8:	b2eb      	uxtb	r3, r5
 80039ba:	2230      	movs	r2, #48	; 0x30
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	9302      	str	r3, [sp, #8]
            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	9b04      	ldr	r3, [sp, #16]
 80039c8:	9c02      	ldr	r4, [sp, #8]
 80039ca:	0022      	movs	r2, r4
 80039cc:	0029      	movs	r1, r5
 80039ce:	4658      	mov	r0, fp
 80039d0:	6880      	ldr	r0, [r0, #8]
 80039d2:	f7ff ff73 	bl	80038bc <copyBitArray>
            input_bit_offset += amount;
 80039d6:	46a4      	mov	ip, r4
 80039d8:	4465      	add	r5, ip
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80039da:	9a03      	ldr	r2, [sp, #12]
 80039dc:	1b14      	subs	r4, r2, r4
 80039de:	b2e4      	uxtb	r4, r4
        uint32_t remaining_bits = transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80039e0:	465b      	mov	r3, fp
 80039e2:	8a9f      	ldrh	r7, [r3, #20]
 80039e4:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <descatterTransferPayload+0x1f8>)
 80039e6:	469c      	mov	ip, r3
 80039e8:	4467      	add	r7, ip
 80039ea:	00ff      	lsls	r7, r7, #3
        const CanardBufferBlock* block = transfer->payload_middle;
 80039ec:	465b      	mov	r3, fp
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	469a      	mov	sl, r3
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80039f2:	2330      	movs	r3, #48	; 0x30
 80039f4:	4699      	mov	r9, r3
 80039f6:	465b      	mov	r3, fp
 80039f8:	9305      	str	r3, [sp, #20]
 80039fa:	46a3      	mov	fp, r4
 80039fc:	464c      	mov	r4, r9
 80039fe:	46a8      	mov	r8, r5
        while ((block != NULL) && (remaining_bit_length > 0))
 8003a00:	e03e      	b.n	8003a80 <descatterTransferPayload+0x11c>
    CANARD_ASSERT(transfer != 0);
 8003a02:	4857      	ldr	r0, [pc, #348]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003a04:	f7fd f9f8 	bl	8000df8 <hardAssertTmp>
 8003a08:	e7b9      	b.n	800397e <descatterTransferPayload+0x1a>
    CANARD_ASSERT(bit_length > 0);
 8003a0a:	4855      	ldr	r0, [pc, #340]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003a0c:	f7fd f9f4 	bl	8000df8 <hardAssertTmp>
 8003a10:	e7c7      	b.n	80039a2 <descatterTransferPayload+0x3e>
    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8003a12:	465b      	mov	r3, fp
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1c7      	bne.n	80039aa <descatterTransferPayload+0x46>
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8003a1a:	465b      	mov	r3, fp
 8003a1c:	6898      	ldr	r0, [r3, #8]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	9a03      	ldr	r2, [sp, #12]
 8003a26:	0029      	movs	r1, r5
 8003a28:	f7ff ff48 	bl	80038bc <copyBitArray>
 8003a2c:	e075      	b.n	8003b1a <descatterTransferPayload+0x1b6>
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	9302      	str	r3, [sp, #8]
 8003a32:	e7c6      	b.n	80039c2 <descatterTransferPayload+0x5e>
        uint8_t remaining_bit_length = bit_length;
 8003a34:	9c03      	ldr	r4, [sp, #12]
        uint8_t output_bit_offset = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	9302      	str	r3, [sp, #8]
 8003a3a:	e7d1      	b.n	80039e0 <descatterTransferPayload+0x7c>
            CANARD_ASSERT(remaining_bits > 0);
 8003a3c:	4848      	ldr	r0, [pc, #288]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003a3e:	f7fd f9db 	bl	8000df8 <hardAssertTmp>
 8003a42:	e025      	b.n	8003a90 <descatterTransferPayload+0x12c>
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8003a44:	465e      	mov	r6, fp
                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003a46:	45a0      	cmp	r8, r4
 8003a48:	d335      	bcc.n	8003ab6 <descatterTransferPayload+0x152>
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8003a4a:	4643      	mov	r3, r8
 8003a4c:	1b19      	subs	r1, r3, r4
                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8003a4e:	4653      	mov	r3, sl
 8003a50:	1d18      	adds	r0, r3, #4
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	9b04      	ldr	r3, [sp, #16]
 8003a58:	0032      	movs	r2, r6
 8003a5a:	f7ff ff2f 	bl	80038bc <copyBitArray>
                input_bit_offset += amount;
 8003a5e:	44b0      	add	r8, r6
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8003a60:	9b02      	ldr	r3, [sp, #8]
 8003a62:	199b      	adds	r3, r3, r6
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	9302      	str	r3, [sp, #8]
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8003a68:	465b      	mov	r3, fp
 8003a6a:	1b9e      	subs	r6, r3, r6
 8003a6c:	b2f3      	uxtb	r3, r6
 8003a6e:	469b      	mov	fp, r3
            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
 8003a70:	42ac      	cmp	r4, r5
 8003a72:	d224      	bcs.n	8003abe <descatterTransferPayload+0x15a>
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8003a74:	464b      	mov	r3, r9
 8003a76:	1aff      	subs	r7, r7, r3
            block = block->next;
 8003a78:	4653      	mov	r3, sl
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	469a      	mov	sl, r3
            block_bit_offset = block_end_bit_offset;
 8003a7e:	002c      	movs	r4, r5
        while ((block != NULL) && (remaining_bit_length > 0))
 8003a80:	4653      	mov	r3, sl
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01f      	beq.n	8003ac6 <descatterTransferPayload+0x162>
 8003a86:	465b      	mov	r3, fp
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01c      	beq.n	8003ac6 <descatterTransferPayload+0x162>
            CANARD_ASSERT(remaining_bits > 0);
 8003a8c:	2f00      	cmp	r7, #0
 8003a8e:	d0d5      	beq.n	8003a3c <descatterTransferPayload+0xd8>
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8003a90:	46b9      	mov	r9, r7
 8003a92:	2fe0      	cmp	r7, #224	; 0xe0
 8003a94:	d901      	bls.n	8003a9a <descatterTransferPayload+0x136>
 8003a96:	23e0      	movs	r3, #224	; 0xe0
 8003a98:	4699      	mov	r9, r3
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	191d      	adds	r5, r3, r4
            if (block_end_bit_offset > input_bit_offset)
 8003a9e:	45a8      	cmp	r8, r5
 8003aa0:	d2e6      	bcs.n	8003a70 <descatterTransferPayload+0x10c>
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8003aa2:	4643      	mov	r3, r8
 8003aa4:	1aeb      	subs	r3, r5, r3
 8003aa6:	459b      	cmp	fp, r3
 8003aa8:	d3cc      	bcc.n	8003a44 <descatterTransferPayload+0xe0>
 8003aaa:	b2ee      	uxtb	r6, r5
 8003aac:	4643      	mov	r3, r8
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	1af6      	subs	r6, r6, r3
 8003ab2:	b2f6      	uxtb	r6, r6
 8003ab4:	e7c7      	b.n	8003a46 <descatterTransferPayload+0xe2>
                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003ab6:	482a      	ldr	r0, [pc, #168]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003ab8:	f7fd f99e 	bl	8000df8 <hardAssertTmp>
 8003abc:	e7c5      	b.n	8003a4a <descatterTransferPayload+0xe6>
            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
 8003abe:	4828      	ldr	r0, [pc, #160]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003ac0:	f7fd f99a 	bl	8000df8 <hardAssertTmp>
 8003ac4:	e7d6      	b.n	8003a74 <descatterTransferPayload+0x110>
        CANARD_ASSERT(remaining_bit_length <= remaining_bits);
 8003ac6:	46a1      	mov	r9, r4
 8003ac8:	465c      	mov	r4, fp
 8003aca:	9b05      	ldr	r3, [sp, #20]
 8003acc:	469b      	mov	fp, r3
 8003ace:	4645      	mov	r5, r8
 8003ad0:	0026      	movs	r6, r4
 8003ad2:	42bc      	cmp	r4, r7
 8003ad4:	d82b      	bhi.n	8003b2e <descatterTransferPayload+0x1ca>
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8003ad6:	465b      	mov	r3, fp
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <descatterTransferPayload+0x1a2>
 8003ade:	2c00      	cmp	r4, #0
 8003ae0:	d011      	beq.n	8003b06 <descatterTransferPayload+0x1a2>
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003ae2:	454d      	cmp	r5, r9
 8003ae4:	d327      	bcc.n	8003b36 <descatterTransferPayload+0x1d2>
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1ae9      	subs	r1, r5, r3
            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8003aea:	9f02      	ldr	r7, [sp, #8]
 8003aec:	9700      	str	r7, [sp, #0]
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	0032      	movs	r2, r6
 8003af2:	4658      	mov	r0, fp
 8003af4:	6900      	ldr	r0, [r0, #16]
 8003af6:	f7ff fee1 	bl	80038bc <copyBitArray>
            input_bit_offset += remaining_bit_length;
 8003afa:	19ad      	adds	r5, r5, r6
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8003afc:	46bc      	mov	ip, r7
 8003afe:	4464      	add	r4, ip
 8003b00:	b2e3      	uxtb	r3, r4
 8003b02:	9302      	str	r3, [sp, #8]
            remaining_bit_length = 0;
 8003b04:	2400      	movs	r4, #0
        CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
 8003b06:	465b      	mov	r3, fp
 8003b08:	8a9b      	ldrh	r3, [r3, #20]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	42ab      	cmp	r3, r5
 8003b0e:	d316      	bcc.n	8003b3e <descatterTransferPayload+0x1da>
        CANARD_ASSERT(output_bit_offset <= 64);
 8003b10:	9b02      	ldr	r3, [sp, #8]
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d817      	bhi.n	8003b46 <descatterTransferPayload+0x1e2>
        CANARD_ASSERT(remaining_bit_length == 0);
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d119      	bne.n	8003b4e <descatterTransferPayload+0x1ea>
    return bit_length;
 8003b1a:	466b      	mov	r3, sp
 8003b1c:	200c      	movs	r0, #12
 8003b1e:	5e18      	ldrsh	r0, [r3, r0]
}
 8003b20:	b007      	add	sp, #28
 8003b22:	bcf0      	pop	{r4, r5, r6, r7}
 8003b24:	46bb      	mov	fp, r7
 8003b26:	46b2      	mov	sl, r6
 8003b28:	46a9      	mov	r9, r5
 8003b2a:	46a0      	mov	r8, r4
 8003b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CANARD_ASSERT(remaining_bit_length <= remaining_bits);
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003b30:	f7fd f962 	bl	8000df8 <hardAssertTmp>
 8003b34:	e7cf      	b.n	8003ad6 <descatterTransferPayload+0x172>
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
 8003b36:	480a      	ldr	r0, [pc, #40]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003b38:	f7fd f95e 	bl	8000df8 <hardAssertTmp>
 8003b3c:	e7d3      	b.n	8003ae6 <descatterTransferPayload+0x182>
        CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
 8003b3e:	4808      	ldr	r0, [pc, #32]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003b40:	f7fd f95a 	bl	8000df8 <hardAssertTmp>
 8003b44:	e7e4      	b.n	8003b10 <descatterTransferPayload+0x1ac>
        CANARD_ASSERT(output_bit_offset <= 64);
 8003b46:	4806      	ldr	r0, [pc, #24]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003b48:	f7fd f956 	bl	8000df8 <hardAssertTmp>
 8003b4c:	e7e3      	b.n	8003b16 <descatterTransferPayload+0x1b2>
        CANARD_ASSERT(remaining_bit_length == 0);
 8003b4e:	4804      	ldr	r0, [pc, #16]	; (8003b60 <descatterTransferPayload+0x1fc>)
 8003b50:	f7fd f952 	bl	8000df8 <hardAssertTmp>
 8003b54:	e7e1      	b.n	8003b1a <descatterTransferPayload+0x1b6>
        return 0;       // Out of range, reading zero bits
 8003b56:	2000      	movs	r0, #0
 8003b58:	e7e2      	b.n	8003b20 <descatterTransferPayload+0x1bc>
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	1ffffffa 	.word	0x1ffffffa
 8003b60:	08006fd4 	.word	0x08006fd4

08003b64 <swapByteOrder>:
{
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	0005      	movs	r5, r0
 8003b68:	000c      	movs	r4, r1
    CANARD_ASSERT(data != NULL);
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d002      	beq.n	8003b74 <swapByteOrder+0x10>
    size_t rev = size - 1;
 8003b6e:	3c01      	subs	r4, #1
    size_t fwd = 0;
 8003b70:	2300      	movs	r3, #0
    while (fwd < rev)
 8003b72:	e009      	b.n	8003b88 <swapByteOrder+0x24>
    CANARD_ASSERT(data != NULL);
 8003b74:	4806      	ldr	r0, [pc, #24]	; (8003b90 <swapByteOrder+0x2c>)
 8003b76:	f7fd f93f 	bl	8000df8 <hardAssertTmp>
 8003b7a:	e7f8      	b.n	8003b6e <swapByteOrder+0xa>
        const uint8_t x = bytes[fwd];
 8003b7c:	5cea      	ldrb	r2, [r5, r3]
        bytes[fwd] = bytes[rev];
 8003b7e:	5d28      	ldrb	r0, [r5, r4]
 8003b80:	54e8      	strb	r0, [r5, r3]
        bytes[rev] = x;
 8003b82:	552a      	strb	r2, [r5, r4]
        fwd++;
 8003b84:	3301      	adds	r3, #1
        rev--;
 8003b86:	3c01      	subs	r4, #1
    while (fwd < rev)
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	d3f7      	bcc.n	8003b7c <swapByteOrder+0x18>
}
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	08006fd4 	.word	0x08006fd4

08003b94 <createTxItem>:
{
 8003b94:	b510      	push	{r4, lr}
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8003b96:	f7ff fd53 	bl	8003640 <allocateBlock>
 8003b9a:	1e04      	subs	r4, r0, #0
    if (item == NULL)
 8003b9c:	d003      	beq.n	8003ba6 <createTxItem+0x12>
    memset(item, 0, sizeof(*item));
 8003b9e:	2214      	movs	r2, #20
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f002 ff54 	bl	8006a4e <memset>
}
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	bd10      	pop	{r4, pc}
	...

08003bac <enqueueTxFrames>:
{
 8003bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bae:	46de      	mov	lr, fp
 8003bb0:	4657      	mov	r7, sl
 8003bb2:	464e      	mov	r6, r9
 8003bb4:	4645      	mov	r5, r8
 8003bb6:	b5e0      	push	{r5, r6, r7, lr}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	4682      	mov	sl, r0
 8003bbc:	468b      	mov	fp, r1
 8003bbe:	9200      	str	r2, [sp, #0]
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	ab0c      	add	r3, sp, #48	; 0x30
 8003bc4:	cb80      	ldmia	r3!, {r7}
 8003bc6:	881d      	ldrh	r5, [r3, #0]
    CANARD_ASSERT(ins != NULL);
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d016      	beq.n	8003bfa <enqueueTxFrames+0x4e>
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 8003bcc:	465b      	mov	r3, fp
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	455b      	cmp	r3, fp
 8003bd4:	d115      	bne.n	8003c02 <enqueueTxFrames+0x56>
    if (transfer_id == NULL)
 8003bd6:	9b00      	ldr	r3, [sp, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d100      	bne.n	8003bde <enqueueTxFrames+0x32>
 8003bdc:	e085      	b.n	8003cea <enqueueTxFrames+0x13e>
    if ((payload_len > 0) && (payload == NULL))
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	d002      	beq.n	8003be8 <enqueueTxFrames+0x3c>
 8003be2:	2f00      	cmp	r7, #0
 8003be4:	d100      	bne.n	8003be8 <enqueueTxFrames+0x3c>
 8003be6:	e084      	b.n	8003cf2 <enqueueTxFrames+0x146>
    if (payload_len < CANARD_CAN_FRAME_MAX_DATA_LEN)                        // Single frame transfer
 8003be8:	2d07      	cmp	r5, #7
 8003bea:	d90e      	bls.n	8003c0a <enqueueTxFrames+0x5e>
        uint8_t sot_eot = 0x80;
 8003bec:	2680      	movs	r6, #128	; 0x80
        uint8_t toggle = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	4698      	mov	r8, r3
        uint16_t data_index = 0;
 8003bf2:	2400      	movs	r4, #0
    int16_t result = 0;
 8003bf4:	46b1      	mov	r9, r6
 8003bf6:	001e      	movs	r6, r3
 8003bf8:	e05b      	b.n	8003cb2 <enqueueTxFrames+0x106>
    CANARD_ASSERT(ins != NULL);
 8003bfa:	4844      	ldr	r0, [pc, #272]	; (8003d0c <enqueueTxFrames+0x160>)
 8003bfc:	f7fd f8fc 	bl	8000df8 <hardAssertTmp>
 8003c00:	e7e4      	b.n	8003bcc <enqueueTxFrames+0x20>
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 8003c02:	4842      	ldr	r0, [pc, #264]	; (8003d0c <enqueueTxFrames+0x160>)
 8003c04:	f7fd f8f8 	bl	8000df8 <hardAssertTmp>
 8003c08:	e7e5      	b.n	8003bd6 <enqueueTxFrames+0x2a>
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	300c      	adds	r0, #12
 8003c0e:	f7ff ffc1 	bl	8003b94 <createTxItem>
 8003c12:	1e04      	subs	r4, r0, #0
        if (queue_item == NULL)
 8003c14:	d100      	bne.n	8003c18 <enqueueTxFrames+0x6c>
 8003c16:	e070      	b.n	8003cfa <enqueueTxFrames+0x14e>
        memcpy(queue_item->frame.data, payload, payload_len);
 8003c18:	3008      	adds	r0, #8
 8003c1a:	002a      	movs	r2, r5
 8003c1c:	0039      	movs	r1, r7
 8003c1e:	f002 ff0d 	bl	8006a3c <memcpy>
        queue_item->frame.data_len = (uint8_t)(payload_len + 1);
 8003c22:	1c6b      	adds	r3, r5, #1
 8003c24:	7423      	strb	r3, [r4, #16]
        queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 8003c26:	9b00      	ldr	r3, [sp, #0]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	231f      	movs	r3, #31
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	3b5f      	subs	r3, #95	; 0x5f
 8003c30:	4313      	orrs	r3, r2
 8003c32:	1965      	adds	r5, r4, r5
 8003c34:	722b      	strb	r3, [r5, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	0609      	lsls	r1, r1, #24
 8003c3a:	465b      	mov	r3, fp
 8003c3c:	4319      	orrs	r1, r3
 8003c3e:	6061      	str	r1, [r4, #4]
        pushTxQueue(ins, queue_item);
 8003c40:	0021      	movs	r1, r4
 8003c42:	4650      	mov	r0, sl
 8003c44:	f7ff fdb0 	bl	80037a8 <pushTxQueue>
        result++;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4699      	mov	r9, r3
 8003c4c:	e045      	b.n	8003cda <enqueueTxFrames+0x12e>
                i = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e006      	b.n	8003c60 <enqueueTxFrames+0xb4>
                queue_item->frame.data[i] = payload[data_index];
 8003c52:	5d38      	ldrb	r0, [r7, r4]
 8003c54:	18ca      	adds	r2, r1, r3
 8003c56:	7210      	strb	r0, [r2, #8]
            for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_index++)
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	3401      	adds	r4, #1
 8003c5e:	b2a4      	uxth	r4, r4
 8003c60:	2b06      	cmp	r3, #6
 8003c62:	d801      	bhi.n	8003c68 <enqueueTxFrames+0xbc>
 8003c64:	42ac      	cmp	r4, r5
 8003c66:	d3f4      	bcc.n	8003c52 <enqueueTxFrames+0xa6>
            sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 8003c68:	42ac      	cmp	r4, r5
 8003c6a:	d032      	beq.n	8003cd2 <enqueueTxFrames+0x126>
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer_id & 31U));
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	0152      	lsls	r2, r2, #5
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	4648      	mov	r0, r9
 8003c74:	4302      	orrs	r2, r0
 8003c76:	4694      	mov	ip, r2
 8003c78:	9800      	ldr	r0, [sp, #0]
 8003c7a:	7800      	ldrb	r0, [r0, #0]
 8003c7c:	4681      	mov	r9, r0
 8003c7e:	201f      	movs	r0, #31
 8003c80:	464a      	mov	r2, r9
 8003c82:	4010      	ands	r0, r2
 8003c84:	4662      	mov	r2, ip
 8003c86:	4302      	orrs	r2, r0
 8003c88:	18c8      	adds	r0, r1, r3
 8003c8a:	7202      	strb	r2, [r0, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	0612      	lsls	r2, r2, #24
 8003c90:	4658      	mov	r0, fp
 8003c92:	4302      	orrs	r2, r0
 8003c94:	604a      	str	r2, [r1, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8003c96:	3301      	adds	r3, #1
 8003c98:	740b      	strb	r3, [r1, #16]
            pushTxQueue(ins, queue_item);
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	f7ff fd84 	bl	80037a8 <pushTxQueue>
            result++;
 8003ca0:	3601      	adds	r6, #1
 8003ca2:	b236      	sxth	r6, r6
            toggle ^= 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	4053      	eors	r3, r2
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4698      	mov	r8, r3
            sot_eot = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	4699      	mov	r9, r3
        while (payload_len - data_index != 0)
 8003cb2:	42ac      	cmp	r4, r5
 8003cb4:	d010      	beq.n	8003cd8 <enqueueTxFrames+0x12c>
            queue_item = createTxItem(&ins->allocator);
 8003cb6:	4650      	mov	r0, sl
 8003cb8:	300c      	adds	r0, #12
 8003cba:	f7ff ff6b 	bl	8003b94 <createTxItem>
 8003cbe:	1e01      	subs	r1, r0, #0
            if (queue_item == NULL)
 8003cc0:	d01f      	beq.n	8003d02 <enqueueTxFrames+0x156>
            if (data_index == 0)
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	d1c3      	bne.n	8003c4e <enqueueTxFrames+0xa2>
                queue_item->frame.data[0] = (uint8_t) (crc);
 8003cc6:	9b01      	ldr	r3, [sp, #4]
 8003cc8:	7203      	strb	r3, [r0, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	7243      	strb	r3, [r0, #9]
                i = 2;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e7c6      	b.n	8003c60 <enqueueTxFrames+0xb4>
            sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	4691      	mov	r9, r2
 8003cd6:	e7c9      	b.n	8003c6c <enqueueTxFrames+0xc0>
 8003cd8:	46b1      	mov	r9, r6
}
 8003cda:	4648      	mov	r0, r9
 8003cdc:	b003      	add	sp, #12
 8003cde:	bcf0      	pop	{r4, r5, r6, r7}
 8003ce0:	46bb      	mov	fp, r7
 8003ce2:	46b2      	mov	sl, r6
 8003ce4:	46a9      	mov	r9, r5
 8003ce6:	46a0      	mov	r8, r4
 8003ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003cea:	2302      	movs	r3, #2
 8003cec:	425b      	negs	r3, r3
 8003cee:	4699      	mov	r9, r3
 8003cf0:	e7f3      	b.n	8003cda <enqueueTxFrames+0x12e>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	425b      	negs	r3, r3
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	e7ef      	b.n	8003cda <enqueueTxFrames+0x12e>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	4699      	mov	r9, r3
 8003d00:	e7eb      	b.n	8003cda <enqueueTxFrames+0x12e>
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8003d02:	2303      	movs	r3, #3
 8003d04:	425b      	negs	r3, r3
 8003d06:	4699      	mov	r9, r3
 8003d08:	e7e7      	b.n	8003cda <enqueueTxFrames+0x12e>
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	08006fd4 	.word	0x08006fd4

08003d10 <createRxState>:
{
 8003d10:	b530      	push	{r4, r5, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	0004      	movs	r4, r0
 8003d16:	000d      	movs	r5, r1
    CanardRxState init = {
 8003d18:	2220      	movs	r2, #32
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4668      	mov	r0, sp
 8003d1e:	f002 fe96 	bl	8006a4e <memset>
 8003d22:	9504      	str	r5, [sp, #16]
    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8003d24:	0020      	movs	r0, r4
 8003d26:	f7ff fc8b 	bl	8003640 <allocateBlock>
 8003d2a:	1e04      	subs	r4, r0, #0
    if (state == NULL)
 8003d2c:	d003      	beq.n	8003d36 <createRxState+0x26>
    memcpy(state, &init, sizeof(*state));
 8003d2e:	2220      	movs	r2, #32
 8003d30:	4669      	mov	r1, sp
 8003d32:	f002 fe83 	bl	8006a3c <memcpy>
}
 8003d36:	0020      	movs	r0, r4
 8003d38:	b009      	add	sp, #36	; 0x24
 8003d3a:	bd30      	pop	{r4, r5, pc}

08003d3c <prependRxState>:
{
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	0004      	movs	r4, r0
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8003d40:	300c      	adds	r0, #12
 8003d42:	f7ff ffe5 	bl	8003d10 <createRxState>
    if(state == NULL)
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d002      	beq.n	8003d50 <prependRxState+0x14>
    state->next = ins->rx_states;
 8003d4a:	69a3      	ldr	r3, [r4, #24]
 8003d4c:	6003      	str	r3, [r0, #0]
    ins->rx_states = state;
 8003d4e:	61a0      	str	r0, [r4, #24]
}
 8003d50:	bd10      	pop	{r4, pc}

08003d52 <traverseRxStates>:
{
 8003d52:	b570      	push	{r4, r5, r6, lr}
 8003d54:	0004      	movs	r4, r0
 8003d56:	000d      	movs	r5, r1
    CanardRxState* states = ins->rx_states;
 8003d58:	6980      	ldr	r0, [r0, #24]
    if (states == NULL) // initialize CanardRxStates
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d004      	beq.n	8003d68 <traverseRxStates+0x16>
    states = findRxState(states, transfer_descriptor);
 8003d5e:	f7ff fc16 	bl	800358e <findRxState>
    if (states != NULL)
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d008      	beq.n	8003d78 <traverseRxStates+0x26>
}
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
        states = createRxState(&ins->allocator, transfer_descriptor);
 8003d68:	0020      	movs	r0, r4
 8003d6a:	300c      	adds	r0, #12
 8003d6c:	f7ff ffd0 	bl	8003d10 <createRxState>
        if(states == NULL)
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0f8      	beq.n	8003d66 <traverseRxStates+0x14>
        ins->rx_states = states;
 8003d74:	61a0      	str	r0, [r4, #24]
        return states;
 8003d76:	e7f6      	b.n	8003d66 <traverseRxStates+0x14>
        return prependRxState(ins, transfer_descriptor);
 8003d78:	0029      	movs	r1, r5
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	f7ff ffde 	bl	8003d3c <prependRxState>
 8003d80:	e7f1      	b.n	8003d66 <traverseRxStates+0x14>
	...

08003d84 <canardInit>:
{
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	0004      	movs	r4, r0
 8003d88:	000e      	movs	r6, r1
 8003d8a:	0015      	movs	r5, r2
 8003d8c:	001f      	movs	r7, r3
    CANARD_ASSERT(out_ins != NULL);
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d016      	beq.n	8003dc0 <canardInit+0x3c>
    memset(out_ins, 0, sizeof(*out_ins));
 8003d92:	2228      	movs	r2, #40	; 0x28
 8003d94:	2100      	movs	r1, #0
 8003d96:	0020      	movs	r0, r4
 8003d98:	f002 fe59 	bl	8006a4e <memset>
    out_ins->on_reception = on_reception;
 8003d9c:	60a7      	str	r7, [r4, #8]
    out_ins->should_accept = should_accept;
 8003d9e:	9b06      	ldr	r3, [sp, #24]
 8003da0:	6063      	str	r3, [r4, #4]
    out_ins->user_reference = user_reference;
 8003da2:	9b07      	ldr	r3, [sp, #28]
 8003da4:	6223      	str	r3, [r4, #32]
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8003da6:	096a      	lsrs	r2, r5, #5
    if (pool_capacity > 0xFFFFU)
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	039b      	lsls	r3, r3, #14
 8003dac:	429d      	cmp	r5, r3
 8003dae:	d300      	bcc.n	8003db2 <canardInit+0x2e>
        pool_capacity = 0xFFFFU;
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <canardInit+0x44>)
    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8003db2:	b292      	uxth	r2, r2
 8003db4:	0020      	movs	r0, r4
 8003db6:	300c      	adds	r0, #12
 8003db8:	0031      	movs	r1, r6
 8003dba:	f7ff fc30 	bl	800361e <initPoolAllocator>
}
 8003dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CANARD_ASSERT(out_ins != NULL);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <canardInit+0x48>)
 8003dc2:	f7fd f819 	bl	8000df8 <hardAssertTmp>
 8003dc6:	e7e4      	b.n	8003d92 <canardInit+0xe>
 8003dc8:	0000ffff 	.word	0x0000ffff
 8003dcc:	08006fd4 	.word	0x08006fd4

08003dd0 <canardSetLocalNodeID>:
{
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0004      	movs	r4, r0
 8003dd4:	000d      	movs	r5, r1
    CANARD_ASSERT(ins != NULL);
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d009      	beq.n	8003dee <canardSetLocalNodeID+0x1e>
    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8003dda:	7823      	ldrb	r3, [r4, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <canardSetLocalNodeID+0x26>
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	d008      	beq.n	8003df6 <canardSetLocalNodeID+0x26>
        (self_node_id <= CANARD_MAX_NODE_ID))
 8003de4:	b26b      	sxtb	r3, r5
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db05      	blt.n	8003df6 <canardSetLocalNodeID+0x26>
        ins->node_id = self_node_id;
 8003dea:	7025      	strb	r5, [r4, #0]
 8003dec:	e006      	b.n	8003dfc <canardSetLocalNodeID+0x2c>
    CANARD_ASSERT(ins != NULL);
 8003dee:	4804      	ldr	r0, [pc, #16]	; (8003e00 <canardSetLocalNodeID+0x30>)
 8003df0:	f7fd f802 	bl	8000df8 <hardAssertTmp>
 8003df4:	e7f1      	b.n	8003dda <canardSetLocalNodeID+0xa>
        CANARD_ASSERT(false);
 8003df6:	4802      	ldr	r0, [pc, #8]	; (8003e00 <canardSetLocalNodeID+0x30>)
 8003df8:	f7fc fffe 	bl	8000df8 <hardAssertTmp>
}
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	08006fd4 	.word	0x08006fd4

08003e04 <canardGetLocalNodeID>:
    return ins->node_id;
 8003e04:	7800      	ldrb	r0, [r0, #0]
}
 8003e06:	4770      	bx	lr

08003e08 <canardBroadcast>:
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	46d6      	mov	lr, sl
 8003e0c:	4647      	mov	r7, r8
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b083      	sub	sp, #12
 8003e12:	4680      	mov	r8, r0
 8003e14:	000d      	movs	r5, r1
 8003e16:	a90a      	add	r1, sp, #40	; 0x28
 8003e18:	880e      	ldrh	r6, [r1, #0]
 8003e1a:	a90c      	add	r1, sp, #48	; 0x30
 8003e1c:	780c      	ldrb	r4, [r1, #0]
 8003e1e:	a90e      	add	r1, sp, #56	; 0x38
 8003e20:	880f      	ldrh	r7, [r1, #0]
    if (payload == NULL && payload_len > 0)
 8003e22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e24:	2900      	cmp	r1, #0
 8003e26:	d02e      	beq.n	8003e86 <canardBroadcast+0x7e>
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8003e28:	2c1f      	cmp	r4, #31
 8003e2a:	d842      	bhi.n	8003eb2 <canardBroadcast+0xaa>
    if (source_node_id == 0)
 8003e2c:	2d00      	cmp	r5, #0
 8003e2e:	d12f      	bne.n	8003e90 <canardBroadcast+0x88>
        if (payload_len > 7)
 8003e30:	2f07      	cmp	r7, #7
 8003e32:	d841      	bhi.n	8003eb8 <canardBroadcast+0xb0>
        if ((data_type_id & DTIDMask) != data_type_id)
 8003e34:	2303      	movs	r3, #3
 8003e36:	4033      	ands	r3, r6
 8003e38:	42b3      	cmp	r3, r6
 8003e3a:	d140      	bne.n	8003ebe <canardBroadcast+0xb6>
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, payload, payload_len)) & 0x7FFEU);
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <canardBroadcast+0xbc>)
 8003e3e:	469a      	mov	sl, r3
 8003e40:	003a      	movs	r2, r7
 8003e42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff fbde 	bl	8003606 <crcAdd>
 8003e4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <canardBroadcast+0xc0>)
 8003e4c:	4018      	ands	r0, r3
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8003e4e:	0624      	lsls	r4, r4, #24
 8003e50:	0240      	lsls	r0, r0, #9
 8003e52:	4304      	orrs	r4, r0
                 ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) source_node_id;
 8003e54:	0236      	lsls	r6, r6, #8
 8003e56:	21c0      	movs	r1, #192	; 0xc0
 8003e58:	0089      	lsls	r1, r1, #2
 8003e5a:	400e      	ands	r6, r1
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 8003e5c:	4334      	orrs	r4, r6
 8003e5e:	432c      	orrs	r4, r5
    uint16_t crc = 0xFFFFU;
 8003e60:	4653      	mov	r3, sl
    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8003e62:	9701      	str	r7, [sp, #4]
 8003e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e66:	9200      	str	r2, [sp, #0]
 8003e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e6a:	0021      	movs	r1, r4
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	f7ff fe9d 	bl	8003bac <enqueueTxFrames>
 8003e72:	0004      	movs	r4, r0
    incrementTransferID(inout_transfer_id);
 8003e74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e76:	f7ff fccb 	bl	8003810 <incrementTransferID>
}
 8003e7a:	0020      	movs	r0, r4
 8003e7c:	b003      	add	sp, #12
 8003e7e:	bcc0      	pop	{r6, r7}
 8003e80:	46ba      	mov	sl, r7
 8003e82:	46b0      	mov	r8, r6
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (payload == NULL && payload_len > 0)
 8003e86:	2f00      	cmp	r7, #0
 8003e88:	d0ce      	beq.n	8003e28 <canardBroadcast+0x20>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003e8a:	2402      	movs	r4, #2
 8003e8c:	4264      	negs	r4, r4
 8003e8e:	e7f4      	b.n	8003e7a <canardBroadcast+0x72>
        can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 8U) | (uint32_t) source_node_id;
 8003e90:	0624      	lsls	r4, r4, #24
 8003e92:	0236      	lsls	r6, r6, #8
 8003e94:	4334      	orrs	r4, r6
 8003e96:	432c      	orrs	r4, r5
        if (payload_len > 7)
 8003e98:	2f07      	cmp	r7, #7
 8003e9a:	d908      	bls.n	8003eae <canardBroadcast+0xa6>
            crc = crcAddSignature(crc, data_type_signature);
 8003e9c:	4809      	ldr	r0, [pc, #36]	; (8003ec4 <canardBroadcast+0xbc>)
 8003e9e:	f7ff fb97 	bl	80035d0 <crcAddSignature>
            crc = crcAdd(crc, payload, payload_len);
 8003ea2:	003a      	movs	r2, r7
 8003ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ea6:	f7ff fbae 	bl	8003606 <crcAdd>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	e7d9      	b.n	8003e62 <canardBroadcast+0x5a>
    uint16_t crc = 0xFFFFU;
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <canardBroadcast+0xbc>)
 8003eb0:	e7d7      	b.n	8003e62 <canardBroadcast+0x5a>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003eb2:	2402      	movs	r4, #2
 8003eb4:	4264      	negs	r4, r4
 8003eb6:	e7e0      	b.n	8003e7a <canardBroadcast+0x72>
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8003eb8:	2404      	movs	r4, #4
 8003eba:	4264      	negs	r4, r4
 8003ebc:	e7dd      	b.n	8003e7a <canardBroadcast+0x72>
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8003ebe:	2402      	movs	r4, #2
 8003ec0:	4264      	negs	r4, r4
 8003ec2:	e7da      	b.n	8003e7a <canardBroadcast+0x72>
 8003ec4:	0000ffff 	.word	0x0000ffff
 8003ec8:	00007ffe 	.word	0x00007ffe

08003ecc <canardRequestOrRespond>:
{
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ece:	46ce      	mov	lr, r9
 8003ed0:	4647      	mov	r7, r8
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	000d      	movs	r5, r1
 8003eda:	ab0a      	add	r3, sp, #40	; 0x28
 8003edc:	cb03      	ldmia	r3!, {r0, r1}
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4699      	mov	r9, r3
 8003ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	ac0f      	add	r4, sp, #60	; 0x3c
 8003ee8:	7826      	ldrb	r6, [r4, #0]
 8003eea:	ac11      	add	r4, sp, #68	; 0x44
 8003eec:	8827      	ldrh	r7, [r4, #0]
    if (payload == NULL && payload_len > 0)
 8003eee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d01b      	beq.n	8003f2c <canardRequestOrRespond+0x60>
    if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8003ef4:	2b1f      	cmp	r3, #31
 8003ef6:	d834      	bhi.n	8003f62 <canardRequestOrRespond+0x96>
    if (source_node_id == 0)
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	d035      	beq.n	8003f68 <canardRequestOrRespond+0x9c>
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8003efc:	061c      	lsls	r4, r3, #24
 8003efe:	464b      	mov	r3, r9
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	431c      	orrs	r4, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8003f04:	03f3      	lsls	r3, r6, #15
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8003f06:	431c      	orrs	r4, r3
                            ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 8003f08:	0212      	lsls	r2, r2, #8
 8003f0a:	4314      	orrs	r4, r2
                            (1U << 7U) | (uint32_t) source_node_id;
 8003f0c:	432c      	orrs	r4, r5
    const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	431c      	orrs	r4, r3
    if (payload_len > 7)
 8003f12:	2f07      	cmp	r7, #7
 8003f14:	d90f      	bls.n	8003f36 <canardRequestOrRespond+0x6a>
        crc = crcAddSignature(crc, data_type_signature);
 8003f16:	0002      	movs	r2, r0
 8003f18:	000b      	movs	r3, r1
 8003f1a:	4815      	ldr	r0, [pc, #84]	; (8003f70 <canardRequestOrRespond+0xa4>)
 8003f1c:	f7ff fb58 	bl	80035d0 <crcAddSignature>
        crc = crcAdd(crc, payload, payload_len);
 8003f20:	003a      	movs	r2, r7
 8003f22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003f24:	f7ff fb6f 	bl	8003606 <crcAdd>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	e005      	b.n	8003f38 <canardRequestOrRespond+0x6c>
    if (payload == NULL && payload_len > 0)
 8003f2c:	2f00      	cmp	r7, #0
 8003f2e:	d0e1      	beq.n	8003ef4 <canardRequestOrRespond+0x28>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003f30:	2402      	movs	r4, #2
 8003f32:	4264      	negs	r4, r4
 8003f34:	e00b      	b.n	8003f4e <canardRequestOrRespond+0x82>
    uint16_t crc = 0xFFFFU;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <canardRequestOrRespond+0xa4>)
    const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_len);
 8003f38:	9701      	str	r7, [sp, #4]
 8003f3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f3c:	9200      	str	r2, [sp, #0]
 8003f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f40:	0021      	movs	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f7ff fe32 	bl	8003bac <enqueueTxFrames>
 8003f48:	0004      	movs	r4, r0
    if (kind == CanardRequest)                      // Response Transfer ID must not be altered
 8003f4a:	2e01      	cmp	r6, #1
 8003f4c:	d005      	beq.n	8003f5a <canardRequestOrRespond+0x8e>
}
 8003f4e:	0020      	movs	r0, r4
 8003f50:	b003      	add	sp, #12
 8003f52:	bcc0      	pop	{r6, r7}
 8003f54:	46b9      	mov	r9, r7
 8003f56:	46b0      	mov	r8, r6
 8003f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        incrementTransferID(inout_transfer_id);
 8003f5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f5c:	f7ff fc58 	bl	8003810 <incrementTransferID>
 8003f60:	e7f5      	b.n	8003f4e <canardRequestOrRespond+0x82>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003f62:	2402      	movs	r4, #2
 8003f64:	4264      	negs	r4, r4
 8003f66:	e7f2      	b.n	8003f4e <canardRequestOrRespond+0x82>
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8003f68:	2404      	movs	r4, #4
 8003f6a:	4264      	negs	r4, r4
 8003f6c:	e7ef      	b.n	8003f4e <canardRequestOrRespond+0x82>
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	0000ffff 	.word	0x0000ffff

08003f74 <canardPeekTxQueue>:
    if (ins->tx_queue == NULL)
 8003f74:	69c0      	ldr	r0, [r0, #28]
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d000      	beq.n	8003f7c <canardPeekTxQueue+0x8>
    return &ins->tx_queue->frame;
 8003f7a:	3004      	adds	r0, #4
}
 8003f7c:	4770      	bx	lr

08003f7e <canardPopTxQueue>:
{
 8003f7e:	b510      	push	{r4, lr}
    CanardTxQueueItem* item = ins->tx_queue;
 8003f80:	69c1      	ldr	r1, [r0, #28]
    ins->tx_queue = item->next;
 8003f82:	680b      	ldr	r3, [r1, #0]
 8003f84:	61c3      	str	r3, [r0, #28]
    freeBlock(&ins->allocator, item);
 8003f86:	300c      	adds	r0, #12
 8003f88:	f7ff fc54 	bl	8003834 <freeBlock>
}
 8003f8c:	bd10      	pop	{r4, pc}
	...

08003f90 <canardCleanupStaleTransfers>:
{
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	46c6      	mov	lr, r8
 8003f94:	b500      	push	{lr}
 8003f96:	0005      	movs	r5, r0
 8003f98:	0016      	movs	r6, r2
 8003f9a:	001f      	movs	r7, r3
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8003f9c:	6983      	ldr	r3, [r0, #24]
 8003f9e:	4698      	mov	r8, r3
 8003fa0:	001c      	movs	r4, r3
    while (state != NULL)
 8003fa2:	e010      	b.n	8003fc6 <canardCleanupStaleTransfers+0x36>
                releaseStatePayload(ins, state);
 8003fa4:	0021      	movs	r1, r4
 8003fa6:	0028      	movs	r0, r5
 8003fa8:	f7ff fc56 	bl	8003858 <releaseStatePayload>
                ins->rx_states = ins->rx_states->next;
 8003fac:	69ab      	ldr	r3, [r5, #24]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61ab      	str	r3, [r5, #24]
                freeBlock(&ins->allocator, state);
 8003fb2:	0028      	movs	r0, r5
 8003fb4:	300c      	adds	r0, #12
 8003fb6:	0021      	movs	r1, r4
 8003fb8:	f7ff fc3c 	bl	8003834 <freeBlock>
                state = ins->rx_states;
 8003fbc:	69ac      	ldr	r4, [r5, #24]
 8003fbe:	46a0      	mov	r8, r4
 8003fc0:	e001      	b.n	8003fc6 <canardCleanupStaleTransfers+0x36>
            prev = state;
 8003fc2:	46a0      	mov	r8, r4
            state = state->next;
 8003fc4:	6824      	ldr	r4, [r4, #0]
    while (state != NULL)
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	d01e      	beq.n	8004008 <canardCleanupStaleTransfers+0x78>
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8003fca:	0032      	movs	r2, r6
 8003fcc:	003b      	movs	r3, r7
 8003fce:	68a0      	ldr	r0, [r4, #8]
 8003fd0:	68e1      	ldr	r1, [r4, #12]
 8003fd2:	1a12      	subs	r2, r2, r0
 8003fd4:	418b      	sbcs	r3, r1
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <canardCleanupStaleTransfers+0x54>
 8003fdc:	d1f1      	bne.n	8003fc2 <canardCleanupStaleTransfers+0x32>
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <canardCleanupStaleTransfers+0x80>)
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	d9ee      	bls.n	8003fc2 <canardCleanupStaleTransfers+0x32>
            if (state == ins->rx_states)
 8003fe4:	69ab      	ldr	r3, [r5, #24]
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	d0dc      	beq.n	8003fa4 <canardCleanupStaleTransfers+0x14>
                releaseStatePayload(ins, state);
 8003fea:	0021      	movs	r1, r4
 8003fec:	0028      	movs	r0, r5
 8003fee:	f7ff fc33 	bl	8003858 <releaseStatePayload>
                prev->next = state->next;
 8003ff2:	4643      	mov	r3, r8
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8003ff8:	0028      	movs	r0, r5
 8003ffa:	300c      	adds	r0, #12
 8003ffc:	0021      	movs	r1, r4
 8003ffe:	f7ff fc19 	bl	8003834 <freeBlock>
                state = prev->next;
 8004002:	4643      	mov	r3, r8
 8004004:	681c      	ldr	r4, [r3, #0]
 8004006:	e7de      	b.n	8003fc6 <canardCleanupStaleTransfers+0x36>
}
 8004008:	bc80      	pop	{r7}
 800400a:	46b8      	mov	r8, r7
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	001e8480 	.word	0x001e8480

08004014 <canardDecodeScalar>:
{
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b083      	sub	sp, #12
 8004018:	0006      	movs	r6, r0
 800401a:	000f      	movs	r7, r1
 800401c:	0014      	movs	r4, r2
 800401e:	001d      	movs	r5, r3
    if (transfer == NULL || out_value == NULL)
 8004020:	2800      	cmp	r0, #0
 8004022:	d100      	bne.n	8004026 <canardDecodeScalar+0x12>
 8004024:	e120      	b.n	8004268 <canardDecodeScalar+0x254>
 8004026:	9b08      	ldr	r3, [sp, #32]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d100      	bne.n	800402e <canardDecodeScalar+0x1a>
 800402c:	e11f      	b.n	800426e <canardDecodeScalar+0x25a>
    if (bit_length < 1 || bit_length > 64)
 800402e:	1e53      	subs	r3, r2, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b3f      	cmp	r3, #63	; 0x3f
 8004034:	d900      	bls.n	8004038 <canardDecodeScalar+0x24>
 8004036:	e11d      	b.n	8004274 <canardDecodeScalar+0x260>
    if (bit_length == 1 && value_is_signed)
 8004038:	2a01      	cmp	r2, #1
 800403a:	d102      	bne.n	8004042 <canardDecodeScalar+0x2e>
 800403c:	2d00      	cmp	r5, #0
 800403e:	d000      	beq.n	8004042 <canardDecodeScalar+0x2e>
 8004040:	e11b      	b.n	800427a <canardDecodeScalar+0x266>
    memset(&storage, 0, sizeof(storage));   // This is important
 8004042:	2208      	movs	r2, #8
 8004044:	2100      	movs	r1, #0
 8004046:	4668      	mov	r0, sp
 8004048:	f002 fd01 	bl	8006a4e <memset>
    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 800404c:	466b      	mov	r3, sp
 800404e:	0022      	movs	r2, r4
 8004050:	0039      	movs	r1, r7
 8004052:	0030      	movs	r0, r6
 8004054:	f7ff fc86 	bl	8003964 <descatterTransferPayload>
 8004058:	1e06      	subs	r6, r0, #0
    if (result <= 0)
 800405a:	dd52      	ble.n	8004102 <canardDecodeScalar+0xee>
    CANARD_ASSERT((result > 0) && (result <= 64) && (result <= bit_length));
 800405c:	3801      	subs	r0, #1
 800405e:	b280      	uxth	r0, r0
 8004060:	283f      	cmp	r0, #63	; 0x3f
 8004062:	d801      	bhi.n	8004068 <canardDecodeScalar+0x54>
 8004064:	42a6      	cmp	r6, r4
 8004066:	dd02      	ble.n	800406e <canardDecodeScalar+0x5a>
 8004068:	4885      	ldr	r0, [pc, #532]	; (8004280 <canardDecodeScalar+0x26c>)
 800406a:	f7fc fec5 	bl	8000df8 <hardAssertTmp>
    if ((bit_length % 8) != 0)
 800406e:	0763      	lsls	r3, r4, #29
 8004070:	d008      	beq.n	8004084 <canardDecodeScalar+0x70>
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8004072:	08e3      	lsrs	r3, r4, #3
 8004074:	466a      	mov	r2, sp
 8004076:	5cd2      	ldrb	r2, [r2, r3]
 8004078:	4260      	negs	r0, r4
 800407a:	2107      	movs	r1, #7
 800407c:	4001      	ands	r1, r0
 800407e:	410a      	asrs	r2, r1
 8004080:	4669      	mov	r1, sp
 8004082:	54ca      	strb	r2, [r1, r3]
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8004084:	2c01      	cmp	r4, #1
 8004086:	d00f      	beq.n	80040a8 <canardDecodeScalar+0x94>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8004088:	2c08      	cmp	r4, #8
 800408a:	d93d      	bls.n	8004108 <canardDecodeScalar+0xf4>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 800408c:	2c10      	cmp	r4, #16
 800408e:	d93d      	bls.n	800410c <canardDecodeScalar+0xf8>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8004090:	2c20      	cmp	r4, #32
 8004092:	d93d      	bls.n	8004110 <canardDecodeScalar+0xfc>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8004094:	2c40      	cmp	r4, #64	; 0x40
 8004096:	d801      	bhi.n	800409c <canardDecodeScalar+0x88>
 8004098:	2708      	movs	r7, #8
 800409a:	e006      	b.n	80040aa <canardDecodeScalar+0x96>
        CANARD_ASSERT(false);
 800409c:	4878      	ldr	r0, [pc, #480]	; (8004280 <canardDecodeScalar+0x26c>)
 800409e:	f7fc feab 	bl	8000df8 <hardAssertTmp>
        return -CANARD_ERROR_INTERNAL;
 80040a2:	2609      	movs	r6, #9
 80040a4:	4276      	negs	r6, r6
 80040a6:	e02c      	b.n	8004102 <canardDecodeScalar+0xee>
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80040a8:	0027      	movs	r7, r4
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 80040aa:	1e7b      	subs	r3, r7, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b07      	cmp	r3, #7
 80040b0:	d830      	bhi.n	8004114 <canardDecodeScalar+0x100>
    if (isBigEndian())
 80040b2:	f7ff fa74 	bl	800359e <isBigEndian>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d130      	bne.n	800411c <canardDecodeScalar+0x108>
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	d013      	beq.n	80040e6 <canardDecodeScalar+0xd2>
 80040be:	00ff      	lsls	r7, r7, #3
 80040c0:	42a7      	cmp	r7, r4
 80040c2:	d010      	beq.n	80040e6 <canardDecodeScalar+0xd2>
        if (bit_length <= 8)
 80040c4:	2c08      	cmp	r4, #8
 80040c6:	d82e      	bhi.n	8004126 <canardDecodeScalar+0x112>
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80040c8:	466b      	mov	r3, sp
 80040ca:	781a      	ldrb	r2, [r3, #0]
 80040cc:	1e63      	subs	r3, r4, #1
 80040ce:	0011      	movs	r1, r2
 80040d0:	40d9      	lsrs	r1, r3
 80040d2:	000b      	movs	r3, r1
 80040d4:	07db      	lsls	r3, r3, #31
 80040d6:	d506      	bpl.n	80040e6 <canardDecodeScalar+0xd2>
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80040d8:	2301      	movs	r3, #1
 80040da:	40a3      	lsls	r3, r4
 80040dc:	425b      	negs	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	466a      	mov	r2, sp
 80040e4:	7013      	strb	r3, [r2, #0]
    if (value_is_signed)
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	d100      	bne.n	80040ec <canardDecodeScalar+0xd8>
 80040ea:	e090      	b.n	800420e <canardDecodeScalar+0x1fa>
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80040ec:	2c08      	cmp	r4, #8
 80040ee:	d900      	bls.n	80040f2 <canardDecodeScalar+0xde>
 80040f0:	e071      	b.n	80041d6 <canardDecodeScalar+0x1c2>
 80040f2:	466b      	mov	r3, sp
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	9a08      	ldr	r2, [sp, #32]
 80040fa:	7013      	strb	r3, [r2, #0]
    CANARD_ASSERT(result <= bit_length);
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	dd00      	ble.n	8004102 <canardDecodeScalar+0xee>
 8004100:	e0ae      	b.n	8004260 <canardDecodeScalar+0x24c>
}
 8004102:	0030      	movs	r0, r6
 8004104:	b003      	add	sp, #12
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8004108:	2701      	movs	r7, #1
 800410a:	e7ce      	b.n	80040aa <canardDecodeScalar+0x96>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 800410c:	2702      	movs	r7, #2
 800410e:	e7cc      	b.n	80040aa <canardDecodeScalar+0x96>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8004110:	2704      	movs	r7, #4
 8004112:	e7ca      	b.n	80040aa <canardDecodeScalar+0x96>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 8004114:	485a      	ldr	r0, [pc, #360]	; (8004280 <canardDecodeScalar+0x26c>)
 8004116:	f7fc fe6f 	bl	8000df8 <hardAssertTmp>
 800411a:	e7ca      	b.n	80040b2 <canardDecodeScalar+0x9e>
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800411c:	0039      	movs	r1, r7
 800411e:	4668      	mov	r0, sp
 8004120:	f7ff fd20 	bl	8003b64 <swapByteOrder>
 8004124:	e7c9      	b.n	80040ba <canardDecodeScalar+0xa6>
        else if (bit_length <= 16)
 8004126:	2c10      	cmp	r4, #16
 8004128:	d80f      	bhi.n	800414a <canardDecodeScalar+0x136>
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 800412a:	466b      	mov	r3, sp
 800412c:	881a      	ldrh	r2, [r3, #0]
 800412e:	1e63      	subs	r3, r4, #1
 8004130:	0011      	movs	r1, r2
 8004132:	40d9      	lsrs	r1, r3
 8004134:	000b      	movs	r3, r1
 8004136:	07db      	lsls	r3, r3, #31
 8004138:	d5d5      	bpl.n	80040e6 <canardDecodeScalar+0xd2>
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 800413a:	2301      	movs	r3, #1
 800413c:	40a3      	lsls	r3, r4
 800413e:	425b      	negs	r3, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	4313      	orrs	r3, r2
 8004144:	466a      	mov	r2, sp
 8004146:	8013      	strh	r3, [r2, #0]
 8004148:	e7cd      	b.n	80040e6 <canardDecodeScalar+0xd2>
        else if (bit_length <= 32)
 800414a:	2c20      	cmp	r4, #32
 800414c:	d80c      	bhi.n	8004168 <canardDecodeScalar+0x154>
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 800414e:	9b00      	ldr	r3, [sp, #0]
 8004150:	1e62      	subs	r2, r4, #1
 8004152:	0019      	movs	r1, r3
 8004154:	40d1      	lsrs	r1, r2
 8004156:	000a      	movs	r2, r1
 8004158:	07d2      	lsls	r2, r2, #31
 800415a:	d5c4      	bpl.n	80040e6 <canardDecodeScalar+0xd2>
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 800415c:	2201      	movs	r2, #1
 800415e:	40a2      	lsls	r2, r4
 8004160:	4252      	negs	r2, r2
 8004162:	4313      	orrs	r3, r2
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	e7be      	b.n	80040e6 <canardDecodeScalar+0xd2>
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8004168:	2c3f      	cmp	r4, #63	; 0x3f
 800416a:	d82e      	bhi.n	80041ca <canardDecodeScalar+0x1b6>
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 800416c:	9b00      	ldr	r3, [sp, #0]
 800416e:	469c      	mov	ip, r3
 8004170:	9f01      	ldr	r7, [sp, #4]
 8004172:	1e63      	subs	r3, r4, #1
 8004174:	2221      	movs	r2, #33	; 0x21
 8004176:	4252      	negs	r2, r2
 8004178:	18a2      	adds	r2, r4, r2
 800417a:	d416      	bmi.n	80041aa <canardDecodeScalar+0x196>
 800417c:	003b      	movs	r3, r7
 800417e:	40d3      	lsrs	r3, r2
 8004180:	07db      	lsls	r3, r3, #31
 8004182:	d5b0      	bpl.n	80040e6 <canardDecodeScalar+0xd2>
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8004184:	2320      	movs	r3, #32
 8004186:	425b      	negs	r3, r3
 8004188:	18e1      	adds	r1, r4, r3
 800418a:	d418      	bmi.n	80041be <canardDecodeScalar+0x1aa>
 800418c:	2001      	movs	r0, #1
 800418e:	4088      	lsls	r0, r1
 8004190:	0003      	movs	r3, r0
 8004192:	2101      	movs	r1, #1
 8004194:	40a1      	lsls	r1, r4
 8004196:	000a      	movs	r2, r1
 8004198:	2100      	movs	r1, #0
 800419a:	4250      	negs	r0, r2
 800419c:	4199      	sbcs	r1, r3
 800419e:	4663      	mov	r3, ip
 80041a0:	4303      	orrs	r3, r0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	430f      	orrs	r7, r1
 80041a6:	9701      	str	r7, [sp, #4]
 80041a8:	e79d      	b.n	80040e6 <canardDecodeScalar+0xd2>
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80041aa:	2220      	movs	r2, #32
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	0039      	movs	r1, r7
 80041b0:	4091      	lsls	r1, r2
 80041b2:	000a      	movs	r2, r1
 80041b4:	4661      	mov	r1, ip
 80041b6:	40d9      	lsrs	r1, r3
 80041b8:	000b      	movs	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	e7e0      	b.n	8004180 <canardDecodeScalar+0x16c>
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80041be:	2120      	movs	r1, #32
 80041c0:	1b09      	subs	r1, r1, r4
 80041c2:	2001      	movs	r0, #1
 80041c4:	40c8      	lsrs	r0, r1
 80041c6:	0003      	movs	r3, r0
 80041c8:	e7e3      	b.n	8004192 <canardDecodeScalar+0x17e>
            CANARD_ASSERT(false);
 80041ca:	482d      	ldr	r0, [pc, #180]	; (8004280 <canardDecodeScalar+0x26c>)
 80041cc:	f7fc fe14 	bl	8000df8 <hardAssertTmp>
            return -CANARD_ERROR_INTERNAL;
 80041d0:	2609      	movs	r6, #9
 80041d2:	4276      	negs	r6, r6
 80041d4:	e795      	b.n	8004102 <canardDecodeScalar+0xee>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80041d6:	2c10      	cmp	r4, #16
 80041d8:	d805      	bhi.n	80041e6 <canardDecodeScalar+0x1d2>
 80041da:	466b      	mov	r3, sp
 80041dc:	2200      	movs	r2, #0
 80041de:	5e9b      	ldrsh	r3, [r3, r2]
 80041e0:	9a08      	ldr	r2, [sp, #32]
 80041e2:	8013      	strh	r3, [r2, #0]
 80041e4:	e78a      	b.n	80040fc <canardDecodeScalar+0xe8>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80041e6:	2c20      	cmp	r4, #32
 80041e8:	d803      	bhi.n	80041f2 <canardDecodeScalar+0x1de>
 80041ea:	9b08      	ldr	r3, [sp, #32]
 80041ec:	9a00      	ldr	r2, [sp, #0]
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e784      	b.n	80040fc <canardDecodeScalar+0xe8>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80041f2:	2c40      	cmp	r4, #64	; 0x40
 80041f4:	d805      	bhi.n	8004202 <canardDecodeScalar+0x1ee>
 80041f6:	9908      	ldr	r1, [sp, #32]
 80041f8:	9a00      	ldr	r2, [sp, #0]
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	600a      	str	r2, [r1, #0]
 80041fe:	604b      	str	r3, [r1, #4]
 8004200:	e77c      	b.n	80040fc <canardDecodeScalar+0xe8>
            CANARD_ASSERT(false);
 8004202:	481f      	ldr	r0, [pc, #124]	; (8004280 <canardDecodeScalar+0x26c>)
 8004204:	f7fc fdf8 	bl	8000df8 <hardAssertTmp>
            return -CANARD_ERROR_INTERNAL;
 8004208:	2609      	movs	r6, #9
 800420a:	4276      	negs	r6, r6
 800420c:	e779      	b.n	8004102 <canardDecodeScalar+0xee>
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 800420e:	2c01      	cmp	r4, #1
 8004210:	d006      	beq.n	8004220 <canardDecodeScalar+0x20c>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8004212:	2c08      	cmp	r4, #8
 8004214:	d809      	bhi.n	800422a <canardDecodeScalar+0x216>
 8004216:	466b      	mov	r3, sp
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	9a08      	ldr	r2, [sp, #32]
 800421c:	7013      	strb	r3, [r2, #0]
 800421e:	e76d      	b.n	80040fc <canardDecodeScalar+0xe8>
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8004220:	466b      	mov	r3, sp
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	9a08      	ldr	r2, [sp, #32]
 8004226:	7013      	strb	r3, [r2, #0]
 8004228:	e768      	b.n	80040fc <canardDecodeScalar+0xe8>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 800422a:	2c10      	cmp	r4, #16
 800422c:	d804      	bhi.n	8004238 <canardDecodeScalar+0x224>
 800422e:	466b      	mov	r3, sp
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	9a08      	ldr	r2, [sp, #32]
 8004234:	8013      	strh	r3, [r2, #0]
 8004236:	e761      	b.n	80040fc <canardDecodeScalar+0xe8>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8004238:	2c20      	cmp	r4, #32
 800423a:	d803      	bhi.n	8004244 <canardDecodeScalar+0x230>
 800423c:	9b08      	ldr	r3, [sp, #32]
 800423e:	9a00      	ldr	r2, [sp, #0]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e75b      	b.n	80040fc <canardDecodeScalar+0xe8>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8004244:	2c40      	cmp	r4, #64	; 0x40
 8004246:	d805      	bhi.n	8004254 <canardDecodeScalar+0x240>
 8004248:	9908      	ldr	r1, [sp, #32]
 800424a:	9a00      	ldr	r2, [sp, #0]
 800424c:	9b01      	ldr	r3, [sp, #4]
 800424e:	600a      	str	r2, [r1, #0]
 8004250:	604b      	str	r3, [r1, #4]
 8004252:	e753      	b.n	80040fc <canardDecodeScalar+0xe8>
            CANARD_ASSERT(false);
 8004254:	480a      	ldr	r0, [pc, #40]	; (8004280 <canardDecodeScalar+0x26c>)
 8004256:	f7fc fdcf 	bl	8000df8 <hardAssertTmp>
            return -CANARD_ERROR_INTERNAL;
 800425a:	2609      	movs	r6, #9
 800425c:	4276      	negs	r6, r6
 800425e:	e750      	b.n	8004102 <canardDecodeScalar+0xee>
    CANARD_ASSERT(result <= bit_length);
 8004260:	4807      	ldr	r0, [pc, #28]	; (8004280 <canardDecodeScalar+0x26c>)
 8004262:	f7fc fdc9 	bl	8000df8 <hardAssertTmp>
 8004266:	e74c      	b.n	8004102 <canardDecodeScalar+0xee>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004268:	2602      	movs	r6, #2
 800426a:	4276      	negs	r6, r6
 800426c:	e749      	b.n	8004102 <canardDecodeScalar+0xee>
 800426e:	2602      	movs	r6, #2
 8004270:	4276      	negs	r6, r6
 8004272:	e746      	b.n	8004102 <canardDecodeScalar+0xee>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004274:	2602      	movs	r6, #2
 8004276:	4276      	negs	r6, r6
 8004278:	e743      	b.n	8004102 <canardDecodeScalar+0xee>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800427a:	2602      	movs	r6, #2
 800427c:	4276      	negs	r6, r6
 800427e:	e740      	b.n	8004102 <canardDecodeScalar+0xee>
 8004280:	08006fd4 	.word	0x08006fd4

08004284 <canardEncodeScalar>:
{
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004286:	b085      	sub	sp, #20
 8004288:	0005      	movs	r5, r0
 800428a:	000f      	movs	r7, r1
 800428c:	0014      	movs	r4, r2
 800428e:	001e      	movs	r6, r3
    CANARD_ASSERT(destination != NULL);
 8004290:	2800      	cmp	r0, #0
 8004292:	d013      	beq.n	80042bc <canardEncodeScalar+0x38>
    CANARD_ASSERT(value != NULL);
 8004294:	2e00      	cmp	r6, #0
 8004296:	d015      	beq.n	80042c4 <canardEncodeScalar+0x40>
    if (bit_length > 64)
 8004298:	2c40      	cmp	r4, #64	; 0x40
 800429a:	d817      	bhi.n	80042cc <canardEncodeScalar+0x48>
    if (bit_length < 1)
 800429c:	2c00      	cmp	r4, #0
 800429e:	d01a      	beq.n	80042d6 <canardEncodeScalar+0x52>
    memset(&storage, 0, sizeof(storage));
 80042a0:	2208      	movs	r2, #8
 80042a2:	2100      	movs	r1, #0
 80042a4:	a802      	add	r0, sp, #8
 80042a6:	f002 fbd2 	bl	8006a4e <memset>
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80042aa:	2c01      	cmp	r4, #1
 80042ac:	d018      	beq.n	80042e0 <canardEncodeScalar+0x5c>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 80042ae:	2c08      	cmp	r4, #8
 80042b0:	d831      	bhi.n	8004316 <canardEncodeScalar+0x92>
 80042b2:	7832      	ldrb	r2, [r6, #0]
 80042b4:	ab02      	add	r3, sp, #8
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	2601      	movs	r6, #1
 80042ba:	e015      	b.n	80042e8 <canardEncodeScalar+0x64>
    CANARD_ASSERT(destination != NULL);
 80042bc:	4827      	ldr	r0, [pc, #156]	; (800435c <canardEncodeScalar+0xd8>)
 80042be:	f7fc fd9b 	bl	8000df8 <hardAssertTmp>
 80042c2:	e7e7      	b.n	8004294 <canardEncodeScalar+0x10>
    CANARD_ASSERT(value != NULL);
 80042c4:	4825      	ldr	r0, [pc, #148]	; (800435c <canardEncodeScalar+0xd8>)
 80042c6:	f7fc fd97 	bl	8000df8 <hardAssertTmp>
 80042ca:	e7e5      	b.n	8004298 <canardEncodeScalar+0x14>
        CANARD_ASSERT(false);
 80042cc:	4823      	ldr	r0, [pc, #140]	; (800435c <canardEncodeScalar+0xd8>)
 80042ce:	f7fc fd93 	bl	8000df8 <hardAssertTmp>
        bit_length = 64;
 80042d2:	2440      	movs	r4, #64	; 0x40
 80042d4:	e7e4      	b.n	80042a0 <canardEncodeScalar+0x1c>
        CANARD_ASSERT(false);
 80042d6:	4821      	ldr	r0, [pc, #132]	; (800435c <canardEncodeScalar+0xd8>)
 80042d8:	f7fc fd8e 	bl	8000df8 <hardAssertTmp>
        bit_length = 1;
 80042dc:	3401      	adds	r4, #1
 80042de:	e7df      	b.n	80042a0 <canardEncodeScalar+0x1c>
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80042e0:	7832      	ldrb	r2, [r6, #0]
 80042e2:	ab02      	add	r3, sp, #8
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	0026      	movs	r6, r4
    if (isBigEndian())
 80042e8:	f7ff f959 	bl	800359e <isBigEndian>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d130      	bne.n	8004352 <canardEncodeScalar+0xce>
    if ((bit_length % 8) != 0)
 80042f0:	0763      	lsls	r3, r4, #29
 80042f2:	d007      	beq.n	8004304 <canardEncodeScalar+0x80>
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 80042f4:	08e3      	lsrs	r3, r4, #3
 80042f6:	a902      	add	r1, sp, #8
 80042f8:	5cca      	ldrb	r2, [r1, r3]
 80042fa:	4266      	negs	r6, r4
 80042fc:	2007      	movs	r0, #7
 80042fe:	4030      	ands	r0, r6
 8004300:	4082      	lsls	r2, r0
 8004302:	54ca      	strb	r2, [r1, r3]
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8004304:	9700      	str	r7, [sp, #0]
 8004306:	002b      	movs	r3, r5
 8004308:	0022      	movs	r2, r4
 800430a:	2100      	movs	r1, #0
 800430c:	a802      	add	r0, sp, #8
 800430e:	f7ff fad5 	bl	80038bc <copyBitArray>
}
 8004312:	b005      	add	sp, #20
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8004316:	2c10      	cmp	r4, #16
 8004318:	d804      	bhi.n	8004324 <canardEncodeScalar+0xa0>
 800431a:	8832      	ldrh	r2, [r6, #0]
 800431c:	ab02      	add	r3, sp, #8
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	2602      	movs	r6, #2
 8004322:	e7e1      	b.n	80042e8 <canardEncodeScalar+0x64>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8004324:	2c20      	cmp	r4, #32
 8004326:	d803      	bhi.n	8004330 <canardEncodeScalar+0xac>
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	9302      	str	r3, [sp, #8]
 800432c:	2604      	movs	r6, #4
 800432e:	e7db      	b.n	80042e8 <canardEncodeScalar+0x64>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8004330:	2c40      	cmp	r4, #64	; 0x40
 8004332:	d805      	bhi.n	8004340 <canardEncodeScalar+0xbc>
 8004334:	6832      	ldr	r2, [r6, #0]
 8004336:	6873      	ldr	r3, [r6, #4]
 8004338:	9202      	str	r2, [sp, #8]
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	2608      	movs	r6, #8
 800433e:	e7d3      	b.n	80042e8 <canardEncodeScalar+0x64>
        CANARD_ASSERT(false);
 8004340:	4e06      	ldr	r6, [pc, #24]	; (800435c <canardEncodeScalar+0xd8>)
 8004342:	0030      	movs	r0, r6
 8004344:	f7fc fd58 	bl	8000df8 <hardAssertTmp>
    CANARD_ASSERT(std_byte_length > 0);
 8004348:	0030      	movs	r0, r6
 800434a:	f7fc fd55 	bl	8000df8 <hardAssertTmp>
    uint8_t std_byte_length = 0;
 800434e:	2600      	movs	r6, #0
 8004350:	e7ca      	b.n	80042e8 <canardEncodeScalar+0x64>
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8004352:	0031      	movs	r1, r6
 8004354:	a802      	add	r0, sp, #8
 8004356:	f7ff fc05 	bl	8003b64 <swapByteOrder>
 800435a:	e7c9      	b.n	80042f0 <canardEncodeScalar+0x6c>
 800435c:	08006fd4 	.word	0x08006fd4

08004360 <canardReleaseRxTransferPayload>:
{
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	0006      	movs	r6, r0
 8004364:	000c      	movs	r4, r1
    while (transfer->payload_middle != NULL)
 8004366:	e005      	b.n	8004374 <canardReleaseRxTransferPayload+0x14>
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8004368:	680d      	ldr	r5, [r1, #0]
        freeBlock(&ins->allocator, transfer->payload_middle);
 800436a:	0030      	movs	r0, r6
 800436c:	300c      	adds	r0, #12
 800436e:	f7ff fa61 	bl	8003834 <freeBlock>
        transfer->payload_middle = temp;
 8004372:	60e5      	str	r5, [r4, #12]
    while (transfer->payload_middle != NULL)
 8004374:	68e1      	ldr	r1, [r4, #12]
 8004376:	2900      	cmp	r1, #0
 8004378:	d1f6      	bne.n	8004368 <canardReleaseRxTransferPayload+0x8>
    transfer->payload_middle = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	60e3      	str	r3, [r4, #12]
    transfer->payload_head = NULL;
 800437e:	60a3      	str	r3, [r4, #8]
    transfer->payload_tail = NULL;
 8004380:	6123      	str	r3, [r4, #16]
    transfer->payload_len = 0;
 8004382:	82a3      	strh	r3, [r4, #20]
}
 8004384:	bd70      	pop	{r4, r5, r6, pc}
	...

08004388 <canardHandleRxFrame>:
{
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	46de      	mov	lr, fp
 800438c:	4657      	mov	r7, sl
 800438e:	464e      	mov	r6, r9
 8004390:	4645      	mov	r5, r8
 8004392:	b5e0      	push	{r5, r6, r7, lr}
 8004394:	b093      	sub	sp, #76	; 0x4c
 8004396:	0006      	movs	r6, r0
 8004398:	000d      	movs	r5, r1
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	ab1c      	add	r3, sp, #112	; 0x70
 80043a0:	781f      	ldrb	r7, [r3, #0]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 80043a2:	680c      	ldr	r4, [r1, #0]
 80043a4:	0020      	movs	r0, r4
 80043a6:	f7ff f8d8 	bl	800355a <extractTransferType>
 80043aa:	0002      	movs	r2, r0
 80043ac:	9006      	str	r0, [sp, #24]
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80043ae:	2802      	cmp	r0, #2
 80043b0:	d100      	bne.n	80043b4 <canardHandleRxFrame+0x2c>
 80043b2:	e085      	b.n	80044c0 <canardHandleRxFrame+0x138>
                                        DEST_ID_FROM_ID(frame->id);
 80043b4:	0a23      	lsrs	r3, r4, #8
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80043b6:	217f      	movs	r1, #127	; 0x7f
 80043b8:	400b      	ands	r3, r1
 80043ba:	469b      	mov	fp, r3
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80043bc:	2c00      	cmp	r4, #0
 80043be:	db00      	blt.n	80043c2 <canardHandleRxFrame+0x3a>
 80043c0:	e1f9      	b.n	80047b6 <canardHandleRxFrame+0x42e>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80043c2:	23c0      	movs	r3, #192	; 0xc0
 80043c4:	05db      	lsls	r3, r3, #23
 80043c6:	421c      	tst	r4, r3
 80043c8:	d000      	beq.n	80043cc <canardHandleRxFrame+0x44>
 80043ca:	e1f7      	b.n	80047bc <canardHandleRxFrame+0x434>
        (frame->data_len < 1))
 80043cc:	7b2b      	ldrb	r3, [r5, #12]
 80043ce:	4699      	mov	r9, r3
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d100      	bne.n	80043d6 <canardHandleRxFrame+0x4e>
 80043d4:	e1f5      	b.n	80047c2 <canardHandleRxFrame+0x43a>
    if (!forwardingMode) {
 80043d6:	2f00      	cmp	r7, #0
 80043d8:	d107      	bne.n	80043ea <canardHandleRxFrame+0x62>
        if (transfer_type != CanardTransferTypeBroadcast &&
 80043da:	2a02      	cmp	r2, #2
 80043dc:	d005      	beq.n	80043ea <canardHandleRxFrame+0x62>
            destination_node_id != canardGetLocalNodeID(ins))
 80043de:	0030      	movs	r0, r6
 80043e0:	f7ff fd10 	bl	8003e04 <canardGetLocalNodeID>
        if (transfer_type != CanardTransferTypeBroadcast &&
 80043e4:	4558      	cmp	r0, fp
 80043e6:	d000      	beq.n	80043ea <canardHandleRxFrame+0x62>
 80043e8:	e1ee      	b.n	80047c8 <canardHandleRxFrame+0x440>
    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 80043ea:	0e23      	lsrs	r3, r4, #24
 80043ec:	221f      	movs	r2, #31
 80043ee:	401a      	ands	r2, r3
 80043f0:	9207      	str	r2, [sp, #28]
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 80043f2:	237f      	movs	r3, #127	; 0x7f
 80043f4:	4023      	ands	r3, r4
 80043f6:	4698      	mov	r8, r3
    const uint16_t data_type_id = extractDataType(frame->id);
 80043f8:	0020      	movs	r0, r4
 80043fa:	f7ff f8b8 	bl	800356e <extractDataType>
 80043fe:	9008      	str	r0, [sp, #32]
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8004400:	9906      	ldr	r1, [sp, #24]
 8004402:	040c      	lsls	r4, r1, #16
 8004404:	4304      	orrs	r4, r0
 8004406:	4643      	mov	r3, r8
 8004408:	049b      	lsls	r3, r3, #18
 800440a:	431c      	orrs	r4, r3
 800440c:	465b      	mov	r3, fp
 800440e:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8004410:	431c      	orrs	r4, r3
 8004412:	9404      	str	r4, [sp, #16]
    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8004414:	464b      	mov	r3, r9
 8004416:	3b01      	subs	r3, #1
 8004418:	18eb      	adds	r3, r5, r3
 800441a:	791b      	ldrb	r3, [r3, #4]
 800441c:	4699      	mov	r9, r3
        uint64_t data_type_signature = 0;
 800441e:	2200      	movs	r2, #0
 8004420:	2300      	movs	r3, #0
 8004422:	920a      	str	r2, [sp, #40]	; 0x28
 8004424:	930b      	str	r3, [sp, #44]	; 0x2c
        bool accept = ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id);
 8004426:	4643      	mov	r3, r8
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	000b      	movs	r3, r1
 800442c:	0002      	movs	r2, r0
 800442e:	a90a      	add	r1, sp, #40	; 0x28
 8004430:	0030      	movs	r0, r6
 8004432:	6874      	ldr	r4, [r6, #4]
 8004434:	47a0      	blx	r4
        if (forwardingMode || accept)
 8004436:	4307      	orrs	r7, r0
 8004438:	b2ff      	uxtb	r7, r7
 800443a:	2f00      	cmp	r7, #0
 800443c:	d04c      	beq.n	80044d8 <canardHandleRxFrame+0x150>
            if (IS_START_OF_TRANSFER(tail_byte))
 800443e:	464b      	mov	r3, r9
 8004440:	09db      	lsrs	r3, r3, #7
 8004442:	469a      	mov	sl, r3
 8004444:	d03f      	beq.n	80044c6 <canardHandleRxFrame+0x13e>
                rx_state = traverseRxStates(ins, transfer_descriptor);
 8004446:	9904      	ldr	r1, [sp, #16]
 8004448:	0030      	movs	r0, r6
 800444a:	f7ff fc82 	bl	8003d52 <traverseRxStates>
 800444e:	1e04      	subs	r4, r0, #0
                if(rx_state == NULL)
 8004450:	d04b      	beq.n	80044ea <canardHandleRxFrame+0x162>
                rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8004452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004456:	48b2      	ldr	r0, [pc, #712]	; (8004720 <canardHandleRxFrame+0x398>)
 8004458:	f7ff f8ba 	bl	80035d0 <crcAddSignature>
 800445c:	82a0      	strh	r0, [r4, #20]
    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
 800445e:	2c00      	cmp	r4, #0
 8004460:	d046      	beq.n	80044f0 <canardHandleRxFrame+0x168>
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8004462:	68a2      	ldr	r2, [r4, #8]
 8004464:	68e3      	ldr	r3, [r4, #12]
 8004466:	0017      	movs	r7, r2
 8004468:	431f      	orrs	r7, r3
 800446a:	4279      	negs	r1, r7
 800446c:	414f      	adcs	r7, r1
 800446e:	b2ff      	uxtb	r7, r7
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8004470:	9802      	ldr	r0, [sp, #8]
 8004472:	9903      	ldr	r1, [sp, #12]
 8004474:	1a80      	subs	r0, r0, r2
 8004476:	4199      	sbcs	r1, r3
 8004478:	0002      	movs	r2, r0
 800447a:	000b      	movs	r3, r1
 800447c:	2101      	movs	r1, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <canardHandleRxFrame+0x10c>
 8004482:	9204      	str	r2, [sp, #16]
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <canardHandleRxFrame+0x10a>
 800448a:	4ba6      	ldr	r3, [pc, #664]	; (8004724 <canardHandleRxFrame+0x39c>)
 800448c:	9a04      	ldr	r2, [sp, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d800      	bhi.n	8004494 <canardHandleRxFrame+0x10c>
 8004492:	2100      	movs	r1, #0
 8004494:	b2cb      	uxtb	r3, r1
 8004496:	9309      	str	r3, [sp, #36]	; 0x24
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8004498:	7de0      	ldrb	r0, [r4, #23]
 800449a:	0640      	lsls	r0, r0, #25
 800449c:	0ec0      	lsrs	r0, r0, #27
 800449e:	231f      	movs	r3, #31
 80044a0:	464a      	mov	r2, r9
 80044a2:	401a      	ands	r2, r3
 80044a4:	9204      	str	r2, [sp, #16]
 80044a6:	0011      	movs	r1, r2
 80044a8:	f7ff f823 	bl	80034f2 <computeTransferIDForwardDistance>
            (not_initialized) ||
 80044ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ae:	431f      	orrs	r7, r3
            (tid_timed_out) ||
 80044b0:	d124      	bne.n	80044fc <canardHandleRxFrame+0x174>
 80044b2:	4653      	mov	r3, sl
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d055      	beq.n	8004564 <canardHandleRxFrame+0x1dc>
            (first_frame && not_previous_tid);
 80044b8:	2801      	cmp	r0, #1
 80044ba:	dd1d      	ble.n	80044f8 <canardHandleRxFrame+0x170>
            (tid_timed_out) ||
 80044bc:	2301      	movs	r3, #1
 80044be:	e01e      	b.n	80044fe <canardHandleRxFrame+0x176>
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80044c0:	2300      	movs	r3, #0
 80044c2:	469b      	mov	fp, r3
 80044c4:	e77a      	b.n	80043bc <canardHandleRxFrame+0x34>
                rx_state = findRxState(ins->rx_states, transfer_descriptor);
 80044c6:	9904      	ldr	r1, [sp, #16]
 80044c8:	69b0      	ldr	r0, [r6, #24]
 80044ca:	f7ff f860 	bl	800358e <findRxState>
 80044ce:	1e04      	subs	r4, r0, #0
                if (rx_state == NULL)
 80044d0:	d1c5      	bne.n	800445e <canardHandleRxFrame+0xd6>
                    return -CANARD_ERROR_RX_MISSED_START;
 80044d2:	200d      	movs	r0, #13
 80044d4:	4240      	negs	r0, r0
 80044d6:	e001      	b.n	80044dc <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_NOT_WANTED;
 80044d8:	200c      	movs	r0, #12
 80044da:	4240      	negs	r0, r0
}
 80044dc:	b013      	add	sp, #76	; 0x4c
 80044de:	bcf0      	pop	{r4, r5, r6, r7}
 80044e0:	46bb      	mov	fp, r7
 80044e2:	46b2      	mov	sl, r6
 80044e4:	46a9      	mov	r9, r5
 80044e6:	46a0      	mov	r8, r4
 80044e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return -CANARD_ERROR_OUT_OF_MEMORY;
 80044ea:	2003      	movs	r0, #3
 80044ec:	4240      	negs	r0, r0
 80044ee:	e7f5      	b.n	80044dc <canardHandleRxFrame+0x154>
    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above
 80044f0:	488d      	ldr	r0, [pc, #564]	; (8004728 <canardHandleRxFrame+0x3a0>)
 80044f2:	f7fc fc81 	bl	8000df8 <hardAssertTmp>
 80044f6:	e7b4      	b.n	8004462 <canardHandleRxFrame+0xda>
            (tid_timed_out) ||
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <canardHandleRxFrame+0x176>
 80044fc:	2301      	movs	r3, #1
    if (need_restart)
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d132      	bne.n	8004568 <canardHandleRxFrame+0x1e0>
    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8004502:	4653      	mov	r3, sl
 8004504:	2b00      	cmp	r3, #0
 8004506:	d054      	beq.n	80045b2 <canardHandleRxFrame+0x22a>
 8004508:	464b      	mov	r3, r9
 800450a:	065b      	lsls	r3, r3, #25
 800450c:	d551      	bpl.n	80045b2 <canardHandleRxFrame+0x22a>
        if (TOGGLE_BIT(tail_byte) != 0)
 800450e:	464b      	mov	r3, r9
 8004510:	069b      	lsls	r3, r3, #26
 8004512:	d44b      	bmi.n	80045ac <canardHandleRxFrame+0x224>
        rx_state->timestamp_usec = timestamp_usec;
 8004514:	9a02      	ldr	r2, [sp, #8]
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	60a2      	str	r2, [r4, #8]
 800451a:	60e3      	str	r3, [r4, #12]
        CanardRxTransfer rx_transfer = {
 800451c:	af0a      	add	r7, sp, #40	; 0x28
 800451e:	2220      	movs	r2, #32
 8004520:	2100      	movs	r1, #0
 8004522:	0038      	movs	r0, r7
 8004524:	f002 fa93 	bl	8006a4e <memset>
 8004528:	9a02      	ldr	r2, [sp, #8]
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	920a      	str	r2, [sp, #40]	; 0x28
 800452e:	930b      	str	r3, [sp, #44]	; 0x2c
            .payload_head = frame->data,
 8004530:	1d2b      	adds	r3, r5, #4
        CanardRxTransfer rx_transfer = {
 8004532:	930c      	str	r3, [sp, #48]	; 0x30
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8004534:	7b2b      	ldrb	r3, [r5, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 800453a:	82bb      	strh	r3, [r7, #20]
 800453c:	9b08      	ldr	r3, [sp, #32]
 800453e:	82fb      	strh	r3, [r7, #22]
 8004540:	9b06      	ldr	r3, [sp, #24]
 8004542:	763b      	strb	r3, [r7, #24]
 8004544:	9b04      	ldr	r3, [sp, #16]
 8004546:	767b      	strb	r3, [r7, #25]
 8004548:	9b07      	ldr	r3, [sp, #28]
 800454a:	76bb      	strb	r3, [r7, #26]
 800454c:	4643      	mov	r3, r8
 800454e:	76fb      	strb	r3, [r7, #27]
        ins->on_reception(ins, &rx_transfer, destination_node_id);
 8004550:	68b3      	ldr	r3, [r6, #8]
 8004552:	465a      	mov	r2, fp
 8004554:	0039      	movs	r1, r7
 8004556:	0030      	movs	r0, r6
 8004558:	4798      	blx	r3
        prepareForNextTransfer(rx_state);
 800455a:	0020      	movs	r0, r4
 800455c:	f7ff f990 	bl	8003880 <prepareForNextTransfer>
        return CANARD_OK;
 8004560:	2000      	movs	r0, #0
 8004562:	e7bb      	b.n	80044dc <canardHandleRxFrame+0x154>
            (tid_timed_out) ||
 8004564:	2300      	movs	r3, #0
 8004566:	e7ca      	b.n	80044fe <canardHandleRxFrame+0x176>
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8004568:	231f      	movs	r3, #31
 800456a:	464a      	mov	r2, r9
 800456c:	4013      	ands	r3, r2
 800456e:	009a      	lsls	r2, r3, #2
 8004570:	7de3      	ldrb	r3, [r4, #23]
 8004572:	217c      	movs	r1, #124	; 0x7c
 8004574:	438b      	bics	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	75e3      	strb	r3, [r4, #23]
        rx_state->next_toggle = 0;
 800457a:	b2da      	uxtb	r2, r3
 800457c:	237f      	movs	r3, #127	; 0x7f
 800457e:	4013      	ands	r3, r2
 8004580:	75e3      	strb	r3, [r4, #23]
        releaseStatePayload(ins, rx_state);
 8004582:	0021      	movs	r1, r4
 8004584:	0030      	movs	r0, r6
 8004586:	f7ff f967 	bl	8003858 <releaseStatePayload>
        if (!IS_START_OF_TRANSFER(tail_byte))
 800458a:	4653      	mov	r3, sl
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1b8      	bne.n	8004502 <canardHandleRxFrame+0x17a>
            rx_state->transfer_id++;
 8004590:	7de3      	ldrb	r3, [r4, #23]
 8004592:	065a      	lsls	r2, r3, #25
 8004594:	0ed2      	lsrs	r2, r2, #27
 8004596:	1c51      	adds	r1, r2, #1
 8004598:	221f      	movs	r2, #31
 800459a:	400a      	ands	r2, r1
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	217c      	movs	r1, #124	; 0x7c
 80045a0:	438b      	bics	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	75e3      	strb	r3, [r4, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 80045a6:	200d      	movs	r0, #13
 80045a8:	4240      	negs	r0, r0
 80045aa:	e797      	b.n	80044dc <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_WRONG_TOGGLE;
 80045ac:	200e      	movs	r0, #14
 80045ae:	4240      	negs	r0, r0
 80045b0:	e794      	b.n	80044dc <canardHandleRxFrame+0x154>
    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 80045b2:	7de3      	ldrb	r3, [r4, #23]
 80045b4:	065b      	lsls	r3, r3, #25
 80045b6:	0edb      	lsrs	r3, r3, #27
 80045b8:	9a04      	ldr	r2, [sp, #16]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d000      	beq.n	80045c0 <canardHandleRxFrame+0x238>
 80045be:	e106      	b.n	80047ce <canardHandleRxFrame+0x446>
    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 80045c0:	464b      	mov	r3, r9
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2201      	movs	r2, #1
 80045c6:	401a      	ands	r2, r3
 80045c8:	7de3      	ldrb	r3, [r4, #23]
 80045ca:	09db      	lsrs	r3, r3, #7
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d000      	beq.n	80045d2 <canardHandleRxFrame+0x24a>
 80045d0:	e100      	b.n	80047d4 <canardHandleRxFrame+0x44c>
    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 80045d2:	4653      	mov	r3, sl
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d037      	beq.n	8004648 <canardHandleRxFrame+0x2c0>
 80045d8:	464b      	mov	r3, r9
 80045da:	065b      	lsls	r3, r3, #25
 80045dc:	d434      	bmi.n	8004648 <canardHandleRxFrame+0x2c0>
        if (frame->data_len <= 3)
 80045de:	7b2b      	ldrb	r3, [r5, #12]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d800      	bhi.n	80045e6 <canardHandleRxFrame+0x25e>
 80045e4:	e0f9      	b.n	80047da <canardHandleRxFrame+0x452>
        rx_state->timestamp_usec = timestamp_usec;
 80045e6:	9a02      	ldr	r2, [sp, #8]
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	60a2      	str	r2, [r4, #8]
 80045ec:	60e3      	str	r3, [r4, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80045ee:	1daf      	adds	r7, r5, #6
                                                 (uint8_t) (frame->data_len - 3));
 80045f0:	7b2b      	ldrb	r3, [r5, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80045f2:	3b03      	subs	r3, #3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	0030      	movs	r0, r6
 80045f8:	300c      	adds	r0, #12
 80045fa:	003a      	movs	r2, r7
 80045fc:	0021      	movs	r1, r4
 80045fe:	f7ff f836 	bl	800366e <bufferBlockPushBytes>
        if (ret < 0)
 8004602:	2800      	cmp	r0, #0
 8004604:	db17      	blt.n	8004636 <canardHandleRxFrame+0x2ae>
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8004606:	792b      	ldrb	r3, [r5, #4]
 8004608:	796a      	ldrb	r2, [r5, #5]
 800460a:	0212      	lsls	r2, r2, #8
 800460c:	4313      	orrs	r3, r2
 800460e:	8323      	strh	r3, [r4, #24]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8004610:	7b2a      	ldrb	r2, [r5, #12]
 8004612:	3a03      	subs	r2, #3
 8004614:	b2d2      	uxtb	r2, r2
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004616:	8aa0      	ldrh	r0, [r4, #20]
 8004618:	0039      	movs	r1, r7
 800461a:	f7fe fff4 	bl	8003606 <crcAdd>
 800461e:	82a0      	strh	r0, [r4, #20]
    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8004620:	7de1      	ldrb	r1, [r4, #23]
 8004622:	43cb      	mvns	r3, r1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	09db      	lsrs	r3, r3, #7
 8004628:	01db      	lsls	r3, r3, #7
 800462a:	227f      	movs	r2, #127	; 0x7f
 800462c:	400a      	ands	r2, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	75e3      	strb	r3, [r4, #23]
    return CANARD_OK;
 8004632:	2000      	movs	r0, #0
 8004634:	e752      	b.n	80044dc <canardHandleRxFrame+0x154>
            releaseStatePayload(ins, rx_state);
 8004636:	0021      	movs	r1, r4
 8004638:	0030      	movs	r0, r6
 800463a:	f7ff f90d 	bl	8003858 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800463e:	0020      	movs	r0, r4
 8004640:	f7ff f91e 	bl	8003880 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 8004644:	2003      	movs	r0, #3
 8004646:	e749      	b.n	80044dc <canardHandleRxFrame+0x154>
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8004648:	4653      	mov	r3, sl
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <canardHandleRxFrame+0x2cc>
 800464e:	464b      	mov	r3, r9
 8004650:	065b      	lsls	r3, r3, #25
 8004652:	d50b      	bpl.n	800466c <canardHandleRxFrame+0x2e4>
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8004654:	7b2b      	ldrb	r3, [r5, #12]
 8004656:	3b01      	subs	r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4699      	mov	r9, r3
        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 800465c:	8ae2      	ldrh	r2, [r4, #22]
 800465e:	0592      	lsls	r2, r2, #22
 8004660:	0d92      	lsrs	r2, r2, #22
 8004662:	2a05      	cmp	r2, #5
 8004664:	d82d      	bhi.n	80046c2 <canardHandleRxFrame+0x33a>
        uint8_t tail_offset = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	464f      	mov	r7, r9
            for (size_t i = rx_state->payload_len;
 800466a:	e024      	b.n	80046b6 <canardHandleRxFrame+0x32e>
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800466c:	1d2f      	adds	r7, r5, #4
                                                 (uint8_t) (frame->data_len - 1));
 800466e:	7b2b      	ldrb	r3, [r5, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8004670:	3b01      	subs	r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	0030      	movs	r0, r6
 8004676:	300c      	adds	r0, #12
 8004678:	003a      	movs	r2, r7
 800467a:	0021      	movs	r1, r4
 800467c:	f7fe fff7 	bl	800366e <bufferBlockPushBytes>
        if (ret < 0)
 8004680:	2800      	cmp	r0, #0
 8004682:	db08      	blt.n	8004696 <canardHandleRxFrame+0x30e>
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8004684:	7b2a      	ldrb	r2, [r5, #12]
 8004686:	3a01      	subs	r2, #1
 8004688:	b2d2      	uxtb	r2, r2
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800468a:	8aa0      	ldrh	r0, [r4, #20]
 800468c:	0039      	movs	r1, r7
 800468e:	f7fe ffba 	bl	8003606 <crcAdd>
 8004692:	82a0      	strh	r0, [r4, #20]
    {
 8004694:	e7c4      	b.n	8004620 <canardHandleRxFrame+0x298>
            releaseStatePayload(ins, rx_state);
 8004696:	0021      	movs	r1, r4
 8004698:	0030      	movs	r0, r6
 800469a:	f7ff f8dd 	bl	8003858 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800469e:	0020      	movs	r0, r4
 80046a0:	f7ff f8ee 	bl	8003880 <prepareForNextTransfer>
            return CANARD_ERROR_OUT_OF_MEMORY;
 80046a4:	2003      	movs	r0, #3
 80046a6:	e719      	b.n	80044dc <canardHandleRxFrame+0x154>
                rx_state->buffer_head[i] = frame->data[tail_offset];
 80046a8:	18e9      	adds	r1, r5, r3
 80046aa:	7908      	ldrb	r0, [r1, #4]
 80046ac:	18a1      	adds	r1, r4, r2
 80046ae:	7688      	strb	r0, [r1, #26]
                 i++, tail_offset++)
 80046b0:	3201      	adds	r2, #1
 80046b2:	3301      	adds	r3, #1
 80046b4:	b2db      	uxtb	r3, r3
            for (size_t i = rx_state->payload_len;
 80046b6:	2a05      	cmp	r2, #5
 80046b8:	d838      	bhi.n	800472c <canardHandleRxFrame+0x3a4>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 80046ba:	42bb      	cmp	r3, r7
 80046bc:	d3f4      	bcc.n	80046a8 <canardHandleRxFrame+0x320>
 80046be:	46b9      	mov	r9, r7
 80046c0:	e035      	b.n	800472e <canardHandleRxFrame+0x3a6>
            CanardBufferBlock* block = rx_state->buffer_blocks;
 80046c2:	6863      	ldr	r3, [r4, #4]
            if (block != NULL)          // If there's no middle, that's fine, we'll use only head and tail
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d032      	beq.n	800472e <canardHandleRxFrame+0x3a6>
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80046c8:	2706      	movs	r7, #6
 80046ca:	001a      	movs	r2, r3
 80046cc:	e001      	b.n	80046d2 <canardHandleRxFrame+0x34a>
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 80046ce:	371c      	adds	r7, #28
                    block = block->next;
 80046d0:	001a      	movs	r2, r3
                while (block->next != NULL)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1fa      	bne.n	80046ce <canardHandleRxFrame+0x346>
                CANARD_ASSERT(block != NULL);
 80046d8:	4692      	mov	sl, r2
 80046da:	2a00      	cmp	r2, #0
 80046dc:	d00a      	beq.n	80046f4 <canardHandleRxFrame+0x36c>
                const size_t offset_within_block = rx_state->payload_len - offset;
 80046de:	8ae3      	ldrh	r3, [r4, #22]
 80046e0:	059b      	lsls	r3, r3, #22
 80046e2:	0d9b      	lsrs	r3, r3, #22
 80046e4:	1bdf      	subs	r7, r3, r7
                CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 80046e6:	2f1b      	cmp	r7, #27
 80046e8:	d808      	bhi.n	80046fc <canardHandleRxFrame+0x374>
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80046ea:	2300      	movs	r3, #0
 80046ec:	46a4      	mov	ip, r4
 80046ee:	4654      	mov	r4, sl
 80046f0:	4648      	mov	r0, r9
 80046f2:	e00e      	b.n	8004712 <canardHandleRxFrame+0x38a>
                CANARD_ASSERT(block != NULL);
 80046f4:	480c      	ldr	r0, [pc, #48]	; (8004728 <canardHandleRxFrame+0x3a0>)
 80046f6:	f7fc fb7f 	bl	8000df8 <hardAssertTmp>
 80046fa:	e7f0      	b.n	80046de <canardHandleRxFrame+0x356>
                CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 80046fc:	480a      	ldr	r0, [pc, #40]	; (8004728 <canardHandleRxFrame+0x3a0>)
 80046fe:	f7fc fb7b 	bl	8000df8 <hardAssertTmp>
 8004702:	e7f2      	b.n	80046ea <canardHandleRxFrame+0x362>
                    block->data[i] = frame->data[tail_offset];
 8004704:	18ea      	adds	r2, r5, r3
 8004706:	7911      	ldrb	r1, [r2, #4]
 8004708:	19e2      	adds	r2, r4, r7
 800470a:	7111      	strb	r1, [r2, #4]
                     i++, tail_offset++)
 800470c:	3701      	adds	r7, #1
 800470e:	3301      	adds	r3, #1
 8004710:	b2db      	uxtb	r3, r3
                for (size_t i = offset_within_block;
 8004712:	2f1b      	cmp	r7, #27
 8004714:	d842      	bhi.n	800479c <canardHandleRxFrame+0x414>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8004716:	4283      	cmp	r3, r0
 8004718:	d3f4      	bcc.n	8004704 <canardHandleRxFrame+0x37c>
 800471a:	4664      	mov	r4, ip
 800471c:	4681      	mov	r9, r0
 800471e:	e006      	b.n	800472e <canardHandleRxFrame+0x3a6>
 8004720:	0000ffff 	.word	0x0000ffff
 8004724:	001e8480 	.word	0x001e8480
 8004728:	08006fd4 	.word	0x08006fd4
 800472c:	46b9      	mov	r9, r7
        CanardRxTransfer rx_transfer = {
 800472e:	9902      	ldr	r1, [sp, #8]
 8004730:	9a03      	ldr	r2, [sp, #12]
 8004732:	910a      	str	r1, [sp, #40]	; 0x28
 8004734:	920b      	str	r2, [sp, #44]	; 0x2c
            .payload_head = rx_state->buffer_head,
 8004736:	0022      	movs	r2, r4
 8004738:	321a      	adds	r2, #26
        CanardRxTransfer rx_transfer = {
 800473a:	920c      	str	r2, [sp, #48]	; 0x30
 800473c:	6862      	ldr	r2, [r4, #4]
 800473e:	920d      	str	r2, [sp, #52]	; 0x34
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8004740:	454b      	cmp	r3, r9
 8004742:	d22e      	bcs.n	80047a2 <canardHandleRxFrame+0x41a>
 8004744:	18eb      	adds	r3, r5, r3
 8004746:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8004748:	aa0a      	add	r2, sp, #40	; 0x28
 800474a:	930e      	str	r3, [sp, #56]	; 0x38
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 800474c:	8ae3      	ldrh	r3, [r4, #22]
 800474e:	059b      	lsls	r3, r3, #22
 8004750:	0d9b      	lsrs	r3, r3, #22
 8004752:	444b      	add	r3, r9
        CanardRxTransfer rx_transfer = {
 8004754:	8293      	strh	r3, [r2, #20]
 8004756:	9b08      	ldr	r3, [sp, #32]
 8004758:	82d3      	strh	r3, [r2, #22]
 800475a:	9b06      	ldr	r3, [sp, #24]
 800475c:	7613      	strb	r3, [r2, #24]
 800475e:	9b04      	ldr	r3, [sp, #16]
 8004760:	7653      	strb	r3, [r2, #25]
 8004762:	9b07      	ldr	r3, [sp, #28]
 8004764:	7693      	strb	r3, [r2, #26]
 8004766:	4643      	mov	r3, r8
 8004768:	76d3      	strb	r3, [r2, #27]
        rx_state->buffer_blocks = NULL;     // Block list ownership has been transferred to rx_transfer!
 800476a:	2300      	movs	r3, #0
 800476c:	6063      	str	r3, [r4, #4]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 800476e:	1d29      	adds	r1, r5, #4
 8004770:	7b2a      	ldrb	r2, [r5, #12]
 8004772:	3a01      	subs	r2, #1
 8004774:	8aa0      	ldrh	r0, [r4, #20]
 8004776:	f7fe ff46 	bl	8003606 <crcAdd>
 800477a:	82a0      	strh	r0, [r4, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 800477c:	8b23      	ldrh	r3, [r4, #24]
 800477e:	4298      	cmp	r0, r3
 8004780:	d011      	beq.n	80047a6 <canardHandleRxFrame+0x41e>
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8004782:	a90a      	add	r1, sp, #40	; 0x28
 8004784:	0030      	movs	r0, r6
 8004786:	f7ff fdeb 	bl	8004360 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 800478a:	0020      	movs	r0, r4
 800478c:	f7ff f878 	bl	8003880 <prepareForNextTransfer>
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8004790:	8aa2      	ldrh	r2, [r4, #20]
 8004792:	8b23      	ldrh	r3, [r4, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d00c      	beq.n	80047b2 <canardHandleRxFrame+0x42a>
            return CANARD_ERROR_RX_BAD_CRC;
 8004798:	2011      	movs	r0, #17
 800479a:	e69f      	b.n	80044dc <canardHandleRxFrame+0x154>
 800479c:	4664      	mov	r4, ip
 800479e:	4681      	mov	r9, r0
 80047a0:	e7c5      	b.n	800472e <canardHandleRxFrame+0x3a6>
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 80047a2:	2300      	movs	r3, #0
 80047a4:	e7d0      	b.n	8004748 <canardHandleRxFrame+0x3c0>
            ins->on_reception(ins, &rx_transfer, destination_node_id);
 80047a6:	465a      	mov	r2, fp
 80047a8:	a90a      	add	r1, sp, #40	; 0x28
 80047aa:	0030      	movs	r0, r6
 80047ac:	68b3      	ldr	r3, [r6, #8]
 80047ae:	4798      	blx	r3
 80047b0:	e7e7      	b.n	8004782 <canardHandleRxFrame+0x3fa>
            return CANARD_OK;
 80047b2:	2000      	movs	r0, #0
 80047b4:	e692      	b.n	80044dc <canardHandleRxFrame+0x154>
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 80047b6:	200a      	movs	r0, #10
 80047b8:	4240      	negs	r0, r0
 80047ba:	e68f      	b.n	80044dc <canardHandleRxFrame+0x154>
 80047bc:	200a      	movs	r0, #10
 80047be:	4240      	negs	r0, r0
 80047c0:	e68c      	b.n	80044dc <canardHandleRxFrame+0x154>
 80047c2:	200a      	movs	r0, #10
 80047c4:	4240      	negs	r0, r0
 80047c6:	e689      	b.n	80044dc <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_WRONG_ADDRESS;
 80047c8:	200b      	movs	r0, #11
 80047ca:	4240      	negs	r0, r0
 80047cc:	e686      	b.n	80044dc <canardHandleRxFrame+0x154>
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 80047ce:	200f      	movs	r0, #15
 80047d0:	4240      	negs	r0, r0
 80047d2:	e683      	b.n	80044dc <canardHandleRxFrame+0x154>
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 80047d4:	200e      	movs	r0, #14
 80047d6:	4240      	negs	r0, r0
 80047d8:	e680      	b.n	80044dc <canardHandleRxFrame+0x154>
            return -CANARD_ERROR_RX_SHORT_FRAME;
 80047da:	2010      	movs	r0, #16
 80047dc:	4240      	negs	r0, r0
 80047de:	e67d      	b.n	80044dc <canardHandleRxFrame+0x154>

080047e0 <isFramePriorityHigher>:

static bool g_abort_tx_on_error = false;
static bool g_abort_tx_on_nack = false;

static bool isFramePriorityHigher(uint32_t a, uint32_t b)
{
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	0003      	movs	r3, r0
    const uint32_t clean_a = a & CANARD_CAN_EXT_ID_MASK;
 80047e4:	00c5      	lsls	r5, r0, #3
 80047e6:	08ed      	lsrs	r5, r5, #3
    const uint32_t clean_b = b & CANARD_CAN_EXT_ID_MASK;
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	08d2      	lsrs	r2, r2, #3

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext_a = (a & CANARD_CAN_FRAME_EFF) != 0;
 80047ec:	0fc4      	lsrs	r4, r0, #31
    const bool ext_b = (b & CANARD_CAN_FRAME_EFF) != 0;
 80047ee:	000e      	movs	r6, r1
 80047f0:	0fc8      	lsrs	r0, r1, #31
    if (ext_a != ext_b)
 80047f2:	4284      	cmp	r4, r0
 80047f4:	d00d      	beq.n	8004812 <isFramePriorityHigher+0x32>
    {
        const uint32_t arb11_a = ext_a ? (clean_a >> 18U) : clean_a;
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db07      	blt.n	800480a <isFramePriorityHigher+0x2a>
        const uint32_t arb11_b = ext_b ? (clean_b >> 18U) : clean_b;
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	db07      	blt.n	800480e <isFramePriorityHigher+0x2e>
        if (arb11_a != arb11_b)
 80047fe:	4295      	cmp	r5, r2
 8004800:	d002      	beq.n	8004808 <isFramePriorityHigher+0x28>
        {
            return arb11_a < arb11_b;
 8004802:	4295      	cmp	r5, r2
 8004804:	4192      	sbcs	r2, r2
 8004806:	4250      	negs	r0, r2

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_a < clean_b;
}
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const uint32_t arb11_a = ext_a ? (clean_a >> 18U) : clean_a;
 800480a:	0cad      	lsrs	r5, r5, #18
 800480c:	e7f5      	b.n	80047fa <isFramePriorityHigher+0x1a>
        const uint32_t arb11_b = ext_b ? (clean_b >> 18U) : clean_b;
 800480e:	0c92      	lsrs	r2, r2, #18
 8004810:	e7f5      	b.n	80047fe <isFramePriorityHigher+0x1e>
    const bool rtr_a = (a & CANARD_CAN_FRAME_RTR) != 0;
 8004812:	2080      	movs	r0, #128	; 0x80
 8004814:	05c0      	lsls	r0, r0, #23
 8004816:	4003      	ands	r3, r0
 8004818:	1e5c      	subs	r4, r3, #1
 800481a:	41a3      	sbcs	r3, r4
 800481c:	b2db      	uxtb	r3, r3
    const bool rtr_b = (b & CANARD_CAN_FRAME_RTR) != 0;
 800481e:	4001      	ands	r1, r0
 8004820:	1e48      	subs	r0, r1, #1
 8004822:	4181      	sbcs	r1, r0
 8004824:	b2c8      	uxtb	r0, r1
    if ((clean_a == clean_b) && (rtr_a != rtr_b))
 8004826:	4295      	cmp	r5, r2
 8004828:	d003      	beq.n	8004832 <isFramePriorityHigher+0x52>
    return clean_a < clean_b;
 800482a:	4295      	cmp	r5, r2
 800482c:	4192      	sbcs	r2, r2
 800482e:	4250      	negs	r0, r2
 8004830:	e7ea      	b.n	8004808 <isFramePriorityHigher+0x28>
    if ((clean_a == clean_b) && (rtr_a != rtr_b))
 8004832:	4283      	cmp	r3, r0
 8004834:	d1e8      	bne.n	8004808 <isFramePriorityHigher+0x28>
 8004836:	e7f8      	b.n	800482a <isFramePriorityHigher+0x4a>

08004838 <convertFrameIDCanardToRegister>:

/// Converts libcanard ID value into the bxCAN TX ID register format.
static uint32_t convertFrameIDCanardToRegister(const uint32_t id)
{
 8004838:	1e03      	subs	r3, r0, #0
    uint32_t out = 0;

    if (id & CANARD_CAN_FRAME_EFF)
 800483a:	db05      	blt.n	8004848 <convertFrameIDCanardToRegister+0x10>
    {
        out = ((id & CANARD_CAN_EXT_ID_MASK) << 3U) | CANARD_STM32_CAN_TIR_IDE;
    }
    else
    {
        out = ((id & CANARD_CAN_STD_ID_MASK) << 21U);
 800483c:	0540      	lsls	r0, r0, #21
    }

    if (id & CANARD_CAN_FRAME_RTR)
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	d501      	bpl.n	8004846 <convertFrameIDCanardToRegister+0xe>
    {
        out |= CANARD_STM32_CAN_TIR_RTR;
 8004842:	2302      	movs	r3, #2
 8004844:	4318      	orrs	r0, r3
    }

    return out;
}
 8004846:	4770      	bx	lr
        out = ((id & CANARD_CAN_EXT_ID_MASK) << 3U) | CANARD_STM32_CAN_TIR_IDE;
 8004848:	00c0      	lsls	r0, r0, #3
 800484a:	2204      	movs	r2, #4
 800484c:	4310      	orrs	r0, r2
 800484e:	e7f6      	b.n	800483e <convertFrameIDCanardToRegister+0x6>

08004850 <convertFrameIDRegisterToCanard>:

/// Converts bxCAN TX/RX (sic! both RX/TX are supported) ID register value into the libcanard ID format.
static uint32_t convertFrameIDRegisterToCanard(const uint32_t id)
{
 8004850:	0003      	movs	r3, r0
# error "RIR bits do not match TIR bits, TIR --> libcanard conversion is not possible"
#endif

    uint32_t out = 0;

    if ((id & CANARD_STM32_CAN_RIR_IDE) == 0)
 8004852:	0742      	lsls	r2, r0, #29
 8004854:	d406      	bmi.n	8004864 <convertFrameIDRegisterToCanard+0x14>
    {
        out = (CANARD_CAN_STD_ID_MASK & (id >> 21U));
 8004856:	0d40      	lsrs	r0, r0, #21
    else
    {
        out = (CANARD_CAN_EXT_ID_MASK & (id >> 3U)) | CANARD_CAN_FRAME_EFF;
    }

    if ((id & CANARD_STM32_CAN_RIR_RTR) != 0)
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	d502      	bpl.n	8004862 <convertFrameIDRegisterToCanard+0x12>
    {
        out |= CANARD_CAN_FRAME_RTR;
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	05db      	lsls	r3, r3, #23
 8004860:	4318      	orrs	r0, r3
    }

    return out;
}
 8004862:	4770      	bx	lr
        out = (CANARD_CAN_EXT_ID_MASK & (id >> 3U)) | CANARD_CAN_FRAME_EFF;
 8004864:	08c2      	lsrs	r2, r0, #3
 8004866:	2080      	movs	r0, #128	; 0x80
 8004868:	0600      	lsls	r0, r0, #24
 800486a:	4310      	orrs	r0, r2
 800486c:	e7f4      	b.n	8004858 <convertFrameIDRegisterToCanard+0x8>
	...

08004870 <processErrorStatus>:
    return false;
}


static void processErrorStatus(void)
{
 8004870:	b530      	push	{r4, r5, lr}
    /*
     * Aborting TX transmissions if abort on error was requested
     * Updating error counter
     */
    const uint8_t lec = (uint8_t)((BXCAN->ESR & CANARD_STM32_CAN_ESR_LEC_MASK) >> CANARD_STM32_CAN_ESR_LEC_SHIFT);
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <processErrorStatus+0x50>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	2207      	movs	r2, #7
 800487a:	0018      	movs	r0, r3
 800487c:	4010      	ands	r0, r2
    // 110: CRC Error - rx - invalid data
    // 111: Set by software
    
    
    
    if (lec != 0)
 800487e:	4213      	tst	r3, r2
 8004880:	d01c      	beq.n	80048bc <processErrorStatus+0x4c>
    {
        BXCAN->ESR = 0;                 // This action does only affect the LEC bits, other bits are read only!
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <processErrorStatus+0x50>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
        g_stats.error_count++;
 8004888:	490e      	ldr	r1, [pc, #56]	; (80048c4 <processErrorStatus+0x54>)
 800488a:	2201      	movs	r2, #1
 800488c:	2300      	movs	r3, #0
 800488e:	688c      	ldr	r4, [r1, #8]
 8004890:	68cd      	ldr	r5, [r1, #12]
 8004892:	1912      	adds	r2, r2, r4
 8004894:	416b      	adcs	r3, r5
 8004896:	608a      	str	r2, [r1, #8]
 8004898:	60cb      	str	r3, [r1, #12]

        // Abort pending transmissions if auto abort on error is enabled, or if we're in bus off mode
        if ((g_abort_tx_on_error) ||
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <processErrorStatus+0x58>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <processErrorStatus+0x46>
            (g_abort_tx_on_nack && (lec == 3)) || // (lec == 3) => AckError // TODO: Potentially also abort when (lec == 5) => Bit0Error (which can occur during bus-off recovery)?
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <processErrorStatus+0x5c>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
        if ((g_abort_tx_on_error) ||
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <processErrorStatus+0x3e>
            (g_abort_tx_on_nack && (lec == 3)) || // (lec == 3) => AckError // TODO: Potentially also abort when (lec == 5) => Bit0Error (which can occur during bus-off recovery)?
 80048aa:	2803      	cmp	r0, #3
 80048ac:	d003      	beq.n	80048b6 <processErrorStatus+0x46>
            (BXCAN->ESR & CANARD_STM32_CAN_ESR_BOFF))
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <processErrorStatus+0x50>)
 80048b0:	699b      	ldr	r3, [r3, #24]
            (g_abort_tx_on_nack && (lec == 3)) || // (lec == 3) => AckError // TODO: Potentially also abort when (lec == 5) => Bit0Error (which can occur during bus-off recovery)?
 80048b2:	075b      	lsls	r3, r3, #29
 80048b4:	d502      	bpl.n	80048bc <processErrorStatus+0x4c>
        {
            BXCAN->TSR = CANARD_STM32_CAN_TSR_ABRQ0 | CANARD_STM32_CAN_TSR_ABRQ1 | CANARD_STM32_CAN_TSR_ABRQ2;
 80048b6:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <processErrorStatus+0x50>)
 80048b8:	4a05      	ldr	r2, [pc, #20]	; (80048d0 <processErrorStatus+0x60>)
 80048ba:	609a      	str	r2, [r3, #8]
//       g_stats.error_count++;
//   }
//   if (BXCAN->ESR & CANARD_STM32_CAN_ESR_REC_MASK) {
//       g_stats.rx_overflow_count++;
//   }
}
 80048bc:	bd30      	pop	{r4, r5, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	40006400 	.word	0x40006400
 80048c4:	20000aa0 	.word	0x20000aa0
 80048c8:	20000a9d 	.word	0x20000a9d
 80048cc:	20000a9e 	.word	0x20000a9e
 80048d0:	00808080 	.word	0x00808080

080048d4 <waitMSRINAKBitStateChange>:
{
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	0006      	movs	r6, r0
 80048d8:	000d      	movs	r5, r1
    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 80048da:	2400      	movs	r4, #0
 80048dc:	23fa      	movs	r3, #250	; 0xfa
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	429c      	cmp	r4, r3
 80048e2:	d20b      	bcs.n	80048fc <waitMSRINAKBitStateChange+0x28>
        const bool state = (bxcan->MSR & CANARD_STM32_CAN_MSR_INAK) != 0;
 80048e4:	6872      	ldr	r2, [r6, #4]
 80048e6:	2301      	movs	r3, #1
 80048e8:	4013      	ands	r3, r2
        if (state == target_state)
 80048ea:	42ab      	cmp	r3, r5
 80048ec:	d008      	beq.n	8004900 <waitMSRINAKBitStateChange+0x2c>
        usleep(1000);           // TODO: This function may be missing on some platforms
 80048ee:	20fa      	movs	r0, #250	; 0xfa
 80048f0:	0080      	lsls	r0, r0, #2
 80048f2:	f7fd fe15 	bl	8002520 <usleep>
    for (uint16_t wait_ack = 0; wait_ack < TimeoutMilliseconds; wait_ack++)
 80048f6:	3401      	adds	r4, #1
 80048f8:	b2a4      	uxth	r4, r4
 80048fa:	e7ef      	b.n	80048dc <waitMSRINAKBitStateChange+0x8>
    return false;
 80048fc:	2000      	movs	r0, #0
 80048fe:	e000      	b.n	8004902 <waitMSRINAKBitStateChange+0x2e>
            return true;
 8004900:	2001      	movs	r0, #1
}
 8004902:	bd70      	pop	{r4, r5, r6, pc}

08004904 <canardSTM32Init>:


int16_t canardSTM32Init(const CanardSTM32CANTimings* const timings,
                        const CanardSTM32IfaceMode iface_mode)
{
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	0005      	movs	r5, r0
 8004908:	000c      	movs	r4, r1
    /*
     * Paranoia time.
     */
    if ((iface_mode != CanardSTM32IfaceModeNormal) &&
 800490a:	2903      	cmp	r1, #3
 800490c:	d900      	bls.n	8004910 <canardSTM32Init+0xc>
 800490e:	e0ae      	b.n	8004a6e <canardSTM32Init+0x16a>
        (iface_mode != CanardSTM32IfaceModeAutomaticTxAbortOnNack))
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
    }

    if ((timings == NULL) ||
 8004910:	2800      	cmp	r0, #0
 8004912:	d100      	bne.n	8004916 <canardSTM32Init+0x12>
 8004914:	e0ae      	b.n	8004a74 <canardSTM32Init+0x170>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 8004916:	8803      	ldrh	r3, [r0, #0]
    if ((timings == NULL) ||
 8004918:	2b00      	cmp	r3, #0
 800491a:	d100      	bne.n	800491e <canardSTM32Init+0x1a>
 800491c:	e0ad      	b.n	8004a7a <canardSTM32Init+0x176>
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	00d2      	lsls	r2, r2, #3
 8004922:	4293      	cmp	r3, r2
 8004924:	d900      	bls.n	8004928 <canardSTM32Init+0x24>
 8004926:	e0ab      	b.n	8004a80 <canardSTM32Init+0x17c>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8004928:	7903      	ldrb	r3, [r0, #4]
        (timings->bit_rate_prescaler < 1) || (timings->bit_rate_prescaler > 1024) ||
 800492a:	2b00      	cmp	r3, #0
 800492c:	d100      	bne.n	8004930 <canardSTM32Init+0x2c>
 800492e:	e0aa      	b.n	8004a86 <canardSTM32Init+0x182>
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8004930:	2b04      	cmp	r3, #4
 8004932:	d900      	bls.n	8004936 <canardSTM32Init+0x32>
 8004934:	e0aa      	b.n	8004a8c <canardSTM32Init+0x188>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8004936:	7883      	ldrb	r3, [r0, #2]
        (timings->max_resynchronization_jump_width < 1) || (timings->max_resynchronization_jump_width > 4) ||
 8004938:	2b00      	cmp	r3, #0
 800493a:	d100      	bne.n	800493e <canardSTM32Init+0x3a>
 800493c:	e0a9      	b.n	8004a92 <canardSTM32Init+0x18e>
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 800493e:	2b10      	cmp	r3, #16
 8004940:	d900      	bls.n	8004944 <canardSTM32Init+0x40>
 8004942:	e0a9      	b.n	8004a98 <canardSTM32Init+0x194>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 8004944:	78c3      	ldrb	r3, [r0, #3]
        (timings->bit_segment_1 < 1) || (timings->bit_segment_1 > 16) ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d100      	bne.n	800494c <canardSTM32Init+0x48>
 800494a:	e0a8      	b.n	8004a9e <canardSTM32Init+0x19a>
        (timings->bit_segment_2 < 1) || (timings->bit_segment_2 > 8))
 800494c:	2b08      	cmp	r3, #8
 800494e:	d900      	bls.n	8004952 <canardSTM32Init+0x4e>
 8004950:	e0a8      	b.n	8004aa4 <canardSTM32Init+0x1a0>
    }

    /*
     * Initial setup
     */
    memset(&g_stats, 0, sizeof(g_stats));
 8004952:	2210      	movs	r2, #16
 8004954:	2100      	movs	r1, #0
 8004956:	4855      	ldr	r0, [pc, #340]	; (8004aac <canardSTM32Init+0x1a8>)
 8004958:	f002 f879 	bl	8006a4e <memset>

    g_abort_tx_on_error = (iface_mode == CanardSTM32IfaceModeAutomaticTxAbortOnError);
 800495c:	1ea3      	subs	r3, r4, #2
 800495e:	425a      	negs	r2, r3
 8004960:	4153      	adcs	r3, r2
 8004962:	4a53      	ldr	r2, [pc, #332]	; (8004ab0 <canardSTM32Init+0x1ac>)
 8004964:	7013      	strb	r3, [r2, #0]
    g_abort_tx_on_nack = (iface_mode == CanardSTM32IfaceModeAutomaticTxAbortOnNack);
 8004966:	1ee3      	subs	r3, r4, #3
 8004968:	425a      	negs	r2, r3
 800496a:	4153      	adcs	r3, r2
 800496c:	4a51      	ldr	r2, [pc, #324]	; (8004ab4 <canardSTM32Init+0x1b0>)
 800496e:	7013      	strb	r3, [r2, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
    }
    // CAN1 will be left in the initialization mode forever, in this mode it does not affect the bus at all.
#endif

    BXCAN->IER = 0;                                             // We need no interrupts
 8004970:	4851      	ldr	r0, [pc, #324]	; (8004ab8 <canardSTM32Init+0x1b4>)
 8004972:	2300      	movs	r3, #0
 8004974:	6143      	str	r3, [r0, #20]
    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_SLEEP;                  // Exit sleep mode
 8004976:	6803      	ldr	r3, [r0, #0]
 8004978:	2202      	movs	r2, #2
 800497a:	4393      	bics	r3, r2
 800497c:	6003      	str	r3, [r0, #0]
    BXCAN->MCR |= CANARD_STM32_CAN_MCR_INRQ;                    // Request init
 800497e:	6803      	ldr	r3, [r0, #0]
 8004980:	3a01      	subs	r2, #1
 8004982:	4313      	orrs	r3, r2
 8004984:	6003      	str	r3, [r0, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, true))                // Wait for synchronization
 8004986:	2101      	movs	r1, #1
 8004988:	f7ff ffa4 	bl	80048d4 <waitMSRINAKBitStateChange>
 800498c:	2800      	cmp	r0, #0
 800498e:	d057      	beq.n	8004a40 <canardSTM32Init+0x13c>
    }

    /*
     * Hardware initialization (the hardware has already confirmed initialization mode, see above)
     */
    BXCAN->MCR = CANARD_STM32_CAN_MCR_ABOM | CANARD_STM32_CAN_MCR_AWUM | CANARD_STM32_CAN_MCR_INRQ;  // RM page 648
 8004990:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <canardSTM32Init+0x1b4>)
 8004992:	2261      	movs	r2, #97	; 0x61
 8004994:	601a      	str	r2, [r3, #0]

    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 8004996:	792b      	ldrb	r3, [r5, #4]
 8004998:	3b01      	subs	r3, #1
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	22c0      	movs	r2, #192	; 0xc0
 800499e:	0492      	lsls	r2, r2, #18
 80049a0:	4013      	ands	r3, r2
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 80049a2:	78aa      	ldrb	r2, [r5, #2]
 80049a4:	3a01      	subs	r2, #1
 80049a6:	0412      	lsls	r2, r2, #16
 80049a8:	21f0      	movs	r1, #240	; 0xf0
 80049aa:	0309      	lsls	r1, r1, #12
 80049ac:	400a      	ands	r2, r1
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 80049ae:	4313      	orrs	r3, r2
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 80049b0:	78ea      	ldrb	r2, [r5, #3]
 80049b2:	3a01      	subs	r2, #1
 80049b4:	0512      	lsls	r2, r2, #20
 80049b6:	21e0      	movs	r1, #224	; 0xe0
 80049b8:	03c9      	lsls	r1, r1, #15
 80049ba:	400a      	ands	r2, r1
                 (((timings->bit_segment_1 - 1U)                    &   15U) << 16U) |
 80049bc:	4313      	orrs	r3, r2
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 80049be:	882a      	ldrh	r2, [r5, #0]
 80049c0:	3a01      	subs	r2, #1
 80049c2:	0592      	lsls	r2, r2, #22
 80049c4:	0d92      	lsrs	r2, r2, #22
                 (((timings->bit_segment_2 - 1U)                    &    7U) << 20U) |
 80049c6:	4313      	orrs	r3, r2
                 ((iface_mode == CanardSTM32IfaceModeSilent) ? CANARD_STM32_CAN_BTR_SILM : 0);
 80049c8:	2c01      	cmp	r4, #1
 80049ca:	d03f      	beq.n	8004a4c <canardSTM32Init+0x148>
 80049cc:	2200      	movs	r2, #0
                 ((timings->bit_rate_prescaler - 1U)                & 1023U) |
 80049ce:	4313      	orrs	r3, r2
    BXCAN->BTR = (((timings->max_resynchronization_jump_width - 1U) &    3U) << 24U) |
 80049d0:	4a39      	ldr	r2, [pc, #228]	; (8004ab8 <canardSTM32Init+0x1b4>)
 80049d2:	61d3      	str	r3, [r2, #28]

    CANARD_ASSERT(0 == BXCAN->IER);             // Making sure the iterrupts are indeed disabled
 80049d4:	6953      	ldr	r3, [r2, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d13b      	bne.n	8004a52 <canardSTM32Init+0x14e>

    BXCAN->MCR &= ~CANARD_STM32_CAN_MCR_INRQ;   // Leave init mode
 80049da:	4837      	ldr	r0, [pc, #220]	; (8004ab8 <canardSTM32Init+0x1b4>)
 80049dc:	6803      	ldr	r3, [r0, #0]
 80049de:	2201      	movs	r2, #1
 80049e0:	4393      	bics	r3, r2
 80049e2:	6003      	str	r3, [r0, #0]

    if (!waitMSRINAKBitStateChange(BXCAN, false))
 80049e4:	2100      	movs	r1, #0
 80049e6:	f7ff ff75 	bl	80048d4 <waitMSRINAKBitStateChange>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d035      	beq.n	8004a5a <canardSTM32Init+0x156>
     * CAN2 filters are offset by 14.
     * We use 14 filters at most always which simplifies the code and ensures compatibility with all
     * MCU within the STM32 family.
     */
    {
        uint32_t fmr = CANARD_STM32_CAN1->FMR & 0xFFFFC0F1U;
 80049ee:	4a32      	ldr	r2, [pc, #200]	; (8004ab8 <canardSTM32Init+0x1b4>)
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	58d1      	ldr	r1, [r2, r3]
 80049f6:	4831      	ldr	r0, [pc, #196]	; (8004abc <canardSTM32Init+0x1b8>)
 80049f8:	4008      	ands	r0, r1
        fmr |= CANARD_STM32_NUM_ACCEPTANCE_FILTERS << 8U;                // CAN2 start bank = 14 (if CAN2 is present)
        CANARD_STM32_CAN1->FMR = fmr | CANARD_STM32_CAN_FMR_FINIT;
 80049fa:	4931      	ldr	r1, [pc, #196]	; (8004ac0 <canardSTM32Init+0x1bc>)
 80049fc:	4301      	orrs	r1, r0
 80049fe:	50d1      	str	r1, [r2, r3]
    }

    CANARD_ASSERT(((CANARD_STM32_CAN1->FMR >> 8U) & 0x3FU) == CANARD_STM32_NUM_ACCEPTANCE_FILTERS);
 8004a00:	58d2      	ldr	r2, [r2, r3]
 8004a02:	0a12      	lsrs	r2, r2, #8
 8004a04:	3bc2      	subs	r3, #194	; 0xc2
 8004a06:	3bff      	subs	r3, #255	; 0xff
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b0e      	cmp	r3, #14
 8004a0c:	d12b      	bne.n	8004a66 <canardSTM32Init+0x162>

    CANARD_STM32_CAN1->FM1R = 0;                                        // Indentifier Mask mode
 8004a0e:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <canardSTM32Init+0x1b4>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	2181      	movs	r1, #129	; 0x81
 8004a14:	0089      	lsls	r1, r1, #2
 8004a16:	505a      	str	r2, [r3, r1]
    CANARD_STM32_CAN1->FS1R = 0x0FFFFFFF;                               // All 32-bit
 8004a18:	3108      	adds	r1, #8
 8004a1a:	482a      	ldr	r0, [pc, #168]	; (8004ac4 <canardSTM32Init+0x1c0>)
 8004a1c:	5058      	str	r0, [r3, r1]

    // Filters are alternating between FIFO0 and FIFO1 in order to equalize the load.
    // This will cause occasional priority inversion and frame reordering on reception,
    // but that is acceptable for UAVCAN, and a majority of other protocols will tolerate
    // this too, since there will be no reordering within the same CAN ID.
    CANARD_STM32_CAN1->FFA1R = 0x0AAAAAAA;
 8004a1e:	3108      	adds	r1, #8
 8004a20:	4829      	ldr	r0, [pc, #164]	; (8004ac8 <canardSTM32Init+0x1c4>)
 8004a22:	5058      	str	r0, [r3, r1]
#if CANARD_STM32_USE_CAN2
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR1 = 0;
    CANARD_STM32_CAN1->FilterRegister[CANARD_STM32_NUM_ACCEPTANCE_FILTERS].FR2 = 0;
    CANARD_STM32_CAN1->FA1R = (1 << CANARD_STM32_NUM_ACCEPTANCE_FILTERS);  // One filter enabled
#else
    CANARD_STM32_CAN1->FilterRegister[0].FR1 = 0;
 8004a24:	312c      	adds	r1, #44	; 0x2c
 8004a26:	505a      	str	r2, [r3, r1]
    CANARD_STM32_CAN1->FilterRegister[0].FR2 = 0;
 8004a28:	3104      	adds	r1, #4
 8004a2a:	505a      	str	r2, [r3, r1]
    CANARD_STM32_CAN1->FA1R = 1;                                        // One filter enabled
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	2287      	movs	r2, #135	; 0x87
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	5098      	str	r0, [r3, r2]
#endif

    CANARD_STM32_CAN1->FMR &= ~CANARD_STM32_CAN_FMR_FINIT;              // Leave initialization mode
 8004a34:	3944      	subs	r1, #68	; 0x44
 8004a36:	585a      	ldr	r2, [r3, r1]
 8004a38:	4382      	bics	r2, r0
 8004a3a:	505a      	str	r2, [r3, r1]

    return 0;
 8004a3c:	2000      	movs	r0, #0
}
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <canardSTM32Init+0x1b4>)
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	0212      	lsls	r2, r2, #8
 8004a46:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_SET;
 8004a48:	4820      	ldr	r0, [pc, #128]	; (8004acc <canardSTM32Init+0x1c8>)
 8004a4a:	e7f8      	b.n	8004a3e <canardSTM32Init+0x13a>
                 ((iface_mode == CanardSTM32IfaceModeSilent) ? CANARD_STM32_CAN_BTR_SILM : 0);
 8004a4c:	2280      	movs	r2, #128	; 0x80
 8004a4e:	0612      	lsls	r2, r2, #24
 8004a50:	e7bd      	b.n	80049ce <canardSTM32Init+0xca>
    CANARD_ASSERT(0 == BXCAN->IER);             // Making sure the iterrupts are indeed disabled
 8004a52:	481f      	ldr	r0, [pc, #124]	; (8004ad0 <canardSTM32Init+0x1cc>)
 8004a54:	f7fc f9d0 	bl	8000df8 <hardAssertTmp>
 8004a58:	e7bf      	b.n	80049da <canardSTM32Init+0xd6>
        BXCAN->MCR = CANARD_STM32_CAN_MCR_RESET;
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <canardSTM32Init+0x1b4>)
 8004a5c:	2280      	movs	r2, #128	; 0x80
 8004a5e:	0212      	lsls	r2, r2, #8
 8004a60:	601a      	str	r2, [r3, #0]
        return -CANARD_STM32_ERROR_MSR_INAK_NOT_CLEARED;
 8004a62:	481c      	ldr	r0, [pc, #112]	; (8004ad4 <canardSTM32Init+0x1d0>)
 8004a64:	e7eb      	b.n	8004a3e <canardSTM32Init+0x13a>
    CANARD_ASSERT(((CANARD_STM32_CAN1->FMR >> 8U) & 0x3FU) == CANARD_STM32_NUM_ACCEPTANCE_FILTERS);
 8004a66:	481a      	ldr	r0, [pc, #104]	; (8004ad0 <canardSTM32Init+0x1cc>)
 8004a68:	f7fc f9c6 	bl	8000df8 <hardAssertTmp>
 8004a6c:	e7cf      	b.n	8004a0e <canardSTM32Init+0x10a>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004a6e:	2002      	movs	r0, #2
 8004a70:	4240      	negs	r0, r0
 8004a72:	e7e4      	b.n	8004a3e <canardSTM32Init+0x13a>
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004a74:	2002      	movs	r0, #2
 8004a76:	4240      	negs	r0, r0
 8004a78:	e7e1      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	4240      	negs	r0, r0
 8004a7e:	e7de      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a80:	2002      	movs	r0, #2
 8004a82:	4240      	negs	r0, r0
 8004a84:	e7db      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a86:	2002      	movs	r0, #2
 8004a88:	4240      	negs	r0, r0
 8004a8a:	e7d8      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	4240      	negs	r0, r0
 8004a90:	e7d5      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a92:	2002      	movs	r0, #2
 8004a94:	4240      	negs	r0, r0
 8004a96:	e7d2      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a98:	2002      	movs	r0, #2
 8004a9a:	4240      	negs	r0, r0
 8004a9c:	e7cf      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004a9e:	2002      	movs	r0, #2
 8004aa0:	4240      	negs	r0, r0
 8004aa2:	e7cc      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	4240      	negs	r0, r0
 8004aa8:	e7c9      	b.n	8004a3e <canardSTM32Init+0x13a>
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	20000aa0 	.word	0x20000aa0
 8004ab0:	20000a9d 	.word	0x20000a9d
 8004ab4:	20000a9e 	.word	0x20000a9e
 8004ab8:	40006400 	.word	0x40006400
 8004abc:	ffffc0f1 	.word	0xffffc0f1
 8004ac0:	00000e01 	.word	0x00000e01
 8004ac4:	0fffffff 	.word	0x0fffffff
 8004ac8:	0aaaaaaa 	.word	0x0aaaaaaa
 8004acc:	fffffc17 	.word	0xfffffc17
 8004ad0:	08006fd4 	.word	0x08006fd4
 8004ad4:	fffffc16 	.word	0xfffffc16

08004ad8 <canardSTM32Transmit>:
    return 0;
}


int16_t canardSTM32Transmit(const CanardCANFrame* const frame)
{
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	1e05      	subs	r5, r0, #0
    if (frame == NULL)
 8004ade:	d069      	beq.n	8004bb4 <canardSTM32Transmit+0xdc>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
    }

    if (frame->id & CANARD_CAN_FRAME_ERR)
 8004ae0:	6803      	ldr	r3, [r0, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	d469      	bmi.n	8004bba <canardSTM32Transmit+0xe2>
    }

    /*
     * Handling error status might free up some slots through aborts
     */
    processErrorStatus();
 8004ae6:	f7ff fec3 	bl	8004870 <processErrorStatus>
     */
    uint8_t tx_mailbox = 0xFF;

    static const uint32_t AllTME = CANARD_STM32_CAN_TSR_TME0 | CANARD_STM32_CAN_TSR_TME1 | CANARD_STM32_CAN_TSR_TME2;

    if ((BXCAN->TSR & AllTME) != AllTME)                // At least one TX mailbox is used, detailed check is needed
 8004aea:	4b35      	ldr	r3, [pc, #212]	; (8004bc0 <canardSTM32Transmit+0xe8>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	22e0      	movs	r2, #224	; 0xe0
 8004af0:	0552      	lsls	r2, r2, #21
 8004af2:	4013      	ands	r3, r2
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d037      	beq.n	8004b68 <canardSTM32Transmit+0x90>
    {
        const bool tme[3] =
        {
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME0) != 0,
 8004af8:	4931      	ldr	r1, [pc, #196]	; (8004bc0 <canardSTM32Transmit+0xe8>)
 8004afa:	688b      	ldr	r3, [r1, #8]
 8004afc:	2280      	movs	r2, #128	; 0x80
 8004afe:	04d2      	lsls	r2, r2, #19
 8004b00:	4013      	ands	r3, r2
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	4193      	sbcs	r3, r2
        const bool tme[3] =
 8004b06:	aa01      	add	r2, sp, #4
 8004b08:	7013      	strb	r3, [r2, #0]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME1) != 0,
 8004b0a:	688b      	ldr	r3, [r1, #8]
 8004b0c:	2080      	movs	r0, #128	; 0x80
 8004b0e:	0500      	lsls	r0, r0, #20
 8004b10:	4003      	ands	r3, r0
 8004b12:	1e58      	subs	r0, r3, #1
 8004b14:	4183      	sbcs	r3, r0
        const bool tme[3] =
 8004b16:	7053      	strb	r3, [r2, #1]
            (BXCAN->TSR & CANARD_STM32_CAN_TSR_TME2) != 0
 8004b18:	688b      	ldr	r3, [r1, #8]
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	0549      	lsls	r1, r1, #21
 8004b1e:	400b      	ands	r3, r1
 8004b20:	1e59      	subs	r1, r3, #1
 8004b22:	418b      	sbcs	r3, r1
        const bool tme[3] =
 8004b24:	7093      	strb	r3, [r2, #2]
        };

        for (uint8_t i = 0; i < 3; i++)
 8004b26:	2400      	movs	r4, #0
    uint8_t tx_mailbox = 0xFF;
 8004b28:	26ff      	movs	r6, #255	; 0xff
        for (uint8_t i = 0; i < 3; i++)
 8004b2a:	e002      	b.n	8004b32 <canardSTM32Transmit+0x5a>
        {
            if (tme[i])                                 // This TX mailbox is free, we can use it
            {
                tx_mailbox = i;
 8004b2c:	0026      	movs	r6, r4
        for (uint8_t i = 0; i < 3; i++)
 8004b2e:	3401      	adds	r4, #1
 8004b30:	b2e4      	uxtb	r4, r4
 8004b32:	2c02      	cmp	r4, #2
 8004b34:	d812      	bhi.n	8004b5c <canardSTM32Transmit+0x84>
            if (tme[i])                                 // This TX mailbox is free, we can use it
 8004b36:	ab01      	add	r3, sp, #4
 8004b38:	5d1b      	ldrb	r3, [r3, r4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f6      	bne.n	8004b2c <canardSTM32Transmit+0x54>
            }
            else                                        // This TX mailbox is pending, check for priority inversion
            {
                if (!isFramePriorityHigher(frame->id, convertFrameIDRegisterToCanard(BXCAN->TxMailbox[i].TIR)))
 8004b3e:	0023      	movs	r3, r4
 8004b40:	3318      	adds	r3, #24
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <canardSTM32Transmit+0xe8>)
 8004b46:	5898      	ldr	r0, [r3, r2]
 8004b48:	f7ff fe82 	bl	8004850 <convertFrameIDRegisterToCanard>
 8004b4c:	0001      	movs	r1, r0
 8004b4e:	6828      	ldr	r0, [r5, #0]
 8004b50:	f7ff fe46 	bl	80047e0 <isFramePriorityHigher>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d1ea      	bne.n	8004b2e <canardSTM32Transmit+0x56>
                {
                    // There's a mailbox whose priority is higher or equal the priority of the new frame.
                    return 0;                           // Priority inversion would occur! Reject transmission.
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e029      	b.n	8004bb0 <canardSTM32Transmit+0xd8>
                }
            }
        }

        if (tx_mailbox == 0xFF)
 8004b5c:	2eff      	cmp	r6, #255	; 0xff
 8004b5e:	d0fb      	beq.n	8004b58 <canardSTM32Transmit+0x80>
        tx_mailbox = 0;
    }

    // Avoid using asserts
    // CANARD_ASSERT(tx_mailbox < 3);                      // Index check - the value must be correct here
    if (tx_mailbox >= 3)
 8004b60:	2e02      	cmp	r6, #2
 8004b62:	d902      	bls.n	8004b6a <canardSTM32Transmit+0x92>
        return 0;
 8004b64:	2000      	movs	r0, #0
 8004b66:	e023      	b.n	8004bb0 <canardSTM32Transmit+0xd8>
        tx_mailbox = 0;
 8004b68:	2600      	movs	r6, #0

    /*
     * By this time we've proved that a priority inversion would not occur, and we've also found a free TX mailbox.
     * Therefore it is safe to enqueue the frame now.
     */
    volatile CanardSTM32TxMailboxType* const mb = &BXCAN->TxMailbox[tx_mailbox];
 8004b6a:	0134      	lsls	r4, r6, #4
 8004b6c:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <canardSTM32Transmit+0xec>)
 8004b6e:	469c      	mov	ip, r3
 8004b70:	4464      	add	r4, ip

    mb->TDTR = frame->data_len;                         // DLC equals data length except in CAN FD
 8004b72:	7b2b      	ldrb	r3, [r5, #12]
 8004b74:	6063      	str	r3, [r4, #4]

    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8004b76:	7aeb      	ldrb	r3, [r5, #11]
 8004b78:	061b      	lsls	r3, r3, #24
               (((uint32_t)frame->data[6]) << 16U) |
 8004b7a:	7aaa      	ldrb	r2, [r5, #10]
 8004b7c:	0412      	lsls	r2, r2, #16
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8004b7e:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[5]) <<  8U) |
 8004b80:	7a6a      	ldrb	r2, [r5, #9]
 8004b82:	0212      	lsls	r2, r2, #8
               (((uint32_t)frame->data[6]) << 16U) |
 8004b84:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[4]) <<  0U);
 8004b86:	7a2a      	ldrb	r2, [r5, #8]
               (((uint32_t)frame->data[5]) <<  8U) |
 8004b88:	4313      	orrs	r3, r2
    mb->TDHR = (((uint32_t)frame->data[7]) << 24U) |
 8004b8a:	60e3      	str	r3, [r4, #12]
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8004b8c:	79eb      	ldrb	r3, [r5, #7]
 8004b8e:	061b      	lsls	r3, r3, #24
               (((uint32_t)frame->data[2]) << 16U) |
 8004b90:	79aa      	ldrb	r2, [r5, #6]
 8004b92:	0412      	lsls	r2, r2, #16
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8004b94:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[1]) <<  8U) |
 8004b96:	796a      	ldrb	r2, [r5, #5]
 8004b98:	0212      	lsls	r2, r2, #8
               (((uint32_t)frame->data[2]) << 16U) |
 8004b9a:	4313      	orrs	r3, r2
               (((uint32_t)frame->data[0]) <<  0U);
 8004b9c:	792a      	ldrb	r2, [r5, #4]
               (((uint32_t)frame->data[1]) <<  8U) |
 8004b9e:	4313      	orrs	r3, r2
    mb->TDLR = (((uint32_t)frame->data[3]) << 24U) |
 8004ba0:	60a3      	str	r3, [r4, #8]

    mb->TIR = convertFrameIDCanardToRegister(frame->id) | CANARD_STM32_CAN_TIR_TXRQ;    // Go.
 8004ba2:	6828      	ldr	r0, [r5, #0]
 8004ba4:	f7ff fe48 	bl	8004838 <convertFrameIDCanardToRegister>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4318      	orrs	r0, r3
 8004bac:	6020      	str	r0, [r4, #0]

    /*
     * The frame is now enqueued and pending transmission.
     */
    return 1;
 8004bae:	2001      	movs	r0, #1
}
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004bb4:	2002      	movs	r0, #2
 8004bb6:	4240      	negs	r0, r0
 8004bb8:	e7fa      	b.n	8004bb0 <canardSTM32Transmit+0xd8>
        return -CANARD_STM32_ERROR_UNSUPPORTED_FRAME_FORMAT;
 8004bba:	4803      	ldr	r0, [pc, #12]	; (8004bc8 <canardSTM32Transmit+0xf0>)
 8004bbc:	e7f8      	b.n	8004bb0 <canardSTM32Transmit+0xd8>
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	40006400 	.word	0x40006400
 8004bc4:	40006580 	.word	0x40006580
 8004bc8:	fffffc15 	.word	0xfffffc15

08004bcc <canardSTM32Receive>:


int16_t canardSTM32Receive(CanardCANFrame* const out_frame)
{
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bce:	46c6      	mov	lr, r8
 8004bd0:	b500      	push	{lr}
 8004bd2:	1e05      	subs	r5, r0, #0
    if (out_frame == NULL)
 8004bd4:	d040      	beq.n	8004c58 <canardSTM32Receive+0x8c>
    };

    /*
     * This function must be polled periodically, so we use this opportunity to do it.
     */
    processErrorStatus();
 8004bd6:	f7ff fe4b 	bl	8004870 <processErrorStatus>

    /*
     * Reading the TX FIFO
     */
    for (uint_fast8_t i = 0; i < 2; i++)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d837      	bhi.n	8004c50 <canardSTM32Receive+0x84>
    {
        volatile CanardSTM32RxMailboxType* const mb = &BXCAN->RxMailbox[i];
 8004be0:	011e      	lsls	r6, r3, #4
 8004be2:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <canardSTM32Receive+0x94>)
 8004be4:	4694      	mov	ip, r2
 8004be6:	4466      	add	r6, ip
 8004be8:	46b0      	mov	r8, r6

        if (((*RFxR[i]) & CANARD_STM32_CAN_RFR_FMP_MASK) != 0)
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	491d      	ldr	r1, [pc, #116]	; (8004c64 <canardSTM32Receive+0x98>)
 8004bee:	5854      	ldr	r4, [r2, r1]
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	0792      	lsls	r2, r2, #30
 8004bf4:	d101      	bne.n	8004bfa <canardSTM32Receive+0x2e>
    for (uint_fast8_t i = 0; i < 2; i++)
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	e7f0      	b.n	8004bdc <canardSTM32Receive+0x10>
        {
            if (*RFxR[i] & CANARD_STM32_CAN_RFR_FOVR)
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	06db      	lsls	r3, r3, #27
 8004bfe:	d508      	bpl.n	8004c12 <canardSTM32Receive+0x46>
            {
                g_stats.rx_overflow_count++;
 8004c00:	4919      	ldr	r1, [pc, #100]	; (8004c68 <canardSTM32Receive+0x9c>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	2300      	movs	r3, #0
 8004c06:	680e      	ldr	r6, [r1, #0]
 8004c08:	684f      	ldr	r7, [r1, #4]
 8004c0a:	1992      	adds	r2, r2, r6
 8004c0c:	417b      	adcs	r3, r7
 8004c0e:	600a      	str	r2, [r1, #0]
 8004c10:	604b      	str	r3, [r1, #4]
            }

            out_frame->id = convertFrameIDRegisterToCanard(mb->RIR);
 8004c12:	4643      	mov	r3, r8
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	f7ff fe1b 	bl	8004850 <convertFrameIDRegisterToCanard>
 8004c1a:	6028      	str	r0, [r5, #0]

            out_frame->data_len = (uint8_t)(mb->RDTR & CANARD_STM32_CAN_RDTR_DLC_MASK);
 8004c1c:	4643      	mov	r3, r8
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	230f      	movs	r3, #15
 8004c22:	4013      	ands	r3, r2
 8004c24:	732b      	strb	r3, [r5, #12]

            // Caching to regular (non volatile) memory for faster reads
            const uint32_t rdlr = mb->RDLR;
 8004c26:	4643      	mov	r3, r8
 8004c28:	689a      	ldr	r2, [r3, #8]
            const uint32_t rdhr = mb->RDHR;
 8004c2a:	68db      	ldr	r3, [r3, #12]

            out_frame->data[0] = (uint8_t)(0xFFU & (rdlr >>  0U));
 8004c2c:	712a      	strb	r2, [r5, #4]
            out_frame->data[1] = (uint8_t)(0xFFU & (rdlr >>  8U));
 8004c2e:	0a11      	lsrs	r1, r2, #8
 8004c30:	7169      	strb	r1, [r5, #5]
            out_frame->data[2] = (uint8_t)(0xFFU & (rdlr >> 16U));
 8004c32:	0c11      	lsrs	r1, r2, #16
 8004c34:	71a9      	strb	r1, [r5, #6]
            out_frame->data[3] = (uint8_t)(0xFFU & (rdlr >> 24U));
 8004c36:	0e12      	lsrs	r2, r2, #24
 8004c38:	71ea      	strb	r2, [r5, #7]
            out_frame->data[4] = (uint8_t)(0xFFU & (rdhr >>  0U));
 8004c3a:	722b      	strb	r3, [r5, #8]
            out_frame->data[5] = (uint8_t)(0xFFU & (rdhr >>  8U));
 8004c3c:	0a1a      	lsrs	r2, r3, #8
 8004c3e:	726a      	strb	r2, [r5, #9]
            out_frame->data[6] = (uint8_t)(0xFFU & (rdhr >> 16U));
 8004c40:	0c1a      	lsrs	r2, r3, #16
 8004c42:	72aa      	strb	r2, [r5, #10]
            out_frame->data[7] = (uint8_t)(0xFFU & (rdhr >> 24U));
 8004c44:	0e1b      	lsrs	r3, r3, #24
 8004c46:	72eb      	strb	r3, [r5, #11]

            // Release FIFO entry we just read
            *RFxR[i] = CANARD_STM32_CAN_RFR_RFOM | CANARD_STM32_CAN_RFR_FOVR | CANARD_STM32_CAN_RFR_FULL;
 8004c48:	2338      	movs	r3, #56	; 0x38
 8004c4a:	6023      	str	r3, [r4, #0]

            // Reading successful
            return 1;
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e000      	b.n	8004c52 <canardSTM32Receive+0x86>
        }
    }

    // No frames to read
    return 0;
 8004c50:	2000      	movs	r0, #0
}
 8004c52:	bc80      	pop	{r7}
 8004c54:	46b8      	mov	r8, r7
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004c58:	2002      	movs	r0, #2
 8004c5a:	4240      	negs	r0, r0
 8004c5c:	e7f9      	b.n	8004c52 <canardSTM32Receive+0x86>
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	400065b0 	.word	0x400065b0
 8004c64:	08006f90 	.word	0x08006f90
 8004c68:	20000aa0 	.word	0x20000aa0

08004c6c <canardSTM32GetStats>:
    return 0;
}


CanardSTM32Stats canardSTM32GetStats(void)
{
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	0004      	movs	r4, r0
    return g_stats;
 8004c70:	2210      	movs	r2, #16
 8004c72:	4902      	ldr	r1, [pc, #8]	; (8004c7c <canardSTM32GetStats+0x10>)
 8004c74:	f001 fee2 	bl	8006a3c <memcpy>
}
 8004c78:	0020      	movs	r0, r4
 8004c7a:	bd10      	pop	{r4, pc}
 8004c7c:	20000aa0 	.word	0x20000aa0

08004c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c80:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <MX_GPIO_Init+0x2c>)
 8004c84:	6959      	ldr	r1, [r3, #20]
 8004c86:	2080      	movs	r0, #128	; 0x80
 8004c88:	03c0      	lsls	r0, r0, #15
 8004c8a:	4301      	orrs	r1, r0
 8004c8c:	6159      	str	r1, [r3, #20]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	4002      	ands	r2, r0
 8004c92:	9200      	str	r2, [sp, #0]
 8004c94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	2180      	movs	r1, #128	; 0x80
 8004c9a:	0289      	lsls	r1, r1, #10
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	615a      	str	r2, [r3, #20]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	9b01      	ldr	r3, [sp, #4]

}
 8004ca8:	b002      	add	sp, #8
 8004caa:	4770      	bx	lr
 8004cac:	40021000 	.word	0x40021000

08004cb0 <MX_I2C1_Init>:
{
 8004cb0:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8004cb2:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <MX_I2C1_Init+0x38>)
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <MX_I2C1_Init+0x3c>)
 8004cb6:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <MX_I2C1_Init+0x40>)
 8004cba:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cc4:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004cc6:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004cc8:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cca:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ccc:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cce:	0020      	movs	r0, r4
 8004cd0:	f000 fe82 	bl	80059d8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	0020      	movs	r0, r4
 8004cd8:	f001 f888 	bl	8005dec <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cdc:	2100      	movs	r1, #0
 8004cde:	0020      	movs	r0, r4
 8004ce0:	f001 f8b0 	bl	8005e44 <HAL_I2CEx_ConfigDigitalFilter>
}
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	20000ad8 	.word	0x20000ad8
 8004cec:	40005400 	.word	0x40005400
 8004cf0:	0000020b 	.word	0x0000020b

08004cf4 <MX_TIM17_Init>:
{
 8004cf4:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8004cf6:	4807      	ldr	r0, [pc, #28]	; (8004d14 <MX_TIM17_Init+0x20>)
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <MX_TIM17_Init+0x24>)
 8004cfa:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 11;
 8004cfc:	230b      	movs	r3, #11
 8004cfe:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d00:	2300      	movs	r3, #0
 8004d02:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 99;
 8004d04:	2263      	movs	r2, #99	; 0x63
 8004d06:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d08:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8004d0a:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d0c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004d0e:	f001 fe35 	bl	800697c <HAL_TIM_Base_Init>
}
 8004d12:	bd10      	pop	{r4, pc}
 8004d14:	20000b6c 	.word	0x20000b6c
 8004d18:	40014800 	.word	0x40014800

08004d1c <MX_TIM16_Init>:
{
 8004d1c:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8004d1e:	4808      	ldr	r0, [pc, #32]	; (8004d40 <MX_TIM16_Init+0x24>)
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <MX_TIM16_Init+0x28>)
 8004d22:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 768;
 8004d24:	23c0      	movs	r3, #192	; 0xc0
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 15625;
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <MX_TIM16_Init+0x2c>)
 8004d30:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d32:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8004d34:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004d38:	f001 fe20 	bl	800697c <HAL_TIM_Base_Init>
}
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	20000b24 	.word	0x20000b24
 8004d44:	40014400 	.word	0x40014400
 8004d48:	00003d09 	.word	0x00003d09

08004d4c <SystemClock_Config>:
{
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d50:	2234      	movs	r2, #52	; 0x34
 8004d52:	2100      	movs	r1, #0
 8004d54:	a80b      	add	r0, sp, #44	; 0x2c
 8004d56:	f001 fe7a 	bl	8006a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	a807      	add	r0, sp, #28
 8004d60:	f001 fe75 	bl	8006a4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d64:	2218      	movs	r2, #24
 8004d66:	2100      	movs	r1, #0
 8004d68:	a801      	add	r0, sp, #4
 8004d6a:	f001 fe70 	bl	8006a4e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d6e:	2402      	movs	r4, #2
 8004d70:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d72:	2301      	movs	r3, #1
 8004d74:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d76:	330f      	adds	r3, #15
 8004d78:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d7a:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	035b      	lsls	r3, r3, #13
 8004d86:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d88:	a80b      	add	r0, sp, #44	; 0x2c
 8004d8a:	f001 f885 	bl	8005e98 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d8e:	2307      	movs	r3, #7
 8004d90:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d92:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8004d94:	3389      	adds	r3, #137	; 0x89
 8004d96:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d98:	2400      	movs	r4, #0
 8004d9a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	a807      	add	r0, sp, #28
 8004da0:	f001 fb66 	bl	8006470 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004da4:	2320      	movs	r3, #32
 8004da6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004da8:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004daa:	a801      	add	r0, sp, #4
 8004dac:	f001 fc18 	bl	80065e0 <HAL_RCCEx_PeriphCLKConfig>
}
 8004db0:	b018      	add	sp, #96	; 0x60
 8004db2:	bd10      	pop	{r4, pc}

08004db4 <main>:
{
 8004db4:	b510      	push	{r4, lr}
  HAL_Init();
 8004db6:	f000 f951 	bl	800505c <HAL_Init>
  SystemClock_Config();
 8004dba:	f7ff ffc7 	bl	8004d4c <SystemClock_Config>
  MX_GPIO_Init();
 8004dbe:	f7ff ff5f 	bl	8004c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004dc2:	f7ff ff75 	bl	8004cb0 <MX_I2C1_Init>
  MX_TIM17_Init();
 8004dc6:	f7ff ff95 	bl	8004cf4 <MX_TIM17_Init>
  MX_TIM16_Init();
 8004dca:	f7ff ffa7 	bl	8004d1c <MX_TIM16_Init>
  setup();
 8004dce:	f7fb ff69 	bl	8000ca4 <setup>
    loop();
 8004dd2:	f7fb ff69 	bl	8000ca8 <loop>
  while (1)
 8004dd6:	e7fc      	b.n	8004dd2 <main+0x1e>

08004dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dd8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_MspInit+0x34>)
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	2201      	movs	r2, #1
 8004de0:	4311      	orrs	r1, r2
 8004de2:	6199      	str	r1, [r3, #24]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	400a      	ands	r2, r1
 8004de8:	9200      	str	r2, [sp, #0]
 8004dea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	0549      	lsls	r1, r1, #21
 8004df2:	430a      	orrs	r2, r1
 8004df4:	61da      	str	r2, [r3, #28]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	400b      	ands	r3, r1
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8004dfe:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <HAL_MspInit+0x38>)
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	2110      	movs	r1, #16
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e08:	b002      	add	sp, #8
 8004e0a:	4770      	bx	lr
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40010000 	.word	0x40010000

08004e14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004e14:	b510      	push	{r4, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1a:	2214      	movs	r2, #20
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	a803      	add	r0, sp, #12
 8004e20:	f001 fe15 	bl	8006a4e <memset>
  if(hcan->Instance==CAN)
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <HAL_CAN_MspInit+0x60>)
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8004e2c:	b008      	add	sp, #32
 8004e2e:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_CAN_MspInit+0x64>)
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	2080      	movs	r0, #128	; 0x80
 8004e36:	0480      	lsls	r0, r0, #18
 8004e38:	4301      	orrs	r1, r0
 8004e3a:	61d9      	str	r1, [r3, #28]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	4002      	ands	r2, r0
 8004e40:	9201      	str	r2, [sp, #4]
 8004e42:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	0289      	lsls	r1, r1, #10
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	615a      	str	r2, [r3, #20]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	400b      	ands	r3, r1
 8004e52:	9302      	str	r3, [sp, #8]
 8004e54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e56:	23c0      	movs	r3, #192	; 0xc0
 8004e58:	015b      	lsls	r3, r3, #5
 8004e5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e60:	3301      	adds	r3, #1
 8004e62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8004e64:	3301      	adds	r3, #1
 8004e66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e68:	2090      	movs	r0, #144	; 0x90
 8004e6a:	a903      	add	r1, sp, #12
 8004e6c:	05c0      	lsls	r0, r0, #23
 8004e6e:	f000 fb91 	bl	8005594 <HAL_GPIO_Init>
}
 8004e72:	e7db      	b.n	8004e2c <HAL_CAN_MspInit+0x18>
 8004e74:	40006400 	.word	0x40006400
 8004e78:	40021000 	.word	0x40021000

08004e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e82:	2214      	movs	r2, #20
 8004e84:	2100      	movs	r1, #0
 8004e86:	a803      	add	r0, sp, #12
 8004e88:	f001 fde1 	bl	8006a4e <memset>
  if(hi2c->Instance==I2C1)
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_I2C_MspInit+0x5c>)
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e94:	b008      	add	sp, #32
 8004e96:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e98:	4c10      	ldr	r4, [pc, #64]	; (8004edc <HAL_I2C_MspInit+0x60>)
 8004e9a:	6962      	ldr	r2, [r4, #20]
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	03c9      	lsls	r1, r1, #15
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	6162      	str	r2, [r4, #20]
 8004ea4:	6963      	ldr	r3, [r4, #20]
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004eac:	2203      	movs	r2, #3
 8004eae:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eb0:	2312      	movs	r3, #18
 8004eb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb4:	3b11      	subs	r3, #17
 8004eb6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eb8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004eba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ebc:	a903      	add	r1, sp, #12
 8004ebe:	4808      	ldr	r0, [pc, #32]	; (8004ee0 <HAL_I2C_MspInit+0x64>)
 8004ec0:	f000 fb68 	bl	8005594 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ec4:	69e2      	ldr	r2, [r4, #28]
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0389      	lsls	r1, r1, #14
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	61e2      	str	r2, [r4, #28]
 8004ece:	69e3      	ldr	r3, [r4, #28]
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	9b02      	ldr	r3, [sp, #8]
}
 8004ed6:	e7dd      	b.n	8004e94 <HAL_I2C_MspInit+0x18>
 8004ed8:	40005400 	.word	0x40005400
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	48001400 	.word	0x48001400

08004ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ee4:	b500      	push	{lr}
 8004ee6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM16)
 8004ee8:	6803      	ldr	r3, [r0, #0]
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_TIM_Base_MspInit+0x64>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8004ef0:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <HAL_TIM_Base_MspInit+0x68>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d014      	beq.n	8004f20 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004ef6:	b003      	add	sp, #12
 8004ef8:	bd00      	pop	{pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004efa:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <HAL_TIM_Base_MspInit+0x6c>)
 8004efc:	6991      	ldr	r1, [r2, #24]
 8004efe:	2080      	movs	r0, #128	; 0x80
 8004f00:	0280      	lsls	r0, r0, #10
 8004f02:	4301      	orrs	r1, r0
 8004f04:	6191      	str	r1, [r2, #24]
 8004f06:	6993      	ldr	r3, [r2, #24]
 8004f08:	4003      	ands	r3, r0
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2100      	movs	r1, #0
 8004f12:	2015      	movs	r0, #21
 8004f14:	f000 f8e8 	bl	80050e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004f18:	2015      	movs	r0, #21
 8004f1a:	f000 f915 	bl	8005148 <HAL_NVIC_EnableIRQ>
 8004f1e:	e7ea      	b.n	8004ef6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <HAL_TIM_Base_MspInit+0x6c>)
 8004f22:	6991      	ldr	r1, [r2, #24]
 8004f24:	2080      	movs	r0, #128	; 0x80
 8004f26:	02c0      	lsls	r0, r0, #11
 8004f28:	4301      	orrs	r1, r0
 8004f2a:	6191      	str	r1, [r2, #24]
 8004f2c:	6993      	ldr	r3, [r2, #24]
 8004f2e:	4003      	ands	r3, r0
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8004f34:	2200      	movs	r2, #0
 8004f36:	2100      	movs	r1, #0
 8004f38:	2016      	movs	r0, #22
 8004f3a:	f000 f8d5 	bl	80050e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004f3e:	2016      	movs	r0, #22
 8004f40:	f000 f902 	bl	8005148 <HAL_NVIC_EnableIRQ>
}
 8004f44:	e7d7      	b.n	8004ef6 <HAL_TIM_Base_MspInit+0x12>
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800
 8004f50:	40021000 	.word	0x40021000

08004f54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f54:	4770      	bx	lr

08004f56 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f56:	e7fe      	b.n	8004f56 <HardFault_Handler>

08004f58 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004f58:	4770      	bx	lr

08004f5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f5a:	4770      	bx	lr

08004f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f5e:	f000 f88d 	bl	800507c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f62:	bd10      	pop	{r4, pc}

08004f64 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004f64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004f66:	4802      	ldr	r0, [pc, #8]	; (8004f70 <TIM16_IRQHandler+0xc>)
 8004f68:	f001 fc10 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	20000b24 	.word	0x20000b24

08004f74 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004f74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004f76:	4802      	ldr	r0, [pc, #8]	; (8004f80 <TIM17_IRQHandler+0xc>)
 8004f78:	f001 fc08 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20000b6c 	.word	0x20000b6c

08004f84 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004f84:	4770      	bx	lr
	...

08004f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f88:	4813      	ldr	r0, [pc, #76]	; (8004fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f8a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8004f8c:	4813      	ldr	r0, [pc, #76]	; (8004fdc <LoopForever+0x6>)
    LDR R1, [R0]
 8004f8e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004f90:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <LoopForever+0xa>)
    CMP R1, R2
 8004f94:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004f96:	d105      	bne.n	8004fa4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8004f98:	4812      	ldr	r0, [pc, #72]	; (8004fe4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004f9a:	4913      	ldr	r1, [pc, #76]	; (8004fe8 <LoopForever+0x12>)
    STR R1, [R0]
 8004f9c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004f9e:	4813      	ldr	r0, [pc, #76]	; (8004fec <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004fa0:	4913      	ldr	r1, [pc, #76]	; (8004ff0 <LoopForever+0x1a>)
    STR R1, [R0]
 8004fa2:	6001      	str	r1, [r0, #0]

08004fa4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fa4:	4813      	ldr	r0, [pc, #76]	; (8004ff4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8004fa6:	4914      	ldr	r1, [pc, #80]	; (8004ff8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004fa8:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <LoopForever+0x26>)
  movs r3, #0
 8004faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fac:	e002      	b.n	8004fb4 <LoopCopyDataInit>

08004fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fb2:	3304      	adds	r3, #4

08004fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fb8:	d3f9      	bcc.n	8004fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fba:	4a11      	ldr	r2, [pc, #68]	; (8005000 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004fbc:	4c11      	ldr	r4, [pc, #68]	; (8005004 <LoopForever+0x2e>)
  movs r3, #0
 8004fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fc0:	e001      	b.n	8004fc6 <LoopFillZerobss>

08004fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc4:	3204      	adds	r2, #4

08004fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fc8:	d3fb      	bcc.n	8004fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004fca:	f7ff ffdb 	bl	8004f84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004fce:	f001 fd03 	bl	80069d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004fd2:	f7ff feef 	bl	8004db4 <main>

08004fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8004fd6:	e7fe      	b.n	8004fd6 <LoopForever>
  ldr   r0, =_estack
 8004fd8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8004fdc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004fe0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004fe4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004fe8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004fec:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004ff0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ff8:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8004ffc:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 8005000:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8005004:	20000bd8 	.word	0x20000bd8

08005008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005008:	e7fe      	b.n	8005008 <ADC1_IRQHandler>
	...

0800500c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800500c:	b510      	push	{r4, lr}
 800500e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <HAL_InitTick+0x44>)
 8005012:	7819      	ldrb	r1, [r3, #0]
 8005014:	20fa      	movs	r0, #250	; 0xfa
 8005016:	0080      	lsls	r0, r0, #2
 8005018:	f7fb f898 	bl	800014c <__udivsi3>
 800501c:	0001      	movs	r1, r0
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_InitTick+0x48>)
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	f7fb f893 	bl	800014c <__udivsi3>
 8005026:	f000 f89b 	bl	8005160 <HAL_SYSTICK_Config>
 800502a:	2800      	cmp	r0, #0
 800502c:	d10d      	bne.n	800504a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800502e:	2c03      	cmp	r4, #3
 8005030:	d901      	bls.n	8005036 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8005032:	2001      	movs	r0, #1
 8005034:	e00a      	b.n	800504c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005036:	3001      	adds	r0, #1
 8005038:	2200      	movs	r2, #0
 800503a:	0021      	movs	r1, r4
 800503c:	4240      	negs	r0, r0
 800503e:	f000 f853 	bl	80050e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_InitTick+0x4c>)
 8005044:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8005046:	2000      	movs	r0, #0
 8005048:	e000      	b.n	800504c <HAL_InitTick+0x40>
    return HAL_ERROR;
 800504a:	2001      	movs	r0, #1
}
 800504c:	bd10      	pop	{r4, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	20000118 	.word	0x20000118
 8005054:	20000114 	.word	0x20000114
 8005058:	2000011c 	.word	0x2000011c

0800505c <HAL_Init>:
{
 800505c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800505e:	4a06      	ldr	r2, [pc, #24]	; (8005078 <HAL_Init+0x1c>)
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	2110      	movs	r1, #16
 8005064:	430b      	orrs	r3, r1
 8005066:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8005068:	2000      	movs	r0, #0
 800506a:	f7ff ffcf 	bl	800500c <HAL_InitTick>
  HAL_MspInit();
 800506e:	f7ff feb3 	bl	8004dd8 <HAL_MspInit>
}
 8005072:	2000      	movs	r0, #0
 8005074:	bd10      	pop	{r4, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	40022000 	.word	0x40022000

0800507c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800507c:	4a03      	ldr	r2, [pc, #12]	; (800508c <HAL_IncTick+0x10>)
 800507e:	6811      	ldr	r1, [r2, #0]
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_IncTick+0x14>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	185b      	adds	r3, r3, r1
 8005086:	6013      	str	r3, [r2, #0]
}
 8005088:	4770      	bx	lr
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	20000bb4 	.word	0x20000bb4
 8005090:	20000118 	.word	0x20000118

08005094 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005094:	4b01      	ldr	r3, [pc, #4]	; (800509c <HAL_GetTick+0x8>)
 8005096:	6818      	ldr	r0, [r3, #0]
}
 8005098:	4770      	bx	lr
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	20000bb4 	.word	0x20000bb4

080050a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050a4:	f7ff fff6 	bl	8005094 <HAL_GetTick>
 80050a8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050aa:	1c63      	adds	r3, r4, #1
 80050ac:	d002      	beq.n	80050b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <HAL_Delay+0x20>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80050b4:	f7ff ffee 	bl	8005094 <HAL_GetTick>
 80050b8:	1b40      	subs	r0, r0, r5
 80050ba:	42a0      	cmp	r0, r4
 80050bc:	d3fa      	bcc.n	80050b4 <HAL_Delay+0x14>
  {
  }
}
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	20000118 	.word	0x20000118

080050c4 <HAL_GetUIDw0>:
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80050c4:	4b01      	ldr	r3, [pc, #4]	; (80050cc <HAL_GetUIDw0+0x8>)
 80050c6:	6818      	ldr	r0, [r3, #0]
}
 80050c8:	4770      	bx	lr
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	1ffff7ac 	.word	0x1ffff7ac

080050d0 <HAL_GetUIDw1>:
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <HAL_GetUIDw1+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
}
 80050d4:	4770      	bx	lr
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	1ffff7b0 	.word	0x1ffff7b0

080050dc <HAL_GetUIDw2>:
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80050dc:	4b01      	ldr	r3, [pc, #4]	; (80050e4 <HAL_GetUIDw2+0x8>)
 80050de:	6818      	ldr	r0, [r3, #0]
}
 80050e0:	4770      	bx	lr
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	1ffff7b4 	.word	0x1ffff7b4

080050e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050e8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80050ea:	2800      	cmp	r0, #0
 80050ec:	db11      	blt.n	8005112 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050ee:	0883      	lsrs	r3, r0, #2
 80050f0:	4e13      	ldr	r6, [pc, #76]	; (8005140 <HAL_NVIC_SetPriority+0x58>)
 80050f2:	33c0      	adds	r3, #192	; 0xc0
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	599d      	ldr	r5, [r3, r6]
 80050f8:	2403      	movs	r4, #3
 80050fa:	4020      	ands	r0, r4
 80050fc:	00c0      	lsls	r0, r0, #3
 80050fe:	22ff      	movs	r2, #255	; 0xff
 8005100:	0014      	movs	r4, r2
 8005102:	4084      	lsls	r4, r0
 8005104:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005106:	0189      	lsls	r1, r1, #6
 8005108:	400a      	ands	r2, r1
 800510a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800510c:	432a      	orrs	r2, r5
 800510e:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8005110:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005112:	230f      	movs	r3, #15
 8005114:	4003      	ands	r3, r0
 8005116:	3b08      	subs	r3, #8
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	3306      	adds	r3, #6
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <HAL_NVIC_SetPriority+0x5c>)
 8005120:	4694      	mov	ip, r2
 8005122:	4463      	add	r3, ip
 8005124:	685c      	ldr	r4, [r3, #4]
 8005126:	2203      	movs	r2, #3
 8005128:	4010      	ands	r0, r2
 800512a:	00c0      	lsls	r0, r0, #3
 800512c:	32fc      	adds	r2, #252	; 0xfc
 800512e:	0015      	movs	r5, r2
 8005130:	4085      	lsls	r5, r0
 8005132:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005134:	0189      	lsls	r1, r1, #6
 8005136:	400a      	ands	r2, r1
 8005138:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800513a:	4322      	orrs	r2, r4
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	e7e7      	b.n	8005110 <HAL_NVIC_SetPriority+0x28>
 8005140:	e000e100 	.word	0xe000e100
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005148:	2800      	cmp	r0, #0
 800514a:	db05      	blt.n	8005158 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514c:	231f      	movs	r3, #31
 800514e:	4018      	ands	r0, r3
 8005150:	3b1e      	subs	r3, #30
 8005152:	4083      	lsls	r3, r0
 8005154:	4a01      	ldr	r2, [pc, #4]	; (800515c <HAL_NVIC_EnableIRQ+0x14>)
 8005156:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005158:	4770      	bx	lr
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	e000e100 	.word	0xe000e100

08005160 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005160:	3801      	subs	r0, #1
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	045b      	lsls	r3, r3, #17
 8005166:	4298      	cmp	r0, r3
 8005168:	d20f      	bcs.n	800518a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_SYSTICK_Config+0x30>)
 800516c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800516e:	4809      	ldr	r0, [pc, #36]	; (8005194 <HAL_SYSTICK_Config+0x34>)
 8005170:	6a03      	ldr	r3, [r0, #32]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	21c0      	movs	r1, #192	; 0xc0
 8005178:	0609      	lsls	r1, r1, #24
 800517a:	430b      	orrs	r3, r1
 800517c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800517e:	2300      	movs	r3, #0
 8005180:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005182:	3307      	adds	r3, #7
 8005184:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005186:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005188:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800518a:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800518c:	e7fc      	b.n	8005188 <HAL_SYSTICK_Config+0x28>
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	e000e010 	.word	0xe000e010
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <FLASH_SetErrorCode+0x38>)
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	2110      	movs	r1, #16
 800519e:	000b      	movs	r3, r1
 80051a0:	4013      	ands	r3, r2
 80051a2:	4211      	tst	r1, r2
 80051a4:	d005      	beq.n	80051b2 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80051a6:	4a0b      	ldr	r2, [pc, #44]	; (80051d4 <FLASH_SetErrorCode+0x3c>)
 80051a8:	69d3      	ldr	r3, [r2, #28]
 80051aa:	390e      	subs	r1, #14
 80051ac:	430b      	orrs	r3, r1
 80051ae:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80051b0:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <FLASH_SetErrorCode+0x38>)
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	0752      	lsls	r2, r2, #29
 80051b8:	d506      	bpl.n	80051c8 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80051ba:	4906      	ldr	r1, [pc, #24]	; (80051d4 <FLASH_SetErrorCode+0x3c>)
 80051bc:	69ca      	ldr	r2, [r1, #28]
 80051be:	2001      	movs	r0, #1
 80051c0:	4302      	orrs	r2, r0
 80051c2:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80051c4:	2204      	movs	r2, #4
 80051c6:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80051c8:	4a01      	ldr	r2, [pc, #4]	; (80051d0 <FLASH_SetErrorCode+0x38>)
 80051ca:	60d3      	str	r3, [r2, #12]
}  
 80051cc:	4770      	bx	lr
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	40022000 	.word	0x40022000
 80051d4:	20000bb8 	.word	0x20000bb8

080051d8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_FLASH_Unlock+0x24>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	d509      	bpl.n	80051f4 <HAL_FLASH_Unlock+0x1c>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_FLASH_Unlock+0x24>)
 80051e2:	4a07      	ldr	r2, [pc, #28]	; (8005200 <HAL_FLASH_Unlock+0x28>)
 80051e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <HAL_FLASH_Unlock+0x2c>)
 80051e8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	d403      	bmi.n	80051f8 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80051f0:	2000      	movs	r0, #0
 80051f2:	e000      	b.n	80051f6 <HAL_FLASH_Unlock+0x1e>
 80051f4:	2000      	movs	r0, #0
}
 80051f6:	4770      	bx	lr
      status = HAL_ERROR;
 80051f8:	2001      	movs	r0, #1
 80051fa:	e7fc      	b.n	80051f6 <HAL_FLASH_Unlock+0x1e>
 80051fc:	40022000 	.word	0x40022000
 8005200:	45670123 	.word	0x45670123
 8005204:	cdef89ab 	.word	0xcdef89ab

08005208 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_FLASH_OB_Unlock+0x1c>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	059b      	lsls	r3, r3, #22
 800520e:	d406      	bmi.n	800521e <HAL_FLASH_OB_Unlock+0x16>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_FLASH_OB_Unlock+0x1c>)
 8005212:	4a05      	ldr	r2, [pc, #20]	; (8005228 <HAL_FLASH_OB_Unlock+0x20>)
 8005214:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <HAL_FLASH_OB_Unlock+0x24>)
 8005218:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800521a:	2000      	movs	r0, #0
}
 800521c:	4770      	bx	lr
    return HAL_ERROR;
 800521e:	2001      	movs	r0, #1
 8005220:	e7fc      	b.n	800521c <HAL_FLASH_OB_Unlock+0x14>
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	40022000 	.word	0x40022000
 8005228:	45670123 	.word	0x45670123
 800522c:	cdef89ab 	.word	0xcdef89ab

08005230 <FLASH_WaitForLastOperation>:
{
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005234:	f7ff ff2e 	bl	8005094 <HAL_GetTick>
 8005238:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <FLASH_WaitForLastOperation+0x54>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	07db      	lsls	r3, r3, #31
 8005240:	d50a      	bpl.n	8005258 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8005242:	1c63      	adds	r3, r4, #1
 8005244:	d0f9      	beq.n	800523a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005246:	2c00      	cmp	r4, #0
 8005248:	d004      	beq.n	8005254 <FLASH_WaitForLastOperation+0x24>
 800524a:	f7ff ff23 	bl	8005094 <HAL_GetTick>
 800524e:	1b40      	subs	r0, r0, r5
 8005250:	42a0      	cmp	r0, r4
 8005252:	d9f2      	bls.n	800523a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8005254:	2003      	movs	r0, #3
 8005256:	e00f      	b.n	8005278 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <FLASH_WaitForLastOperation+0x54>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	069b      	lsls	r3, r3, #26
 800525e:	d502      	bpl.n	8005266 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <FLASH_WaitForLastOperation+0x54>)
 8005262:	2220      	movs	r2, #32
 8005264:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <FLASH_WaitForLastOperation+0x54>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	06db      	lsls	r3, r3, #27
 800526c:	d405      	bmi.n	800527a <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <FLASH_WaitForLastOperation+0x54>)
 8005270:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005272:	075b      	lsls	r3, r3, #29
 8005274:	d401      	bmi.n	800527a <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 8005276:	2000      	movs	r0, #0
}
 8005278:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800527a:	f7ff ff8d 	bl	8005198 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800527e:	2001      	movs	r0, #1
 8005280:	e7fa      	b.n	8005278 <FLASH_WaitForLastOperation+0x48>
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	40022000 	.word	0x40022000

08005288 <HAL_FLASH_OB_Launch>:
{
 8005288:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800528a:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <HAL_FLASH_OB_Launch+0x18>)
 800528c:	6911      	ldr	r1, [r2, #16]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	430b      	orrs	r3, r1
 8005294:	6113      	str	r3, [r2, #16]
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 8005296:	4803      	ldr	r0, [pc, #12]	; (80052a4 <HAL_FLASH_OB_Launch+0x1c>)
 8005298:	f7ff ffca 	bl	8005230 <FLASH_WaitForLastOperation>
}
 800529c:	bd10      	pop	{r4, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	40022000 	.word	0x40022000
 80052a4:	0000c350 	.word	0x0000c350

080052a8 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 80052a8:	4b01      	ldr	r3, [pc, #4]	; (80052b0 <FLASH_OB_GetWRP+0x8>)
 80052aa:	6a18      	ldr	r0, [r3, #32]
}
 80052ac:	4770      	bx	lr
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	40022000 	.word	0x40022000

080052b4 <FLASH_OB_GetRDP>:
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t tmp_reg;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <FLASH_OB_GetRDP+0x1c>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2206      	movs	r2, #6

  if (tmp_reg == 0U)
 80052ba:	421a      	tst	r2, r3
 80052bc:	d003      	beq.n	80052c6 <FLASH_OB_GetRDP+0x12>
  {
    return OB_RDP_LEVEL_0;
  }
  else if ((tmp_reg & FLASH_OBR_RDPRT2) == FLASH_OBR_RDPRT2)
 80052be:	075b      	lsls	r3, r3, #29
 80052c0:	d503      	bpl.n	80052ca <FLASH_OB_GetRDP+0x16>
  {
    return OB_RDP_LEVEL_2;
 80052c2:	20cc      	movs	r0, #204	; 0xcc
 80052c4:	e000      	b.n	80052c8 <FLASH_OB_GetRDP+0x14>
    return OB_RDP_LEVEL_0;
 80052c6:	20aa      	movs	r0, #170	; 0xaa
  }
  else 
  {
    return OB_RDP_LEVEL_1;
  }
}
 80052c8:	4770      	bx	lr
    return OB_RDP_LEVEL_1;
 80052ca:	20bb      	movs	r0, #187	; 0xbb
 80052cc:	e7fc      	b.n	80052c8 <FLASH_OB_GetRDP+0x14>
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	40022000 	.word	0x40022000

080052d4 <FLASH_OB_GetUser>:
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80052d4:	4b02      	ldr	r3, [pc, #8]	; (80052e0 <FLASH_OB_GetUser+0xc>)
 80052d6:	69d8      	ldr	r0, [r3, #28]
 80052d8:	0a00      	lsrs	r0, r0, #8
 80052da:	b2c0      	uxtb	r0, r0
}
 80052dc:	4770      	bx	lr
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	40022000 	.word	0x40022000

080052e4 <FLASH_OB_RDP_LevelConfig>:
{
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052e8:	4813      	ldr	r0, [pc, #76]	; (8005338 <FLASH_OB_RDP_LevelConfig+0x54>)
 80052ea:	f7ff ffa1 	bl	8005230 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d000      	beq.n	80052f4 <FLASH_OB_RDP_LevelConfig+0x10>
}
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <FLASH_OB_RDP_LevelConfig+0x58>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80052fa:	4d11      	ldr	r5, [pc, #68]	; (8005340 <FLASH_OB_RDP_LevelConfig+0x5c>)
 80052fc:	692b      	ldr	r3, [r5, #16]
 80052fe:	2620      	movs	r6, #32
 8005300:	4333      	orrs	r3, r6
 8005302:	612b      	str	r3, [r5, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005304:	692b      	ldr	r3, [r5, #16]
 8005306:	3240      	adds	r2, #64	; 0x40
 8005308:	4313      	orrs	r3, r2
 800530a:	612b      	str	r3, [r5, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800530c:	480a      	ldr	r0, [pc, #40]	; (8005338 <FLASH_OB_RDP_LevelConfig+0x54>)
 800530e:	f7ff ff8f 	bl	8005230 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8005312:	692b      	ldr	r3, [r5, #16]
 8005314:	43b3      	bics	r3, r6
 8005316:	612b      	str	r3, [r5, #16]
    if(status == HAL_OK)
 8005318:	2800      	cmp	r0, #0
 800531a:	d1ea      	bne.n	80052f2 <FLASH_OB_RDP_LevelConfig+0xe>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800531c:	692b      	ldr	r3, [r5, #16]
 800531e:	3e10      	subs	r6, #16
 8005320:	4333      	orrs	r3, r6
 8005322:	612b      	str	r3, [r5, #16]
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8005324:	b2a4      	uxth	r4, r4
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <FLASH_OB_RDP_LevelConfig+0x60>)
 8005328:	801c      	strh	r4, [r3, #0]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 800532a:	4803      	ldr	r0, [pc, #12]	; (8005338 <FLASH_OB_RDP_LevelConfig+0x54>)
 800532c:	f7ff ff80 	bl	8005230 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005330:	692b      	ldr	r3, [r5, #16]
 8005332:	43b3      	bics	r3, r6
 8005334:	612b      	str	r3, [r5, #16]
 8005336:	e7dc      	b.n	80052f2 <FLASH_OB_RDP_LevelConfig+0xe>
 8005338:	0000c350 	.word	0x0000c350
 800533c:	20000bb8 	.word	0x20000bb8
 8005340:	40022000 	.word	0x40022000
 8005344:	1ffff800 	.word	0x1ffff800

08005348 <FLASH_OB_UserConfig>:
{
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	0004      	movs	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800534c:	480b      	ldr	r0, [pc, #44]	; (800537c <FLASH_OB_UserConfig+0x34>)
 800534e:	f7ff ff6f 	bl	8005230 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005352:	2800      	cmp	r0, #0
 8005354:	d000      	beq.n	8005358 <FLASH_OB_UserConfig+0x10>
}
 8005356:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <FLASH_OB_UserConfig+0x38>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800535e:	4d09      	ldr	r5, [pc, #36]	; (8005384 <FLASH_OB_UserConfig+0x3c>)
 8005360:	692b      	ldr	r3, [r5, #16]
 8005362:	2610      	movs	r6, #16
 8005364:	4333      	orrs	r3, r6
 8005366:	612b      	str	r3, [r5, #16]
    OB->USER = UserConfig;
 8005368:	b2a4      	uxth	r4, r4
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <FLASH_OB_UserConfig+0x40>)
 800536c:	805c      	strh	r4, [r3, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800536e:	4803      	ldr	r0, [pc, #12]	; (800537c <FLASH_OB_UserConfig+0x34>)
 8005370:	f7ff ff5e 	bl	8005230 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005374:	692b      	ldr	r3, [r5, #16]
 8005376:	43b3      	bics	r3, r6
 8005378:	612b      	str	r3, [r5, #16]
 800537a:	e7ec      	b.n	8005356 <FLASH_OB_UserConfig+0xe>
 800537c:	0000c350 	.word	0x0000c350
 8005380:	20000bb8 	.word	0x20000bb8
 8005384:	40022000 	.word	0x40022000
 8005388:	1ffff800 	.word	0x1ffff800

0800538c <FLASH_OB_ProgramData>:
{
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	0004      	movs	r4, r0
 8005390:	000d      	movs	r5, r1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005392:	480b      	ldr	r0, [pc, #44]	; (80053c0 <FLASH_OB_ProgramData+0x34>)
 8005394:	f7ff ff4c 	bl	8005230 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005398:	2800      	cmp	r0, #0
 800539a:	d000      	beq.n	800539e <FLASH_OB_ProgramData+0x12>
}
 800539c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <FLASH_OB_ProgramData+0x38>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80053a4:	4e08      	ldr	r6, [pc, #32]	; (80053c8 <FLASH_OB_ProgramData+0x3c>)
 80053a6:	6933      	ldr	r3, [r6, #16]
 80053a8:	2710      	movs	r7, #16
 80053aa:	433b      	orrs	r3, r7
 80053ac:	6133      	str	r3, [r6, #16]
    *(__IO uint16_t*)Address = Data;
 80053ae:	b2ad      	uxth	r5, r5
 80053b0:	8025      	strh	r5, [r4, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053b2:	4803      	ldr	r0, [pc, #12]	; (80053c0 <FLASH_OB_ProgramData+0x34>)
 80053b4:	f7ff ff3c 	bl	8005230 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80053b8:	6933      	ldr	r3, [r6, #16]
 80053ba:	43bb      	bics	r3, r7
 80053bc:	6133      	str	r3, [r6, #16]
 80053be:	e7ed      	b.n	800539c <FLASH_OB_ProgramData+0x10>
 80053c0:	0000c350 	.word	0x0000c350
 80053c4:	20000bb8 	.word	0x20000bb8
 80053c8:	40022000 	.word	0x40022000

080053cc <HAL_FLASHEx_OBErase>:
{
 80053cc:	b570      	push	{r4, r5, r6, lr}
  rdptmp = FLASH_OB_GetRDP();
 80053ce:	f7ff ff71 	bl	80052b4 <FLASH_OB_GetRDP>
 80053d2:	b2c5      	uxtb	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053d4:	480e      	ldr	r0, [pc, #56]	; (8005410 <HAL_FLASHEx_OBErase+0x44>)
 80053d6:	f7ff ff2b 	bl	8005230 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80053da:	2800      	cmp	r0, #0
 80053dc:	d000      	beq.n	80053e0 <HAL_FLASHEx_OBErase+0x14>
}
 80053de:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_FLASHEx_OBErase+0x48>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <HAL_FLASHEx_OBErase+0x4c>)
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	2620      	movs	r6, #32
 80053ec:	4333      	orrs	r3, r6
 80053ee:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	3240      	adds	r2, #64	; 0x40
 80053f4:	4313      	orrs	r3, r2
 80053f6:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053f8:	4805      	ldr	r0, [pc, #20]	; (8005410 <HAL_FLASHEx_OBErase+0x44>)
 80053fa:	f7ff ff19 	bl	8005230 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	43b3      	bics	r3, r6
 8005402:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8005404:	2800      	cmp	r0, #0
 8005406:	d1ea      	bne.n	80053de <HAL_FLASHEx_OBErase+0x12>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8005408:	0028      	movs	r0, r5
 800540a:	f7ff ff6b 	bl	80052e4 <FLASH_OB_RDP_LevelConfig>
 800540e:	e7e6      	b.n	80053de <HAL_FLASHEx_OBErase+0x12>
 8005410:	0000c350 	.word	0x0000c350
 8005414:	20000bb8 	.word	0x20000bb8
 8005418:	40022000 	.word	0x40022000

0800541c <FLASH_OB_EnableWRP>:
{
 800541c:	b510      	push	{r4, lr}
 800541e:	0004      	movs	r4, r0
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8005420:	f7ff ff42 	bl	80052a8 <FLASH_OB_GetWRP>
 8005424:	43a0      	bics	r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8005426:	24ff      	movs	r4, #255	; 0xff
 8005428:	4004      	ands	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800542a:	4811      	ldr	r0, [pc, #68]	; (8005470 <FLASH_OB_EnableWRP+0x54>)
 800542c:	f7ff ff00 	bl	8005230 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005430:	2800      	cmp	r0, #0
 8005432:	d000      	beq.n	8005436 <FLASH_OB_EnableWRP+0x1a>
}
 8005434:	bd10      	pop	{r4, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <FLASH_OB_EnableWRP+0x58>)
 8005438:	2200      	movs	r2, #0
 800543a:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 800543c:	f7ff ffc6 	bl	80053cc <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8005440:	2800      	cmp	r0, #0
 8005442:	d1f7      	bne.n	8005434 <FLASH_OB_EnableWRP+0x18>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005444:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <FLASH_OB_EnableWRP+0x5c>)
 8005446:	6913      	ldr	r3, [r2, #16]
 8005448:	2110      	movs	r1, #16
 800544a:	430b      	orrs	r3, r1
 800544c:	6113      	str	r3, [r2, #16]
      if(WRP0_Data != 0xFFU)
 800544e:	2cff      	cmp	r4, #255	; 0xff
 8005450:	d105      	bne.n	800545e <FLASH_OB_EnableWRP+0x42>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <FLASH_OB_EnableWRP+0x5c>)
 8005454:	6913      	ldr	r3, [r2, #16]
 8005456:	2110      	movs	r1, #16
 8005458:	438b      	bics	r3, r1
 800545a:	6113      	str	r3, [r2, #16]
 800545c:	e7ea      	b.n	8005434 <FLASH_OB_EnableWRP+0x18>
        OB->WRP0 &= WRP0_Data;
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <FLASH_OB_EnableWRP+0x60>)
 8005460:	8918      	ldrh	r0, [r3, #8]
 8005462:	4020      	ands	r0, r4
 8005464:	8118      	strh	r0, [r3, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005466:	4802      	ldr	r0, [pc, #8]	; (8005470 <FLASH_OB_EnableWRP+0x54>)
 8005468:	f7ff fee2 	bl	8005230 <FLASH_WaitForLastOperation>
 800546c:	e7f1      	b.n	8005452 <FLASH_OB_EnableWRP+0x36>
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	0000c350 	.word	0x0000c350
 8005474:	20000bb8 	.word	0x20000bb8
 8005478:	40022000 	.word	0x40022000
 800547c:	1ffff800 	.word	0x1ffff800

08005480 <FLASH_OB_DisableWRP>:
{
 8005480:	b510      	push	{r4, lr}
 8005482:	0004      	movs	r4, r0
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8005484:	f7ff ff10 	bl	80052a8 <FLASH_OB_GetWRP>
 8005488:	4320      	orrs	r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 800548a:	24ff      	movs	r4, #255	; 0xff
 800548c:	4004      	ands	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800548e:	4811      	ldr	r0, [pc, #68]	; (80054d4 <FLASH_OB_DisableWRP+0x54>)
 8005490:	f7ff fece 	bl	8005230 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005494:	2800      	cmp	r0, #0
 8005496:	d000      	beq.n	800549a <FLASH_OB_DisableWRP+0x1a>
}
 8005498:	bd10      	pop	{r4, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <FLASH_OB_DisableWRP+0x58>)
 800549c:	2200      	movs	r2, #0
 800549e:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 80054a0:	f7ff ff94 	bl	80053cc <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d1f7      	bne.n	8005498 <FLASH_OB_DisableWRP+0x18>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80054a8:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <FLASH_OB_DisableWRP+0x5c>)
 80054aa:	6913      	ldr	r3, [r2, #16]
 80054ac:	2110      	movs	r1, #16
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6113      	str	r3, [r2, #16]
      if(WRP0_Data != 0xFFU)
 80054b2:	2cff      	cmp	r4, #255	; 0xff
 80054b4:	d105      	bne.n	80054c2 <FLASH_OB_DisableWRP+0x42>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <FLASH_OB_DisableWRP+0x5c>)
 80054b8:	6913      	ldr	r3, [r2, #16]
 80054ba:	2110      	movs	r1, #16
 80054bc:	438b      	bics	r3, r1
 80054be:	6113      	str	r3, [r2, #16]
 80054c0:	e7ea      	b.n	8005498 <FLASH_OB_DisableWRP+0x18>
        OB->WRP0 &= WRP0_Data;
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <FLASH_OB_DisableWRP+0x60>)
 80054c4:	8918      	ldrh	r0, [r3, #8]
 80054c6:	4020      	ands	r0, r4
 80054c8:	8118      	strh	r0, [r3, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054ca:	4802      	ldr	r0, [pc, #8]	; (80054d4 <FLASH_OB_DisableWRP+0x54>)
 80054cc:	f7ff feb0 	bl	8005230 <FLASH_WaitForLastOperation>
 80054d0:	e7f1      	b.n	80054b6 <FLASH_OB_DisableWRP+0x36>
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	0000c350 	.word	0x0000c350
 80054d8:	20000bb8 	.word	0x20000bb8
 80054dc:	40022000 	.word	0x40022000
 80054e0:	1ffff800 	.word	0x1ffff800

080054e4 <HAL_FLASHEx_OBProgram>:
{
 80054e4:	b510      	push	{r4, lr}
 80054e6:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 80054ea:	7e1b      	ldrb	r3, [r3, #24]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d03f      	beq.n	8005570 <HAL_FLASHEx_OBProgram+0x8c>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4a20      	ldr	r2, [pc, #128]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 80054f4:	7613      	strb	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80054f6:	6802      	ldr	r2, [r0, #0]
 80054f8:	4213      	tst	r3, r2
 80054fa:	d00f      	beq.n	800551c <HAL_FLASHEx_OBProgram+0x38>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80054fc:	6843      	ldr	r3, [r0, #4]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d008      	beq.n	8005514 <HAL_FLASHEx_OBProgram+0x30>
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8005502:	6880      	ldr	r0, [r0, #8]
 8005504:	f7ff ffbc 	bl	8005480 <FLASH_OB_DisableWRP>
    if (status != HAL_OK)
 8005508:	2800      	cmp	r0, #0
 800550a:	d008      	beq.n	800551e <HAL_FLASHEx_OBProgram+0x3a>
      __HAL_UNLOCK(&pFlash);
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 800550e:	2200      	movs	r2, #0
 8005510:	761a      	strb	r2, [r3, #24]
      return status;
 8005512:	e010      	b.n	8005536 <HAL_FLASHEx_OBProgram+0x52>
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8005514:	6880      	ldr	r0, [r0, #8]
 8005516:	f7ff ff81 	bl	800541c <FLASH_OB_EnableWRP>
 800551a:	e7f5      	b.n	8005508 <HAL_FLASHEx_OBProgram+0x24>
  HAL_StatusTypeDef status = HAL_ERROR;
 800551c:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	079b      	lsls	r3, r3, #30
 8005522:	d409      	bmi.n	8005538 <HAL_FLASHEx_OBProgram+0x54>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	075b      	lsls	r3, r3, #29
 8005528:	d40f      	bmi.n	800554a <HAL_FLASHEx_OBProgram+0x66>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	071b      	lsls	r3, r3, #28
 800552e:	d415      	bmi.n	800555c <HAL_FLASHEx_OBProgram+0x78>
  __HAL_UNLOCK(&pFlash);
 8005530:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 8005532:	2200      	movs	r2, #0
 8005534:	761a      	strb	r2, [r3, #24]
}
 8005536:	bd10      	pop	{r4, pc}
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8005538:	7b20      	ldrb	r0, [r4, #12]
 800553a:	f7ff fed3 	bl	80052e4 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 800553e:	2800      	cmp	r0, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_FLASHEx_OBProgram+0x40>
      __HAL_UNLOCK(&pFlash);
 8005542:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 8005544:	2200      	movs	r2, #0
 8005546:	761a      	strb	r2, [r3, #24]
      return status;
 8005548:	e7f5      	b.n	8005536 <HAL_FLASHEx_OBProgram+0x52>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 800554a:	7b60      	ldrb	r0, [r4, #13]
 800554c:	f7ff fefc 	bl	8005348 <FLASH_OB_UserConfig>
    if (status != HAL_OK)
 8005550:	2800      	cmp	r0, #0
 8005552:	d0ea      	beq.n	800552a <HAL_FLASHEx_OBProgram+0x46>
      __HAL_UNLOCK(&pFlash);
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 8005556:	2200      	movs	r2, #0
 8005558:	761a      	strb	r2, [r3, #24]
      return status;
 800555a:	e7ec      	b.n	8005536 <HAL_FLASHEx_OBProgram+0x52>
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 800555c:	7d21      	ldrb	r1, [r4, #20]
 800555e:	6920      	ldr	r0, [r4, #16]
 8005560:	f7ff ff14 	bl	800538c <FLASH_OB_ProgramData>
    if (status != HAL_OK)
 8005564:	2800      	cmp	r0, #0
 8005566:	d0e3      	beq.n	8005530 <HAL_FLASHEx_OBProgram+0x4c>
      __HAL_UNLOCK(&pFlash);
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <HAL_FLASHEx_OBProgram+0x90>)
 800556a:	2200      	movs	r2, #0
 800556c:	761a      	strb	r2, [r3, #24]
      return status;
 800556e:	e7e2      	b.n	8005536 <HAL_FLASHEx_OBProgram+0x52>
  __HAL_LOCK(&pFlash);
 8005570:	2002      	movs	r0, #2
 8005572:	e7e0      	b.n	8005536 <HAL_FLASHEx_OBProgram+0x52>
 8005574:	20000bb8 	.word	0x20000bb8

08005578 <HAL_FLASHEx_OBGetConfig>:
{
 8005578:	b510      	push	{r4, lr}
 800557a:	0004      	movs	r4, r0
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 800557c:	2307      	movs	r3, #7
 800557e:	6003      	str	r3, [r0, #0]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8005580:	f7ff fe92 	bl	80052a8 <FLASH_OB_GetWRP>
 8005584:	60a0      	str	r0, [r4, #8]
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8005586:	f7ff fe95 	bl	80052b4 <FLASH_OB_GetRDP>
 800558a:	7320      	strb	r0, [r4, #12]
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800558c:	f7ff fea2 	bl	80052d4 <FLASH_OB_GetUser>
 8005590:	7360      	strb	r0, [r4, #13]
}
 8005592:	bd10      	pop	{r4, pc}

08005594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8005598:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800559a:	e057      	b.n	800564c <HAL_GPIO_Init+0xb8>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800559c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800559e:	005f      	lsls	r7, r3, #1
 80055a0:	2603      	movs	r6, #3
 80055a2:	40be      	lsls	r6, r7
 80055a4:	43b4      	bics	r4, r6
 80055a6:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055a8:	68cc      	ldr	r4, [r1, #12]
 80055aa:	40bc      	lsls	r4, r7
 80055ac:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80055ae:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055b0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055b2:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b4:	684a      	ldr	r2, [r1, #4]
 80055b6:	0916      	lsrs	r6, r2, #4
 80055b8:	2201      	movs	r2, #1
 80055ba:	4032      	ands	r2, r6
 80055bc:	409a      	lsls	r2, r3
 80055be:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80055c0:	6042      	str	r2, [r0, #4]
 80055c2:	e053      	b.n	800566c <HAL_GPIO_Init+0xd8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055c4:	08dc      	lsrs	r4, r3, #3
 80055c6:	3408      	adds	r4, #8
 80055c8:	00a4      	lsls	r4, r4, #2
 80055ca:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055cc:	3205      	adds	r2, #5
 80055ce:	401a      	ands	r2, r3
 80055d0:	0092      	lsls	r2, r2, #2
 80055d2:	270f      	movs	r7, #15
 80055d4:	4097      	lsls	r7, r2
 80055d6:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055d8:	690f      	ldr	r7, [r1, #16]
 80055da:	4097      	lsls	r7, r2
 80055dc:	003a      	movs	r2, r7
 80055de:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 80055e0:	5022      	str	r2, [r4, r0]
 80055e2:	e057      	b.n	8005694 <HAL_GPIO_Init+0x100>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055e4:	2602      	movs	r6, #2
 80055e6:	e000      	b.n	80055ea <HAL_GPIO_Init+0x56>
 80055e8:	2600      	movs	r6, #0
 80055ea:	40a6      	lsls	r6, r4
 80055ec:	0034      	movs	r4, r6
 80055ee:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055f0:	3202      	adds	r2, #2
 80055f2:	0092      	lsls	r2, r2, #2
 80055f4:	4e42      	ldr	r6, [pc, #264]	; (8005700 <HAL_GPIO_Init+0x16c>)
 80055f6:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055f8:	4a42      	ldr	r2, [pc, #264]	; (8005704 <HAL_GPIO_Init+0x170>)
 80055fa:	6814      	ldr	r4, [r2, #0]
        temp &= ~(iocurrent);
 80055fc:	43ea      	mvns	r2, r5
 80055fe:	0026      	movs	r6, r4
 8005600:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005602:	684f      	ldr	r7, [r1, #4]
 8005604:	03ff      	lsls	r7, r7, #15
 8005606:	d501      	bpl.n	800560c <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8005608:	432c      	orrs	r4, r5
 800560a:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 800560c:	4c3d      	ldr	r4, [pc, #244]	; (8005704 <HAL_GPIO_Init+0x170>)
 800560e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8005610:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8005612:	0026      	movs	r6, r4
 8005614:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005616:	684f      	ldr	r7, [r1, #4]
 8005618:	03bf      	lsls	r7, r7, #14
 800561a:	d501      	bpl.n	8005620 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 800561c:	432c      	orrs	r4, r5
 800561e:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8005620:	4c38      	ldr	r4, [pc, #224]	; (8005704 <HAL_GPIO_Init+0x170>)
 8005622:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005624:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8005626:	0026      	movs	r6, r4
 8005628:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800562a:	684f      	ldr	r7, [r1, #4]
 800562c:	02ff      	lsls	r7, r7, #11
 800562e:	d501      	bpl.n	8005634 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8005630:	432c      	orrs	r4, r5
 8005632:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8005634:	4c33      	ldr	r4, [pc, #204]	; (8005704 <HAL_GPIO_Init+0x170>)
 8005636:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8005638:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(iocurrent);
 800563a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800563c:	684e      	ldr	r6, [r1, #4]
 800563e:	02b6      	lsls	r6, r6, #10
 8005640:	d501      	bpl.n	8005646 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8005642:	002a      	movs	r2, r5
 8005644:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8005646:	4c2f      	ldr	r4, [pc, #188]	; (8005704 <HAL_GPIO_Init+0x170>)
 8005648:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 800564a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800564c:	680c      	ldr	r4, [r1, #0]
 800564e:	0022      	movs	r2, r4
 8005650:	40da      	lsrs	r2, r3
 8005652:	d052      	beq.n	80056fa <HAL_GPIO_Init+0x166>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005654:	2201      	movs	r2, #1
 8005656:	409a      	lsls	r2, r3
 8005658:	0025      	movs	r5, r4
 800565a:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 800565c:	4214      	tst	r4, r2
 800565e:	d0f4      	beq.n	800564a <HAL_GPIO_Init+0xb6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005660:	2403      	movs	r4, #3
 8005662:	684e      	ldr	r6, [r1, #4]
 8005664:	4034      	ands	r4, r6
 8005666:	3c01      	subs	r4, #1
 8005668:	2c01      	cmp	r4, #1
 800566a:	d997      	bls.n	800559c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800566c:	2203      	movs	r2, #3
 800566e:	684c      	ldr	r4, [r1, #4]
 8005670:	4022      	ands	r2, r4
 8005672:	2a03      	cmp	r2, #3
 8005674:	d009      	beq.n	800568a <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8005676:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005678:	005e      	lsls	r6, r3, #1
 800567a:	2403      	movs	r4, #3
 800567c:	40b4      	lsls	r4, r6
 800567e:	43a2      	bics	r2, r4
 8005680:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005682:	688a      	ldr	r2, [r1, #8]
 8005684:	40b2      	lsls	r2, r6
 8005686:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005688:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568a:	2203      	movs	r2, #3
 800568c:	684c      	ldr	r4, [r1, #4]
 800568e:	4022      	ands	r2, r4
 8005690:	2a02      	cmp	r2, #2
 8005692:	d097      	beq.n	80055c4 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8005694:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005696:	005e      	lsls	r6, r3, #1
 8005698:	2203      	movs	r2, #3
 800569a:	0017      	movs	r7, r2
 800569c:	40b7      	lsls	r7, r6
 800569e:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056a0:	684f      	ldr	r7, [r1, #4]
 80056a2:	403a      	ands	r2, r7
 80056a4:	40b2      	lsls	r2, r6
 80056a6:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80056a8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056aa:	22c0      	movs	r2, #192	; 0xc0
 80056ac:	0292      	lsls	r2, r2, #10
 80056ae:	684c      	ldr	r4, [r1, #4]
 80056b0:	4214      	tst	r4, r2
 80056b2:	d0ca      	beq.n	800564a <HAL_GPIO_Init+0xb6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b4:	4c14      	ldr	r4, [pc, #80]	; (8005708 <HAL_GPIO_Init+0x174>)
 80056b6:	69a6      	ldr	r6, [r4, #24]
 80056b8:	2201      	movs	r2, #1
 80056ba:	4316      	orrs	r6, r2
 80056bc:	61a6      	str	r6, [r4, #24]
 80056be:	69a4      	ldr	r4, [r4, #24]
 80056c0:	4022      	ands	r2, r4
 80056c2:	9201      	str	r2, [sp, #4]
 80056c4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80056c6:	089a      	lsrs	r2, r3, #2
 80056c8:	1c94      	adds	r4, r2, #2
 80056ca:	00a4      	lsls	r4, r4, #2
 80056cc:	4e0c      	ldr	r6, [pc, #48]	; (8005700 <HAL_GPIO_Init+0x16c>)
 80056ce:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056d0:	2403      	movs	r4, #3
 80056d2:	401c      	ands	r4, r3
 80056d4:	00a4      	lsls	r4, r4, #2
 80056d6:	260f      	movs	r6, #15
 80056d8:	40a6      	lsls	r6, r4
 80056da:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056dc:	2690      	movs	r6, #144	; 0x90
 80056de:	05f6      	lsls	r6, r6, #23
 80056e0:	42b0      	cmp	r0, r6
 80056e2:	d081      	beq.n	80055e8 <HAL_GPIO_Init+0x54>
 80056e4:	4e09      	ldr	r6, [pc, #36]	; (800570c <HAL_GPIO_Init+0x178>)
 80056e6:	42b0      	cmp	r0, r6
 80056e8:	d005      	beq.n	80056f6 <HAL_GPIO_Init+0x162>
 80056ea:	4e09      	ldr	r6, [pc, #36]	; (8005710 <HAL_GPIO_Init+0x17c>)
 80056ec:	42b0      	cmp	r0, r6
 80056ee:	d100      	bne.n	80056f2 <HAL_GPIO_Init+0x15e>
 80056f0:	e778      	b.n	80055e4 <HAL_GPIO_Init+0x50>
 80056f2:	2605      	movs	r6, #5
 80056f4:	e779      	b.n	80055ea <HAL_GPIO_Init+0x56>
 80056f6:	2601      	movs	r6, #1
 80056f8:	e777      	b.n	80055ea <HAL_GPIO_Init+0x56>
  } 
}
 80056fa:	b003      	add	sp, #12
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	40010000 	.word	0x40010000
 8005704:	40010400 	.word	0x40010400
 8005708:	40021000 	.word	0x40021000
 800570c:	48000400 	.word	0x48000400
 8005710:	48000800 	.word	0x48000800

08005714 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005714:	6803      	ldr	r3, [r0, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	0792      	lsls	r2, r2, #30
 800571a:	d501      	bpl.n	8005720 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800571c:	2200      	movs	r2, #0
 800571e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005720:	6803      	ldr	r3, [r0, #0]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	07d2      	lsls	r2, r2, #31
 8005726:	d403      	bmi.n	8005730 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	2101      	movs	r1, #1
 800572c:	430a      	orrs	r2, r1
 800572e:	619a      	str	r2, [r3, #24]
  }
}
 8005730:	4770      	bx	lr
	...

08005734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005734:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005736:	6804      	ldr	r4, [r0, #0]
 8005738:	6860      	ldr	r0, [r4, #4]
 800573a:	9d04      	ldr	r5, [sp, #16]
 800573c:	0d6d      	lsrs	r5, r5, #21
 800573e:	2680      	movs	r6, #128	; 0x80
 8005740:	00f6      	lsls	r6, r6, #3
 8005742:	402e      	ands	r6, r5
 8005744:	4d06      	ldr	r5, [pc, #24]	; (8005760 <I2C_TransferConfig+0x2c>)
 8005746:	4335      	orrs	r5, r6
 8005748:	43a8      	bics	r0, r5
 800574a:	0589      	lsls	r1, r1, #22
 800574c:	0d89      	lsrs	r1, r1, #22
 800574e:	0412      	lsls	r2, r2, #16
 8005750:	4311      	orrs	r1, r2
 8005752:	4319      	orrs	r1, r3
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	4319      	orrs	r1, r3
 8005758:	4301      	orrs	r1, r0
 800575a:	6061      	str	r1, [r4, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	03ff63ff 	.word	0x03ff63ff

08005764 <I2C_IsAcknowledgeFailed>:
{
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	0005      	movs	r5, r0
 8005768:	000f      	movs	r7, r1
 800576a:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576c:	6803      	ldr	r3, [r0, #0]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	06d2      	lsls	r2, r2, #27
 8005772:	d53b      	bpl.n	80057ec <I2C_IsAcknowledgeFailed+0x88>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	0192      	lsls	r2, r2, #6
 8005778:	d404      	bmi.n	8005784 <I2C_IsAcknowledgeFailed+0x20>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	01d2      	lsls	r2, r2, #7
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	699c      	ldr	r4, [r3, #24]
 8005788:	06a2      	lsls	r2, r4, #26
 800578a:	d415      	bmi.n	80057b8 <I2C_IsAcknowledgeFailed+0x54>
      if (Timeout != HAL_MAX_DELAY)
 800578c:	1c7b      	adds	r3, r7, #1
 800578e:	d0f9      	beq.n	8005784 <I2C_IsAcknowledgeFailed+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7ff fc80 	bl	8005094 <HAL_GetTick>
 8005794:	1b80      	subs	r0, r0, r6
 8005796:	42b8      	cmp	r0, r7
 8005798:	d801      	bhi.n	800579e <I2C_IsAcknowledgeFailed+0x3a>
 800579a:	2f00      	cmp	r7, #0
 800579c:	d1f2      	bne.n	8005784 <I2C_IsAcknowledgeFailed+0x20>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80057a0:	2220      	movs	r2, #32
 80057a2:	4313      	orrs	r3, r2
 80057a4:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	2341      	movs	r3, #65	; 0x41
 80057a8:	54ea      	strb	r2, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	3222      	adds	r2, #34	; 0x22
 80057ae:	54ab      	strb	r3, [r5, r2]
          __HAL_UNLOCK(hi2c);
 80057b0:	3a02      	subs	r2, #2
 80057b2:	54ab      	strb	r3, [r5, r2]
          return HAL_ERROR;
 80057b4:	2001      	movs	r0, #1
 80057b6:	e01a      	b.n	80057ee <I2C_IsAcknowledgeFailed+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	2210      	movs	r2, #16
 80057ba:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	2420      	movs	r4, #32
 80057c0:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80057c2:	0028      	movs	r0, r5
 80057c4:	f7ff ffa6 	bl	8005714 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80057c8:	682a      	ldr	r2, [r5, #0]
 80057ca:	6853      	ldr	r3, [r2, #4]
 80057cc:	4908      	ldr	r1, [pc, #32]	; (80057f0 <I2C_IsAcknowledgeFailed+0x8c>)
 80057ce:	400b      	ands	r3, r1
 80057d0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80057d4:	2204      	movs	r2, #4
 80057d6:	4313      	orrs	r3, r2
 80057d8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057da:	2341      	movs	r3, #65	; 0x41
 80057dc:	54ec      	strb	r4, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057de:	2300      	movs	r3, #0
 80057e0:	323e      	adds	r2, #62	; 0x3e
 80057e2:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80057e4:	3a02      	subs	r2, #2
 80057e6:	54ab      	strb	r3, [r5, r2]
    return HAL_ERROR;
 80057e8:	2001      	movs	r0, #1
 80057ea:	e000      	b.n	80057ee <I2C_IsAcknowledgeFailed+0x8a>
  return HAL_OK;
 80057ec:	2000      	movs	r0, #0
}
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f0:	fe00e800 	.word	0xfe00e800

080057f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	0004      	movs	r4, r0
 80057f8:	000d      	movs	r5, r1
 80057fa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	079b      	lsls	r3, r3, #30
 8005802:	d41c      	bmi.n	800583e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005804:	0032      	movs	r2, r6
 8005806:	0029      	movs	r1, r5
 8005808:	0020      	movs	r0, r4
 800580a:	f7ff ffab 	bl	8005764 <I2C_IsAcknowledgeFailed>
 800580e:	2800      	cmp	r0, #0
 8005810:	d117      	bne.n	8005842 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8005812:	1c6b      	adds	r3, r5, #1
 8005814:	d0f2      	beq.n	80057fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7ff fc3d 	bl	8005094 <HAL_GetTick>
 800581a:	1b80      	subs	r0, r0, r6
 800581c:	42a8      	cmp	r0, r5
 800581e:	d801      	bhi.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8005820:	2d00      	cmp	r5, #0
 8005822:	d1eb      	bne.n	80057fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005826:	2220      	movs	r2, #32
 8005828:	4313      	orrs	r3, r2
 800582a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582c:	2341      	movs	r3, #65	; 0x41
 800582e:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005830:	2300      	movs	r3, #0
 8005832:	3222      	adds	r2, #34	; 0x22
 8005834:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8005836:	3a02      	subs	r2, #2
 8005838:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 800583a:	2001      	movs	r0, #1
 800583c:	e000      	b.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 800583e:	2000      	movs	r0, #0
}
 8005840:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005842:	2001      	movs	r0, #1
 8005844:	e7fc      	b.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

08005846 <I2C_WaitOnFlagUntilTimeout>:
{
 8005846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005848:	46c6      	mov	lr, r8
 800584a:	b500      	push	{lr}
 800584c:	0007      	movs	r7, r0
 800584e:	000d      	movs	r5, r1
 8005850:	4690      	mov	r8, r2
 8005852:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699c      	ldr	r4, [r3, #24]
 8005858:	402c      	ands	r4, r5
 800585a:	1b64      	subs	r4, r4, r5
 800585c:	4263      	negs	r3, r4
 800585e:	415c      	adcs	r4, r3
 8005860:	4544      	cmp	r4, r8
 8005862:	d116      	bne.n	8005892 <I2C_WaitOnFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 8005864:	1c73      	adds	r3, r6, #1
 8005866:	d0f5      	beq.n	8005854 <I2C_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005868:	f7ff fc14 	bl	8005094 <HAL_GetTick>
 800586c:	9b06      	ldr	r3, [sp, #24]
 800586e:	1ac0      	subs	r0, r0, r3
 8005870:	42b0      	cmp	r0, r6
 8005872:	d801      	bhi.n	8005878 <I2C_WaitOnFlagUntilTimeout+0x32>
 8005874:	2e00      	cmp	r6, #0
 8005876:	d1ed      	bne.n	8005854 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	2220      	movs	r2, #32
 800587c:	4313      	orrs	r3, r2
 800587e:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005880:	2341      	movs	r3, #65	; 0x41
 8005882:	54fa      	strb	r2, [r7, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005884:	2300      	movs	r3, #0
 8005886:	3222      	adds	r2, #34	; 0x22
 8005888:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(hi2c);
 800588a:	3a02      	subs	r2, #2
 800588c:	54bb      	strb	r3, [r7, r2]
        return HAL_ERROR;
 800588e:	2001      	movs	r0, #1
 8005890:	e000      	b.n	8005894 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005892:	2000      	movs	r0, #0
}
 8005894:	bc80      	pop	{r7}
 8005896:	46b8      	mov	r8, r7
 8005898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800589c <I2C_RequestMemoryWrite>:
{
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	0004      	movs	r4, r0
 80058a2:	0015      	movs	r5, r2
 80058a4:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	b2f2      	uxtb	r2, r6
 80058aa:	4819      	ldr	r0, [pc, #100]	; (8005910 <I2C_RequestMemoryWrite+0x74>)
 80058ac:	9000      	str	r0, [sp, #0]
 80058ae:	045b      	lsls	r3, r3, #17
 80058b0:	0020      	movs	r0, r4
 80058b2:	f7ff ff3f 	bl	8005734 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b6:	9a07      	ldr	r2, [sp, #28]
 80058b8:	9906      	ldr	r1, [sp, #24]
 80058ba:	0020      	movs	r0, r4
 80058bc:	f7ff ff9a 	bl	80057f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d11e      	bne.n	8005902 <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058c4:	2e01      	cmp	r6, #1
 80058c6:	d10e      	bne.n	80058e6 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	b2ed      	uxtb	r5, r5
 80058cc:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058ce:	9b07      	ldr	r3, [sp, #28]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	9b06      	ldr	r3, [sp, #24]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	0020      	movs	r0, r4
 80058da:	f7ff ffb4 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d113      	bne.n	800590a <I2C_RequestMemoryWrite+0x6e>
}
 80058e2:	b002      	add	sp, #8
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	0a2a      	lsrs	r2, r5, #8
 80058ea:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ec:	9a07      	ldr	r2, [sp, #28]
 80058ee:	9906      	ldr	r1, [sp, #24]
 80058f0:	0020      	movs	r0, r4
 80058f2:	f7ff ff7f 	bl	80057f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d105      	bne.n	8005906 <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	b2ed      	uxtb	r5, r5
 80058fe:	629d      	str	r5, [r3, #40]	; 0x28
 8005900:	e7e5      	b.n	80058ce <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 8005902:	2001      	movs	r0, #1
 8005904:	e7ed      	b.n	80058e2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005906:	2001      	movs	r0, #1
 8005908:	e7eb      	b.n	80058e2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800590a:	2001      	movs	r0, #1
 800590c:	e7e9      	b.n	80058e2 <I2C_RequestMemoryWrite+0x46>
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	80002000 	.word	0x80002000

08005914 <I2C_RequestMemoryRead>:
{
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	0004      	movs	r4, r0
 800591a:	0015      	movs	r5, r2
 800591c:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800591e:	b2da      	uxtb	r2, r3
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <I2C_RequestMemoryRead+0x70>)
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	f7ff ff05 	bl	8005734 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592a:	9a07      	ldr	r2, [sp, #28]
 800592c:	9906      	ldr	r1, [sp, #24]
 800592e:	0020      	movs	r0, r4
 8005930:	f7ff ff60 	bl	80057f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005934:	2800      	cmp	r0, #0
 8005936:	d11e      	bne.n	8005976 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005938:	2e01      	cmp	r6, #1
 800593a:	d10e      	bne.n	800595a <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	b2ed      	uxtb	r5, r5
 8005940:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005942:	9b07      	ldr	r3, [sp, #28]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	9b06      	ldr	r3, [sp, #24]
 8005948:	2200      	movs	r2, #0
 800594a:	2140      	movs	r1, #64	; 0x40
 800594c:	0020      	movs	r0, r4
 800594e:	f7ff ff7a 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 8005952:	2800      	cmp	r0, #0
 8005954:	d113      	bne.n	800597e <I2C_RequestMemoryRead+0x6a>
}
 8005956:	b002      	add	sp, #8
 8005958:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	0a2a      	lsrs	r2, r5, #8
 800595e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005960:	9a07      	ldr	r2, [sp, #28]
 8005962:	9906      	ldr	r1, [sp, #24]
 8005964:	0020      	movs	r0, r4
 8005966:	f7ff ff45 	bl	80057f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800596a:	2800      	cmp	r0, #0
 800596c:	d105      	bne.n	800597a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	b2ed      	uxtb	r5, r5
 8005972:	629d      	str	r5, [r3, #40]	; 0x28
 8005974:	e7e5      	b.n	8005942 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005976:	2001      	movs	r0, #1
 8005978:	e7ed      	b.n	8005956 <I2C_RequestMemoryRead+0x42>
      return HAL_ERROR;
 800597a:	2001      	movs	r0, #1
 800597c:	e7eb      	b.n	8005956 <I2C_RequestMemoryRead+0x42>
    return HAL_ERROR;
 800597e:	2001      	movs	r0, #1
 8005980:	e7e9      	b.n	8005956 <I2C_RequestMemoryRead+0x42>
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	80002000 	.word	0x80002000

08005988 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	0005      	movs	r5, r0
 800598c:	000c      	movs	r4, r1
 800598e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	069b      	lsls	r3, r3, #26
 8005996:	d41a      	bmi.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005998:	0032      	movs	r2, r6
 800599a:	0021      	movs	r1, r4
 800599c:	0028      	movs	r0, r5
 800599e:	f7ff fee1 	bl	8005764 <I2C_IsAcknowledgeFailed>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d115      	bne.n	80059d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a6:	f7ff fb75 	bl	8005094 <HAL_GetTick>
 80059aa:	1b80      	subs	r0, r0, r6
 80059ac:	42a0      	cmp	r0, r4
 80059ae:	d801      	bhi.n	80059b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80059b0:	2c00      	cmp	r4, #0
 80059b2:	d1ed      	bne.n	8005990 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80059b6:	2220      	movs	r2, #32
 80059b8:	4313      	orrs	r3, r2
 80059ba:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	2341      	movs	r3, #65	; 0x41
 80059be:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	3222      	adds	r2, #34	; 0x22
 80059c4:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 80059c6:	3a02      	subs	r2, #2
 80059c8:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 80059ca:	2001      	movs	r0, #1
}
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80059ce:	2000      	movs	r0, #0
 80059d0:	e7fc      	b.n	80059cc <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 80059d2:	2001      	movs	r0, #1
 80059d4:	e7fa      	b.n	80059cc <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

080059d8 <HAL_I2C_Init>:
{
 80059d8:	b510      	push	{r4, lr}
 80059da:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80059dc:	d059      	beq.n	8005a92 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059de:	2341      	movs	r3, #65	; 0x41
 80059e0:	5cc3      	ldrb	r3, [r0, r3]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d043      	beq.n	8005a6e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80059e6:	2341      	movs	r3, #65	; 0x41
 80059e8:	2224      	movs	r2, #36	; 0x24
 80059ea:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80059ec:	6822      	ldr	r2, [r4, #0]
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	438b      	bics	r3, r1
 80059f4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_I2C_Init+0xc0>)
 80059fa:	6861      	ldr	r1, [r4, #4]
 80059fc:	400b      	ands	r3, r1
 80059fe:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a00:	6822      	ldr	r2, [r4, #0]
 8005a02:	6893      	ldr	r3, [r2, #8]
 8005a04:	4925      	ldr	r1, [pc, #148]	; (8005a9c <HAL_I2C_Init+0xc4>)
 8005a06:	400b      	ands	r3, r1
 8005a08:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d034      	beq.n	8005a7a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	2384      	movs	r3, #132	; 0x84
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	68a1      	ldr	r1, [r4, #8]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a1c:	68e3      	ldr	r3, [r4, #12]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d032      	beq.n	8005a88 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	6851      	ldr	r1, [r2, #4]
 8005a26:	4b1e      	ldr	r3, [pc, #120]	; (8005aa0 <HAL_I2C_Init+0xc8>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	68d3      	ldr	r3, [r2, #12]
 8005a30:	491a      	ldr	r1, [pc, #104]	; (8005a9c <HAL_I2C_Init+0xc4>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	6962      	ldr	r2, [r4, #20]
 8005a3a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a3c:	69a2      	ldr	r2, [r4, #24]
 8005a3e:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a40:	6821      	ldr	r1, [r4, #0]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	69e3      	ldr	r3, [r4, #28]
 8005a4a:	6a21      	ldr	r1, [r4, #32]
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	2101      	movs	r1, #1
 8005a56:	430b      	orrs	r3, r1
 8005a58:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	2241      	movs	r2, #65	; 0x41
 8005a60:	311f      	adds	r1, #31
 8005a62:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a64:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	3201      	adds	r2, #1
 8005a68:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005a6a:	2000      	movs	r0, #0
}
 8005a6c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005a6e:	3340      	adds	r3, #64	; 0x40
 8005a70:	2200      	movs	r2, #0
 8005a72:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8005a74:	f7ff fa02 	bl	8004e7c <HAL_I2C_MspInit>
 8005a78:	e7b5      	b.n	80059e6 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	68a1      	ldr	r1, [r4, #8]
 8005a82:	430b      	orrs	r3, r1
 8005a84:	6093      	str	r3, [r2, #8]
 8005a86:	e7c9      	b.n	8005a1c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	2280      	movs	r2, #128	; 0x80
 8005a8c:	0112      	lsls	r2, r2, #4
 8005a8e:	605a      	str	r2, [r3, #4]
 8005a90:	e7c7      	b.n	8005a22 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005a92:	2001      	movs	r0, #1
 8005a94:	e7ea      	b.n	8005a6c <HAL_I2C_Init+0x94>
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	f0ffffff 	.word	0xf0ffffff
 8005a9c:	ffff7fff 	.word	0xffff7fff
 8005aa0:	02008000 	.word	0x02008000

08005aa4 <HAL_I2C_Mem_Write>:
{
 8005aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	0004      	movs	r4, r0
 8005aaa:	9103      	str	r1, [sp, #12]
 8005aac:	9204      	str	r2, [sp, #16]
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	ab0c      	add	r3, sp, #48	; 0x30
 8005ab2:	cb20      	ldmia	r3!, {r5}
 8005ab4:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab6:	2341      	movs	r3, #65	; 0x41
 8005ab8:	5cc3      	ldrb	r3, [r0, r3]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d000      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0x1c>
 8005abe:	e0b3      	b.n	8005c28 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	d018      	beq.n	8005af6 <HAL_I2C_Mem_Write+0x52>
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	d016      	beq.n	8005af6 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8005ac8:	2340      	movs	r3, #64	; 0x40
 8005aca:	5cc3      	ldrb	r3, [r0, r3]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d100      	bne.n	8005ad2 <HAL_I2C_Mem_Write+0x2e>
 8005ad0:	e0ad      	b.n	8005c2e <HAL_I2C_Mem_Write+0x18a>
 8005ad2:	2340      	movs	r3, #64	; 0x40
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8005ad8:	f7ff fadc 	bl	8005094 <HAL_GetTick>
 8005adc:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	9000      	str	r0, [sp, #0]
 8005ae2:	2319      	movs	r3, #25
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	0209      	lsls	r1, r1, #8
 8005ae8:	0020      	movs	r0, r4
 8005aea:	f7ff feac 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d006      	beq.n	8005b00 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8005af2:	2001      	movs	r0, #1
 8005af4:	e099      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005afc:	2001      	movs	r0, #1
 8005afe:	e094      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b00:	2341      	movs	r3, #65	; 0x41
 8005b02:	2221      	movs	r2, #33	; 0x21
 8005b04:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b06:	3301      	adds	r3, #1
 8005b08:	321f      	adds	r2, #31
 8005b0a:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005b10:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b12:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b14:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b16:	9601      	str	r6, [sp, #4]
 8005b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	9b05      	ldr	r3, [sp, #20]
 8005b1e:	9a04      	ldr	r2, [sp, #16]
 8005b20:	9903      	ldr	r1, [sp, #12]
 8005b22:	0020      	movs	r0, r4
 8005b24:	f7ff feba 	bl	800589c <I2C_RequestMemoryWrite>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d10f      	bne.n	8005b4c <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2bff      	cmp	r3, #255	; 0xff
 8005b32:	d910      	bls.n	8005b56 <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b34:	23ff      	movs	r3, #255	; 0xff
 8005b36:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b38:	3b7f      	subs	r3, #127	; 0x7f
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	9200      	str	r2, [sp, #0]
 8005b3e:	045b      	lsls	r3, r3, #17
 8005b40:	32ff      	adds	r2, #255	; 0xff
 8005b42:	9903      	ldr	r1, [sp, #12]
 8005b44:	0020      	movs	r0, r4
 8005b46:	f7ff fdf5 	bl	8005734 <I2C_TransferConfig>
 8005b4a:	e021      	b.n	8005b90 <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	2200      	movs	r2, #0
 8005b50:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8005b52:	2001      	movs	r0, #1
 8005b54:	e069      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 8005b56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	2100      	movs	r1, #0
 8005b62:	9100      	str	r1, [sp, #0]
 8005b64:	049b      	lsls	r3, r3, #18
 8005b66:	9903      	ldr	r1, [sp, #12]
 8005b68:	0020      	movs	r0, r4
 8005b6a:	f7ff fde3 	bl	8005734 <I2C_TransferConfig>
 8005b6e:	e00f      	b.n	8005b90 <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8005b70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b72:	b292      	uxth	r2, r2
 8005b74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	9100      	str	r1, [sp, #0]
 8005b7e:	049b      	lsls	r3, r3, #18
 8005b80:	9903      	ldr	r1, [sp, #12]
 8005b82:	0020      	movs	r0, r4
 8005b84:	f7ff fdd6 	bl	8005734 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005b88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d034      	beq.n	8005bfa <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b90:	0032      	movs	r2, r6
 8005b92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b94:	0020      	movs	r0, r4
 8005b96:	f7ff fe2d 	bl	80057f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d149      	bne.n	8005c32 <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba8:	3301      	adds	r3, #1
 8005baa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005bac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005bb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	d0e1      	beq.n	8005b88 <HAL_I2C_Mem_Write+0xe4>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1df      	bne.n	8005b88 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bc8:	9600      	str	r6, [sp, #0]
 8005bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	0020      	movs	r0, r4
 8005bd2:	f7ff fe38 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d12d      	bne.n	8005c36 <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2bff      	cmp	r3, #255	; 0xff
 8005be0:	d9c6      	bls.n	8005b70 <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be2:	23ff      	movs	r3, #255	; 0xff
 8005be4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005be6:	3b7f      	subs	r3, #127	; 0x7f
 8005be8:	2200      	movs	r2, #0
 8005bea:	9200      	str	r2, [sp, #0]
 8005bec:	045b      	lsls	r3, r3, #17
 8005bee:	32ff      	adds	r2, #255	; 0xff
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	0020      	movs	r0, r4
 8005bf4:	f7ff fd9e 	bl	8005734 <I2C_TransferConfig>
 8005bf8:	e7c6      	b.n	8005b88 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfa:	0032      	movs	r2, r6
 8005bfc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f7ff fec2 	bl	8005988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d118      	bne.n	8005c3a <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c0e:	6821      	ldr	r1, [r4, #0]
 8005c10:	684b      	ldr	r3, [r1, #4]
 8005c12:	4d0b      	ldr	r5, [pc, #44]	; (8005c40 <HAL_I2C_Mem_Write+0x19c>)
 8005c14:	402b      	ands	r3, r5
 8005c16:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	2341      	movs	r3, #65	; 0x41
 8005c1a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	3222      	adds	r2, #34	; 0x22
 8005c20:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8005c22:	3a02      	subs	r2, #2
 8005c24:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8005c26:	e000      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 8005c28:	2002      	movs	r0, #2
}
 8005c2a:	b007      	add	sp, #28
 8005c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8005c2e:	2002      	movs	r0, #2
 8005c30:	e7fb      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 8005c32:	2001      	movs	r0, #1
 8005c34:	e7f9      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 8005c36:	2001      	movs	r0, #1
 8005c38:	e7f7      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	e7f5      	b.n	8005c2a <HAL_I2C_Mem_Write+0x186>
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	fe00e800 	.word	0xfe00e800

08005c44 <HAL_I2C_Mem_Read>:
{
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	b087      	sub	sp, #28
 8005c48:	0004      	movs	r4, r0
 8005c4a:	9103      	str	r1, [sp, #12]
 8005c4c:	9204      	str	r2, [sp, #16]
 8005c4e:	9305      	str	r3, [sp, #20]
 8005c50:	ab0c      	add	r3, sp, #48	; 0x30
 8005c52:	cb20      	ldmia	r3!, {r5}
 8005c54:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c56:	2341      	movs	r3, #65	; 0x41
 8005c58:	5cc3      	ldrb	r3, [r0, r3]
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d000      	beq.n	8005c60 <HAL_I2C_Mem_Read+0x1c>
 8005c5e:	e0b5      	b.n	8005dcc <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	d018      	beq.n	8005c96 <HAL_I2C_Mem_Read+0x52>
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	d016      	beq.n	8005c96 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	5cc3      	ldrb	r3, [r0, r3]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d100      	bne.n	8005c72 <HAL_I2C_Mem_Read+0x2e>
 8005c70:	e0af      	b.n	8005dd2 <HAL_I2C_Mem_Read+0x18e>
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	2201      	movs	r2, #1
 8005c76:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8005c78:	f7ff fa0c 	bl	8005094 <HAL_GetTick>
 8005c7c:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c7e:	2180      	movs	r1, #128	; 0x80
 8005c80:	9000      	str	r0, [sp, #0]
 8005c82:	2319      	movs	r3, #25
 8005c84:	2201      	movs	r2, #1
 8005c86:	0209      	lsls	r1, r1, #8
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f7ff fddc 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d006      	beq.n	8005ca0 <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 8005c92:	2001      	movs	r0, #1
 8005c94:	e09b      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	e096      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ca0:	2341      	movs	r3, #65	; 0x41
 8005ca2:	2222      	movs	r2, #34	; 0x22
 8005ca4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	321e      	adds	r2, #30
 8005caa:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005cb0:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cb2:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cb4:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cb6:	9601      	str	r6, [sp, #4]
 8005cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	9b05      	ldr	r3, [sp, #20]
 8005cbe:	9a04      	ldr	r2, [sp, #16]
 8005cc0:	9903      	ldr	r1, [sp, #12]
 8005cc2:	0020      	movs	r0, r4
 8005cc4:	f7ff fe26 	bl	8005914 <I2C_RequestMemoryRead>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d10f      	bne.n	8005cec <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ccc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2bff      	cmp	r3, #255	; 0xff
 8005cd2:	d910      	bls.n	8005cf6 <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cd4:	23ff      	movs	r3, #255	; 0xff
 8005cd6:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cd8:	3b7f      	subs	r3, #127	; 0x7f
 8005cda:	4a42      	ldr	r2, [pc, #264]	; (8005de4 <HAL_I2C_Mem_Read+0x1a0>)
 8005cdc:	9200      	str	r2, [sp, #0]
 8005cde:	045b      	lsls	r3, r3, #17
 8005ce0:	22ff      	movs	r2, #255	; 0xff
 8005ce2:	9903      	ldr	r1, [sp, #12]
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f7ff fd25 	bl	8005734 <I2C_TransferConfig>
 8005cea:	e021      	b.n	8005d30 <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 8005cec:	2340      	movs	r3, #64	; 0x40
 8005cee:	2200      	movs	r2, #0
 8005cf0:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e06b      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 8005cf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	4938      	ldr	r1, [pc, #224]	; (8005de4 <HAL_I2C_Mem_Read+0x1a0>)
 8005d02:	9100      	str	r1, [sp, #0]
 8005d04:	049b      	lsls	r3, r3, #18
 8005d06:	9903      	ldr	r1, [sp, #12]
 8005d08:	0020      	movs	r0, r4
 8005d0a:	f7ff fd13 	bl	8005734 <I2C_TransferConfig>
 8005d0e:	e00f      	b.n	8005d30 <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 8005d10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d12:	b292      	uxth	r2, r2
 8005d14:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	9100      	str	r1, [sp, #0]
 8005d1e:	049b      	lsls	r3, r3, #18
 8005d20:	9903      	ldr	r1, [sp, #12]
 8005d22:	0020      	movs	r0, r4
 8005d24:	f7ff fd06 	bl	8005734 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005d28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d036      	beq.n	8005d9e <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d30:	9600      	str	r6, [sp, #0]
 8005d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d34:	2200      	movs	r2, #0
 8005d36:	2104      	movs	r1, #4
 8005d38:	0020      	movs	r0, r4
 8005d3a:	f7ff fd84 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d149      	bne.n	8005dd6 <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d48:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005d50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005d58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d5a:	3a01      	subs	r2, #1
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d62:	b292      	uxth	r2, r2
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	d0df      	beq.n	8005d28 <HAL_I2C_Mem_Read+0xe4>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1dd      	bne.n	8005d28 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d6c:	9600      	str	r6, [sp, #0]
 8005d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d70:	2200      	movs	r2, #0
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	0020      	movs	r0, r4
 8005d76:	f7ff fd66 	bl	8005846 <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d12d      	bne.n	8005dda <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2bff      	cmp	r3, #255	; 0xff
 8005d84:	d9c4      	bls.n	8005d10 <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d8a:	3b7f      	subs	r3, #127	; 0x7f
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	9200      	str	r2, [sp, #0]
 8005d90:	045b      	lsls	r3, r3, #17
 8005d92:	32ff      	adds	r2, #255	; 0xff
 8005d94:	9903      	ldr	r1, [sp, #12]
 8005d96:	0020      	movs	r0, r4
 8005d98:	f7ff fccc 	bl	8005734 <I2C_TransferConfig>
 8005d9c:	e7c4      	b.n	8005d28 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d9e:	0032      	movs	r2, r6
 8005da0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005da2:	0020      	movs	r0, r4
 8005da4:	f7ff fdf0 	bl	8005988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d118      	bne.n	8005dde <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	2220      	movs	r2, #32
 8005db0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005db2:	6821      	ldr	r1, [r4, #0]
 8005db4:	684b      	ldr	r3, [r1, #4]
 8005db6:	4d0c      	ldr	r5, [pc, #48]	; (8005de8 <HAL_I2C_Mem_Read+0x1a4>)
 8005db8:	402b      	ands	r3, r5
 8005dba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	2341      	movs	r3, #65	; 0x41
 8005dbe:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	3222      	adds	r2, #34	; 0x22
 8005dc4:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8005dc6:	3a02      	subs	r2, #2
 8005dc8:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8005dca:	e000      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 8005dcc:	2002      	movs	r0, #2
}
 8005dce:	b007      	add	sp, #28
 8005dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8005dd2:	2002      	movs	r0, #2
 8005dd4:	e7fb      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e7f9      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 8005dda:	2001      	movs	r0, #1
 8005ddc:	e7f7      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 8005dde:	2001      	movs	r0, #1
 8005de0:	e7f5      	b.n	8005dce <HAL_I2C_Mem_Read+0x18a>
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	80002400 	.word	0x80002400
 8005de8:	fe00e800 	.word	0xfe00e800

08005dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dec:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dee:	2341      	movs	r3, #65	; 0x41
 8005df0:	5cc3      	ldrb	r3, [r0, r3]
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d120      	bne.n	8005e38 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005df6:	3320      	adds	r3, #32
 8005df8:	5cc3      	ldrb	r3, [r0, r3]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d01e      	beq.n	8005e3c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005dfe:	2440      	movs	r4, #64	; 0x40
 8005e00:	2201      	movs	r2, #1
 8005e02:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e04:	2541      	movs	r5, #65	; 0x41
 8005e06:	2324      	movs	r3, #36	; 0x24
 8005e08:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e0a:	6806      	ldr	r6, [r0, #0]
 8005e0c:	6833      	ldr	r3, [r6, #0]
 8005e0e:	4393      	bics	r3, r2
 8005e10:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e12:	6806      	ldr	r6, [r0, #0]
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	4f0a      	ldr	r7, [pc, #40]	; (8005e40 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8005e18:	403b      	ands	r3, r7
 8005e1a:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e1c:	6806      	ldr	r6, [r0, #0]
 8005e1e:	6833      	ldr	r3, [r6, #0]
 8005e20:	4319      	orrs	r1, r3
 8005e22:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e24:	6801      	ldr	r1, [r0, #0]
 8005e26:	680b      	ldr	r3, [r1, #0]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e30:	2300      	movs	r3, #0
 8005e32:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8005e34:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005e38:	2002      	movs	r0, #2
 8005e3a:	e7fc      	b.n	8005e36 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	e7fa      	b.n	8005e36 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8005e40:	ffffefff 	.word	0xffffefff

08005e44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e46:	2341      	movs	r3, #65	; 0x41
 8005e48:	5cc3      	ldrb	r3, [r0, r3]
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d11e      	bne.n	8005e8c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e4e:	3320      	adds	r3, #32
 8005e50:	5cc3      	ldrb	r3, [r0, r3]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d01c      	beq.n	8005e90 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8005e56:	2440      	movs	r4, #64	; 0x40
 8005e58:	2201      	movs	r2, #1
 8005e5a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5c:	2541      	movs	r5, #65	; 0x41
 8005e5e:	2324      	movs	r3, #36	; 0x24
 8005e60:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e62:	6806      	ldr	r6, [r0, #0]
 8005e64:	6833      	ldr	r3, [r6, #0]
 8005e66:	4393      	bics	r3, r2
 8005e68:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e6a:	6806      	ldr	r6, [r0, #0]
 8005e6c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e6e:	4f09      	ldr	r7, [pc, #36]	; (8005e94 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8005e70:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e72:	0209      	lsls	r1, r1, #8
 8005e74:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e76:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e78:	6801      	ldr	r1, [r0, #0]
 8005e7a:	680b      	ldr	r3, [r1, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	2320      	movs	r3, #32
 8005e82:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e84:	2300      	movs	r3, #0
 8005e86:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8005e88:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005e8c:	2002      	movs	r0, #2
 8005e8e:	e7fc      	b.n	8005e8a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8005e90:	2002      	movs	r0, #2
 8005e92:	e7fa      	b.n	8005e8a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8005e94:	fffff0ff 	.word	0xfffff0ff

08005e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e9e:	d100      	bne.n	8005ea2 <HAL_RCC_OscConfig+0xa>
 8005ea0:	e27f      	b.n	80063a2 <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea2:	6803      	ldr	r3, [r0, #0]
 8005ea4:	07db      	lsls	r3, r3, #31
 8005ea6:	d52b      	bpl.n	8005f00 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005ea8:	4bb3      	ldr	r3, [pc, #716]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	230c      	movs	r3, #12
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005eb4:	4bb0      	ldr	r3, [pc, #704]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	230c      	movs	r3, #12
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d00e      	beq.n	8005ede <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d041      	beq.n	8005f4a <HAL_RCC_OscConfig+0xb2>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d156      	bne.n	8005f78 <HAL_RCC_OscConfig+0xe0>
 8005eca:	4bab      	ldr	r3, [pc, #684]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	49ab      	ldr	r1, [pc, #684]	; (800617c <HAL_RCC_OscConfig+0x2e4>)
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	49aa      	ldr	r1, [pc, #680]	; (8006180 <HAL_RCC_OscConfig+0x2e8>)
 8005ed8:	400a      	ands	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e03b      	b.n	8005f56 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ede:	4ba6      	ldr	r3, [pc, #664]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	22c0      	movs	r2, #192	; 0xc0
 8005ee4:	0252      	lsls	r2, r2, #9
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2280      	movs	r2, #128	; 0x80
 8005eea:	0252      	lsls	r2, r2, #9
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d1e7      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	4ba1      	ldr	r3, [pc, #644]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	039b      	lsls	r3, r3, #14
 8005ef6:	d503      	bpl.n	8005f00 <HAL_RCC_OscConfig+0x68>
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d100      	bne.n	8005f00 <HAL_RCC_OscConfig+0x68>
 8005efe:	e253      	b.n	80063a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	079b      	lsls	r3, r3, #30
 8005f04:	d577      	bpl.n	8005ff6 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005f06:	4b9c      	ldr	r3, [pc, #624]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	220c      	movs	r2, #12
 8005f0c:	421a      	tst	r2, r3
 8005f0e:	d062      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005f10:	4b99      	ldr	r3, [pc, #612]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	230c      	movs	r3, #12
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d053      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f1c:	68e3      	ldr	r3, [r4, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d100      	bne.n	8005f24 <HAL_RCC_OscConfig+0x8c>
 8005f22:	e08a      	b.n	800603a <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4a94      	ldr	r2, [pc, #592]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2e:	f7ff f8b1 	bl	8005094 <HAL_GetTick>
 8005f32:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f34:	4b90      	ldr	r3, [pc, #576]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	079b      	lsls	r3, r3, #30
 8005f3a:	d475      	bmi.n	8006028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f3c:	f7ff f8aa 	bl	8005094 <HAL_GetTick>
 8005f40:	1b40      	subs	r0, r0, r5
 8005f42:	2802      	cmp	r0, #2
 8005f44:	d9f6      	bls.n	8005f34 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8005f46:	2003      	movs	r0, #3
 8005f48:	e22c      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f4a:	4a8b      	ldr	r2, [pc, #556]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f4c:	6811      	ldr	r1, [r2, #0]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	025b      	lsls	r3, r3, #9
 8005f52:	430b      	orrs	r3, r1
 8005f54:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d025      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8005f5c:	f7ff f89a 	bl	8005094 <HAL_GetTick>
 8005f60:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	4b85      	ldr	r3, [pc, #532]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	039b      	lsls	r3, r3, #14
 8005f68:	d4ca      	bmi.n	8005f00 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f6a:	f7ff f893 	bl	8005094 <HAL_GetTick>
 8005f6e:	1b40      	subs	r0, r0, r5
 8005f70:	2864      	cmp	r0, #100	; 0x64
 8005f72:	d9f6      	bls.n	8005f62 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8005f74:	2003      	movs	r0, #3
 8005f76:	e215      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d009      	beq.n	8005f90 <HAL_RCC_OscConfig+0xf8>
 8005f7c:	4b7e      	ldr	r3, [pc, #504]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	497e      	ldr	r1, [pc, #504]	; (800617c <HAL_RCC_OscConfig+0x2e4>)
 8005f82:	400a      	ands	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	497d      	ldr	r1, [pc, #500]	; (8006180 <HAL_RCC_OscConfig+0x2e8>)
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e7e2      	b.n	8005f56 <HAL_RCC_OscConfig+0xbe>
 8005f90:	4b79      	ldr	r3, [pc, #484]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	02d2      	lsls	r2, r2, #11
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	0252      	lsls	r2, r2, #9
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e7d6      	b.n	8005f56 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8005fa8:	f7ff f874 	bl	8005094 <HAL_GetTick>
 8005fac:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fae:	4b72      	ldr	r3, [pc, #456]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	039b      	lsls	r3, r3, #14
 8005fb4:	d5a4      	bpl.n	8005f00 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb6:	f7ff f86d 	bl	8005094 <HAL_GetTick>
 8005fba:	1b40      	subs	r0, r0, r5
 8005fbc:	2864      	cmp	r0, #100	; 0x64
 8005fbe:	d9f6      	bls.n	8005fae <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8005fc0:	2003      	movs	r0, #3
 8005fc2:	e1ef      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fc4:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	22c0      	movs	r2, #192	; 0xc0
 8005fca:	0252      	lsls	r2, r2, #9
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2280      	movs	r2, #128	; 0x80
 8005fd0:	0212      	lsls	r2, r2, #8
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d1a2      	bne.n	8005f1c <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd6:	4b68      	ldr	r3, [pc, #416]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	079b      	lsls	r3, r3, #30
 8005fdc:	d503      	bpl.n	8005fe6 <HAL_RCC_OscConfig+0x14e>
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d000      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x14e>
 8005fe4:	e1e2      	b.n	80063ac <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	4964      	ldr	r1, [pc, #400]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8005fe8:	680b      	ldr	r3, [r1, #0]
 8005fea:	22f8      	movs	r2, #248	; 0xf8
 8005fec:	4393      	bics	r3, r2
 8005fee:	6922      	ldr	r2, [r4, #16]
 8005ff0:	00d2      	lsls	r2, r2, #3
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	071b      	lsls	r3, r3, #28
 8005ffa:	d544      	bpl.n	8006086 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ffc:	69e3      	ldr	r3, [r4, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02e      	beq.n	8006060 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006002:	4a5d      	ldr	r2, [pc, #372]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006004:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006006:	2101      	movs	r1, #1
 8006008:	430b      	orrs	r3, r1
 800600a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600c:	f7ff f842 	bl	8005094 <HAL_GetTick>
 8006010:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006012:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	d435      	bmi.n	8006086 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800601a:	f7ff f83b 	bl	8005094 <HAL_GetTick>
 800601e:	1b40      	subs	r0, r0, r5
 8006020:	2802      	cmp	r0, #2
 8006022:	d9f6      	bls.n	8006012 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8006024:	2003      	movs	r0, #3
 8006026:	e1bd      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006028:	4953      	ldr	r1, [pc, #332]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 800602a:	680b      	ldr	r3, [r1, #0]
 800602c:	22f8      	movs	r2, #248	; 0xf8
 800602e:	4393      	bics	r3, r2
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	00d2      	lsls	r2, r2, #3
 8006034:	4313      	orrs	r3, r2
 8006036:	600b      	str	r3, [r1, #0]
 8006038:	e7dd      	b.n	8005ff6 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800603a:	4a4f      	ldr	r2, [pc, #316]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 800603c:	6813      	ldr	r3, [r2, #0]
 800603e:	2101      	movs	r1, #1
 8006040:	438b      	bics	r3, r1
 8006042:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006044:	f7ff f826 	bl	8005094 <HAL_GetTick>
 8006048:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800604a:	4b4b      	ldr	r3, [pc, #300]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	d5d1      	bpl.n	8005ff6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006052:	f7ff f81f 	bl	8005094 <HAL_GetTick>
 8006056:	1b40      	subs	r0, r0, r5
 8006058:	2802      	cmp	r0, #2
 800605a:	d9f6      	bls.n	800604a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800605c:	2003      	movs	r0, #3
 800605e:	e1a1      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006060:	4a45      	ldr	r2, [pc, #276]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006062:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006064:	2101      	movs	r1, #1
 8006066:	438b      	bics	r3, r1
 8006068:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800606a:	f7ff f813 	bl	8005094 <HAL_GetTick>
 800606e:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	4b41      	ldr	r3, [pc, #260]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	079b      	lsls	r3, r3, #30
 8006076:	d506      	bpl.n	8006086 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006078:	f7ff f80c 	bl	8005094 <HAL_GetTick>
 800607c:	1b40      	subs	r0, r0, r5
 800607e:	2802      	cmp	r0, #2
 8006080:	d9f6      	bls.n	8006070 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8006082:	2003      	movs	r0, #3
 8006084:	e18e      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	075b      	lsls	r3, r3, #29
 800608a:	d400      	bmi.n	800608e <HAL_RCC_OscConfig+0x1f6>
 800608c:	e080      	b.n	8006190 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608e:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	d41d      	bmi.n	80060d2 <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006096:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006098:	69d1      	ldr	r1, [r2, #28]
 800609a:	2080      	movs	r0, #128	; 0x80
 800609c:	0540      	lsls	r0, r0, #21
 800609e:	4301      	orrs	r1, r0
 80060a0:	61d1      	str	r1, [r2, #28]
 80060a2:	69d3      	ldr	r3, [r2, #28]
 80060a4:	4003      	ands	r3, r0
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80060aa:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ac:	4b35      	ldr	r3, [pc, #212]	; (8006184 <HAL_RCC_OscConfig+0x2ec>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	05db      	lsls	r3, r3, #23
 80060b2:	d510      	bpl.n	80060d6 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b4:	68a3      	ldr	r3, [r4, #8]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d021      	beq.n	80060fe <HAL_RCC_OscConfig+0x266>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d136      	bne.n	800612c <HAL_RCC_OscConfig+0x294>
 80060be:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	2101      	movs	r1, #1
 80060c4:	438a      	bics	r2, r1
 80060c6:	621a      	str	r2, [r3, #32]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	3103      	adds	r1, #3
 80060cc:	438a      	bics	r2, r1
 80060ce:	621a      	str	r2, [r3, #32]
 80060d0:	e01a      	b.n	8006108 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 80060d2:	2500      	movs	r5, #0
 80060d4:	e7ea      	b.n	80060ac <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d6:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x2ec>)
 80060d8:	6811      	ldr	r1, [r2, #0]
 80060da:	2380      	movs	r3, #128	; 0x80
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	430b      	orrs	r3, r1
 80060e0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80060e2:	f7fe ffd7 	bl	8005094 <HAL_GetTick>
 80060e6:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e8:	4b26      	ldr	r3, [pc, #152]	; (8006184 <HAL_RCC_OscConfig+0x2ec>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	05db      	lsls	r3, r3, #23
 80060ee:	d4e1      	bmi.n	80060b4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f0:	f7fe ffd0 	bl	8005094 <HAL_GetTick>
 80060f4:	1b80      	subs	r0, r0, r6
 80060f6:	2864      	cmp	r0, #100	; 0x64
 80060f8:	d9f6      	bls.n	80060e8 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80060fa:	2003      	movs	r0, #3
 80060fc:	e152      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006100:	6a13      	ldr	r3, [r2, #32]
 8006102:	2101      	movs	r1, #1
 8006104:	430b      	orrs	r3, r1
 8006106:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006108:	68a3      	ldr	r3, [r4, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d024      	beq.n	8006158 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610e:	f7fe ffc1 	bl	8005094 <HAL_GetTick>
 8006112:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006114:	4b18      	ldr	r3, [pc, #96]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	079b      	lsls	r3, r3, #30
 800611a:	d437      	bmi.n	800618c <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fe ffba 	bl	8005094 <HAL_GetTick>
 8006120:	1b80      	subs	r0, r0, r6
 8006122:	4b19      	ldr	r3, [pc, #100]	; (8006188 <HAL_RCC_OscConfig+0x2f0>)
 8006124:	4298      	cmp	r0, r3
 8006126:	d9f5      	bls.n	8006114 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8006128:	2003      	movs	r0, #3
 800612a:	e13b      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612c:	2b05      	cmp	r3, #5
 800612e:	d009      	beq.n	8006144 <HAL_RCC_OscConfig+0x2ac>
 8006130:	4b11      	ldr	r3, [pc, #68]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	2101      	movs	r1, #1
 8006136:	438a      	bics	r2, r1
 8006138:	621a      	str	r2, [r3, #32]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	3103      	adds	r1, #3
 800613e:	438a      	bics	r2, r1
 8006140:	621a      	str	r2, [r3, #32]
 8006142:	e7e1      	b.n	8006108 <HAL_RCC_OscConfig+0x270>
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	2104      	movs	r1, #4
 800614a:	430a      	orrs	r2, r1
 800614c:	621a      	str	r2, [r3, #32]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	3903      	subs	r1, #3
 8006152:	430a      	orrs	r2, r1
 8006154:	621a      	str	r2, [r3, #32]
 8006156:	e7d7      	b.n	8006108 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006158:	f7fe ff9c 	bl	8005094 <HAL_GetTick>
 800615c:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_OscConfig+0x2e0>)
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	079b      	lsls	r3, r3, #30
 8006164:	d512      	bpl.n	800618c <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006166:	f7fe ff95 	bl	8005094 <HAL_GetTick>
 800616a:	1b80      	subs	r0, r0, r6
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <HAL_RCC_OscConfig+0x2f0>)
 800616e:	4298      	cmp	r0, r3
 8006170:	d9f5      	bls.n	800615e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8006172:	2003      	movs	r0, #3
 8006174:	e116      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	40021000 	.word	0x40021000
 800617c:	fffeffff 	.word	0xfffeffff
 8006180:	fffbffff 	.word	0xfffbffff
 8006184:	40007000 	.word	0x40007000
 8006188:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800618c:	2d01      	cmp	r5, #1
 800618e:	d039      	beq.n	8006204 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	06db      	lsls	r3, r3, #27
 8006194:	d510      	bpl.n	80061b8 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006196:	6963      	ldr	r3, [r4, #20]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d039      	beq.n	8006210 <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800619c:	3305      	adds	r3, #5
 800619e:	d157      	bne.n	8006250 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80061a0:	4a89      	ldr	r2, [pc, #548]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80061a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80061a4:	2104      	movs	r1, #4
 80061a6:	438b      	bics	r3, r1
 80061a8:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80061aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80061ac:	31f4      	adds	r1, #244	; 0xf4
 80061ae:	438b      	bics	r3, r1
 80061b0:	69a1      	ldr	r1, [r4, #24]
 80061b2:	00c9      	lsls	r1, r1, #3
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	069b      	lsls	r3, r3, #26
 80061bc:	d56e      	bpl.n	800629c <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80061be:	4b82      	ldr	r3, [pc, #520]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	230c      	movs	r3, #12
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b0c      	cmp	r3, #12
 80061c8:	d060      	beq.n	800628c <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80061ca:	4b7f      	ldr	r3, [pc, #508]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	230c      	movs	r3, #12
 80061d0:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d053      	beq.n	800627e <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061d6:	6a23      	ldr	r3, [r4, #32]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d07e      	beq.n	80062da <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80061dc:	4a7a      	ldr	r2, [pc, #488]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80061de:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	025b      	lsls	r3, r3, #9
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fe ff54 	bl	8005094 <HAL_GetTick>
 80061ec:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80061ee:	4b76      	ldr	r3, [pc, #472]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	03db      	lsls	r3, r3, #15
 80061f4:	d452      	bmi.n	800629c <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f6:	f7fe ff4d 	bl	8005094 <HAL_GetTick>
 80061fa:	1b40      	subs	r0, r0, r5
 80061fc:	2802      	cmp	r0, #2
 80061fe:	d9f6      	bls.n	80061ee <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 8006200:	2003      	movs	r0, #3
 8006202:	e0cf      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006204:	4a70      	ldr	r2, [pc, #448]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006206:	69d3      	ldr	r3, [r2, #28]
 8006208:	4970      	ldr	r1, [pc, #448]	; (80063cc <HAL_RCC_OscConfig+0x534>)
 800620a:	400b      	ands	r3, r1
 800620c:	61d3      	str	r3, [r2, #28]
 800620e:	e7bf      	b.n	8006190 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8006210:	4b6d      	ldr	r3, [pc, #436]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006214:	2104      	movs	r1, #4
 8006216:	430a      	orrs	r2, r1
 8006218:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800621a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800621c:	3903      	subs	r1, #3
 800621e:	430a      	orrs	r2, r1
 8006220:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8006222:	f7fe ff37 	bl	8005094 <HAL_GetTick>
 8006226:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006228:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	079b      	lsls	r3, r3, #30
 800622e:	d406      	bmi.n	800623e <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006230:	f7fe ff30 	bl	8005094 <HAL_GetTick>
 8006234:	1b40      	subs	r0, r0, r5
 8006236:	2802      	cmp	r0, #2
 8006238:	d9f6      	bls.n	8006228 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 800623a:	2003      	movs	r0, #3
 800623c:	e0b2      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800623e:	4962      	ldr	r1, [pc, #392]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006240:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006242:	22f8      	movs	r2, #248	; 0xf8
 8006244:	4393      	bics	r3, r2
 8006246:	69a2      	ldr	r2, [r4, #24]
 8006248:	00d2      	lsls	r2, r2, #3
 800624a:	4313      	orrs	r3, r2
 800624c:	634b      	str	r3, [r1, #52]	; 0x34
 800624e:	e7b3      	b.n	80061b8 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 8006250:	4b5d      	ldr	r3, [pc, #372]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006254:	2104      	movs	r1, #4
 8006256:	430a      	orrs	r2, r1
 8006258:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800625a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625c:	3903      	subs	r1, #3
 800625e:	438a      	bics	r2, r1
 8006260:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8006262:	f7fe ff17 	bl	8005094 <HAL_GetTick>
 8006266:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006268:	4b57      	ldr	r3, [pc, #348]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	079b      	lsls	r3, r3, #30
 800626e:	d5a3      	bpl.n	80061b8 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006270:	f7fe ff10 	bl	8005094 <HAL_GetTick>
 8006274:	1b40      	subs	r0, r0, r5
 8006276:	2802      	cmp	r0, #2
 8006278:	d9f6      	bls.n	8006268 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 800627a:	2003      	movs	r0, #3
 800627c:	e092      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800627e:	4b52      	ldr	r3, [pc, #328]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	22c0      	movs	r2, #192	; 0xc0
 8006284:	0252      	lsls	r2, r2, #9
 8006286:	4013      	ands	r3, r2
 8006288:	4293      	cmp	r3, r2
 800628a:	d1a4      	bne.n	80061d6 <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800628c:	4b4e      	ldr	r3, [pc, #312]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 800628e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006290:	03db      	lsls	r3, r3, #15
 8006292:	d503      	bpl.n	800629c <HAL_RCC_OscConfig+0x404>
 8006294:	6a23      	ldr	r3, [r4, #32]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d000      	beq.n	800629c <HAL_RCC_OscConfig+0x404>
 800629a:	e089      	b.n	80063b0 <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d100      	bne.n	80062a4 <HAL_RCC_OscConfig+0x40c>
 80062a2:	e087      	b.n	80063b4 <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a4:	4a48      	ldr	r2, [pc, #288]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80062a6:	6851      	ldr	r1, [r2, #4]
 80062a8:	220c      	movs	r2, #12
 80062aa:	400a      	ands	r2, r1
 80062ac:	2a08      	cmp	r2, #8
 80062ae:	d060      	beq.n	8006372 <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d025      	beq.n	8006300 <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b4:	4a44      	ldr	r2, [pc, #272]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	4945      	ldr	r1, [pc, #276]	; (80063d0 <HAL_RCC_OscConfig+0x538>)
 80062ba:	400b      	ands	r3, r1
 80062bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062be:	f7fe fee9 	bl	8005094 <HAL_GetTick>
 80062c2:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c4:	4b40      	ldr	r3, [pc, #256]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	019b      	lsls	r3, r3, #6
 80062ca:	d550      	bpl.n	800636e <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062cc:	f7fe fee2 	bl	8005094 <HAL_GetTick>
 80062d0:	1b00      	subs	r0, r0, r4
 80062d2:	2802      	cmp	r0, #2
 80062d4:	d9f6      	bls.n	80062c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80062d6:	2003      	movs	r0, #3
 80062d8:	e064      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 80062da:	4a3b      	ldr	r2, [pc, #236]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80062dc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80062de:	493d      	ldr	r1, [pc, #244]	; (80063d4 <HAL_RCC_OscConfig+0x53c>)
 80062e0:	400b      	ands	r3, r1
 80062e2:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80062e4:	f7fe fed6 	bl	8005094 <HAL_GetTick>
 80062e8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80062ea:	4b37      	ldr	r3, [pc, #220]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	03db      	lsls	r3, r3, #15
 80062f0:	d5d4      	bpl.n	800629c <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062f2:	f7fe fecf 	bl	8005094 <HAL_GetTick>
 80062f6:	1b40      	subs	r0, r0, r5
 80062f8:	2802      	cmp	r0, #2
 80062fa:	d9f6      	bls.n	80062ea <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 80062fc:	2003      	movs	r0, #3
 80062fe:	e051      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 8006300:	4a31      	ldr	r2, [pc, #196]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	4932      	ldr	r1, [pc, #200]	; (80063d0 <HAL_RCC_OscConfig+0x538>)
 8006306:	400b      	ands	r3, r1
 8006308:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800630a:	f7fe fec3 	bl	8005094 <HAL_GetTick>
 800630e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006310:	4b2d      	ldr	r3, [pc, #180]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	d506      	bpl.n	8006326 <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006318:	f7fe febc 	bl	8005094 <HAL_GetTick>
 800631c:	1b40      	subs	r0, r0, r5
 800631e:	2802      	cmp	r0, #2
 8006320:	d9f6      	bls.n	8006310 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 8006322:	2003      	movs	r0, #3
 8006324:	e03e      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006326:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	210f      	movs	r1, #15
 800632c:	438a      	bics	r2, r1
 800632e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006330:	430a      	orrs	r2, r1
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4928      	ldr	r1, [pc, #160]	; (80063d8 <HAL_RCC_OscConfig+0x540>)
 8006338:	400a      	ands	r2, r1
 800633a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800633c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800633e:	4301      	orrs	r1, r0
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	0452      	lsls	r2, r2, #17
 800634a:	430a      	orrs	r2, r1
 800634c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800634e:	f7fe fea1 	bl	8005094 <HAL_GetTick>
 8006352:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006354:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	019b      	lsls	r3, r3, #6
 800635a:	d406      	bmi.n	800636a <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635c:	f7fe fe9a 	bl	8005094 <HAL_GetTick>
 8006360:	1b00      	subs	r0, r0, r4
 8006362:	2802      	cmp	r0, #2
 8006364:	d9f6      	bls.n	8006354 <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 8006366:	2003      	movs	r0, #3
 8006368:	e01c      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 800636a:	2000      	movs	r0, #0
 800636c:	e01a      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
 800636e:	2000      	movs	r0, #0
 8006370:	e018      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006372:	2b01      	cmp	r3, #1
 8006374:	d020      	beq.n	80063b8 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_RCC_OscConfig+0x530>)
 8006378:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 800637a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800637c:	23c0      	movs	r3, #192	; 0xc0
 800637e:	025b      	lsls	r3, r3, #9
 8006380:	4013      	ands	r3, r2
 8006382:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006384:	4283      	cmp	r3, r0
 8006386:	d119      	bne.n	80063bc <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006388:	230f      	movs	r3, #15
 800638a:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800638c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800638e:	428b      	cmp	r3, r1
 8006390:	d116      	bne.n	80063c0 <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006392:	23f0      	movs	r3, #240	; 0xf0
 8006394:	039b      	lsls	r3, r3, #14
 8006396:	401a      	ands	r2, r3
 8006398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d112      	bne.n	80063c4 <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 800639e:	2000      	movs	r0, #0
 80063a0:	e000      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 80063a2:	2001      	movs	r0, #1
}
 80063a4:	b002      	add	sp, #8
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80063a8:	2001      	movs	r0, #1
 80063aa:	e7fb      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80063ac:	2001      	movs	r0, #1
 80063ae:	e7f9      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80063b0:	2001      	movs	r0, #1
 80063b2:	e7f7      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 80063b4:	2000      	movs	r0, #0
 80063b6:	e7f5      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80063b8:	2001      	movs	r0, #1
 80063ba:	e7f3      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 80063bc:	2001      	movs	r0, #1
 80063be:	e7f1      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
 80063c0:	2001      	movs	r0, #1
 80063c2:	e7ef      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
 80063c4:	2001      	movs	r0, #1
 80063c6:	e7ed      	b.n	80063a4 <HAL_RCC_OscConfig+0x50c>
 80063c8:	40021000 	.word	0x40021000
 80063cc:	efffffff 	.word	0xefffffff
 80063d0:	feffffff 	.word	0xfeffffff
 80063d4:	fffeffff 	.word	0xfffeffff
 80063d8:	ffc27fff 	.word	0xffc27fff

080063dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	b510      	push	{r4, lr}
 80063de:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80063e0:	aa04      	add	r2, sp, #16
 80063e2:	4b1e      	ldr	r3, [pc, #120]	; (800645c <HAL_RCC_GetSysClockFreq+0x80>)
 80063e4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80063e6:	c213      	stmia	r2!, {r0, r1, r4}
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80063ec:	466a      	mov	r2, sp
 80063ee:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <HAL_RCC_GetSysClockFreq+0x84>)
 80063f0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80063f2:	c213      	stmia	r2!, {r0, r1, r4}
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80063f8:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_RCC_GetSysClockFreq+0x88>)
 80063fa:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063fc:	230c      	movs	r3, #12
 80063fe:	4013      	ands	r3, r2
 8006400:	2b08      	cmp	r3, #8
 8006402:	d004      	beq.n	800640e <HAL_RCC_GetSysClockFreq+0x32>
 8006404:	2b0c      	cmp	r3, #12
 8006406:	d126      	bne.n	8006456 <HAL_RCC_GetSysClockFreq+0x7a>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006408:	4817      	ldr	r0, [pc, #92]	; (8006468 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800640a:	b008      	add	sp, #32
 800640c:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800640e:	0c91      	lsrs	r1, r2, #18
 8006410:	230f      	movs	r3, #15
 8006412:	4019      	ands	r1, r3
 8006414:	a804      	add	r0, sp, #16
 8006416:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006418:	4912      	ldr	r1, [pc, #72]	; (8006464 <HAL_RCC_GetSysClockFreq+0x88>)
 800641a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800641c:	400b      	ands	r3, r1
 800641e:	4669      	mov	r1, sp
 8006420:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006422:	23c0      	movs	r3, #192	; 0xc0
 8006424:	025b      	lsls	r3, r3, #9
 8006426:	401a      	ands	r2, r3
 8006428:	2380      	movs	r3, #128	; 0x80
 800642a:	025b      	lsls	r3, r3, #9
 800642c:	429a      	cmp	r2, r3
 800642e:	d008      	beq.n	8006442 <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006430:	23c0      	movs	r3, #192	; 0xc0
 8006432:	025b      	lsls	r3, r3, #9
 8006434:	429a      	cmp	r2, r3
 8006436:	d009      	beq.n	800644c <HAL_RCC_GetSysClockFreq+0x70>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006438:	480c      	ldr	r0, [pc, #48]	; (800646c <HAL_RCC_GetSysClockFreq+0x90>)
 800643a:	f7f9 fe87 	bl	800014c <__udivsi3>
 800643e:	4360      	muls	r0, r4
 8006440:	e7e3      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006442:	480a      	ldr	r0, [pc, #40]	; (800646c <HAL_RCC_GetSysClockFreq+0x90>)
 8006444:	f7f9 fe82 	bl	800014c <__udivsi3>
 8006448:	4360      	muls	r0, r4
 800644a:	e7de      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800644c:	4806      	ldr	r0, [pc, #24]	; (8006468 <HAL_RCC_GetSysClockFreq+0x8c>)
 800644e:	f7f9 fe7d 	bl	800014c <__udivsi3>
 8006452:	4360      	muls	r0, r4
 8006454:	e7d9      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x2e>
  switch (tmpreg & RCC_CFGR_SWS)
 8006456:	4805      	ldr	r0, [pc, #20]	; (800646c <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8006458:	e7d7      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x2e>
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	08006fb0 	.word	0x08006fb0
 8006460:	08006fc4 	.word	0x08006fc4
 8006464:	40021000 	.word	0x40021000
 8006468:	02dc6c00 	.word	0x02dc6c00
 800646c:	007a1200 	.word	0x007a1200

08006470 <HAL_RCC_ClockConfig>:
{
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	0004      	movs	r4, r0
 8006474:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006476:	2800      	cmp	r0, #0
 8006478:	d100      	bne.n	800647c <HAL_RCC_ClockConfig+0xc>
 800647a:	e086      	b.n	800658a <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800647c:	4b47      	ldr	r3, [pc, #284]	; (800659c <HAL_RCC_ClockConfig+0x12c>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	2301      	movs	r3, #1
 8006482:	4013      	ands	r3, r2
 8006484:	428b      	cmp	r3, r1
 8006486:	d20a      	bcs.n	800649e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006488:	4944      	ldr	r1, [pc, #272]	; (800659c <HAL_RCC_ClockConfig+0x12c>)
 800648a:	680b      	ldr	r3, [r1, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	4393      	bics	r3, r2
 8006490:	432b      	orrs	r3, r5
 8006492:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006494:	680b      	ldr	r3, [r1, #0]
 8006496:	401a      	ands	r2, r3
 8006498:	42aa      	cmp	r2, r5
 800649a:	d000      	beq.n	800649e <HAL_RCC_ClockConfig+0x2e>
 800649c:	e077      	b.n	800658e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	079a      	lsls	r2, r3, #30
 80064a2:	d50e      	bpl.n	80064c2 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a4:	075b      	lsls	r3, r3, #29
 80064a6:	d505      	bpl.n	80064b4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80064a8:	4a3d      	ldr	r2, [pc, #244]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064aa:	6851      	ldr	r1, [r2, #4]
 80064ac:	23e0      	movs	r3, #224	; 0xe0
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b4:	4a3a      	ldr	r2, [pc, #232]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064b6:	6853      	ldr	r3, [r2, #4]
 80064b8:	21f0      	movs	r1, #240	; 0xf0
 80064ba:	438b      	bics	r3, r1
 80064bc:	68a1      	ldr	r1, [r4, #8]
 80064be:	430b      	orrs	r3, r1
 80064c0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	07db      	lsls	r3, r3, #31
 80064c6:	d535      	bpl.n	8006534 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d009      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d024      	beq.n	800651c <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d028      	beq.n	8006528 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d6:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	0792      	lsls	r2, r2, #30
 80064dc:	d405      	bmi.n	80064ea <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 80064de:	2001      	movs	r0, #1
 80064e0:	e052      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e2:	4a2f      	ldr	r2, [pc, #188]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	0392      	lsls	r2, r2, #14
 80064e8:	d553      	bpl.n	8006592 <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ea:	492d      	ldr	r1, [pc, #180]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064ec:	684a      	ldr	r2, [r1, #4]
 80064ee:	2003      	movs	r0, #3
 80064f0:	4382      	bics	r2, r0
 80064f2:	4313      	orrs	r3, r2
 80064f4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80064f6:	f7fe fdcd 	bl	8005094 <HAL_GetTick>
 80064fa:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fc:	4b28      	ldr	r3, [pc, #160]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	220c      	movs	r2, #12
 8006502:	401a      	ands	r2, r3
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	429a      	cmp	r2, r3
 800650a:	d013      	beq.n	8006534 <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800650c:	f7fe fdc2 	bl	8005094 <HAL_GetTick>
 8006510:	1b80      	subs	r0, r0, r6
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <HAL_RCC_ClockConfig+0x134>)
 8006514:	4298      	cmp	r0, r3
 8006516:	d9f1      	bls.n	80064fc <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8006518:	2003      	movs	r0, #3
 800651a:	e035      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651c:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	0192      	lsls	r2, r2, #6
 8006522:	d4e2      	bmi.n	80064ea <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8006524:	2001      	movs	r0, #1
 8006526:	e02f      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 800652a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800652c:	03d2      	lsls	r2, r2, #15
 800652e:	d4dc      	bmi.n	80064ea <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8006530:	2001      	movs	r0, #1
 8006532:	e029      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <HAL_RCC_ClockConfig+0x12c>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	2301      	movs	r3, #1
 800653a:	4013      	ands	r3, r2
 800653c:	42ab      	cmp	r3, r5
 800653e:	d909      	bls.n	8006554 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006540:	4916      	ldr	r1, [pc, #88]	; (800659c <HAL_RCC_ClockConfig+0x12c>)
 8006542:	680b      	ldr	r3, [r1, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	4393      	bics	r3, r2
 8006548:	432b      	orrs	r3, r5
 800654a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800654c:	680b      	ldr	r3, [r1, #0]
 800654e:	401a      	ands	r2, r3
 8006550:	42aa      	cmp	r2, r5
 8006552:	d120      	bne.n	8006596 <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	075b      	lsls	r3, r3, #29
 8006558:	d506      	bpl.n	8006568 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800655a:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 800655c:	6853      	ldr	r3, [r2, #4]
 800655e:	4912      	ldr	r1, [pc, #72]	; (80065a8 <HAL_RCC_ClockConfig+0x138>)
 8006560:	400b      	ands	r3, r1
 8006562:	68e1      	ldr	r1, [r4, #12]
 8006564:	430b      	orrs	r3, r1
 8006566:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006568:	f7ff ff38 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_RCC_ClockConfig+0x130>)
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	0912      	lsrs	r2, r2, #4
 8006572:	230f      	movs	r3, #15
 8006574:	4013      	ands	r3, r2
 8006576:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <HAL_RCC_ClockConfig+0x13c>)
 8006578:	5cd3      	ldrb	r3, [r2, r3]
 800657a:	40d8      	lsrs	r0, r3
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <HAL_RCC_ClockConfig+0x140>)
 800657e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006580:	2000      	movs	r0, #0
 8006582:	f7fe fd43 	bl	800500c <HAL_InitTick>
  return HAL_OK;
 8006586:	2000      	movs	r0, #0
}
 8006588:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800658a:	2001      	movs	r0, #1
 800658c:	e7fc      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 800658e:	2001      	movs	r0, #1
 8006590:	e7fa      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8006592:	2001      	movs	r0, #1
 8006594:	e7f8      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8006596:	2001      	movs	r0, #1
 8006598:	e7f6      	b.n	8006588 <HAL_RCC_ClockConfig+0x118>
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	40022000 	.word	0x40022000
 80065a0:	40021000 	.word	0x40021000
 80065a4:	00001388 	.word	0x00001388
 80065a8:	fffff8ff 	.word	0xfffff8ff
 80065ac:	08006f98 	.word	0x08006f98
 80065b0:	20000114 	.word	0x20000114

080065b4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80065b4:	4b01      	ldr	r3, [pc, #4]	; (80065bc <HAL_RCC_GetHCLKFreq+0x8>)
 80065b6:	6818      	ldr	r0, [r3, #0]
}
 80065b8:	4770      	bx	lr
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	20000114 	.word	0x20000114

080065c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80065c2:	f7ff fff7 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065c6:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	0a12      	lsrs	r2, r2, #8
 80065cc:	2307      	movs	r3, #7
 80065ce:	4013      	ands	r3, r2
 80065d0:	4a02      	ldr	r2, [pc, #8]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065d2:	5cd3      	ldrb	r3, [r2, r3]
 80065d4:	40d8      	lsrs	r0, r3
}    
 80065d6:	bd10      	pop	{r4, pc}
 80065d8:	40021000 	.word	0x40021000
 80065dc:	08006fa8 	.word	0x08006fa8

080065e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065e6:	6803      	ldr	r3, [r0, #0]
 80065e8:	03db      	lsls	r3, r3, #15
 80065ea:	d537      	bpl.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ec:	4b47      	ldr	r3, [pc, #284]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	d45d      	bmi.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065f4:	4a45      	ldr	r2, [pc, #276]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80065f6:	69d1      	ldr	r1, [r2, #28]
 80065f8:	2080      	movs	r0, #128	; 0x80
 80065fa:	0540      	lsls	r0, r0, #21
 80065fc:	4301      	orrs	r1, r0
 80065fe:	61d1      	str	r1, [r2, #28]
 8006600:	69d3      	ldr	r3, [r2, #28]
 8006602:	4003      	ands	r3, r0
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006608:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660a:	4b41      	ldr	r3, [pc, #260]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	05db      	lsls	r3, r3, #23
 8006610:	d550      	bpl.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006612:	4b3e      	ldr	r3, [pc, #248]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	23c0      	movs	r3, #192	; 0xc0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	0011      	movs	r1, r2
 800661c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800661e:	421a      	tst	r2, r3
 8006620:	d013      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006622:	6862      	ldr	r2, [r4, #4]
 8006624:	4013      	ands	r3, r2
 8006626:	428b      	cmp	r3, r1
 8006628:	d00f      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800662a:	4b38      	ldr	r3, [pc, #224]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800662c:	6a18      	ldr	r0, [r3, #32]
 800662e:	4a39      	ldr	r2, [pc, #228]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006630:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	6a1e      	ldr	r6, [r3, #32]
 8006634:	2180      	movs	r1, #128	; 0x80
 8006636:	0249      	lsls	r1, r1, #9
 8006638:	4331      	orrs	r1, r6
 800663a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663c:	6a19      	ldr	r1, [r3, #32]
 800663e:	4e36      	ldr	r6, [pc, #216]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006640:	4031      	ands	r1, r6
 8006642:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006644:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006646:	07c3      	lsls	r3, r0, #31
 8006648:	d448      	bmi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800664a:	4a30      	ldr	r2, [pc, #192]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800664c:	6a13      	ldr	r3, [r2, #32]
 800664e:	4931      	ldr	r1, [pc, #196]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006650:	400b      	ands	r3, r1
 8006652:	6861      	ldr	r1, [r4, #4]
 8006654:	430b      	orrs	r3, r1
 8006656:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006658:	2d01      	cmp	r5, #1
 800665a:	d04e      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07db      	lsls	r3, r3, #31
 8006660:	d506      	bpl.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006664:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006666:	2103      	movs	r1, #3
 8006668:	438b      	bics	r3, r1
 800666a:	68a1      	ldr	r1, [r4, #8]
 800666c:	430b      	orrs	r3, r1
 800666e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	069b      	lsls	r3, r3, #26
 8006674:	d506      	bpl.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006676:	4a25      	ldr	r2, [pc, #148]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006678:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800667a:	2110      	movs	r1, #16
 800667c:	438b      	bics	r3, r1
 800667e:	68e1      	ldr	r1, [r4, #12]
 8006680:	430b      	orrs	r3, r1
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	039b      	lsls	r3, r3, #14
 8006688:	d506      	bpl.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800668a:	4a20      	ldr	r2, [pc, #128]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800668c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	438b      	bics	r3, r1
 8006692:	6961      	ldr	r1, [r4, #20]
 8006694:	430b      	orrs	r3, r1
 8006696:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	055b      	lsls	r3, r3, #21
 800669c:	d532      	bpl.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800669e:	4a1b      	ldr	r2, [pc, #108]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80066a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80066a2:	2140      	movs	r1, #64	; 0x40
 80066a4:	438b      	bics	r3, r1
 80066a6:	6921      	ldr	r1, [r4, #16]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80066ac:	2000      	movs	r0, #0
 80066ae:	e02a      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x126>
    FlagStatus       pwrclkchanged = RESET;
 80066b0:	2500      	movs	r5, #0
 80066b2:	e7aa      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066b6:	6811      	ldr	r1, [r2, #0]
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	430b      	orrs	r3, r1
 80066be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80066c0:	f7fe fce8 	bl	8005094 <HAL_GetTick>
 80066c4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	05db      	lsls	r3, r3, #23
 80066cc:	d4a1      	bmi.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ce:	f7fe fce1 	bl	8005094 <HAL_GetTick>
 80066d2:	1b80      	subs	r0, r0, r6
 80066d4:	2864      	cmp	r0, #100	; 0x64
 80066d6:	d9f6      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          return HAL_TIMEOUT;
 80066d8:	2003      	movs	r0, #3
 80066da:	e014      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x126>
        tickstart = HAL_GetTick();
 80066dc:	f7fe fcda 	bl	8005094 <HAL_GetTick>
 80066e0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e2:	4b0a      	ldr	r3, [pc, #40]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	079b      	lsls	r3, r3, #30
 80066e8:	d4af      	bmi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ea:	f7fe fcd3 	bl	8005094 <HAL_GetTick>
 80066ee:	1b80      	subs	r0, r0, r6
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80066f2:	4298      	cmp	r0, r3
 80066f4:	d9f5      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x102>
            return HAL_TIMEOUT;
 80066f6:	2003      	movs	r0, #3
 80066f8:	e005      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fa:	69d3      	ldr	r3, [r2, #28]
 80066fc:	4908      	ldr	r1, [pc, #32]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80066fe:	400b      	ands	r3, r1
 8006700:	61d3      	str	r3, [r2, #28]
 8006702:	e7ab      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8006704:	2000      	movs	r0, #0
}
 8006706:	b002      	add	sp, #8
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	40021000 	.word	0x40021000
 8006710:	40007000 	.word	0x40007000
 8006714:	fffffcff 	.word	0xfffffcff
 8006718:	fffeffff 	.word	0xfffeffff
 800671c:	00001388 	.word	0x00001388
 8006720:	efffffff 	.word	0xefffffff

08006724 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006724:	233d      	movs	r3, #61	; 0x3d
 8006726:	5cc3      	ldrb	r3, [r0, r3]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d123      	bne.n	8006774 <HAL_TIM_Base_Start_IT+0x50>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	333c      	adds	r3, #60	; 0x3c
 800672e:	2202      	movs	r2, #2
 8006730:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006732:	6802      	ldr	r2, [r0, #0]
 8006734:	68d3      	ldr	r3, [r2, #12]
 8006736:	2101      	movs	r1, #1
 8006738:	430b      	orrs	r3, r1
 800673a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673c:	6803      	ldr	r3, [r0, #0]
 800673e:	4a0f      	ldr	r2, [pc, #60]	; (800677c <HAL_TIM_Base_Start_IT+0x58>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00c      	beq.n	800675e <HAL_TIM_Base_Start_IT+0x3a>
 8006744:	2280      	movs	r2, #128	; 0x80
 8006746:	05d2      	lsls	r2, r2, #23
 8006748:	4293      	cmp	r3, r2
 800674a:	d008      	beq.n	800675e <HAL_TIM_Base_Start_IT+0x3a>
 800674c:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <HAL_TIM_Base_Start_IT+0x5c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d005      	beq.n	800675e <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	2101      	movs	r1, #1
 8006756:	430a      	orrs	r2, r1
 8006758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800675a:	2000      	movs	r0, #0
 800675c:	e00b      	b.n	8006776 <HAL_TIM_Base_Start_IT+0x52>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800675e:	6899      	ldr	r1, [r3, #8]
 8006760:	2207      	movs	r2, #7
 8006762:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	2a06      	cmp	r2, #6
 8006766:	d007      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	2101      	movs	r1, #1
 800676c:	430a      	orrs	r2, r1
 800676e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006770:	2000      	movs	r0, #0
 8006772:	e000      	b.n	8006776 <HAL_TIM_Base_Start_IT+0x52>
    return HAL_ERROR;
 8006774:	2001      	movs	r0, #1
}
 8006776:	4770      	bx	lr
  return HAL_OK;
 8006778:	2000      	movs	r0, #0
 800677a:	e7fc      	b.n	8006776 <HAL_TIM_Base_Start_IT+0x52>
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40000400 	.word	0x40000400

08006784 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006788:	4770      	bx	lr

0800678a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800678a:	4770      	bx	lr

0800678c <HAL_TIM_IRQHandler>:
{
 800678c:	b510      	push	{r4, lr}
 800678e:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006790:	6803      	ldr	r3, [r0, #0]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	0792      	lsls	r2, r2, #30
 8006796:	d50f      	bpl.n	80067b8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	0792      	lsls	r2, r2, #30
 800679c:	d50c      	bpl.n	80067b8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800679e:	2203      	movs	r2, #3
 80067a0:	4252      	negs	r2, r2
 80067a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a4:	2301      	movs	r3, #1
 80067a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a8:	6803      	ldr	r3, [r0, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	079b      	lsls	r3, r3, #30
 80067ae:	d063      	beq.n	8006878 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 80067b0:	f7ff ffe9 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b4:	2300      	movs	r3, #0
 80067b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	0752      	lsls	r2, r2, #29
 80067be:	d512      	bpl.n	80067e6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	0752      	lsls	r2, r2, #29
 80067c4:	d50f      	bpl.n	80067e6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067c6:	2205      	movs	r2, #5
 80067c8:	4252      	negs	r2, r2
 80067ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067cc:	2302      	movs	r3, #2
 80067ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	23c0      	movs	r3, #192	; 0xc0
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	421a      	tst	r2, r3
 80067da:	d053      	beq.n	8006884 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80067dc:	0020      	movs	r0, r4
 80067de:	f7ff ffd2 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e2:	2300      	movs	r3, #0
 80067e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	0712      	lsls	r2, r2, #28
 80067ec:	d510      	bpl.n	8006810 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	0712      	lsls	r2, r2, #28
 80067f2:	d50d      	bpl.n	8006810 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067f4:	2209      	movs	r2, #9
 80067f6:	4252      	negs	r2, r2
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067fa:	2304      	movs	r3, #4
 80067fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	079b      	lsls	r3, r3, #30
 8006804:	d045      	beq.n	8006892 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8006806:	0020      	movs	r0, r4
 8006808:	f7ff ffbd 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680c:	2300      	movs	r3, #0
 800680e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	06d2      	lsls	r2, r2, #27
 8006816:	d512      	bpl.n	800683e <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	06d2      	lsls	r2, r2, #27
 800681c:	d50f      	bpl.n	800683e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800681e:	2211      	movs	r2, #17
 8006820:	4252      	negs	r2, r2
 8006822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006824:	2308      	movs	r3, #8
 8006826:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	23c0      	movs	r3, #192	; 0xc0
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	421a      	tst	r2, r3
 8006832:	d035      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8006834:	0020      	movs	r0, r4
 8006836:	f7ff ffa6 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	2300      	movs	r3, #0
 800683c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	07d2      	lsls	r2, r2, #31
 8006844:	d502      	bpl.n	800684c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	07d2      	lsls	r2, r2, #31
 800684a:	d430      	bmi.n	80068ae <HAL_TIM_IRQHandler+0x122>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	0612      	lsls	r2, r2, #24
 8006852:	d502      	bpl.n	800685a <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	0612      	lsls	r2, r2, #24
 8006858:	d430      	bmi.n	80068bc <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	0652      	lsls	r2, r2, #25
 8006860:	d502      	bpl.n	8006868 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	0652      	lsls	r2, r2, #25
 8006866:	d430      	bmi.n	80068ca <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	0692      	lsls	r2, r2, #26
 800686e:	d502      	bpl.n	8006876 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	0692      	lsls	r2, r2, #26
 8006874:	d430      	bmi.n	80068d8 <HAL_TIM_IRQHandler+0x14c>
}
 8006876:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006878:	f7ff ff84 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	0020      	movs	r0, r4
 800687e:	f7ff ff83 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
 8006882:	e797      	b.n	80067b4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006884:	0020      	movs	r0, r4
 8006886:	f7ff ff7d 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688a:	0020      	movs	r0, r4
 800688c:	f7ff ff7c 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
 8006890:	e7a7      	b.n	80067e2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006892:	0020      	movs	r0, r4
 8006894:	f7ff ff76 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	0020      	movs	r0, r4
 800689a:	f7ff ff75 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
 800689e:	e7b5      	b.n	800680c <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a0:	0020      	movs	r0, r4
 80068a2:	f7ff ff6f 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a6:	0020      	movs	r0, r4
 80068a8:	f7ff ff6e 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
 80068ac:	e7c5      	b.n	800683a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ae:	2202      	movs	r2, #2
 80068b0:	4252      	negs	r2, r2
 80068b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80068b4:	0020      	movs	r0, r4
 80068b6:	f7fa f9db 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
 80068ba:	e7c7      	b.n	800684c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068bc:	2281      	movs	r2, #129	; 0x81
 80068be:	4252      	negs	r2, r2
 80068c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80068c2:	0020      	movs	r0, r4
 80068c4:	f000 f887 	bl	80069d6 <HAL_TIMEx_BreakCallback>
 80068c8:	e7c7      	b.n	800685a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ca:	2241      	movs	r2, #65	; 0x41
 80068cc:	4252      	negs	r2, r2
 80068ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80068d0:	0020      	movs	r0, r4
 80068d2:	f7ff ff5a 	bl	800678a <HAL_TIM_TriggerCallback>
 80068d6:	e7c7      	b.n	8006868 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d8:	2221      	movs	r2, #33	; 0x21
 80068da:	4252      	negs	r2, r2
 80068dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80068de:	0020      	movs	r0, r4
 80068e0:	f000 f878 	bl	80069d4 <HAL_TIMEx_CommutCallback>
}
 80068e4:	e7c7      	b.n	8006876 <HAL_TIM_IRQHandler+0xea>
	...

080068e8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068e8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ea:	4a1e      	ldr	r2, [pc, #120]	; (8006964 <TIM_Base_SetConfig+0x7c>)
 80068ec:	4290      	cmp	r0, r2
 80068ee:	d006      	beq.n	80068fe <TIM_Base_SetConfig+0x16>
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	05d2      	lsls	r2, r2, #23
 80068f4:	4290      	cmp	r0, r2
 80068f6:	d002      	beq.n	80068fe <TIM_Base_SetConfig+0x16>
 80068f8:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <TIM_Base_SetConfig+0x80>)
 80068fa:	4290      	cmp	r0, r2
 80068fc:	d103      	bne.n	8006906 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068fe:	2270      	movs	r2, #112	; 0x70
 8006900:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8006902:	684a      	ldr	r2, [r1, #4]
 8006904:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006906:	4a17      	ldr	r2, [pc, #92]	; (8006964 <TIM_Base_SetConfig+0x7c>)
 8006908:	4290      	cmp	r0, r2
 800690a:	d00f      	beq.n	800692c <TIM_Base_SetConfig+0x44>
 800690c:	2280      	movs	r2, #128	; 0x80
 800690e:	05d2      	lsls	r2, r2, #23
 8006910:	4290      	cmp	r0, r2
 8006912:	d00b      	beq.n	800692c <TIM_Base_SetConfig+0x44>
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <TIM_Base_SetConfig+0x80>)
 8006916:	4290      	cmp	r0, r2
 8006918:	d008      	beq.n	800692c <TIM_Base_SetConfig+0x44>
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <TIM_Base_SetConfig+0x84>)
 800691c:	4290      	cmp	r0, r2
 800691e:	d005      	beq.n	800692c <TIM_Base_SetConfig+0x44>
 8006920:	4a13      	ldr	r2, [pc, #76]	; (8006970 <TIM_Base_SetConfig+0x88>)
 8006922:	4290      	cmp	r0, r2
 8006924:	d002      	beq.n	800692c <TIM_Base_SetConfig+0x44>
 8006926:	4a13      	ldr	r2, [pc, #76]	; (8006974 <TIM_Base_SetConfig+0x8c>)
 8006928:	4290      	cmp	r0, r2
 800692a:	d103      	bne.n	8006934 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692c:	4a12      	ldr	r2, [pc, #72]	; (8006978 <TIM_Base_SetConfig+0x90>)
 800692e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006930:	68ca      	ldr	r2, [r1, #12]
 8006932:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006934:	2280      	movs	r2, #128	; 0x80
 8006936:	4393      	bics	r3, r2
 8006938:	694a      	ldr	r2, [r1, #20]
 800693a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800693c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800693e:	688b      	ldr	r3, [r1, #8]
 8006940:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006942:	680b      	ldr	r3, [r1, #0]
 8006944:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <TIM_Base_SetConfig+0x7c>)
 8006948:	4298      	cmp	r0, r3
 800694a:	d005      	beq.n	8006958 <TIM_Base_SetConfig+0x70>
 800694c:	4b08      	ldr	r3, [pc, #32]	; (8006970 <TIM_Base_SetConfig+0x88>)
 800694e:	4298      	cmp	r0, r3
 8006950:	d002      	beq.n	8006958 <TIM_Base_SetConfig+0x70>
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <TIM_Base_SetConfig+0x8c>)
 8006954:	4298      	cmp	r0, r3
 8006956:	d101      	bne.n	800695c <TIM_Base_SetConfig+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006958:	690b      	ldr	r3, [r1, #16]
 800695a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800695c:	2301      	movs	r3, #1
 800695e:	6143      	str	r3, [r0, #20]
}
 8006960:	4770      	bx	lr
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40000400 	.word	0x40000400
 800696c:	40002000 	.word	0x40002000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800
 8006978:	fffffcff 	.word	0xfffffcff

0800697c <HAL_TIM_Base_Init>:
{
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8006980:	d026      	beq.n	80069d0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006982:	233d      	movs	r3, #61	; 0x3d
 8006984:	5cc3      	ldrb	r3, [r0, r3]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01c      	beq.n	80069c4 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800698a:	253d      	movs	r5, #61	; 0x3d
 800698c:	2302      	movs	r3, #2
 800698e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006990:	0021      	movs	r1, r4
 8006992:	c901      	ldmia	r1!, {r0}
 8006994:	f7ff ffa8 	bl	80068e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006998:	2301      	movs	r3, #1
 800699a:	2246      	movs	r2, #70	; 0x46
 800699c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699e:	3a08      	subs	r2, #8
 80069a0:	54a3      	strb	r3, [r4, r2]
 80069a2:	3201      	adds	r2, #1
 80069a4:	54a3      	strb	r3, [r4, r2]
 80069a6:	3201      	adds	r2, #1
 80069a8:	54a3      	strb	r3, [r4, r2]
 80069aa:	3201      	adds	r2, #1
 80069ac:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ae:	3201      	adds	r2, #1
 80069b0:	54a3      	strb	r3, [r4, r2]
 80069b2:	3201      	adds	r2, #1
 80069b4:	54a3      	strb	r3, [r4, r2]
 80069b6:	3201      	adds	r2, #1
 80069b8:	54a3      	strb	r3, [r4, r2]
 80069ba:	3201      	adds	r2, #1
 80069bc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80069be:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80069c0:	2000      	movs	r0, #0
}
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80069c4:	333c      	adds	r3, #60	; 0x3c
 80069c6:	2200      	movs	r2, #0
 80069c8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80069ca:	f7fe fa8b 	bl	8004ee4 <HAL_TIM_Base_MspInit>
 80069ce:	e7dc      	b.n	800698a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80069d0:	2001      	movs	r0, #1
 80069d2:	e7f6      	b.n	80069c2 <HAL_TIM_Base_Init+0x46>

080069d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d6:	4770      	bx	lr

080069d8 <__libc_init_array>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	2600      	movs	r6, #0
 80069dc:	4d0c      	ldr	r5, [pc, #48]	; (8006a10 <__libc_init_array+0x38>)
 80069de:	4c0d      	ldr	r4, [pc, #52]	; (8006a14 <__libc_init_array+0x3c>)
 80069e0:	1b64      	subs	r4, r4, r5
 80069e2:	10a4      	asrs	r4, r4, #2
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	d109      	bne.n	80069fc <__libc_init_array+0x24>
 80069e8:	2600      	movs	r6, #0
 80069ea:	f000 f839 	bl	8006a60 <_init>
 80069ee:	4d0a      	ldr	r5, [pc, #40]	; (8006a18 <__libc_init_array+0x40>)
 80069f0:	4c0a      	ldr	r4, [pc, #40]	; (8006a1c <__libc_init_array+0x44>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	42a6      	cmp	r6, r4
 80069f8:	d105      	bne.n	8006a06 <__libc_init_array+0x2e>
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	00b3      	lsls	r3, r6, #2
 80069fe:	58eb      	ldr	r3, [r5, r3]
 8006a00:	4798      	blx	r3
 8006a02:	3601      	adds	r6, #1
 8006a04:	e7ee      	b.n	80069e4 <__libc_init_array+0xc>
 8006a06:	00b3      	lsls	r3, r6, #2
 8006a08:	58eb      	ldr	r3, [r5, r3]
 8006a0a:	4798      	blx	r3
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	e7f2      	b.n	80069f6 <__libc_init_array+0x1e>
 8006a10:	08006fe0 	.word	0x08006fe0
 8006a14:	08006fe0 	.word	0x08006fe0
 8006a18:	08006fe0 	.word	0x08006fe0
 8006a1c:	08006fe4 	.word	0x08006fe4

08006a20 <memcmp>:
 8006a20:	b530      	push	{r4, r5, lr}
 8006a22:	2400      	movs	r4, #0
 8006a24:	3901      	subs	r1, #1
 8006a26:	42a2      	cmp	r2, r4
 8006a28:	d101      	bne.n	8006a2e <memcmp+0xe>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e005      	b.n	8006a3a <memcmp+0x1a>
 8006a2e:	5d03      	ldrb	r3, [r0, r4]
 8006a30:	3401      	adds	r4, #1
 8006a32:	5d0d      	ldrb	r5, [r1, r4]
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	d0f6      	beq.n	8006a26 <memcmp+0x6>
 8006a38:	1b58      	subs	r0, r3, r5
 8006a3a:	bd30      	pop	{r4, r5, pc}

08006a3c <memcpy>:
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d100      	bne.n	8006a46 <memcpy+0xa>
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	5ccc      	ldrb	r4, [r1, r3]
 8006a48:	54c4      	strb	r4, [r0, r3]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	e7f8      	b.n	8006a40 <memcpy+0x4>

08006a4e <memset>:
 8006a4e:	0003      	movs	r3, r0
 8006a50:	1882      	adds	r2, r0, r2
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d100      	bne.n	8006a58 <memset+0xa>
 8006a56:	4770      	bx	lr
 8006a58:	7019      	strb	r1, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	e7f9      	b.n	8006a52 <memset+0x4>
	...

08006a60 <_init>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr

08006a6c <_fini>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr
